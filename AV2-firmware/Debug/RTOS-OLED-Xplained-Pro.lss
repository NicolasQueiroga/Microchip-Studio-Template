
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007924  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407924  00407924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040792c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000534  204009d0  004082fc  000209d0  2**2
                  ALLOC
  4 .stack        00002004  20400f04  00408830  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402f08  0040a834  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00034264  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006e61  00000000  00000000  00054cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000014d0  00000000  00000000  0005bb1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002ba9c  00000000  00000000  0005cfec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00020f98  00000000  00000000  00088a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00098fa7  00000000  00000000  000a9a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dcef  00000000  00000000  001429c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001618  00000000  00000000  001506b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003f0c  00000000  00000000  00151cd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 2f 40 20 fd 22 40 00 fb 22 40 00 fb 22 40 00     ./@ ."@.."@.."@.
  400010:	fb 22 40 00 fb 22 40 00 fb 22 40 00 00 00 00 00     ."@.."@.."@.....
	...
  40002c:	d5 26 40 00 fb 22 40 00 00 00 00 00 75 27 40 00     .&@.."@.....u'@.
  40003c:	dd 27 40 00 fb 22 40 00 fb 22 40 00 09 14 40 00     .'@.."@.."@...@.
  40004c:	dd 13 40 00 fb 22 40 00 fb 22 40 00 fb 22 40 00     ..@.."@.."@.."@.
  40005c:	fb 22 40 00 fb 22 40 00 00 00 00 00 dd 1f 40 00     ."@.."@.......@.
  40006c:	f1 1f 40 00 05 20 40 00 fb 22 40 00 d9 0a 40 00     ..@.. @.."@...@.
  40007c:	fb 22 40 00 19 20 40 00 2d 20 40 00 fb 22 40 00     ."@.. @.- @.."@.
  40008c:	fb 22 40 00 fb 22 40 00 fb 22 40 00 fb 22 40 00     ."@.."@.."@.."@.
  40009c:	2d 13 40 00 55 13 40 00 81 13 40 00 b1 13 40 00     -.@.U.@...@...@.
  4000ac:	fb 22 40 00 fb 22 40 00 21 04 40 00 fb 22 40 00     ."@.."@.!.@.."@.
  4000bc:	fb 22 40 00 fb 22 40 00 fb 22 40 00 fb 22 40 00     ."@.."@.."@.."@.
  4000cc:	fb 22 40 00 00 00 00 00 fb 22 40 00 00 00 00 00     ."@......"@.....
  4000dc:	fb 22 40 00 35 04 40 00 fb 22 40 00 fb 22 40 00     ."@.5.@.."@.."@.
  4000ec:	fb 22 40 00 fb 22 40 00 fb 22 40 00 fb 22 40 00     ."@.."@.."@.."@.
  4000fc:	fb 22 40 00 fb 22 40 00 fb 22 40 00 fb 22 40 00     ."@.."@.."@.."@.
  40010c:	fb 22 40 00 fb 22 40 00 00 00 00 00 00 00 00 00     ."@.."@.........
  40011c:	00 00 00 00 fb 22 40 00 fb 22 40 00 fb 22 40 00     ....."@.."@.."@.
  40012c:	fb 22 40 00 fb 22 40 00 00 00 00 00 fb 22 40 00     ."@.."@......"@.
  40013c:	fb 22 40 00                                         ."@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040792c 	.word	0x0040792c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040792c 	.word	0x0040792c
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040792c 	.word	0x0040792c
  4001a8:	00000000 	.word	0x00000000

004001ac <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
  4001ae:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001b4:	4013      	ands	r3, r2
  4001b6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001b8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001ba:	4e1c      	ldr	r6, [pc, #112]	; (40022c <afec_process_callback+0x80>)
  4001bc:	4d1c      	ldr	r5, [pc, #112]	; (400230 <afec_process_callback+0x84>)
  4001be:	42a8      	cmp	r0, r5
  4001c0:	bf14      	ite	ne
  4001c2:	2000      	movne	r0, #0
  4001c4:	2001      	moveq	r0, #1
  4001c6:	0105      	lsls	r5, r0, #4
  4001c8:	e00b      	b.n	4001e2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001ca:	2c0e      	cmp	r4, #14
  4001cc:	d81e      	bhi.n	40020c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001ce:	9a01      	ldr	r2, [sp, #4]
  4001d0:	f104 010c 	add.w	r1, r4, #12
  4001d4:	2301      	movs	r3, #1
  4001d6:	408b      	lsls	r3, r1
  4001d8:	4213      	tst	r3, r2
  4001da:	d110      	bne.n	4001fe <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001dc:	3401      	adds	r4, #1
  4001de:	2c10      	cmp	r4, #16
  4001e0:	d022      	beq.n	400228 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4001e2:	2c0b      	cmp	r4, #11
  4001e4:	d8f1      	bhi.n	4001ca <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4001e6:	9a01      	ldr	r2, [sp, #4]
  4001e8:	2301      	movs	r3, #1
  4001ea:	40a3      	lsls	r3, r4
  4001ec:	4213      	tst	r3, r2
  4001ee:	d0f5      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001f0:	192b      	adds	r3, r5, r4
  4001f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4001f6:	2b00      	cmp	r3, #0
  4001f8:	d0f0      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4001fa:	4798      	blx	r3
  4001fc:	e7ee      	b.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001fe:	192b      	adds	r3, r5, r4
  400200:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400204:	2b00      	cmp	r3, #0
  400206:	d0e9      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400208:	4798      	blx	r3
  40020a:	e7e7      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40020c:	9a01      	ldr	r2, [sp, #4]
  40020e:	f104 010f 	add.w	r1, r4, #15
  400212:	2301      	movs	r3, #1
  400214:	408b      	lsls	r3, r1
  400216:	4213      	tst	r3, r2
  400218:	d0e0      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40021a:	192b      	adds	r3, r5, r4
  40021c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400220:	2b00      	cmp	r3, #0
  400222:	d0db      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400224:	4798      	blx	r3
  400226:	e7d9      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400228:	b002      	add	sp, #8
  40022a:	bd70      	pop	{r4, r5, r6, pc}
  40022c:	20400df4 	.word	0x20400df4
  400230:	40064000 	.word	0x40064000

00400234 <afec_ch_set_config>:
{
  400234:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400236:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400238:	2301      	movs	r3, #1
  40023a:	408b      	lsls	r3, r1
  40023c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400240:	7815      	ldrb	r5, [r2, #0]
  400242:	2d00      	cmp	r5, #0
  400244:	bf08      	it	eq
  400246:	2300      	moveq	r3, #0
  400248:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40024a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40024c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40024e:	004b      	lsls	r3, r1, #1
  400250:	2103      	movs	r1, #3
  400252:	4099      	lsls	r1, r3
  400254:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400258:	7851      	ldrb	r1, [r2, #1]
  40025a:	4099      	lsls	r1, r3
  40025c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40025e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400260:	bc30      	pop	{r4, r5}
  400262:	4770      	bx	lr

00400264 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400264:	784b      	ldrb	r3, [r1, #1]
  400266:	780a      	ldrb	r2, [r1, #0]
  400268:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  40026a:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  40026c:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40026e:	884b      	ldrh	r3, [r1, #2]
  400270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400274:	6743      	str	r3, [r0, #116]	; 0x74
  400276:	4770      	bx	lr

00400278 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400278:	2200      	movs	r2, #0
  40027a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  40027c:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <afec_get_config_defaults+0x28>)
  40027e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400280:	4b08      	ldr	r3, [pc, #32]	; (4002a4 <afec_get_config_defaults+0x2c>)
  400282:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400288:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40028a:	2302      	movs	r3, #2
  40028c:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40028e:	2301      	movs	r3, #1
  400290:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400292:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400294:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400296:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400298:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40029a:	7583      	strb	r3, [r0, #22]
  40029c:	4770      	bx	lr
  40029e:	bf00      	nop
  4002a0:	11e1a300 	.word	0x11e1a300
  4002a4:	005b8d80 	.word	0x005b8d80

004002a8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002a8:	2300      	movs	r3, #0
  4002aa:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002ac:	2301      	movs	r3, #1
  4002ae:	7043      	strb	r3, [r0, #1]
  4002b0:	4770      	bx	lr

004002b2 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002b2:	2300      	movs	r3, #0
  4002b4:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002b6:	2320      	movs	r3, #32
  4002b8:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002ba:	23ff      	movs	r3, #255	; 0xff
  4002bc:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002be:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002c2:	8083      	strh	r3, [r0, #4]
  4002c4:	4770      	bx	lr
	...

004002c8 <afec_init>:
	return afec->AFEC_ISR;
  4002c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002ca:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002ce:	d001      	beq.n	4002d4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002d0:	2019      	movs	r0, #25
  4002d2:	4770      	bx	lr
{
  4002d4:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002d6:	2301      	movs	r3, #1
  4002d8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002da:	7ccb      	ldrb	r3, [r1, #19]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf18      	it	ne
  4002e0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002e4:	684b      	ldr	r3, [r1, #4]
  4002e6:	688c      	ldr	r4, [r1, #8]
  4002e8:	fbb3 f3f4 	udiv	r3, r3, r4
  4002ec:	3b01      	subs	r3, #1
  4002ee:	021b      	lsls	r3, r3, #8
  4002f0:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002f2:	68cc      	ldr	r4, [r1, #12]
  4002f4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4002f8:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002fa:	7c0c      	ldrb	r4, [r1, #16]
  4002fc:	0624      	lsls	r4, r4, #24
  4002fe:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400304:	7c4c      	ldrb	r4, [r1, #17]
  400306:	0724      	lsls	r4, r4, #28
  400308:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40030c:	4323      	orrs	r3, r4
  40030e:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400310:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400312:	7d0b      	ldrb	r3, [r1, #20]
  400314:	2b00      	cmp	r3, #0
  400316:	bf14      	ite	ne
  400318:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40031c:	2300      	moveq	r3, #0
  40031e:	680a      	ldr	r2, [r1, #0]
  400320:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400322:	7d4a      	ldrb	r2, [r1, #21]
  400324:	2a00      	cmp	r2, #0
  400326:	bf14      	ite	ne
  400328:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40032c:	2200      	moveq	r2, #0
			(config->resolution) |
  40032e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400330:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400332:	7d8b      	ldrb	r3, [r1, #22]
  400334:	021b      	lsls	r3, r3, #8
  400336:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40033a:	f043 030c 	orr.w	r3, r3, #12
  40033e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400342:	4b0f      	ldr	r3, [pc, #60]	; (400380 <afec_init+0xb8>)
  400344:	4298      	cmp	r0, r3
  400346:	d006      	beq.n	400356 <afec_init+0x8e>
	if(afec == AFEC1) {
  400348:	4b0e      	ldr	r3, [pc, #56]	; (400384 <afec_init+0xbc>)
  40034a:	4298      	cmp	r0, r3
  40034c:	d00d      	beq.n	40036a <afec_init+0xa2>
	return STATUS_OK;
  40034e:	2000      	movs	r0, #0
}
  400350:	f85d 4b04 	ldr.w	r4, [sp], #4
  400354:	4770      	bx	lr
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <afec_init+0xc0>)
  400358:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  40035c:	2200      	movs	r2, #0
  40035e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400362:	428b      	cmp	r3, r1
  400364:	d1fb      	bne.n	40035e <afec_init+0x96>
	return STATUS_OK;
  400366:	2000      	movs	r0, #0
  400368:	e7f2      	b.n	400350 <afec_init+0x88>
  40036a:	4b08      	ldr	r3, [pc, #32]	; (40038c <afec_init+0xc4>)
  40036c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400370:	2200      	movs	r2, #0
  400372:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400376:	428b      	cmp	r3, r1
  400378:	d1fb      	bne.n	400372 <afec_init+0xaa>
	return STATUS_OK;
  40037a:	2000      	movs	r0, #0
  40037c:	e7e8      	b.n	400350 <afec_init+0x88>
  40037e:	bf00      	nop
  400380:	4003c000 	.word	0x4003c000
  400384:	40064000 	.word	0x40064000
  400388:	20400df0 	.word	0x20400df0
  40038c:	20400e34 	.word	0x20400e34

00400390 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400390:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <afec_enable_interrupt+0x34>)
  400392:	4299      	cmp	r1, r3
  400394:	d007      	beq.n	4003a6 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400396:	290b      	cmp	r1, #11
  400398:	d80b      	bhi.n	4003b2 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40039a:	d006      	beq.n	4003aa <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40039c:	2301      	movs	r3, #1
  40039e:	fa03 f101 	lsl.w	r1, r3, r1
  4003a2:	6241      	str	r1, [r0, #36]	; 0x24
  4003a4:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003a6:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003a8:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ae:	6243      	str	r3, [r0, #36]	; 0x24
  4003b0:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003b2:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003b4:	bf94      	ite	ls
  4003b6:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003b8:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003ba:	2301      	movs	r3, #1
  4003bc:	fa03 f101 	lsl.w	r1, r3, r1
  4003c0:	6241      	str	r1, [r0, #36]	; 0x24
  4003c2:	4770      	bx	lr
  4003c4:	47000fff 	.word	0x47000fff

004003c8 <afec_set_callback>:
{
  4003c8:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003ca:	4c11      	ldr	r4, [pc, #68]	; (400410 <afec_set_callback+0x48>)
  4003cc:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003ce:	bf0c      	ite	eq
  4003d0:	2410      	moveq	r4, #16
  4003d2:	2400      	movne	r4, #0
  4003d4:	440c      	add	r4, r1
  4003d6:	4d0f      	ldr	r5, [pc, #60]	; (400414 <afec_set_callback+0x4c>)
  4003d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4003dc:	d10a      	bne.n	4003f4 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003de:	4a0e      	ldr	r2, [pc, #56]	; (400418 <afec_set_callback+0x50>)
  4003e0:	f44f 7480 	mov.w	r4, #256	; 0x100
  4003e4:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003e8:	015b      	lsls	r3, r3, #5
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003f0:	6054      	str	r4, [r2, #4]
  4003f2:	e009      	b.n	400408 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003f4:	4a08      	ldr	r2, [pc, #32]	; (400418 <afec_set_callback+0x50>)
  4003f6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4003fa:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003fe:	015b      	lsls	r3, r3, #5
  400400:	b2db      	uxtb	r3, r3
  400402:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400406:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400408:	4b04      	ldr	r3, [pc, #16]	; (40041c <afec_set_callback+0x54>)
  40040a:	4798      	blx	r3
  40040c:	bd38      	pop	{r3, r4, r5, pc}
  40040e:	bf00      	nop
  400410:	40064000 	.word	0x40064000
  400414:	20400df4 	.word	0x20400df4
  400418:	e000e100 	.word	0xe000e100
  40041c:	00400391 	.word	0x00400391

00400420 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400420:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400422:	4802      	ldr	r0, [pc, #8]	; (40042c <AFEC0_Handler+0xc>)
  400424:	4b02      	ldr	r3, [pc, #8]	; (400430 <AFEC0_Handler+0x10>)
  400426:	4798      	blx	r3
  400428:	bd08      	pop	{r3, pc}
  40042a:	bf00      	nop
  40042c:	4003c000 	.word	0x4003c000
  400430:	004001ad 	.word	0x004001ad

00400434 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400434:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400436:	4802      	ldr	r0, [pc, #8]	; (400440 <AFEC1_Handler+0xc>)
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <AFEC1_Handler+0x10>)
  40043a:	4798      	blx	r3
  40043c:	bd08      	pop	{r3, pc}
  40043e:	bf00      	nop
  400440:	40064000 	.word	0x40064000
  400444:	004001ad 	.word	0x004001ad

00400448 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400448:	b500      	push	{lr}
  40044a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40044c:	4b13      	ldr	r3, [pc, #76]	; (40049c <afec_enable+0x54>)
  40044e:	4298      	cmp	r0, r3
  400450:	bf0c      	ite	eq
  400452:	2028      	moveq	r0, #40	; 0x28
  400454:	201d      	movne	r0, #29
  400456:	4b12      	ldr	r3, [pc, #72]	; (4004a0 <afec_enable+0x58>)
  400458:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40045a:	4b12      	ldr	r3, [pc, #72]	; (4004a4 <afec_enable+0x5c>)
  40045c:	789b      	ldrb	r3, [r3, #2]
  40045e:	2bff      	cmp	r3, #255	; 0xff
  400460:	d01a      	beq.n	400498 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400462:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400466:	fab3 f383 	clz	r3, r3
  40046a:	095b      	lsrs	r3, r3, #5
  40046c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40046e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400470:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400474:	2200      	movs	r2, #0
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <afec_enable+0x60>)
  400478:	701a      	strb	r2, [r3, #0]
	return flags;
  40047a:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40047c:	4a09      	ldr	r2, [pc, #36]	; (4004a4 <afec_enable+0x5c>)
  40047e:	7893      	ldrb	r3, [r2, #2]
  400480:	3301      	adds	r3, #1
  400482:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b129      	cbz	r1, 400492 <afec_enable+0x4a>
		cpu_irq_enable();
  400486:	2201      	movs	r2, #1
  400488:	4b07      	ldr	r3, [pc, #28]	; (4004a8 <afec_enable+0x60>)
  40048a:	701a      	strb	r2, [r3, #0]
  40048c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400490:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400492:	b003      	add	sp, #12
  400494:	f85d fb04 	ldr.w	pc, [sp], #4
  400498:	e7fe      	b.n	400498 <afec_enable+0x50>
  40049a:	bf00      	nop
  40049c:	40064000 	.word	0x40064000
  4004a0:	00402161 	.word	0x00402161
  4004a4:	20400dec 	.word	0x20400dec
  4004a8:	20400018 	.word	0x20400018

004004ac <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4004ac:	6980      	ldr	r0, [r0, #24]
}
  4004ae:	4770      	bx	lr

004004b0 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4004b0:	61c1      	str	r1, [r0, #28]
  4004b2:	4770      	bx	lr

004004b4 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4004b4:	68c0      	ldr	r0, [r0, #12]
}
  4004b6:	4770      	bx	lr

004004b8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4004b8:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4004ba:	4b07      	ldr	r3, [pc, #28]	; (4004d8 <spi_enable_clock+0x20>)
  4004bc:	4298      	cmp	r0, r3
  4004be:	d003      	beq.n	4004c8 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4004c0:	4b06      	ldr	r3, [pc, #24]	; (4004dc <spi_enable_clock+0x24>)
  4004c2:	4298      	cmp	r0, r3
  4004c4:	d004      	beq.n	4004d0 <spi_enable_clock+0x18>
  4004c6:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4004c8:	2015      	movs	r0, #21
  4004ca:	4b05      	ldr	r3, [pc, #20]	; (4004e0 <spi_enable_clock+0x28>)
  4004cc:	4798      	blx	r3
  4004ce:	bd08      	pop	{r3, pc}
  4004d0:	202a      	movs	r0, #42	; 0x2a
  4004d2:	4b03      	ldr	r3, [pc, #12]	; (4004e0 <spi_enable_clock+0x28>)
  4004d4:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4004d6:	e7f6      	b.n	4004c6 <spi_enable_clock+0xe>
  4004d8:	40008000 	.word	0x40008000
  4004dc:	40058000 	.word	0x40058000
  4004e0:	00402161 	.word	0x00402161

004004e4 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4004e4:	6843      	ldr	r3, [r0, #4]
  4004e6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4004ea:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4004ec:	6843      	ldr	r3, [r0, #4]
  4004ee:	0409      	lsls	r1, r1, #16
  4004f0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4004f4:	4319      	orrs	r1, r3
  4004f6:	6041      	str	r1, [r0, #4]
  4004f8:	4770      	bx	lr

004004fa <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4004fa:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4004fc:	f643 2499 	movw	r4, #15001	; 0x3a99
  400500:	6905      	ldr	r5, [r0, #16]
  400502:	f015 0f02 	tst.w	r5, #2
  400506:	d103      	bne.n	400510 <spi_write+0x16>
		if (!timeout--) {
  400508:	3c01      	subs	r4, #1
  40050a:	d1f9      	bne.n	400500 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40050c:	2001      	movs	r0, #1
  40050e:	e00c      	b.n	40052a <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400510:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400512:	f014 0f02 	tst.w	r4, #2
  400516:	d006      	beq.n	400526 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400518:	0412      	lsls	r2, r2, #16
  40051a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40051e:	4311      	orrs	r1, r2
		if (uc_last) {
  400520:	b10b      	cbz	r3, 400526 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400522:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400526:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400528:	2000      	movs	r0, #0
}
  40052a:	bc30      	pop	{r4, r5}
  40052c:	4770      	bx	lr

0040052e <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40052e:	b932      	cbnz	r2, 40053e <spi_set_clock_polarity+0x10>
  400530:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400534:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400536:	f023 0301 	bic.w	r3, r3, #1
  40053a:	6303      	str	r3, [r0, #48]	; 0x30
  40053c:	4770      	bx	lr
  40053e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400542:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400544:	f043 0301 	orr.w	r3, r3, #1
  400548:	6303      	str	r3, [r0, #48]	; 0x30
  40054a:	4770      	bx	lr

0040054c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40054c:	b932      	cbnz	r2, 40055c <spi_set_clock_phase+0x10>
  40054e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400552:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400554:	f023 0302 	bic.w	r3, r3, #2
  400558:	6303      	str	r3, [r0, #48]	; 0x30
  40055a:	4770      	bx	lr
  40055c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400560:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400562:	f043 0302 	orr.w	r3, r3, #2
  400566:	6303      	str	r3, [r0, #48]	; 0x30
  400568:	4770      	bx	lr

0040056a <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40056a:	2a04      	cmp	r2, #4
  40056c:	d003      	beq.n	400576 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40056e:	b16a      	cbz	r2, 40058c <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400570:	2a08      	cmp	r2, #8
  400572:	d016      	beq.n	4005a2 <spi_configure_cs_behavior+0x38>
  400574:	4770      	bx	lr
  400576:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40057a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40057c:	f023 0308 	bic.w	r3, r3, #8
  400580:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400582:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400584:	f043 0304 	orr.w	r3, r3, #4
  400588:	6303      	str	r3, [r0, #48]	; 0x30
  40058a:	4770      	bx	lr
  40058c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400590:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400592:	f023 0308 	bic.w	r3, r3, #8
  400596:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400598:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40059a:	f023 0304 	bic.w	r3, r3, #4
  40059e:	6303      	str	r3, [r0, #48]	; 0x30
  4005a0:	4770      	bx	lr
  4005a2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4005a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005a8:	f043 0308 	orr.w	r3, r3, #8
  4005ac:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4005ae:	e7e1      	b.n	400574 <spi_configure_cs_behavior+0xa>

004005b0 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4005b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4005b4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4005ba:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4005bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005be:	431a      	orrs	r2, r3
  4005c0:	630a      	str	r2, [r1, #48]	; 0x30
  4005c2:	4770      	bx	lr

004005c4 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4005c4:	1e43      	subs	r3, r0, #1
  4005c6:	4419      	add	r1, r3
  4005c8:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4005cc:	1e43      	subs	r3, r0, #1
  4005ce:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4005d0:	bf94      	ite	ls
  4005d2:	b200      	sxthls	r0, r0
		return -1;
  4005d4:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4005d8:	4770      	bx	lr

004005da <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4005da:	b17a      	cbz	r2, 4005fc <spi_set_baudrate_div+0x22>
{
  4005dc:	b410      	push	{r4}
  4005de:	4614      	mov	r4, r2
  4005e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4005e4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4005ea:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4005ec:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4005ee:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4005f2:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4005f4:	2000      	movs	r0, #0
}
  4005f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005fa:	4770      	bx	lr
        return -1;
  4005fc:	f04f 30ff 	mov.w	r0, #4294967295
  400600:	4770      	bx	lr

00400602 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400602:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400604:	0189      	lsls	r1, r1, #6
  400606:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400608:	2402      	movs	r4, #2
  40060a:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40060c:	f04f 31ff 	mov.w	r1, #4294967295
  400610:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400612:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400614:	605a      	str	r2, [r3, #4]
}
  400616:	f85d 4b04 	ldr.w	r4, [sp], #4
  40061a:	4770      	bx	lr

0040061c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40061c:	0189      	lsls	r1, r1, #6
  40061e:	2305      	movs	r3, #5
  400620:	5043      	str	r3, [r0, r1]
  400622:	4770      	bx	lr

00400624 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400624:	0189      	lsls	r1, r1, #6
  400626:	2302      	movs	r3, #2
  400628:	5043      	str	r3, [r0, r1]
  40062a:	4770      	bx	lr

0040062c <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40062c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400630:	61ca      	str	r2, [r1, #28]
  400632:	4770      	bx	lr

00400634 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400634:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400638:	624a      	str	r2, [r1, #36]	; 0x24
  40063a:	4770      	bx	lr

0040063c <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40063c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400640:	6a08      	ldr	r0, [r1, #32]
}
  400642:	4770      	bx	lr

00400644 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400644:	b4f0      	push	{r4, r5, r6, r7}
  400646:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400648:	2402      	movs	r4, #2
  40064a:	9401      	str	r4, [sp, #4]
  40064c:	2408      	movs	r4, #8
  40064e:	9402      	str	r4, [sp, #8]
  400650:	2420      	movs	r4, #32
  400652:	9403      	str	r4, [sp, #12]
  400654:	2480      	movs	r4, #128	; 0x80
  400656:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400658:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40065a:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40065c:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40065e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400662:	d814      	bhi.n	40068e <tc_find_mck_divisor+0x4a>
  400664:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400666:	42a0      	cmp	r0, r4
  400668:	d217      	bcs.n	40069a <tc_find_mck_divisor+0x56>
  40066a:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40066c:	af01      	add	r7, sp, #4
  40066e:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400672:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400676:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400678:	4284      	cmp	r4, r0
  40067a:	d30a      	bcc.n	400692 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  40067c:	4286      	cmp	r6, r0
  40067e:	d90d      	bls.n	40069c <tc_find_mck_divisor+0x58>
			ul_index++) {
  400680:	3501      	adds	r5, #1
	for (ul_index = 0;
  400682:	2d05      	cmp	r5, #5
  400684:	d1f3      	bne.n	40066e <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400686:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400688:	b006      	add	sp, #24
  40068a:	bcf0      	pop	{r4, r5, r6, r7}
  40068c:	4770      	bx	lr
			return 0;
  40068e:	2000      	movs	r0, #0
  400690:	e7fa      	b.n	400688 <tc_find_mck_divisor+0x44>
  400692:	2000      	movs	r0, #0
  400694:	e7f8      	b.n	400688 <tc_find_mck_divisor+0x44>
	return 1;
  400696:	2001      	movs	r0, #1
  400698:	e7f6      	b.n	400688 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40069a:	2500      	movs	r5, #0
	if (p_uldiv) {
  40069c:	b12a      	cbz	r2, 4006aa <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40069e:	a906      	add	r1, sp, #24
  4006a0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4006a4:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4006a8:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4006aa:	2b00      	cmp	r3, #0
  4006ac:	d0f3      	beq.n	400696 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4006ae:	601d      	str	r5, [r3, #0]
	return 1;
  4006b0:	2001      	movs	r0, #1
  4006b2:	e7e9      	b.n	400688 <tc_find_mck_divisor+0x44>

004006b4 <clear_screen>:
#include "gfx_mono_text.h"
#include "sysfont.h"
#include "aux_functions.h"

void clear_screen(void)
{
  4006b4:	b510      	push	{r4, lr}
  4006b6:	b082      	sub	sp, #8
    gfx_mono_generic_draw_filled_rect(0, 0, 127, 31, GFX_PIXEL_CLR);
  4006b8:	2000      	movs	r0, #0
  4006ba:	9000      	str	r0, [sp, #0]
  4006bc:	231f      	movs	r3, #31
  4006be:	227f      	movs	r2, #127	; 0x7f
  4006c0:	4601      	mov	r1, r0
  4006c2:	4c02      	ldr	r4, [pc, #8]	; (4006cc <clear_screen+0x18>)
  4006c4:	47a0      	blx	r4
}
  4006c6:	b002      	add	sp, #8
  4006c8:	bd10      	pop	{r4, pc}
  4006ca:	bf00      	nop
  4006cc:	004015fd 	.word	0x004015fd

004006d0 <draw_string>:

void draw_string(char *text)
{
  4006d0:	b570      	push	{r4, r5, r6, lr}
  4006d2:	4606      	mov	r6, r0
    gfx_mono_draw_string("            ", 0, 3, &sysfont);
  4006d4:	4d06      	ldr	r5, [pc, #24]	; (4006f0 <draw_string+0x20>)
  4006d6:	462b      	mov	r3, r5
  4006d8:	2203      	movs	r2, #3
  4006da:	2100      	movs	r1, #0
  4006dc:	4805      	ldr	r0, [pc, #20]	; (4006f4 <draw_string+0x24>)
  4006de:	4c06      	ldr	r4, [pc, #24]	; (4006f8 <draw_string+0x28>)
  4006e0:	47a0      	blx	r4
    gfx_mono_draw_string(text, 0, 3, &sysfont);
  4006e2:	462b      	mov	r3, r5
  4006e4:	2203      	movs	r2, #3
  4006e6:	2100      	movs	r1, #0
  4006e8:	4630      	mov	r0, r6
  4006ea:	47a0      	blx	r4
  4006ec:	bd70      	pop	{r4, r5, r6, pc}
  4006ee:	bf00      	nop
  4006f0:	2040000c 	.word	0x2040000c
  4006f4:	00407388 	.word	0x00407388
  4006f8:	004016e1 	.word	0x004016e1

004006fc <pin_toggle>:
    sprintf(freq_str, "%02d:%02d:%02d", h, m, s);
    gfx_mono_draw_string(freq_str, 0, 16, &sysfont);
}

void pin_toggle(Pio *pio, uint32_t mask)
{
  4006fc:	b538      	push	{r3, r4, r5, lr}
  4006fe:	4604      	mov	r4, r0
  400700:	460d      	mov	r5, r1
    pio_get_output_data_status(pio, mask) ? pio_clear(pio, mask) : pio_set(pio, mask);
  400702:	4b06      	ldr	r3, [pc, #24]	; (40071c <pin_toggle+0x20>)
  400704:	4798      	blx	r3
  400706:	b920      	cbnz	r0, 400712 <pin_toggle+0x16>
  400708:	4629      	mov	r1, r5
  40070a:	4620      	mov	r0, r4
  40070c:	4b04      	ldr	r3, [pc, #16]	; (400720 <pin_toggle+0x24>)
  40070e:	4798      	blx	r3
  400710:	bd38      	pop	{r3, r4, r5, pc}
  400712:	4629      	mov	r1, r5
  400714:	4620      	mov	r0, r4
  400716:	4b03      	ldr	r3, [pc, #12]	; (400724 <pin_toggle+0x28>)
  400718:	4798      	blx	r3
  40071a:	bd38      	pop	{r3, r4, r5, pc}
  40071c:	00401ed1 	.word	0x00401ed1
  400720:	00401d47 	.word	0x00401d47
  400724:	00401d4b 	.word	0x00401d4b

00400728 <send_package>:
    }
}

void send_package(char data[], char n)
{
    for (int i = 0; i < n; i++)
  400728:	b1f1      	cbz	r1, 400768 <send_package+0x40>
{
  40072a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40072e:	4689      	mov	r9, r1
  400730:	4607      	mov	r7, r0
  400732:	4481      	add	r9, r0
    {
        printf("%c", data[i]);	
        while (!usart_is_tx_ready(CONSOLE_UART))
  400734:	4c0d      	ldr	r4, [pc, #52]	; (40076c <send_package+0x44>)
            vTaskDelay(1 / portTICK_PERIOD_MS);
  400736:	4e0e      	ldr	r6, [pc, #56]	; (400770 <send_package+0x48>)
  400738:	e00d      	b.n	400756 <send_package+0x2e>
  40073a:	2001      	movs	r0, #1
  40073c:	47b0      	blx	r6
        while (!usart_is_tx_ready(CONSOLE_UART))
  40073e:	4620      	mov	r0, r4
  400740:	47a8      	blx	r5
  400742:	2800      	cmp	r0, #0
  400744:	d0f9      	beq.n	40073a <send_package+0x12>
  400746:	3701      	adds	r7, #1
        usart_write(CONSOLE_UART, data[i]);
  400748:	f898 1000 	ldrb.w	r1, [r8]
  40074c:	4620      	mov	r0, r4
  40074e:	4b09      	ldr	r3, [pc, #36]	; (400774 <send_package+0x4c>)
  400750:	4798      	blx	r3
    for (int i = 0; i < n; i++)
  400752:	454f      	cmp	r7, r9
  400754:	d006      	beq.n	400764 <send_package+0x3c>
  400756:	46b8      	mov	r8, r7
        printf("%c", data[i]);	
  400758:	7839      	ldrb	r1, [r7, #0]
  40075a:	4807      	ldr	r0, [pc, #28]	; (400778 <send_package+0x50>)
  40075c:	4b07      	ldr	r3, [pc, #28]	; (40077c <send_package+0x54>)
  40075e:	4798      	blx	r3
        while (!usart_is_tx_ready(CONSOLE_UART))
  400760:	4d07      	ldr	r5, [pc, #28]	; (400780 <send_package+0x58>)
  400762:	e7ec      	b.n	40073e <send_package+0x16>
  400764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400768:	4770      	bx	lr
  40076a:	bf00      	nop
  40076c:	40028000 	.word	0x40028000
  400770:	00403881 	.word	0x00403881
  400774:	004022cd 	.word	0x004022cd
  400778:	00407398 	.word	0x00407398
  40077c:	0040474d 	.word	0x0040474d
  400780:	004022c5 	.word	0x004022c5

00400784 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400784:	b5f0      	push	{r4, r5, r6, r7, lr}
  400786:	b083      	sub	sp, #12
  400788:	4605      	mov	r5, r0
  40078a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40078c:	2300      	movs	r3, #0
  40078e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400790:	4b2a      	ldr	r3, [pc, #168]	; (40083c <usart_serial_getchar+0xb8>)
  400792:	4298      	cmp	r0, r3
  400794:	d013      	beq.n	4007be <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400796:	4b2a      	ldr	r3, [pc, #168]	; (400840 <usart_serial_getchar+0xbc>)
  400798:	4298      	cmp	r0, r3
  40079a:	d018      	beq.n	4007ce <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40079c:	4b29      	ldr	r3, [pc, #164]	; (400844 <usart_serial_getchar+0xc0>)
  40079e:	4298      	cmp	r0, r3
  4007a0:	d01d      	beq.n	4007de <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4007a2:	4b29      	ldr	r3, [pc, #164]	; (400848 <usart_serial_getchar+0xc4>)
  4007a4:	429d      	cmp	r5, r3
  4007a6:	d022      	beq.n	4007ee <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4007a8:	4b28      	ldr	r3, [pc, #160]	; (40084c <usart_serial_getchar+0xc8>)
  4007aa:	429d      	cmp	r5, r3
  4007ac:	d027      	beq.n	4007fe <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4007ae:	4b28      	ldr	r3, [pc, #160]	; (400850 <usart_serial_getchar+0xcc>)
  4007b0:	429d      	cmp	r5, r3
  4007b2:	d02e      	beq.n	400812 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4007b4:	4b27      	ldr	r3, [pc, #156]	; (400854 <usart_serial_getchar+0xd0>)
  4007b6:	429d      	cmp	r5, r3
  4007b8:	d035      	beq.n	400826 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4007ba:	b003      	add	sp, #12
  4007bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4007be:	461f      	mov	r7, r3
  4007c0:	4e25      	ldr	r6, [pc, #148]	; (400858 <usart_serial_getchar+0xd4>)
  4007c2:	4621      	mov	r1, r4
  4007c4:	4638      	mov	r0, r7
  4007c6:	47b0      	blx	r6
  4007c8:	2800      	cmp	r0, #0
  4007ca:	d1fa      	bne.n	4007c2 <usart_serial_getchar+0x3e>
  4007cc:	e7e9      	b.n	4007a2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4007ce:	461f      	mov	r7, r3
  4007d0:	4e21      	ldr	r6, [pc, #132]	; (400858 <usart_serial_getchar+0xd4>)
  4007d2:	4621      	mov	r1, r4
  4007d4:	4638      	mov	r0, r7
  4007d6:	47b0      	blx	r6
  4007d8:	2800      	cmp	r0, #0
  4007da:	d1fa      	bne.n	4007d2 <usart_serial_getchar+0x4e>
  4007dc:	e7e4      	b.n	4007a8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4007de:	461f      	mov	r7, r3
  4007e0:	4e1d      	ldr	r6, [pc, #116]	; (400858 <usart_serial_getchar+0xd4>)
  4007e2:	4621      	mov	r1, r4
  4007e4:	4638      	mov	r0, r7
  4007e6:	47b0      	blx	r6
  4007e8:	2800      	cmp	r0, #0
  4007ea:	d1fa      	bne.n	4007e2 <usart_serial_getchar+0x5e>
  4007ec:	e7df      	b.n	4007ae <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4007ee:	461f      	mov	r7, r3
  4007f0:	4e19      	ldr	r6, [pc, #100]	; (400858 <usart_serial_getchar+0xd4>)
  4007f2:	4621      	mov	r1, r4
  4007f4:	4638      	mov	r0, r7
  4007f6:	47b0      	blx	r6
  4007f8:	2800      	cmp	r0, #0
  4007fa:	d1fa      	bne.n	4007f2 <usart_serial_getchar+0x6e>
  4007fc:	e7da      	b.n	4007b4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4007fe:	461e      	mov	r6, r3
  400800:	4d16      	ldr	r5, [pc, #88]	; (40085c <usart_serial_getchar+0xd8>)
  400802:	a901      	add	r1, sp, #4
  400804:	4630      	mov	r0, r6
  400806:	47a8      	blx	r5
  400808:	2800      	cmp	r0, #0
  40080a:	d1fa      	bne.n	400802 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40080c:	9b01      	ldr	r3, [sp, #4]
  40080e:	7023      	strb	r3, [r4, #0]
  400810:	e7d3      	b.n	4007ba <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400812:	461e      	mov	r6, r3
  400814:	4d11      	ldr	r5, [pc, #68]	; (40085c <usart_serial_getchar+0xd8>)
  400816:	a901      	add	r1, sp, #4
  400818:	4630      	mov	r0, r6
  40081a:	47a8      	blx	r5
  40081c:	2800      	cmp	r0, #0
  40081e:	d1fa      	bne.n	400816 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400820:	9b01      	ldr	r3, [sp, #4]
  400822:	7023      	strb	r3, [r4, #0]
  400824:	e7c9      	b.n	4007ba <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400826:	461e      	mov	r6, r3
  400828:	4d0c      	ldr	r5, [pc, #48]	; (40085c <usart_serial_getchar+0xd8>)
  40082a:	a901      	add	r1, sp, #4
  40082c:	4630      	mov	r0, r6
  40082e:	47a8      	blx	r5
  400830:	2800      	cmp	r0, #0
  400832:	d1fa      	bne.n	40082a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400834:	9b01      	ldr	r3, [sp, #4]
  400836:	7023      	strb	r3, [r4, #0]
}
  400838:	e7bf      	b.n	4007ba <usart_serial_getchar+0x36>
  40083a:	bf00      	nop
  40083c:	400e0800 	.word	0x400e0800
  400840:	400e0a00 	.word	0x400e0a00
  400844:	400e1a00 	.word	0x400e1a00
  400848:	400e1c00 	.word	0x400e1c00
  40084c:	40024000 	.word	0x40024000
  400850:	40028000 	.word	0x40028000
  400854:	4002c000 	.word	0x4002c000
  400858:	004021c7 	.word	0x004021c7
  40085c:	004022e3 	.word	0x004022e3

00400860 <usart_serial_putchar>:
{
  400860:	b570      	push	{r4, r5, r6, lr}
  400862:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400864:	4b2a      	ldr	r3, [pc, #168]	; (400910 <usart_serial_putchar+0xb0>)
  400866:	4298      	cmp	r0, r3
  400868:	d013      	beq.n	400892 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40086a:	4b2a      	ldr	r3, [pc, #168]	; (400914 <usart_serial_putchar+0xb4>)
  40086c:	4298      	cmp	r0, r3
  40086e:	d019      	beq.n	4008a4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400870:	4b29      	ldr	r3, [pc, #164]	; (400918 <usart_serial_putchar+0xb8>)
  400872:	4298      	cmp	r0, r3
  400874:	d01f      	beq.n	4008b6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400876:	4b29      	ldr	r3, [pc, #164]	; (40091c <usart_serial_putchar+0xbc>)
  400878:	4298      	cmp	r0, r3
  40087a:	d025      	beq.n	4008c8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  40087c:	4b28      	ldr	r3, [pc, #160]	; (400920 <usart_serial_putchar+0xc0>)
  40087e:	4298      	cmp	r0, r3
  400880:	d02b      	beq.n	4008da <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400882:	4b28      	ldr	r3, [pc, #160]	; (400924 <usart_serial_putchar+0xc4>)
  400884:	4298      	cmp	r0, r3
  400886:	d031      	beq.n	4008ec <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400888:	4b27      	ldr	r3, [pc, #156]	; (400928 <usart_serial_putchar+0xc8>)
  40088a:	4298      	cmp	r0, r3
  40088c:	d037      	beq.n	4008fe <usart_serial_putchar+0x9e>
	return 0;
  40088e:	2000      	movs	r0, #0
}
  400890:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400892:	461e      	mov	r6, r3
  400894:	4d25      	ldr	r5, [pc, #148]	; (40092c <usart_serial_putchar+0xcc>)
  400896:	4621      	mov	r1, r4
  400898:	4630      	mov	r0, r6
  40089a:	47a8      	blx	r5
  40089c:	2800      	cmp	r0, #0
  40089e:	d1fa      	bne.n	400896 <usart_serial_putchar+0x36>
		return 1;
  4008a0:	2001      	movs	r0, #1
  4008a2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4008a4:	461e      	mov	r6, r3
  4008a6:	4d21      	ldr	r5, [pc, #132]	; (40092c <usart_serial_putchar+0xcc>)
  4008a8:	4621      	mov	r1, r4
  4008aa:	4630      	mov	r0, r6
  4008ac:	47a8      	blx	r5
  4008ae:	2800      	cmp	r0, #0
  4008b0:	d1fa      	bne.n	4008a8 <usart_serial_putchar+0x48>
		return 1;
  4008b2:	2001      	movs	r0, #1
  4008b4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4008b6:	461e      	mov	r6, r3
  4008b8:	4d1c      	ldr	r5, [pc, #112]	; (40092c <usart_serial_putchar+0xcc>)
  4008ba:	4621      	mov	r1, r4
  4008bc:	4630      	mov	r0, r6
  4008be:	47a8      	blx	r5
  4008c0:	2800      	cmp	r0, #0
  4008c2:	d1fa      	bne.n	4008ba <usart_serial_putchar+0x5a>
		return 1;
  4008c4:	2001      	movs	r0, #1
  4008c6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4008c8:	461e      	mov	r6, r3
  4008ca:	4d18      	ldr	r5, [pc, #96]	; (40092c <usart_serial_putchar+0xcc>)
  4008cc:	4621      	mov	r1, r4
  4008ce:	4630      	mov	r0, r6
  4008d0:	47a8      	blx	r5
  4008d2:	2800      	cmp	r0, #0
  4008d4:	d1fa      	bne.n	4008cc <usart_serial_putchar+0x6c>
		return 1;
  4008d6:	2001      	movs	r0, #1
  4008d8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4008da:	461e      	mov	r6, r3
  4008dc:	4d14      	ldr	r5, [pc, #80]	; (400930 <usart_serial_putchar+0xd0>)
  4008de:	4621      	mov	r1, r4
  4008e0:	4630      	mov	r0, r6
  4008e2:	47a8      	blx	r5
  4008e4:	2800      	cmp	r0, #0
  4008e6:	d1fa      	bne.n	4008de <usart_serial_putchar+0x7e>
		return 1;
  4008e8:	2001      	movs	r0, #1
  4008ea:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4008ec:	461e      	mov	r6, r3
  4008ee:	4d10      	ldr	r5, [pc, #64]	; (400930 <usart_serial_putchar+0xd0>)
  4008f0:	4621      	mov	r1, r4
  4008f2:	4630      	mov	r0, r6
  4008f4:	47a8      	blx	r5
  4008f6:	2800      	cmp	r0, #0
  4008f8:	d1fa      	bne.n	4008f0 <usart_serial_putchar+0x90>
		return 1;
  4008fa:	2001      	movs	r0, #1
  4008fc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4008fe:	461e      	mov	r6, r3
  400900:	4d0b      	ldr	r5, [pc, #44]	; (400930 <usart_serial_putchar+0xd0>)
  400902:	4621      	mov	r1, r4
  400904:	4630      	mov	r0, r6
  400906:	47a8      	blx	r5
  400908:	2800      	cmp	r0, #0
  40090a:	d1fa      	bne.n	400902 <usart_serial_putchar+0xa2>
		return 1;
  40090c:	2001      	movs	r0, #1
  40090e:	bd70      	pop	{r4, r5, r6, pc}
  400910:	400e0800 	.word	0x400e0800
  400914:	400e0a00 	.word	0x400e0a00
  400918:	400e1a00 	.word	0x400e1a00
  40091c:	400e1c00 	.word	0x400e1c00
  400920:	40024000 	.word	0x40024000
  400924:	40028000 	.word	0x40028000
  400928:	4002c000 	.word	0x4002c000
  40092c:	004021b5 	.word	0x004021b5
  400930:	004022cd 	.word	0x004022cd

00400934 <but_callback>:
}
// -------------------------------------------------------------------------------

// callbacks ---------------------------------------------------------------------
void but_callback(void)
{
  400934:	b510      	push	{r4, lr}
  400936:	b082      	sub	sp, #8
    char id = '0';
  400938:	ac02      	add	r4, sp, #8
  40093a:	2330      	movs	r3, #48	; 0x30
  40093c:	f804 3d01 	strb.w	r3, [r4, #-1]!
    xQueueSendFromISR(get_but_queue(), &id, 0);
  400940:	4b04      	ldr	r3, [pc, #16]	; (400954 <but_callback+0x20>)
  400942:	4798      	blx	r3
  400944:	2300      	movs	r3, #0
  400946:	461a      	mov	r2, r3
  400948:	4621      	mov	r1, r4
  40094a:	4c03      	ldr	r4, [pc, #12]	; (400958 <but_callback+0x24>)
  40094c:	47a0      	blx	r4
}
  40094e:	b002      	add	sp, #8
  400950:	bd10      	pop	{r4, pc}
  400952:	bf00      	nop
  400954:	00401109 	.word	0x00401109
  400958:	00402e79 	.word	0x00402e79

0040095c <but1_callback>:

void but1_callback(void)
{
  40095c:	b510      	push	{r4, lr}
  40095e:	b082      	sub	sp, #8
    char id = '1';
  400960:	ac02      	add	r4, sp, #8
  400962:	2331      	movs	r3, #49	; 0x31
  400964:	f804 3d01 	strb.w	r3, [r4, #-1]!
    xQueueSendFromISR(get_but_queue(), &id, 0);
  400968:	4b04      	ldr	r3, [pc, #16]	; (40097c <but1_callback+0x20>)
  40096a:	4798      	blx	r3
  40096c:	2300      	movs	r3, #0
  40096e:	461a      	mov	r2, r3
  400970:	4621      	mov	r1, r4
  400972:	4c03      	ldr	r4, [pc, #12]	; (400980 <but1_callback+0x24>)
  400974:	47a0      	blx	r4
}
  400976:	b002      	add	sp, #8
  400978:	bd10      	pop	{r4, pc}
  40097a:	bf00      	nop
  40097c:	00401109 	.word	0x00401109
  400980:	00402e79 	.word	0x00402e79

00400984 <but2_callback>:

void but2_callback(void)
{
  400984:	b510      	push	{r4, lr}
  400986:	b082      	sub	sp, #8
    char id = '2';
  400988:	ac02      	add	r4, sp, #8
  40098a:	2332      	movs	r3, #50	; 0x32
  40098c:	f804 3d01 	strb.w	r3, [r4, #-1]!
    xQueueSendFromISR(get_but_queue(), &id, 0);
  400990:	4b04      	ldr	r3, [pc, #16]	; (4009a4 <but2_callback+0x20>)
  400992:	4798      	blx	r3
  400994:	2300      	movs	r3, #0
  400996:	461a      	mov	r2, r3
  400998:	4621      	mov	r1, r4
  40099a:	4c03      	ldr	r4, [pc, #12]	; (4009a8 <but2_callback+0x24>)
  40099c:	47a0      	blx	r4
}
  40099e:	b002      	add	sp, #8
  4009a0:	bd10      	pop	{r4, pc}
  4009a2:	bf00      	nop
  4009a4:	00401109 	.word	0x00401109
  4009a8:	00402e79 	.word	0x00402e79

004009ac <but3_callback>:

void but3_callback(void)
{
  4009ac:	b510      	push	{r4, lr}
  4009ae:	b082      	sub	sp, #8
    char id = '3';
  4009b0:	ac02      	add	r4, sp, #8
  4009b2:	2333      	movs	r3, #51	; 0x33
  4009b4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    xQueueSendFromISR(get_but_queue(), &id, 0);
  4009b8:	4b04      	ldr	r3, [pc, #16]	; (4009cc <but3_callback+0x20>)
  4009ba:	4798      	blx	r3
  4009bc:	2300      	movs	r3, #0
  4009be:	461a      	mov	r2, r3
  4009c0:	4621      	mov	r1, r4
  4009c2:	4c03      	ldr	r4, [pc, #12]	; (4009d0 <but3_callback+0x24>)
  4009c4:	47a0      	blx	r4
}
  4009c6:	b002      	add	sp, #8
  4009c8:	bd10      	pop	{r4, pc}
  4009ca:	bf00      	nop
  4009cc:	00401109 	.word	0x00401109
  4009d0:	00402e79 	.word	0x00402e79

004009d4 <pot_callback>:
void pot_callback(void)
{
  4009d4:	b530      	push	{r4, r5, lr}
  4009d6:	b083      	sub	sp, #12
	afec->AFEC_CSELR = afec_ch;
  4009d8:	4b08      	ldr	r3, [pc, #32]	; (4009fc <pot_callback+0x28>)
  4009da:	2500      	movs	r5, #0
  4009dc:	665d      	str	r5, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4009de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    uint32_t adc;
    adc = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  4009e0:	9301      	str	r3, [sp, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  4009e2:	ac02      	add	r4, sp, #8
  4009e4:	f844 5d08 	str.w	r5, [r4, #-8]!
    xQueueSendFromISR(get_adc_queue(), &adc, &xHigherPriorityTaskWoken);
  4009e8:	4b05      	ldr	r3, [pc, #20]	; (400a00 <pot_callback+0x2c>)
  4009ea:	4798      	blx	r3
  4009ec:	462b      	mov	r3, r5
  4009ee:	4622      	mov	r2, r4
  4009f0:	a901      	add	r1, sp, #4
  4009f2:	4c04      	ldr	r4, [pc, #16]	; (400a04 <pot_callback+0x30>)
  4009f4:	47a0      	blx	r4
}
  4009f6:	b003      	add	sp, #12
  4009f8:	bd30      	pop	{r4, r5, pc}
  4009fa:	bf00      	nop
  4009fc:	4003c000 	.word	0x4003c000
  400a00:	00401115 	.word	0x00401115
  400a04:	00402e79 	.word	0x00402e79

00400a08 <USART1_init>:
{
  400a08:	b530      	push	{r4, r5, lr}
  400a0a:	b087      	sub	sp, #28
  400a0c:	200b      	movs	r0, #11
  400a0e:	4c22      	ldr	r4, [pc, #136]	; (400a98 <USART1_init+0x90>)
  400a10:	47a0      	blx	r4
  400a12:	200a      	movs	r0, #10
  400a14:	47a0      	blx	r4
    pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4);  // RX
  400a16:	2210      	movs	r2, #16
  400a18:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400a1c:	481f      	ldr	r0, [pc, #124]	; (400a9c <USART1_init+0x94>)
  400a1e:	4d20      	ldr	r5, [pc, #128]	; (400aa0 <USART1_init+0x98>)
  400a20:	47a8      	blx	r5
    pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  400a22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a26:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a2a:	481e      	ldr	r0, [pc, #120]	; (400aa4 <USART1_init+0x9c>)
  400a2c:	47a8      	blx	r5
    MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400a2e:	4a1e      	ldr	r2, [pc, #120]	; (400aa8 <USART1_init+0xa0>)
  400a30:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400a34:	f043 0310 	orr.w	r3, r3, #16
  400a38:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    const sam_usart_opt_t usart_settings = {
  400a3c:	2300      	movs	r3, #0
  400a3e:	9303      	str	r3, [sp, #12]
  400a40:	9304      	str	r3, [sp, #16]
  400a42:	9305      	str	r3, [sp, #20]
  400a44:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400a48:	9300      	str	r3, [sp, #0]
  400a4a:	23c0      	movs	r3, #192	; 0xc0
  400a4c:	9301      	str	r3, [sp, #4]
  400a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a52:	9302      	str	r3, [sp, #8]
  400a54:	200e      	movs	r0, #14
  400a56:	47a0      	blx	r4
    usart_init_rs232(CONSOLE_UART, &usart_settings, sysclk_get_peripheral_hz());
  400a58:	4c14      	ldr	r4, [pc, #80]	; (400aac <USART1_init+0xa4>)
  400a5a:	4a15      	ldr	r2, [pc, #84]	; (400ab0 <USART1_init+0xa8>)
  400a5c:	4669      	mov	r1, sp
  400a5e:	4620      	mov	r0, r4
  400a60:	4b14      	ldr	r3, [pc, #80]	; (400ab4 <USART1_init+0xac>)
  400a62:	4798      	blx	r3
    usart_enable_tx(CONSOLE_UART);
  400a64:	4620      	mov	r0, r4
  400a66:	4b14      	ldr	r3, [pc, #80]	; (400ab8 <USART1_init+0xb0>)
  400a68:	4798      	blx	r3
    usart_enable_rx(CONSOLE_UART);
  400a6a:	4620      	mov	r0, r4
  400a6c:	4b13      	ldr	r3, [pc, #76]	; (400abc <USART1_init+0xb4>)
  400a6e:	4798      	blx	r3
    ptr_put = (int (*)(void volatile *, char)) & usart_serial_putchar;
  400a70:	4a13      	ldr	r2, [pc, #76]	; (400ac0 <USART1_init+0xb8>)
  400a72:	4b14      	ldr	r3, [pc, #80]	; (400ac4 <USART1_init+0xbc>)
  400a74:	601a      	str	r2, [r3, #0]
    ptr_get = (void (*)(void volatile *, char *)) & usart_serial_getchar;
  400a76:	4a14      	ldr	r2, [pc, #80]	; (400ac8 <USART1_init+0xc0>)
  400a78:	4b14      	ldr	r3, [pc, #80]	; (400acc <USART1_init+0xc4>)
  400a7a:	601a      	str	r2, [r3, #0]
    usart_enable_interrupt(CONSOLE_UART, US_IER_RXRDY);
  400a7c:	2101      	movs	r1, #1
  400a7e:	4620      	mov	r0, r4
  400a80:	4b13      	ldr	r3, [pc, #76]	; (400ad0 <USART1_init+0xc8>)
  400a82:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400a84:	4b13      	ldr	r3, [pc, #76]	; (400ad4 <USART1_init+0xcc>)
  400a86:	2280      	movs	r2, #128	; 0x80
  400a88:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400a8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400a90:	601a      	str	r2, [r3, #0]
}
  400a92:	b007      	add	sp, #28
  400a94:	bd30      	pop	{r4, r5, pc}
  400a96:	bf00      	nop
  400a98:	00402161 	.word	0x00402161
  400a9c:	400e1000 	.word	0x400e1000
  400aa0:	00401d4f 	.word	0x00401d4f
  400aa4:	400e0e00 	.word	0x400e0e00
  400aa8:	40088000 	.word	0x40088000
  400aac:	40028000 	.word	0x40028000
  400ab0:	08f0d180 	.word	0x08f0d180
  400ab4:	0040225d 	.word	0x0040225d
  400ab8:	004022b1 	.word	0x004022b1
  400abc:	004022b7 	.word	0x004022b7
  400ac0:	00400861 	.word	0x00400861
  400ac4:	20400e94 	.word	0x20400e94
  400ac8:	00400785 	.word	0x00400785
  400acc:	20400e90 	.word	0x20400e90
  400ad0:	004022bd 	.word	0x004022bd
  400ad4:	e000e100 	.word	0xe000e100

00400ad8 <USART1_Handler>:
{
  400ad8:	b570      	push	{r4, r5, r6, lr}
  400ada:	b084      	sub	sp, #16
  uint32_t ret = usart_get_status(CONSOLE_UART);
  400adc:	4810      	ldr	r0, [pc, #64]	; (400b20 <USART1_Handler+0x48>)
  400ade:	4b11      	ldr	r3, [pc, #68]	; (400b24 <USART1_Handler+0x4c>)
  400ae0:	4798      	blx	r3
  BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  400ae2:	2301      	movs	r3, #1
  400ae4:	9303      	str	r3, [sp, #12]
  if (ret & US_IER_RXRDY)
  400ae6:	f010 0f01 	tst.w	r0, #1
  400aea:	d101      	bne.n	400af0 <USART1_Handler+0x18>
}
  400aec:	b004      	add	sp, #16
  400aee:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t val = 0;
  400af0:	ac04      	add	r4, sp, #16
  400af2:	2300      	movs	r3, #0
  400af4:	f844 3d0c 	str.w	r3, [r4, #-12]!
		while (usart_read(p_usart, &val));
  400af8:	4e09      	ldr	r6, [pc, #36]	; (400b20 <USART1_Handler+0x48>)
  400afa:	4d0b      	ldr	r5, [pc, #44]	; (400b28 <USART1_Handler+0x50>)
  400afc:	4621      	mov	r1, r4
  400afe:	4630      	mov	r0, r6
  400b00:	47a8      	blx	r5
  400b02:	2800      	cmp	r0, #0
  400b04:	d1fa      	bne.n	400afc <USART1_Handler+0x24>
		*data = (uint8_t)(val & 0xFF);
  400b06:	9b01      	ldr	r3, [sp, #4]
  400b08:	f88d 300b 	strb.w	r3, [sp, #11]
    xQueueSendFromISR(get_rx_queue(), (void *)&c, &xHigherPriorityTaskWoken);
  400b0c:	4b07      	ldr	r3, [pc, #28]	; (400b2c <USART1_Handler+0x54>)
  400b0e:	4798      	blx	r3
  400b10:	2300      	movs	r3, #0
  400b12:	aa03      	add	r2, sp, #12
  400b14:	f10d 010b 	add.w	r1, sp, #11
  400b18:	4c05      	ldr	r4, [pc, #20]	; (400b30 <USART1_Handler+0x58>)
  400b1a:	47a0      	blx	r4
}
  400b1c:	e7e6      	b.n	400aec <USART1_Handler+0x14>
  400b1e:	bf00      	nop
  400b20:	40028000 	.word	0x40028000
  400b24:	004022c1 	.word	0x004022c1
  400b28:	004022e3 	.word	0x004022e3
  400b2c:	00401121 	.word	0x00401121
  400b30:	00402e79 	.word	0x00402e79

00400b34 <configure_input>:
// -------------------------------------------------------------------------------

// configure input ---------------------------------------------------------------
void configure_input(Pio *p_pio, uint32_t ul_id, const uint32_t ul_mask, const uint32_t ul_attribute,
                     const uint32_t ul_cut_off, uint32_t ul_attr, void (*p_handler)(uint32_t, uint32_t))
{
  400b34:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b36:	b083      	sub	sp, #12
  400b38:	4605      	mov	r5, r0
  400b3a:	460c      	mov	r4, r1
  400b3c:	4616      	mov	r6, r2
    pio_configure(p_pio, PIO_INPUT, ul_mask, ul_attribute);
  400b3e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400b42:	4f17      	ldr	r7, [pc, #92]	; (400ba0 <configure_input+0x6c>)
  400b44:	47b8      	blx	r7
    pio_set_debounce_filter(p_pio, ul_mask, ul_cut_off);
  400b46:	9a08      	ldr	r2, [sp, #32]
  400b48:	4631      	mov	r1, r6
  400b4a:	4628      	mov	r0, r5
  400b4c:	4b15      	ldr	r3, [pc, #84]	; (400ba4 <configure_input+0x70>)
  400b4e:	4798      	blx	r3
    pio_handler_set(p_pio,
  400b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  400b52:	9300      	str	r3, [sp, #0]
  400b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
  400b56:	4632      	mov	r2, r6
  400b58:	4621      	mov	r1, r4
  400b5a:	4628      	mov	r0, r5
  400b5c:	4f12      	ldr	r7, [pc, #72]	; (400ba8 <configure_input+0x74>)
  400b5e:	47b8      	blx	r7
                    ul_id,
                    ul_mask,
                    ul_attr,
                    p_handler);
    pio_enable_interrupt(p_pio, ul_mask);
  400b60:	4631      	mov	r1, r6
  400b62:	4628      	mov	r0, r5
  400b64:	4b11      	ldr	r3, [pc, #68]	; (400bac <configure_input+0x78>)
  400b66:	4798      	blx	r3
    pio_get_interrupt_status(p_pio);
  400b68:	4628      	mov	r0, r5
  400b6a:	4b11      	ldr	r3, [pc, #68]	; (400bb0 <configure_input+0x7c>)
  400b6c:	4798      	blx	r3
    NVIC_EnableIRQ(ul_id);
  400b6e:	b262      	sxtb	r2, r4
  400b70:	0950      	lsrs	r0, r2, #5
  400b72:	b2e4      	uxtb	r4, r4
  400b74:	f004 011f 	and.w	r1, r4, #31
  400b78:	2301      	movs	r3, #1
  400b7a:	408b      	lsls	r3, r1
  400b7c:	490d      	ldr	r1, [pc, #52]	; (400bb4 <configure_input+0x80>)
  400b7e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  if(IRQn < 0) {
  400b82:	2a00      	cmp	r2, #0
  400b84:	db06      	blt.n	400b94 <configure_input+0x60>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400b86:	4b0b      	ldr	r3, [pc, #44]	; (400bb4 <configure_input+0x80>)
  400b88:	4413      	add	r3, r2
  400b8a:	2280      	movs	r2, #128	; 0x80
  400b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_SetPriority(ul_id, 4);
}
  400b90:	b003      	add	sp, #12
  400b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400b94:	f004 040f 	and.w	r4, r4, #15
  400b98:	4b07      	ldr	r3, [pc, #28]	; (400bb8 <configure_input+0x84>)
  400b9a:	2280      	movs	r2, #128	; 0x80
  400b9c:	551a      	strb	r2, [r3, r4]
  400b9e:	e7f7      	b.n	400b90 <configure_input+0x5c>
  400ba0:	00401e41 	.word	0x00401e41
  400ba4:	00401d2d 	.word	0x00401d2d
  400ba8:	00401f6d 	.word	0x00401f6d
  400bac:	00401f0f 	.word	0x00401f0f
  400bb0:	00401f13 	.word	0x00401f13
  400bb4:	e000e100 	.word	0xe000e100
  400bb8:	e000ed14 	.word	0xe000ed14

00400bbc <configure_console>:
// -------------------------------------------------------------------------------

// configure console -------------------------------------------------------------
void configure_console(void)
{
  400bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  400bbe:	b087      	sub	sp, #28
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400bc0:	4c1e      	ldr	r4, [pc, #120]	; (400c3c <configure_console+0x80>)
  400bc2:	4b1f      	ldr	r3, [pc, #124]	; (400c40 <configure_console+0x84>)
  400bc4:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400bc6:	4a1f      	ldr	r2, [pc, #124]	; (400c44 <configure_console+0x88>)
  400bc8:	4b1f      	ldr	r3, [pc, #124]	; (400c48 <configure_console+0x8c>)
  400bca:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400bcc:	4a1f      	ldr	r2, [pc, #124]	; (400c4c <configure_console+0x90>)
  400bce:	4b20      	ldr	r3, [pc, #128]	; (400c50 <configure_console+0x94>)
  400bd0:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  400bd2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400bd6:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  400bd8:	23c0      	movs	r3, #192	; 0xc0
  400bda:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  400bdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400be0:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  400be2:	2500      	movs	r5, #0
  400be4:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400be6:	9504      	str	r5, [sp, #16]
  400be8:	200e      	movs	r0, #14
  400bea:	4b1a      	ldr	r3, [pc, #104]	; (400c54 <configure_console+0x98>)
  400bec:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  400bee:	4a1a      	ldr	r2, [pc, #104]	; (400c58 <configure_console+0x9c>)
  400bf0:	4669      	mov	r1, sp
  400bf2:	4620      	mov	r0, r4
  400bf4:	4b19      	ldr	r3, [pc, #100]	; (400c5c <configure_console+0xa0>)
  400bf6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  400bf8:	4620      	mov	r0, r4
  400bfa:	4b19      	ldr	r3, [pc, #100]	; (400c60 <configure_console+0xa4>)
  400bfc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400bfe:	4620      	mov	r0, r4
  400c00:	4b18      	ldr	r3, [pc, #96]	; (400c64 <configure_console+0xa8>)
  400c02:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400c04:	4f18      	ldr	r7, [pc, #96]	; (400c68 <configure_console+0xac>)
  400c06:	683b      	ldr	r3, [r7, #0]
  400c08:	4629      	mov	r1, r5
  400c0a:	6898      	ldr	r0, [r3, #8]
  400c0c:	4e17      	ldr	r6, [pc, #92]	; (400c6c <configure_console+0xb0>)
  400c0e:	47b0      	blx	r6
	setbuf(stdin, NULL);
  400c10:	683b      	ldr	r3, [r7, #0]
  400c12:	4629      	mov	r1, r5
  400c14:	6858      	ldr	r0, [r3, #4]
  400c16:	47b0      	blx	r6

    /* Configure console UART. */
    stdio_serial_init(CONSOLE_UART, &uart_serial_options);

    /* Specify that stdout should not be buffered. */
    setbuf(stdout, NULL);
  400c18:	683b      	ldr	r3, [r7, #0]
  400c1a:	4629      	mov	r1, r5
  400c1c:	6898      	ldr	r0, [r3, #8]
  400c1e:	47b0      	blx	r6

    /* ativando interrupcao */
    usart_enable_interrupt(CONSOLE_UART, US_IER_RXRDY);
  400c20:	2101      	movs	r1, #1
  400c22:	4620      	mov	r0, r4
  400c24:	4b12      	ldr	r3, [pc, #72]	; (400c70 <configure_console+0xb4>)
  400c26:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400c28:	4b12      	ldr	r3, [pc, #72]	; (400c74 <configure_console+0xb8>)
  400c2a:	2280      	movs	r2, #128	; 0x80
  400c2c:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400c30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400c34:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(CONSOLE_UART_ID, 4);
    NVIC_EnableIRQ(CONSOLE_UART_ID);
}
  400c36:	b007      	add	sp, #28
  400c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400c3a:	bf00      	nop
  400c3c:	40028000 	.word	0x40028000
  400c40:	20400e98 	.word	0x20400e98
  400c44:	00400861 	.word	0x00400861
  400c48:	20400e94 	.word	0x20400e94
  400c4c:	00400785 	.word	0x00400785
  400c50:	20400e90 	.word	0x20400e90
  400c54:	00402161 	.word	0x00402161
  400c58:	08f0d180 	.word	0x08f0d180
  400c5c:	0040225d 	.word	0x0040225d
  400c60:	004022b1 	.word	0x004022b1
  400c64:	004022b7 	.word	0x004022b7
  400c68:	20400024 	.word	0x20400024
  400c6c:	00404f01 	.word	0x00404f01
  400c70:	004022bd 	.word	0x004022bd
  400c74:	e000e100 	.word	0xe000e100

00400c78 <configure_afec>:
// -------------------------------------------------------------------------------

// configure AFEC ----------------------------------------------------------------
void configure_afec(Afec *afec, uint32_t afec_id, uint32_t afec_channel, afec_callback_t callback)
{
  400c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c7c:	b08a      	sub	sp, #40	; 0x28
  400c7e:	4604      	mov	r4, r0
  400c80:	460d      	mov	r5, r1
  400c82:	4616      	mov	r6, r2
  400c84:	4698      	mov	r8, r3
    afec_enable(afec);
  400c86:	4b21      	ldr	r3, [pc, #132]	; (400d0c <configure_afec+0x94>)
  400c88:	4798      	blx	r3
    struct afec_config afec_cfg;
    afec_get_config_defaults(&afec_cfg);
  400c8a:	a804      	add	r0, sp, #16
  400c8c:	4b20      	ldr	r3, [pc, #128]	; (400d10 <configure_afec+0x98>)
  400c8e:	4798      	blx	r3
    afec_init(afec, &afec_cfg);
  400c90:	a904      	add	r1, sp, #16
  400c92:	4620      	mov	r0, r4
  400c94:	4b1f      	ldr	r3, [pc, #124]	; (400d14 <configure_afec+0x9c>)
  400c96:	4798      	blx	r3
	reg = afec->AFEC_MR;
  400c98:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  400c9a:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  400c9e:	6063      	str	r3, [r4, #4]
    afec_set_trigger(afec, AFEC_TRIG_SW);

    struct afec_ch_config afec_ch_cfg;
    afec_ch_get_config_defaults(&afec_ch_cfg);
  400ca0:	a803      	add	r0, sp, #12
  400ca2:	4b1d      	ldr	r3, [pc, #116]	; (400d18 <configure_afec+0xa0>)
  400ca4:	4798      	blx	r3
    afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  400ca6:	2300      	movs	r3, #0
  400ca8:	f88d 300d 	strb.w	r3, [sp, #13]
    afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  400cac:	b2b7      	uxth	r7, r6
  400cae:	aa03      	add	r2, sp, #12
  400cb0:	4639      	mov	r1, r7
  400cb2:	4620      	mov	r0, r4
  400cb4:	4b19      	ldr	r3, [pc, #100]	; (400d1c <configure_afec+0xa4>)
  400cb6:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  400cb8:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400cba:	f44f 7300 	mov.w	r3, #512	; 0x200
  400cbe:	66e3      	str	r3, [r4, #108]	; 0x6c

    afec_channel_set_analog_offset(afec, afec_channel, 0x200);
    struct afec_temp_sensor_config afec_temp_sensor_cfg;

    afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  400cc0:	a801      	add	r0, sp, #4
  400cc2:	4b17      	ldr	r3, [pc, #92]	; (400d20 <configure_afec+0xa8>)
  400cc4:	4798      	blx	r3
    afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  400cc6:	a901      	add	r1, sp, #4
  400cc8:	4620      	mov	r0, r4
  400cca:	4b16      	ldr	r3, [pc, #88]	; (400d24 <configure_afec+0xac>)
  400ccc:	4798      	blx	r3

    afec_set_callback(afec, afec_channel, callback, 1);
  400cce:	2301      	movs	r3, #1
  400cd0:	4642      	mov	r2, r8
  400cd2:	4631      	mov	r1, r6
  400cd4:	4620      	mov	r0, r4
  400cd6:	4c14      	ldr	r4, [pc, #80]	; (400d28 <configure_afec+0xb0>)
  400cd8:	47a0      	blx	r4
    NVIC_SetPriority(afec_id, 4);
  400cda:	b26b      	sxtb	r3, r5
  if(IRQn < 0) {
  400cdc:	2b00      	cmp	r3, #0
  400cde:	db0e      	blt.n	400cfe <configure_afec+0x86>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400ce0:	4a12      	ldr	r2, [pc, #72]	; (400d2c <configure_afec+0xb4>)
  400ce2:	2180      	movs	r1, #128	; 0x80
  400ce4:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400ce6:	095b      	lsrs	r3, r3, #5
  400ce8:	f005 051f 	and.w	r5, r5, #31
  400cec:	2201      	movs	r2, #1
  400cee:	fa02 f505 	lsl.w	r5, r2, r5
  400cf2:	4a0f      	ldr	r2, [pc, #60]	; (400d30 <configure_afec+0xb8>)
  400cf4:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    NVIC_EnableIRQ(afec_id);
}
  400cf8:	b00a      	add	sp, #40	; 0x28
  400cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400cfe:	f005 010f 	and.w	r1, r5, #15
  400d02:	4a0c      	ldr	r2, [pc, #48]	; (400d34 <configure_afec+0xbc>)
  400d04:	440a      	add	r2, r1
  400d06:	2180      	movs	r1, #128	; 0x80
  400d08:	7611      	strb	r1, [r2, #24]
  400d0a:	e7ec      	b.n	400ce6 <configure_afec+0x6e>
  400d0c:	00400449 	.word	0x00400449
  400d10:	00400279 	.word	0x00400279
  400d14:	004002c9 	.word	0x004002c9
  400d18:	004002a9 	.word	0x004002a9
  400d1c:	00400235 	.word	0x00400235
  400d20:	004002b3 	.word	0x004002b3
  400d24:	00400265 	.word	0x00400265
  400d28:	004003c9 	.word	0x004003c9
  400d2c:	e000e400 	.word	0xe000e400
  400d30:	e000e100 	.word	0xe000e100
  400d34:	e000ecfc 	.word	0xe000ecfc

00400d38 <init_hw>:
{
  400d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d3c:	b084      	sub	sp, #16
    sysclk_init();
  400d3e:	4b4b      	ldr	r3, [pc, #300]	; (400e6c <init_hw+0x134>)
  400d40:	4798      	blx	r3
    board_init();
  400d42:	4b4b      	ldr	r3, [pc, #300]	; (400e70 <init_hw+0x138>)
  400d44:	4798      	blx	r3
    USART1_init();
  400d46:	4b4b      	ldr	r3, [pc, #300]	; (400e74 <init_hw+0x13c>)
  400d48:	4798      	blx	r3
    configure_console();
  400d4a:	4b4b      	ldr	r3, [pc, #300]	; (400e78 <init_hw+0x140>)
  400d4c:	4798      	blx	r3
    gfx_mono_ssd1306_init();
  400d4e:	4b4b      	ldr	r3, [pc, #300]	; (400e7c <init_hw+0x144>)
  400d50:	4798      	blx	r3
    pmc_enable_periph_clk(ID_PIOA);
  400d52:	200a      	movs	r0, #10
  400d54:	4c4a      	ldr	r4, [pc, #296]	; (400e80 <init_hw+0x148>)
  400d56:	47a0      	blx	r4
    pmc_enable_periph_clk(ID_PIOB);
  400d58:	200b      	movs	r0, #11
  400d5a:	47a0      	blx	r4
    pmc_enable_periph_clk(ID_PIOC);
  400d5c:	200c      	movs	r0, #12
  400d5e:	47a0      	blx	r4
    pmc_enable_periph_clk(ID_PIOD);
  400d60:	2010      	movs	r0, #16
  400d62:	47a0      	blx	r4
    configure_input(BUT_PIO, BUT_PIO_ID, BUT_PIO_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE, 60, PIO_IT_FALL_EDGE, but_callback);
  400d64:	4f47      	ldr	r7, [pc, #284]	; (400e84 <init_hw+0x14c>)
  400d66:	4b48      	ldr	r3, [pc, #288]	; (400e88 <init_hw+0x150>)
  400d68:	9302      	str	r3, [sp, #8]
  400d6a:	f04f 0850 	mov.w	r8, #80	; 0x50
  400d6e:	f8cd 8004 	str.w	r8, [sp, #4]
  400d72:	263c      	movs	r6, #60	; 0x3c
  400d74:	9600      	str	r6, [sp, #0]
  400d76:	2309      	movs	r3, #9
  400d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d7c:	210a      	movs	r1, #10
  400d7e:	4638      	mov	r0, r7
  400d80:	4d42      	ldr	r5, [pc, #264]	; (400e8c <init_hw+0x154>)
  400d82:	47a8      	blx	r5
    configure_input(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE, 60, PIO_IT_FALL_EDGE, but1_callback);
  400d84:	4b42      	ldr	r3, [pc, #264]	; (400e90 <init_hw+0x158>)
  400d86:	9302      	str	r3, [sp, #8]
  400d88:	f8cd 8004 	str.w	r8, [sp, #4]
  400d8c:	9600      	str	r6, [sp, #0]
  400d8e:	2309      	movs	r3, #9
  400d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d94:	2110      	movs	r1, #16
  400d96:	483f      	ldr	r0, [pc, #252]	; (400e94 <init_hw+0x15c>)
  400d98:	47a8      	blx	r5
    configure_input(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE, 60, PIO_IT_FALL_EDGE, but2_callback);
  400d9a:	4c3f      	ldr	r4, [pc, #252]	; (400e98 <init_hw+0x160>)
  400d9c:	4b3f      	ldr	r3, [pc, #252]	; (400e9c <init_hw+0x164>)
  400d9e:	9302      	str	r3, [sp, #8]
  400da0:	f8cd 8004 	str.w	r8, [sp, #4]
  400da4:	9600      	str	r6, [sp, #0]
  400da6:	2309      	movs	r3, #9
  400da8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400dac:	210c      	movs	r1, #12
  400dae:	4620      	mov	r0, r4
  400db0:	47a8      	blx	r5
    configure_input(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE, 60, PIO_IT_FALL_EDGE, but3_callback);
  400db2:	4b3b      	ldr	r3, [pc, #236]	; (400ea0 <init_hw+0x168>)
  400db4:	9302      	str	r3, [sp, #8]
  400db6:	f8cd 8004 	str.w	r8, [sp, #4]
  400dba:	9600      	str	r6, [sp, #0]
  400dbc:	2309      	movs	r3, #9
  400dbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400dc2:	210a      	movs	r1, #10
  400dc4:	4638      	mov	r0, r7
  400dc6:	47a8      	blx	r5
    configure_afec(AFEC_POT, AFEC_POT_ID, AFEC_POT_CHANNEL, pot_callback);
  400dc8:	4d36      	ldr	r5, [pc, #216]	; (400ea4 <init_hw+0x16c>)
  400dca:	4b37      	ldr	r3, [pc, #220]	; (400ea8 <init_hw+0x170>)
  400dcc:	2200      	movs	r2, #0
  400dce:	211d      	movs	r1, #29
  400dd0:	4628      	mov	r0, r5
  400dd2:	4e36      	ldr	r6, [pc, #216]	; (400eac <init_hw+0x174>)
  400dd4:	47b0      	blx	r6
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400dd6:	2601      	movs	r6, #1
  400dd8:	616e      	str	r6, [r5, #20]
    pio_configure(LED_PIO, PIO_OUTPUT_0, LED_PIO_IDX_MASK, PIO_DEFAULT);
  400dda:	2300      	movs	r3, #0
  400ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
  400de0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400de4:	4620      	mov	r0, r4
  400de6:	4d32      	ldr	r5, [pc, #200]	; (400eb0 <init_hw+0x178>)
  400de8:	47a8      	blx	r5
    pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_PIO_IDX_MASK, PIO_DEFAULT);
  400dea:	2300      	movs	r3, #0
  400dec:	4632      	mov	r2, r6
  400dee:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400df2:	4638      	mov	r0, r7
  400df4:	47a8      	blx	r5
    pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  400df6:	2300      	movs	r3, #0
  400df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400dfc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400e00:	4620      	mov	r0, r4
  400e02:	47a8      	blx	r5
    pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_PIO_IDX_MASK, PIO_DEFAULT);
  400e04:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 400ec8 <init_hw+0x190>
  400e08:	2300      	movs	r3, #0
  400e0a:	2204      	movs	r2, #4
  400e0c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400e10:	4640      	mov	r0, r8
  400e12:	47a8      	blx	r5
    pio_set(LED_PIO, LED_PIO_IDX_MASK);
  400e14:	f44f 7180 	mov.w	r1, #256	; 0x100
  400e18:	4620      	mov	r0, r4
  400e1a:	4d26      	ldr	r5, [pc, #152]	; (400eb4 <init_hw+0x17c>)
  400e1c:	47a8      	blx	r5
    pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  400e1e:	4631      	mov	r1, r6
  400e20:	4638      	mov	r0, r7
  400e22:	47a8      	blx	r5
    pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  400e24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400e28:	4620      	mov	r0, r4
  400e2a:	47a8      	blx	r5
    pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  400e2c:	2104      	movs	r1, #4
  400e2e:	4640      	mov	r0, r8
  400e30:	47a8      	blx	r5
    TC_init(TC0, ID_TC0, 0, 10);
  400e32:	4d21      	ldr	r5, [pc, #132]	; (400eb8 <init_hw+0x180>)
  400e34:	230a      	movs	r3, #10
  400e36:	2200      	movs	r2, #0
  400e38:	2117      	movs	r1, #23
  400e3a:	4628      	mov	r0, r5
  400e3c:	4c1f      	ldr	r4, [pc, #124]	; (400ebc <init_hw+0x184>)
  400e3e:	47a0      	blx	r4
    tc_start(TC0, 0);
  400e40:	2100      	movs	r1, #0
  400e42:	4628      	mov	r0, r5
  400e44:	4b1e      	ldr	r3, [pc, #120]	; (400ec0 <init_hw+0x188>)
  400e46:	4798      	blx	r3
    TC_init(TC0, ID_TC1, 1, 5);
  400e48:	2305      	movs	r3, #5
  400e4a:	4632      	mov	r2, r6
  400e4c:	2118      	movs	r1, #24
  400e4e:	4628      	mov	r0, r5
  400e50:	47a0      	blx	r4
    TC_init(TC0, ID_TC2, 2, 5);
  400e52:	2305      	movs	r3, #5
  400e54:	2202      	movs	r2, #2
  400e56:	2119      	movs	r1, #25
  400e58:	4628      	mov	r0, r5
  400e5a:	47a0      	blx	r4
    TC_init(TC1, ID_TC3, 0, 5);
  400e5c:	2305      	movs	r3, #5
  400e5e:	2200      	movs	r2, #0
  400e60:	211a      	movs	r1, #26
  400e62:	4818      	ldr	r0, [pc, #96]	; (400ec4 <init_hw+0x18c>)
  400e64:	47a0      	blx	r4
}
  400e66:	b004      	add	sp, #16
  400e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e6c:	00401a99 	.word	0x00401a99
  400e70:	00401b95 	.word	0x00401b95
  400e74:	00400a09 	.word	0x00400a09
  400e78:	00400bbd 	.word	0x00400bbd
  400e7c:	00401779 	.word	0x00401779
  400e80:	00402161 	.word	0x00402161
  400e84:	400e0e00 	.word	0x400e0e00
  400e88:	00400935 	.word	0x00400935
  400e8c:	00400b35 	.word	0x00400b35
  400e90:	0040095d 	.word	0x0040095d
  400e94:	400e1400 	.word	0x400e1400
  400e98:	400e1200 	.word	0x400e1200
  400e9c:	00400985 	.word	0x00400985
  400ea0:	004009ad 	.word	0x004009ad
  400ea4:	4003c000 	.word	0x4003c000
  400ea8:	004009d5 	.word	0x004009d5
  400eac:	00400c79 	.word	0x00400c79
  400eb0:	00401e41 	.word	0x00401e41
  400eb4:	00401d47 	.word	0x00401d47
  400eb8:	4000c000 	.word	0x4000c000
  400ebc:	00401285 	.word	0x00401285
  400ec0:	0040061d 	.word	0x0040061d
  400ec4:	40010000 	.word	0x40010000
  400ec8:	400e1000 	.word	0x400e1000

00400ecc <task_oled>:
}
// -------------------------------------------------------------------------------

// RTOS tasks --------------------------------------------------------------------
void task_oled(void *pvParameters)
{
  400ecc:	b570      	push	{r4, r5, r6, lr}
    gfx_mono_draw_string("Exemplo RTOS", 0, 0, &sysfont);
  400ece:	4d10      	ldr	r5, [pc, #64]	; (400f10 <task_oled+0x44>)
  400ed0:	462b      	mov	r3, r5
  400ed2:	2200      	movs	r2, #0
  400ed4:	4611      	mov	r1, r2
  400ed6:	480f      	ldr	r0, [pc, #60]	; (400f14 <task_oled+0x48>)
  400ed8:	4c0f      	ldr	r4, [pc, #60]	; (400f18 <task_oled+0x4c>)
  400eda:	47a0      	blx	r4
    gfx_mono_draw_string("oii", 0, 20, &sysfont);
  400edc:	462b      	mov	r3, r5
  400ede:	2214      	movs	r2, #20
  400ee0:	2100      	movs	r1, #0
  400ee2:	480e      	ldr	r0, [pc, #56]	; (400f1c <task_oled+0x50>)
  400ee4:	47a0      	blx	r4

    for (;;)
    {
        // apenas para demonstrar o funcionamento das coisas
        // voc� deve remover isso!
        coffee_heat_on();
  400ee6:	4e0e      	ldr	r6, [pc, #56]	; (400f20 <task_oled+0x54>)
        vTaskDelay(2000);
  400ee8:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  400eec:	4c0d      	ldr	r4, [pc, #52]	; (400f24 <task_oled+0x58>)
        coffee_heat_on();
  400eee:	47b0      	blx	r6
        vTaskDelay(2000);
  400ef0:	4628      	mov	r0, r5
  400ef2:	47a0      	blx	r4
        coffe_pump_on();
  400ef4:	4b0c      	ldr	r3, [pc, #48]	; (400f28 <task_oled+0x5c>)
  400ef6:	4798      	blx	r3
        vTaskDelay(2000);
  400ef8:	4628      	mov	r0, r5
  400efa:	47a0      	blx	r4
        coffe_pump_off();
  400efc:	4b0b      	ldr	r3, [pc, #44]	; (400f2c <task_oled+0x60>)
  400efe:	4798      	blx	r3
        vTaskDelay(2000);
  400f00:	4628      	mov	r0, r5
  400f02:	47a0      	blx	r4
        coffee_heat_off();
  400f04:	4b0a      	ldr	r3, [pc, #40]	; (400f30 <task_oled+0x64>)
  400f06:	4798      	blx	r3
        vTaskDelay(2000);
  400f08:	4628      	mov	r0, r5
  400f0a:	47a0      	blx	r4
  400f0c:	e7ef      	b.n	400eee <task_oled+0x22>
  400f0e:	bf00      	nop
  400f10:	2040000c 	.word	0x2040000c
  400f14:	00407484 	.word	0x00407484
  400f18:	004016e1 	.word	0x004016e1
  400f1c:	00407494 	.word	0x00407494
  400f20:	004014c9 	.word	0x004014c9
  400f24:	00403881 	.word	0x00403881
  400f28:	00401469 	.word	0x00401469
  400f2c:	00401499 	.word	0x00401499
  400f30:	004014e5 	.word	0x004014e5

00400f34 <task_adc>:
        }
    }
}

void task_adc(void *pvParameters)
{
  400f34:	b500      	push	{lr}
  400f36:	b083      	sub	sp, #12
    uint32_t adc;
    while (1)
    {
        if (xQueueReceive(xQueueADC, &(adc), 1000))
  400f38:	4d09      	ldr	r5, [pc, #36]	; (400f60 <task_adc+0x2c>)
  400f3a:	4c0a      	ldr	r4, [pc, #40]	; (400f64 <task_adc+0x30>)
            printf("adc: %d\n", adc);
        else
            printf("Nao chegou um novo dado em 1 segundo");
  400f3c:	4e0a      	ldr	r6, [pc, #40]	; (400f68 <task_adc+0x34>)
  400f3e:	e002      	b.n	400f46 <task_adc+0x12>
  400f40:	4630      	mov	r0, r6
  400f42:	4b0a      	ldr	r3, [pc, #40]	; (400f6c <task_adc+0x38>)
  400f44:	4798      	blx	r3
        if (xQueueReceive(xQueueADC, &(adc), 1000))
  400f46:	6828      	ldr	r0, [r5, #0]
  400f48:	2300      	movs	r3, #0
  400f4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400f4e:	a901      	add	r1, sp, #4
  400f50:	47a0      	blx	r4
  400f52:	2800      	cmp	r0, #0
  400f54:	d0f4      	beq.n	400f40 <task_adc+0xc>
            printf("adc: %d\n", adc);
  400f56:	9901      	ldr	r1, [sp, #4]
  400f58:	4805      	ldr	r0, [pc, #20]	; (400f70 <task_adc+0x3c>)
  400f5a:	4b04      	ldr	r3, [pc, #16]	; (400f6c <task_adc+0x38>)
  400f5c:	4798      	blx	r3
  400f5e:	e7f2      	b.n	400f46 <task_adc+0x12>
  400f60:	20400e84 	.word	0x20400e84
  400f64:	00402f79 	.word	0x00402f79
  400f68:	0040743c 	.word	0x0040743c
  400f6c:	0040474d 	.word	0x0040474d
  400f70:	00407430 	.word	0x00407430

00400f74 <task_but>:
{
  400f74:	b580      	push	{r7, lr}
  400f76:	b082      	sub	sp, #8
                pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  400f78:	4f30      	ldr	r7, [pc, #192]	; (40103c <task_but+0xc8>)
                pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  400f7a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 401084 <task_but+0x110>
  400f7e:	e05a      	b.n	401036 <task_but+0xc2>
                tc_stop(TC0, 1);
  400f80:	4e2f      	ldr	r6, [pc, #188]	; (401040 <task_but+0xcc>)
  400f82:	2101      	movs	r1, #1
  400f84:	4630      	mov	r0, r6
  400f86:	4c2f      	ldr	r4, [pc, #188]	; (401044 <task_but+0xd0>)
  400f88:	47a0      	blx	r4
                tc_stop(TC0, 2);
  400f8a:	2102      	movs	r1, #2
  400f8c:	4630      	mov	r0, r6
  400f8e:	47a0      	blx	r4
                tc_stop(TC1, 0);
  400f90:	2100      	movs	r1, #0
  400f92:	482d      	ldr	r0, [pc, #180]	; (401048 <task_but+0xd4>)
  400f94:	47a0      	blx	r4
                pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  400f96:	2101      	movs	r1, #1
  400f98:	4640      	mov	r0, r8
  400f9a:	4c2c      	ldr	r4, [pc, #176]	; (40104c <task_but+0xd8>)
  400f9c:	47a0      	blx	r4
                pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  400f9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400fa2:	4638      	mov	r0, r7
  400fa4:	47a0      	blx	r4
                pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  400fa6:	2104      	movs	r1, #4
  400fa8:	4829      	ldr	r0, [pc, #164]	; (401050 <task_but+0xdc>)
  400faa:	47a0      	blx	r4
  400fac:	e028      	b.n	401000 <task_but+0x8c>
                char p[] = {'U', 0, 0, 'X'};
  400fae:	4b29      	ldr	r3, [pc, #164]	; (401054 <task_but+0xe0>)
  400fb0:	681b      	ldr	r3, [r3, #0]
  400fb2:	a802      	add	r0, sp, #8
  400fb4:	f840 3d08 	str.w	r3, [r0, #-8]!
                send_package(p, 4);
  400fb8:	2104      	movs	r1, #4
  400fba:	4b27      	ldr	r3, [pc, #156]	; (401058 <task_but+0xe4>)
  400fbc:	4798      	blx	r3
                tc_start(TC0, 1);
  400fbe:	2101      	movs	r1, #1
  400fc0:	481f      	ldr	r0, [pc, #124]	; (401040 <task_but+0xcc>)
  400fc2:	4b26      	ldr	r3, [pc, #152]	; (40105c <task_but+0xe8>)
  400fc4:	4798      	blx	r3
                clear_screen();
  400fc6:	4b26      	ldr	r3, [pc, #152]	; (401060 <task_but+0xec>)
  400fc8:	4798      	blx	r3
                draw_string("btn1");
  400fca:	4826      	ldr	r0, [pc, #152]	; (401064 <task_but+0xf0>)
  400fcc:	4b26      	ldr	r3, [pc, #152]	; (401068 <task_but+0xf4>)
  400fce:	4798      	blx	r3
  400fd0:	e01a      	b.n	401008 <task_but+0x94>
            if (queue == '3')
  400fd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400fd6:	2b33      	cmp	r3, #51	; 0x33
  400fd8:	d024      	beq.n	401024 <task_but+0xb0>
        if (xQueueReceive(xQueueBut, &queue, (TickType_t)500))
  400fda:	4c24      	ldr	r4, [pc, #144]	; (40106c <task_but+0xf8>)
  400fdc:	6828      	ldr	r0, [r5, #0]
  400fde:	2300      	movs	r3, #0
  400fe0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400fe4:	f10d 0107 	add.w	r1, sp, #7
  400fe8:	47a0      	blx	r4
  400fea:	2800      	cmp	r0, #0
  400fec:	d0f6      	beq.n	400fdc <task_but+0x68>
            printf("but%c\n", queue);
  400fee:	f89d 1007 	ldrb.w	r1, [sp, #7]
  400ff2:	481f      	ldr	r0, [pc, #124]	; (401070 <task_but+0xfc>)
  400ff4:	4b1f      	ldr	r3, [pc, #124]	; (401074 <task_but+0x100>)
  400ff6:	4798      	blx	r3
            if (queue == '0')
  400ff8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  400ffc:	2b30      	cmp	r3, #48	; 0x30
  400ffe:	d0bf      	beq.n	400f80 <task_but+0xc>
            if (queue == '1')
  401000:	f89d 3007 	ldrb.w	r3, [sp, #7]
  401004:	2b31      	cmp	r3, #49	; 0x31
  401006:	d0d2      	beq.n	400fae <task_but+0x3a>
            if (queue == '2')
  401008:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40100c:	2b32      	cmp	r3, #50	; 0x32
  40100e:	d1e0      	bne.n	400fd2 <task_but+0x5e>
                tc_start(TC0, 2);
  401010:	2102      	movs	r1, #2
  401012:	480b      	ldr	r0, [pc, #44]	; (401040 <task_but+0xcc>)
  401014:	4b11      	ldr	r3, [pc, #68]	; (40105c <task_but+0xe8>)
  401016:	4798      	blx	r3
                clear_screen();
  401018:	4b11      	ldr	r3, [pc, #68]	; (401060 <task_but+0xec>)
  40101a:	4798      	blx	r3
                draw_string("btn2");
  40101c:	4816      	ldr	r0, [pc, #88]	; (401078 <task_but+0x104>)
  40101e:	4b12      	ldr	r3, [pc, #72]	; (401068 <task_but+0xf4>)
  401020:	4798      	blx	r3
  401022:	e7d6      	b.n	400fd2 <task_but+0x5e>
                tc_start(TC1, 0);
  401024:	2100      	movs	r1, #0
  401026:	4808      	ldr	r0, [pc, #32]	; (401048 <task_but+0xd4>)
  401028:	4b0c      	ldr	r3, [pc, #48]	; (40105c <task_but+0xe8>)
  40102a:	4798      	blx	r3
                clear_screen();
  40102c:	4b0c      	ldr	r3, [pc, #48]	; (401060 <task_but+0xec>)
  40102e:	4798      	blx	r3
                draw_string("btn3");
  401030:	4812      	ldr	r0, [pc, #72]	; (40107c <task_but+0x108>)
  401032:	4b0d      	ldr	r3, [pc, #52]	; (401068 <task_but+0xf4>)
  401034:	4798      	blx	r3
        if (xQueueReceive(xQueueBut, &queue, (TickType_t)500))
  401036:	4d12      	ldr	r5, [pc, #72]	; (401080 <task_but+0x10c>)
  401038:	e7cf      	b.n	400fda <task_but+0x66>
  40103a:	bf00      	nop
  40103c:	400e1200 	.word	0x400e1200
  401040:	4000c000 	.word	0x4000c000
  401044:	00400625 	.word	0x00400625
  401048:	40010000 	.word	0x40010000
  40104c:	00401d47 	.word	0x00401d47
  401050:	400e1000 	.word	0x400e1000
  401054:	0040739c 	.word	0x0040739c
  401058:	00400729 	.word	0x00400729
  40105c:	0040061d 	.word	0x0040061d
  401060:	004006b5 	.word	0x004006b5
  401064:	0040746c 	.word	0x0040746c
  401068:	004006d1 	.word	0x004006d1
  40106c:	00402f79 	.word	0x00402f79
  401070:	00407464 	.word	0x00407464
  401074:	0040474d 	.word	0x0040474d
  401078:	00407474 	.word	0x00407474
  40107c:	0040747c 	.word	0x0040747c
  401080:	20400e78 	.word	0x20400e78
  401084:	400e0e00 	.word	0x400e0e00

00401088 <task_receive>:
    }
}

void task_receive(void *pvParameters)
{
  401088:	b5f0      	push	{r4, r5, r6, r7, lr}
  40108a:	b08b      	sub	sp, #44	; 0x2c
    char p_data[32];
    char p_cnt = 0;
  40108c:	2400      	movs	r4, #0
    char p_do = 0;

    for (;;)
    {
        char c;
        if (xQueueReceive(xQueueRx, &c, 0))
  40108e:	4e17      	ldr	r6, [pc, #92]	; (4010ec <task_receive+0x64>)
  401090:	4d17      	ldr	r5, [pc, #92]	; (4010f0 <task_receive+0x68>)
        {
            printf("%c\n", c);
  401092:	4f18      	ldr	r7, [pc, #96]	; (4010f4 <task_receive+0x6c>)
  401094:	e004      	b.n	4010a0 <task_receive+0x18>
        }
        if (p_do)
        {
            p_cnt = 0;
            p_do = 0;
            if (p_data[2] == 0xff)
  401096:	f89d 300a 	ldrb.w	r3, [sp, #10]
  40109a:	2bff      	cmp	r3, #255	; 0xff
  40109c:	d01d      	beq.n	4010da <task_receive+0x52>
            p_cnt = 0;
  40109e:	2400      	movs	r4, #0
        if (xQueueReceive(xQueueRx, &c, 0))
  4010a0:	6830      	ldr	r0, [r6, #0]
  4010a2:	2300      	movs	r3, #0
  4010a4:	461a      	mov	r2, r3
  4010a6:	f10d 0107 	add.w	r1, sp, #7
  4010aa:	47a8      	blx	r5
  4010ac:	2800      	cmp	r0, #0
  4010ae:	d0f7      	beq.n	4010a0 <task_receive+0x18>
            printf("%c\n", c);
  4010b0:	f89d 1007 	ldrb.w	r1, [sp, #7]
  4010b4:	4638      	mov	r0, r7
  4010b6:	4b10      	ldr	r3, [pc, #64]	; (4010f8 <task_receive+0x70>)
  4010b8:	4798      	blx	r3
            p_data[p_cnt++] = c;
  4010ba:	1c63      	adds	r3, r4, #1
  4010bc:	b2db      	uxtb	r3, r3
  4010be:	aa0a      	add	r2, sp, #40	; 0x28
  4010c0:	4414      	add	r4, r2
  4010c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
  4010c6:	f804 2c20 	strb.w	r2, [r4, #-32]
            if (p_data[p_cnt - 1] == 'X')
  4010ca:	aa0a      	add	r2, sp, #40	; 0x28
  4010cc:	441a      	add	r2, r3
  4010ce:	f812 2c21 	ldrb.w	r2, [r2, #-33]
  4010d2:	2a58      	cmp	r2, #88	; 0x58
  4010d4:	d0df      	beq.n	401096 <task_receive+0xe>
            p_data[p_cnt++] = c;
  4010d6:	461c      	mov	r4, r3
  4010d8:	e7e2      	b.n	4010a0 <task_receive+0x18>
            {
                vTaskResume(xHandleADC);
  4010da:	4b08      	ldr	r3, [pc, #32]	; (4010fc <task_receive+0x74>)
  4010dc:	6818      	ldr	r0, [r3, #0]
  4010de:	4c08      	ldr	r4, [pc, #32]	; (401100 <task_receive+0x78>)
  4010e0:	47a0      	blx	r4
                vTaskResume(xHandleOled);
  4010e2:	4b08      	ldr	r3, [pc, #32]	; (401104 <task_receive+0x7c>)
  4010e4:	6818      	ldr	r0, [r3, #0]
  4010e6:	47a0      	blx	r4
            p_cnt = 0;
  4010e8:	2400      	movs	r4, #0
  4010ea:	e7d9      	b.n	4010a0 <task_receive+0x18>
  4010ec:	20400e88 	.word	0x20400e88
  4010f0:	00402f79 	.word	0x00402f79
  4010f4:	00407498 	.word	0x00407498
  4010f8:	0040474d 	.word	0x0040474d
  4010fc:	20400e80 	.word	0x20400e80
  401100:	004034cd 	.word	0x004034cd
  401104:	20400e8c 	.word	0x20400e8c

00401108 <get_but_queue>:
QueueHandle_t get_but_queue(void) { return xQueueBut; }
  401108:	4b01      	ldr	r3, [pc, #4]	; (401110 <get_but_queue+0x8>)
  40110a:	6818      	ldr	r0, [r3, #0]
  40110c:	4770      	bx	lr
  40110e:	bf00      	nop
  401110:	20400e78 	.word	0x20400e78

00401114 <get_adc_queue>:
QueueHandle_t get_adc_queue(void) { return xQueueADC; }
  401114:	4b01      	ldr	r3, [pc, #4]	; (40111c <get_adc_queue+0x8>)
  401116:	6818      	ldr	r0, [r3, #0]
  401118:	4770      	bx	lr
  40111a:	bf00      	nop
  40111c:	20400e84 	.word	0x20400e84

00401120 <get_rx_queue>:
QueueHandle_t get_rx_queue(void) { return xQueueRx; }
  401120:	4b01      	ldr	r3, [pc, #4]	; (401128 <get_rx_queue+0x8>)
  401122:	6818      	ldr	r0, [r3, #0]
  401124:	4770      	bx	lr
  401126:	bf00      	nop
  401128:	20400e88 	.word	0x20400e88

0040112c <vApplicationStackOverflowHook>:
{
  40112c:	b508      	push	{r3, lr}
    printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40112e:	460a      	mov	r2, r1
  401130:	4601      	mov	r1, r0
  401132:	4802      	ldr	r0, [pc, #8]	; (40113c <vApplicationStackOverflowHook+0x10>)
  401134:	4b02      	ldr	r3, [pc, #8]	; (401140 <vApplicationStackOverflowHook+0x14>)
  401136:	4798      	blx	r3
  401138:	e7fe      	b.n	401138 <vApplicationStackOverflowHook+0xc>
  40113a:	bf00      	nop
  40113c:	0040749c 	.word	0x0040749c
  401140:	0040474d 	.word	0x0040474d

00401144 <vApplicationTickHook>:
void vApplicationTickHook(void) {}
  401144:	4770      	bx	lr

00401146 <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401146:	f04f 0380 	mov.w	r3, #128	; 0x80
  40114a:	b672      	cpsid	i
  40114c:	f383 8811 	msr	BASEPRI, r3
  401150:	f3bf 8f6f 	isb	sy
  401154:	f3bf 8f4f 	dsb	sy
  401158:	b662      	cpsie	i
  40115a:	e7fe      	b.n	40115a <vApplicationMallocFailedHook+0x14>

0040115c <init_rtos>:
{
  40115c:	b510      	push	{r4, lr}
  40115e:	b084      	sub	sp, #16
    xQueueBut = xQueueCreate(32, sizeof(char));
  401160:	2200      	movs	r2, #0
  401162:	2101      	movs	r1, #1
  401164:	2020      	movs	r0, #32
  401166:	4c2f      	ldr	r4, [pc, #188]	; (401224 <init_rtos+0xc8>)
  401168:	47a0      	blx	r4
  40116a:	4b2f      	ldr	r3, [pc, #188]	; (401228 <init_rtos+0xcc>)
  40116c:	6018      	str	r0, [r3, #0]
    xQueueADC = xQueueCreate(32, sizeof(uint32_t));
  40116e:	2200      	movs	r2, #0
  401170:	2104      	movs	r1, #4
  401172:	2020      	movs	r0, #32
  401174:	47a0      	blx	r4
  401176:	4b2d      	ldr	r3, [pc, #180]	; (40122c <init_rtos+0xd0>)
  401178:	6018      	str	r0, [r3, #0]
    xQueueRx = xQueueCreate(32, sizeof(char));
  40117a:	2200      	movs	r2, #0
  40117c:	2101      	movs	r1, #1
  40117e:	2020      	movs	r0, #32
  401180:	47a0      	blx	r4
  401182:	4b2b      	ldr	r3, [pc, #172]	; (401230 <init_rtos+0xd4>)
  401184:	6018      	str	r0, [r3, #0]
    if (xTaskCreate(task_oled, "oled", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, &xHandleOled) != pdPASS)
  401186:	2300      	movs	r3, #0
  401188:	9303      	str	r3, [sp, #12]
  40118a:	9302      	str	r3, [sp, #8]
  40118c:	4a29      	ldr	r2, [pc, #164]	; (401234 <init_rtos+0xd8>)
  40118e:	9201      	str	r2, [sp, #4]
  401190:	9300      	str	r3, [sp, #0]
  401192:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  401196:	4928      	ldr	r1, [pc, #160]	; (401238 <init_rtos+0xdc>)
  401198:	4828      	ldr	r0, [pc, #160]	; (40123c <init_rtos+0xe0>)
  40119a:	4c29      	ldr	r4, [pc, #164]	; (401240 <init_rtos+0xe4>)
  40119c:	47a0      	blx	r4
  40119e:	2801      	cmp	r0, #1
  4011a0:	d002      	beq.n	4011a8 <init_rtos+0x4c>
        printf("Failed to create oled task\r\n");
  4011a2:	4828      	ldr	r0, [pc, #160]	; (401244 <init_rtos+0xe8>)
  4011a4:	4b28      	ldr	r3, [pc, #160]	; (401248 <init_rtos+0xec>)
  4011a6:	4798      	blx	r3
    if (xTaskCreate(task_adc, "adc", TASK_ADC_STACK_SIZE, NULL, TASK_ADC_STACK_PRIORITY, &xHandleADC) != pdPASS)
  4011a8:	2300      	movs	r3, #0
  4011aa:	9303      	str	r3, [sp, #12]
  4011ac:	9302      	str	r3, [sp, #8]
  4011ae:	4a27      	ldr	r2, [pc, #156]	; (40124c <init_rtos+0xf0>)
  4011b0:	9201      	str	r2, [sp, #4]
  4011b2:	9300      	str	r3, [sp, #0]
  4011b4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  4011b8:	4925      	ldr	r1, [pc, #148]	; (401250 <init_rtos+0xf4>)
  4011ba:	4826      	ldr	r0, [pc, #152]	; (401254 <init_rtos+0xf8>)
  4011bc:	4c20      	ldr	r4, [pc, #128]	; (401240 <init_rtos+0xe4>)
  4011be:	47a0      	blx	r4
  4011c0:	2801      	cmp	r0, #1
  4011c2:	d002      	beq.n	4011ca <init_rtos+0x6e>
        printf("Failed to create adc task\r\n");
  4011c4:	4824      	ldr	r0, [pc, #144]	; (401258 <init_rtos+0xfc>)
  4011c6:	4b20      	ldr	r3, [pc, #128]	; (401248 <init_rtos+0xec>)
  4011c8:	4798      	blx	r3
    if (xTaskCreate(task_but, "BUT", TASK_BUT_STACK_SIZE, NULL, TASK_BUT_STACK_PRIORITY, &xHandleBut) != pdPASS)
  4011ca:	2300      	movs	r3, #0
  4011cc:	9303      	str	r3, [sp, #12]
  4011ce:	9302      	str	r3, [sp, #8]
  4011d0:	4a22      	ldr	r2, [pc, #136]	; (40125c <init_rtos+0x100>)
  4011d2:	9201      	str	r2, [sp, #4]
  4011d4:	9300      	str	r3, [sp, #0]
  4011d6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4011da:	4921      	ldr	r1, [pc, #132]	; (401260 <init_rtos+0x104>)
  4011dc:	4821      	ldr	r0, [pc, #132]	; (401264 <init_rtos+0x108>)
  4011de:	4c18      	ldr	r4, [pc, #96]	; (401240 <init_rtos+0xe4>)
  4011e0:	47a0      	blx	r4
  4011e2:	2801      	cmp	r0, #1
  4011e4:	d002      	beq.n	4011ec <init_rtos+0x90>
        printf("Failed to create BUT task\r\n");
  4011e6:	4820      	ldr	r0, [pc, #128]	; (401268 <init_rtos+0x10c>)
  4011e8:	4b17      	ldr	r3, [pc, #92]	; (401248 <init_rtos+0xec>)
  4011ea:	4798      	blx	r3
    if (xTaskCreate(task_receive, "receive", TASK_RECEIVE_STACK_SIZE, NULL, TASK_RECEIVE_STACK_PRIORITY, &xHandleRx) != pdPASS)
  4011ec:	2300      	movs	r3, #0
  4011ee:	9303      	str	r3, [sp, #12]
  4011f0:	9302      	str	r3, [sp, #8]
  4011f2:	4a1e      	ldr	r2, [pc, #120]	; (40126c <init_rtos+0x110>)
  4011f4:	9201      	str	r2, [sp, #4]
  4011f6:	9300      	str	r3, [sp, #0]
  4011f8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4011fc:	491c      	ldr	r1, [pc, #112]	; (401270 <init_rtos+0x114>)
  4011fe:	481d      	ldr	r0, [pc, #116]	; (401274 <init_rtos+0x118>)
  401200:	4c0f      	ldr	r4, [pc, #60]	; (401240 <init_rtos+0xe4>)
  401202:	47a0      	blx	r4
  401204:	2801      	cmp	r0, #1
  401206:	d002      	beq.n	40120e <init_rtos+0xb2>
        printf("Failed to create receive task\r\n");
  401208:	481b      	ldr	r0, [pc, #108]	; (401278 <init_rtos+0x11c>)
  40120a:	4b0f      	ldr	r3, [pc, #60]	; (401248 <init_rtos+0xec>)
  40120c:	4798      	blx	r3
    vTaskSuspend(xHandleOled);
  40120e:	4b09      	ldr	r3, [pc, #36]	; (401234 <init_rtos+0xd8>)
  401210:	6818      	ldr	r0, [r3, #0]
  401212:	4c1a      	ldr	r4, [pc, #104]	; (40127c <init_rtos+0x120>)
  401214:	47a0      	blx	r4
    vTaskSuspend(xHandleADC);
  401216:	4b0d      	ldr	r3, [pc, #52]	; (40124c <init_rtos+0xf0>)
  401218:	6818      	ldr	r0, [r3, #0]
  40121a:	47a0      	blx	r4
    vTaskStartScheduler();
  40121c:	4b18      	ldr	r3, [pc, #96]	; (401280 <init_rtos+0x124>)
  40121e:	4798      	blx	r3
}
  401220:	b004      	add	sp, #16
  401222:	bd10      	pop	{r4, pc}
  401224:	00402c19 	.word	0x00402c19
  401228:	20400e78 	.word	0x20400e78
  40122c:	20400e84 	.word	0x20400e84
  401230:	20400e88 	.word	0x20400e88
  401234:	20400e8c 	.word	0x20400e8c
  401238:	004073a0 	.word	0x004073a0
  40123c:	00400ecd 	.word	0x00400ecd
  401240:	00403299 	.word	0x00403299
  401244:	004073a8 	.word	0x004073a8
  401248:	0040474d 	.word	0x0040474d
  40124c:	20400e80 	.word	0x20400e80
  401250:	004073c8 	.word	0x004073c8
  401254:	00400f35 	.word	0x00400f35
  401258:	004073cc 	.word	0x004073cc
  40125c:	20400e7c 	.word	0x20400e7c
  401260:	004073e8 	.word	0x004073e8
  401264:	00400f75 	.word	0x00400f75
  401268:	004073ec 	.word	0x004073ec
  40126c:	20400e74 	.word	0x20400e74
  401270:	00407408 	.word	0x00407408
  401274:	00401089 	.word	0x00401089
  401278:	00407410 	.word	0x00407410
  40127c:	00403a79 	.word	0x00403a79
  401280:	0040356d 	.word	0x0040356d

00401284 <TC_init>:
void set_rtc_alarm_flag(_Bool val) { flag_rtc_alarm = val; }
// -------------------------------------------------------------------------------

// init TC RTT RTC ---------------------------------------------------------------
void TC_init(Tc *TC, int ID_TC, int TC_CHANNEL, int freq)
{
  401284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401288:	b085      	sub	sp, #20
  40128a:	4606      	mov	r6, r0
  40128c:	460c      	mov	r4, r1
  40128e:	4617      	mov	r7, r2
  401290:	4698      	mov	r8, r3
    uint32_t ul_div;
    uint32_t ul_tcclks;
    uint32_t ul_sysclk = sysclk_get_cpu_hz();

    pmc_enable_periph_clk(ID_TC);
  401292:	4608      	mov	r0, r1
  401294:	4b1c      	ldr	r3, [pc, #112]	; (401308 <TC_init+0x84>)
  401296:	4798      	blx	r3

    tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401298:	4d1c      	ldr	r5, [pc, #112]	; (40130c <TC_init+0x88>)
  40129a:	9500      	str	r5, [sp, #0]
  40129c:	ab02      	add	r3, sp, #8
  40129e:	aa03      	add	r2, sp, #12
  4012a0:	4629      	mov	r1, r5
  4012a2:	4640      	mov	r0, r8
  4012a4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401328 <TC_init+0xa4>
  4012a8:	47c8      	blx	r9
    tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  4012aa:	9a02      	ldr	r2, [sp, #8]
  4012ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4012b0:	4639      	mov	r1, r7
  4012b2:	4630      	mov	r0, r6
  4012b4:	4b16      	ldr	r3, [pc, #88]	; (401310 <TC_init+0x8c>)
  4012b6:	4798      	blx	r3
    tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  4012b8:	9a03      	ldr	r2, [sp, #12]
  4012ba:	fbb5 f2f2 	udiv	r2, r5, r2
  4012be:	fbb2 f2f8 	udiv	r2, r2, r8
  4012c2:	4639      	mov	r1, r7
  4012c4:	4630      	mov	r0, r6
  4012c6:	4b13      	ldr	r3, [pc, #76]	; (401314 <TC_init+0x90>)
  4012c8:	4798      	blx	r3

    NVIC_SetPriority(ID_TC, 4);
  4012ca:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  4012cc:	2b00      	cmp	r3, #0
  4012ce:	db13      	blt.n	4012f8 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4012d0:	4a11      	ldr	r2, [pc, #68]	; (401318 <TC_init+0x94>)
  4012d2:	2180      	movs	r1, #128	; 0x80
  4012d4:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4012d6:	095b      	lsrs	r3, r3, #5
  4012d8:	f004 041f 	and.w	r4, r4, #31
  4012dc:	2201      	movs	r2, #1
  4012de:	fa02 f404 	lsl.w	r4, r2, r4
  4012e2:	4a0e      	ldr	r2, [pc, #56]	; (40131c <TC_init+0x98>)
  4012e4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    NVIC_EnableIRQ((IRQn_Type)ID_TC);
    tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4012e8:	2210      	movs	r2, #16
  4012ea:	4639      	mov	r1, r7
  4012ec:	4630      	mov	r0, r6
  4012ee:	4b0c      	ldr	r3, [pc, #48]	; (401320 <TC_init+0x9c>)
  4012f0:	4798      	blx	r3
}
  4012f2:	b005      	add	sp, #20
  4012f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4012f8:	f004 010f 	and.w	r1, r4, #15
  4012fc:	4a09      	ldr	r2, [pc, #36]	; (401324 <TC_init+0xa0>)
  4012fe:	440a      	add	r2, r1
  401300:	2180      	movs	r1, #128	; 0x80
  401302:	7611      	strb	r1, [r2, #24]
  401304:	e7e7      	b.n	4012d6 <TC_init+0x52>
  401306:	bf00      	nop
  401308:	00402161 	.word	0x00402161
  40130c:	11e1a300 	.word	0x11e1a300
  401310:	00400603 	.word	0x00400603
  401314:	0040062d 	.word	0x0040062d
  401318:	e000e400 	.word	0xe000e400
  40131c:	e000e100 	.word	0xe000e100
  401320:	00400635 	.word	0x00400635
  401324:	e000ecfc 	.word	0xe000ecfc
  401328:	00400645 	.word	0x00400645

0040132c <TC0_Handler>:
}
// -------------------------------------------------------------------------------

// handlers ----------------------------------------------------------------------
void TC0_Handler(void)
{
  40132c:	b500      	push	{lr}
  40132e:	b083      	sub	sp, #12
    volatile uint32_t status = tc_get_status(TC0, 0);
  401330:	2100      	movs	r1, #0
  401332:	4805      	ldr	r0, [pc, #20]	; (401348 <TC0_Handler+0x1c>)
  401334:	4b05      	ldr	r3, [pc, #20]	; (40134c <TC0_Handler+0x20>)
  401336:	4798      	blx	r3
  401338:	9001      	str	r0, [sp, #4]
	afec->AFEC_CR = AFEC_CR_START;
  40133a:	2202      	movs	r2, #2
  40133c:	4b04      	ldr	r3, [pc, #16]	; (401350 <TC0_Handler+0x24>)
  40133e:	601a      	str	r2, [r3, #0]
    afec_start_software_conversion(AFEC_POT);
}
  401340:	b003      	add	sp, #12
  401342:	f85d fb04 	ldr.w	pc, [sp], #4
  401346:	bf00      	nop
  401348:	4000c000 	.word	0x4000c000
  40134c:	0040063d 	.word	0x0040063d
  401350:	4003c000 	.word	0x4003c000

00401354 <TC1_Handler>:

void TC1_Handler(void)
{
  401354:	b500      	push	{lr}
  401356:	b083      	sub	sp, #12
    volatile uint32_t status = tc_get_status(TC0, 1);
  401358:	2101      	movs	r1, #1
  40135a:	4805      	ldr	r0, [pc, #20]	; (401370 <TC1_Handler+0x1c>)
  40135c:	4b05      	ldr	r3, [pc, #20]	; (401374 <TC1_Handler+0x20>)
  40135e:	4798      	blx	r3
  401360:	9001      	str	r0, [sp, #4]
    pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);
  401362:	2101      	movs	r1, #1
  401364:	4804      	ldr	r0, [pc, #16]	; (401378 <TC1_Handler+0x24>)
  401366:	4b05      	ldr	r3, [pc, #20]	; (40137c <TC1_Handler+0x28>)
  401368:	4798      	blx	r3
}
  40136a:	b003      	add	sp, #12
  40136c:	f85d fb04 	ldr.w	pc, [sp], #4
  401370:	4000c000 	.word	0x4000c000
  401374:	0040063d 	.word	0x0040063d
  401378:	400e0e00 	.word	0x400e0e00
  40137c:	004006fd 	.word	0x004006fd

00401380 <TC2_Handler>:

void TC2_Handler(void)
{
  401380:	b500      	push	{lr}
  401382:	b083      	sub	sp, #12
    volatile uint32_t status = tc_get_status(TC0, 2);
  401384:	2102      	movs	r1, #2
  401386:	4806      	ldr	r0, [pc, #24]	; (4013a0 <TC2_Handler+0x20>)
  401388:	4b06      	ldr	r3, [pc, #24]	; (4013a4 <TC2_Handler+0x24>)
  40138a:	4798      	blx	r3
  40138c:	9001      	str	r0, [sp, #4]
    pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);
  40138e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401392:	4805      	ldr	r0, [pc, #20]	; (4013a8 <TC2_Handler+0x28>)
  401394:	4b05      	ldr	r3, [pc, #20]	; (4013ac <TC2_Handler+0x2c>)
  401396:	4798      	blx	r3
}
  401398:	b003      	add	sp, #12
  40139a:	f85d fb04 	ldr.w	pc, [sp], #4
  40139e:	bf00      	nop
  4013a0:	4000c000 	.word	0x4000c000
  4013a4:	0040063d 	.word	0x0040063d
  4013a8:	400e1200 	.word	0x400e1200
  4013ac:	004006fd 	.word	0x004006fd

004013b0 <TC3_Handler>:

void TC3_Handler(void)
{
  4013b0:	b500      	push	{lr}
  4013b2:	b083      	sub	sp, #12
    volatile uint32_t status = tc_get_status(TC1, 0);
  4013b4:	2100      	movs	r1, #0
  4013b6:	4805      	ldr	r0, [pc, #20]	; (4013cc <TC3_Handler+0x1c>)
  4013b8:	4b05      	ldr	r3, [pc, #20]	; (4013d0 <TC3_Handler+0x20>)
  4013ba:	4798      	blx	r3
  4013bc:	9001      	str	r0, [sp, #4]
    pin_toggle(LED3_PIO, LED3_PIO_IDX_MASK);
  4013be:	2104      	movs	r1, #4
  4013c0:	4804      	ldr	r0, [pc, #16]	; (4013d4 <TC3_Handler+0x24>)
  4013c2:	4b05      	ldr	r3, [pc, #20]	; (4013d8 <TC3_Handler+0x28>)
  4013c4:	4798      	blx	r3
}
  4013c6:	b003      	add	sp, #12
  4013c8:	f85d fb04 	ldr.w	pc, [sp], #4
  4013cc:	40010000 	.word	0x40010000
  4013d0:	0040063d 	.word	0x0040063d
  4013d4:	400e1000 	.word	0x400e1000
  4013d8:	004006fd 	.word	0x004006fd

004013dc <RTT_Handler>:

void RTT_Handler(void)
{
  4013dc:	b508      	push	{r3, lr}
    uint32_t ul_status;
    ul_status = rtt_get_status(RTT);
  4013de:	4806      	ldr	r0, [pc, #24]	; (4013f8 <RTT_Handler+0x1c>)
  4013e0:	4b06      	ldr	r3, [pc, #24]	; (4013fc <RTT_Handler+0x20>)
  4013e2:	4798      	blx	r3

    if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS)
  4013e4:	f010 0f01 	tst.w	r0, #1
  4013e8:	d100      	bne.n	4013ec <RTT_Handler+0x10>
  4013ea:	bd08      	pop	{r3, pc}
    {
        pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  4013ec:	2101      	movs	r1, #1
  4013ee:	4804      	ldr	r0, [pc, #16]	; (401400 <RTT_Handler+0x24>)
  4013f0:	4b04      	ldr	r3, [pc, #16]	; (401404 <RTT_Handler+0x28>)
  4013f2:	4798      	blx	r3
    }

    if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC)
    {
    }
}
  4013f4:	e7f9      	b.n	4013ea <RTT_Handler+0xe>
  4013f6:	bf00      	nop
  4013f8:	400e1830 	.word	0x400e1830
  4013fc:	004004b5 	.word	0x004004b5
  401400:	400e0e00 	.word	0x400e0e00
  401404:	00401d47 	.word	0x00401d47

00401408 <RTC_Handler>:

void RTC_Handler(void)
{
  401408:	b538      	push	{r3, r4, r5, lr}
    uint32_t ul_status = rtc_get_status(RTC);
  40140a:	4812      	ldr	r0, [pc, #72]	; (401454 <RTC_Handler+0x4c>)
  40140c:	4b12      	ldr	r3, [pc, #72]	; (401458 <RTC_Handler+0x50>)
  40140e:	4798      	blx	r3

    if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC)
  401410:	f010 0f04 	tst.w	r0, #4
  401414:	d002      	beq.n	40141c <RTC_Handler+0x14>
        flag_rtc_second = 1;
  401416:	2201      	movs	r2, #1
  401418:	4b10      	ldr	r3, [pc, #64]	; (40145c <RTC_Handler+0x54>)
  40141a:	701a      	strb	r2, [r3, #0]

    if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM)
  40141c:	f010 0f02 	tst.w	r0, #2
  401420:	d002      	beq.n	401428 <RTC_Handler+0x20>
        flag_rtc_alarm = 1;
  401422:	2201      	movs	r2, #1
  401424:	4b0e      	ldr	r3, [pc, #56]	; (401460 <RTC_Handler+0x58>)
  401426:	701a      	strb	r2, [r3, #0]

    rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  401428:	4d0a      	ldr	r5, [pc, #40]	; (401454 <RTC_Handler+0x4c>)
  40142a:	2104      	movs	r1, #4
  40142c:	4628      	mov	r0, r5
  40142e:	4c0d      	ldr	r4, [pc, #52]	; (401464 <RTC_Handler+0x5c>)
  401430:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  401432:	2102      	movs	r1, #2
  401434:	4628      	mov	r0, r5
  401436:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  401438:	2101      	movs	r1, #1
  40143a:	4628      	mov	r0, r5
  40143c:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  40143e:	2108      	movs	r1, #8
  401440:	4628      	mov	r0, r5
  401442:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  401444:	2110      	movs	r1, #16
  401446:	4628      	mov	r0, r5
  401448:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  40144a:	2120      	movs	r1, #32
  40144c:	4628      	mov	r0, r5
  40144e:	47a0      	blx	r4
  401450:	bd38      	pop	{r3, r4, r5, pc}
  401452:	bf00      	nop
  401454:	400e1860 	.word	0x400e1860
  401458:	004004ad 	.word	0x004004ad
  40145c:	204009ed 	.word	0x204009ed
  401460:	204009ec 	.word	0x204009ec
  401464:	004004b1 	.word	0x004004b1

00401468 <coffe_pump_on>:
  dacc_set_osr(DACC_BASE, DACC_CHANNEL, 5 );
  dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  dacc_set_analog_control(DACC_BASE, DACC_ANALOG_CONTROL);
}

void coffe_pump_on(void) {
  401468:	b508      	push	{r3, lr}
	printf("[PUMP] ON \n");
  40146a:	4806      	ldr	r0, [pc, #24]	; (401484 <coffe_pump_on+0x1c>)
  40146c:	4b06      	ldr	r3, [pc, #24]	; (401488 <coffe_pump_on+0x20>)
  40146e:	4798      	blx	r3
	pio_clear(LED_PIO, LED_IDX_MASK);
  401470:	f44f 7180 	mov.w	r1, #256	; 0x100
  401474:	4805      	ldr	r0, [pc, #20]	; (40148c <coffe_pump_on+0x24>)
  401476:	4b06      	ldr	r3, [pc, #24]	; (401490 <coffe_pump_on+0x28>)
  401478:	4798      	blx	r3
	pump_on = 1;
  40147a:	2201      	movs	r2, #1
  40147c:	4b05      	ldr	r3, [pc, #20]	; (401494 <coffe_pump_on+0x2c>)
  40147e:	601a      	str	r2, [r3, #0]
  401480:	bd08      	pop	{r3, pc}
  401482:	bf00      	nop
  401484:	004074c4 	.word	0x004074c4
  401488:	0040474d 	.word	0x0040474d
  40148c:	400e1200 	.word	0x400e1200
  401490:	00401d4b 	.word	0x00401d4b
  401494:	204009f4 	.word	0x204009f4

00401498 <coffe_pump_off>:
}

void coffe_pump_off(void) {
  401498:	b508      	push	{r3, lr}
	printf("[PUMP] OFF \n");
  40149a:	4806      	ldr	r0, [pc, #24]	; (4014b4 <coffe_pump_off+0x1c>)
  40149c:	4b06      	ldr	r3, [pc, #24]	; (4014b8 <coffe_pump_off+0x20>)
  40149e:	4798      	blx	r3
	pio_set(LED_PIO, LED_IDX_MASK);
  4014a0:	f44f 7180 	mov.w	r1, #256	; 0x100
  4014a4:	4805      	ldr	r0, [pc, #20]	; (4014bc <coffe_pump_off+0x24>)
  4014a6:	4b06      	ldr	r3, [pc, #24]	; (4014c0 <coffe_pump_off+0x28>)
  4014a8:	4798      	blx	r3
	pump_on = 0;
  4014aa:	2200      	movs	r2, #0
  4014ac:	4b05      	ldr	r3, [pc, #20]	; (4014c4 <coffe_pump_off+0x2c>)
  4014ae:	601a      	str	r2, [r3, #0]
  4014b0:	bd08      	pop	{r3, pc}
  4014b2:	bf00      	nop
  4014b4:	004074b4 	.word	0x004074b4
  4014b8:	0040474d 	.word	0x0040474d
  4014bc:	400e1200 	.word	0x400e1200
  4014c0:	00401d47 	.word	0x00401d47
  4014c4:	204009f4 	.word	0x204009f4

004014c8 <coffee_heat_on>:
}

void coffee_heat_on(void) {
  4014c8:	b508      	push	{r3, lr}
	printf("[HEAT] ON \n");
  4014ca:	4803      	ldr	r0, [pc, #12]	; (4014d8 <coffee_heat_on+0x10>)
  4014cc:	4b03      	ldr	r3, [pc, #12]	; (4014dc <coffee_heat_on+0x14>)
  4014ce:	4798      	blx	r3
	heat_on = 1;
  4014d0:	2201      	movs	r2, #1
  4014d2:	4b03      	ldr	r3, [pc, #12]	; (4014e0 <coffee_heat_on+0x18>)
  4014d4:	601a      	str	r2, [r3, #0]
  4014d6:	bd08      	pop	{r3, pc}
  4014d8:	004074e0 	.word	0x004074e0
  4014dc:	0040474d 	.word	0x0040474d
  4014e0:	204009f0 	.word	0x204009f0

004014e4 <coffee_heat_off>:
}

void coffee_heat_off(void) {
  4014e4:	b508      	push	{r3, lr}
	printf("[HEAT] OFF \n");
  4014e6:	4803      	ldr	r0, [pc, #12]	; (4014f4 <coffee_heat_off+0x10>)
  4014e8:	4b03      	ldr	r3, [pc, #12]	; (4014f8 <coffee_heat_off+0x14>)
  4014ea:	4798      	blx	r3
	heat_on = 0;
  4014ec:	2200      	movs	r2, #0
  4014ee:	4b03      	ldr	r3, [pc, #12]	; (4014fc <coffee_heat_off+0x18>)
  4014f0:	601a      	str	r2, [r3, #0]
  4014f2:	bd08      	pop	{r3, pc}
  4014f4:	004074d0 	.word	0x004074d0
  4014f8:	0040474d 	.word	0x0040474d
  4014fc:	204009f0 	.word	0x204009f0

00401500 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  401500:	4b01      	ldr	r3, [pc, #4]	; (401508 <gfx_mono_set_framebuffer+0x8>)
  401502:	6018      	str	r0, [r3, #0]
  401504:	4770      	bx	lr
  401506:	bf00      	nop
  401508:	204009f8 	.word	0x204009f8

0040150c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40150c:	4b02      	ldr	r3, [pc, #8]	; (401518 <gfx_mono_framebuffer_put_byte+0xc>)
  40150e:	681b      	ldr	r3, [r3, #0]
  401510:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  401514:	5442      	strb	r2, [r0, r1]
  401516:	4770      	bx	lr
  401518:	204009f8 	.word	0x204009f8

0040151c <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  40151c:	4b02      	ldr	r3, [pc, #8]	; (401528 <gfx_mono_framebuffer_get_byte+0xc>)
  40151e:	681b      	ldr	r3, [r3, #0]
  401520:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  401524:	5c40      	ldrb	r0, [r0, r1]
  401526:	4770      	bx	lr
  401528:	204009f8 	.word	0x204009f8

0040152c <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  40152c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  401530:	1884      	adds	r4, r0, r2
  401532:	2c80      	cmp	r4, #128	; 0x80
  401534:	dd02      	ble.n	40153c <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  401536:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  40153a:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  40153c:	b322      	cbz	r2, 401588 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  40153e:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  401540:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  401544:	2601      	movs	r6, #1
  401546:	fa06 f101 	lsl.w	r1, r6, r1
  40154a:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  40154c:	2b01      	cmp	r3, #1
  40154e:	d01d      	beq.n	40158c <gfx_mono_generic_draw_horizontal_line+0x60>
  401550:	2b00      	cmp	r3, #0
  401552:	d035      	beq.n	4015c0 <gfx_mono_generic_draw_horizontal_line+0x94>
  401554:	2b02      	cmp	r3, #2
  401556:	d117      	bne.n	401588 <gfx_mono_generic_draw_horizontal_line+0x5c>
  401558:	3801      	subs	r0, #1
  40155a:	b2c7      	uxtb	r7, r0
  40155c:	19d4      	adds	r4, r2, r7
  40155e:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  401560:	f8df a090 	ldr.w	sl, [pc, #144]	; 4015f4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  401564:	f04f 0900 	mov.w	r9, #0
  401568:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4015f8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  40156c:	4621      	mov	r1, r4
  40156e:	4628      	mov	r0, r5
  401570:	47d0      	blx	sl
			temp ^= pixelmask;
  401572:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  401576:	464b      	mov	r3, r9
  401578:	b2d2      	uxtb	r2, r2
  40157a:	4621      	mov	r1, r4
  40157c:	4628      	mov	r0, r5
  40157e:	47c0      	blx	r8
  401580:	3c01      	subs	r4, #1
  401582:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  401584:	42bc      	cmp	r4, r7
  401586:	d1f1      	bne.n	40156c <gfx_mono_generic_draw_horizontal_line+0x40>
  401588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40158c:	3801      	subs	r0, #1
  40158e:	b2c7      	uxtb	r7, r0
  401590:	19d4      	adds	r4, r2, r7
  401592:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  401594:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4015f4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  401598:	f04f 0900 	mov.w	r9, #0
  40159c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4015f8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4015a0:	4621      	mov	r1, r4
  4015a2:	4628      	mov	r0, r5
  4015a4:	47d0      	blx	sl
			temp |= pixelmask;
  4015a6:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4015aa:	464b      	mov	r3, r9
  4015ac:	b2d2      	uxtb	r2, r2
  4015ae:	4621      	mov	r1, r4
  4015b0:	4628      	mov	r0, r5
  4015b2:	47c0      	blx	r8
  4015b4:	3c01      	subs	r4, #1
  4015b6:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4015b8:	42bc      	cmp	r4, r7
  4015ba:	d1f1      	bne.n	4015a0 <gfx_mono_generic_draw_horizontal_line+0x74>
  4015bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015c0:	3801      	subs	r0, #1
  4015c2:	b2c7      	uxtb	r7, r0
  4015c4:	19d4      	adds	r4, r2, r7
  4015c6:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4015c8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4015f4 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4015cc:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4015ce:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4015f8 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4015d2:	4621      	mov	r1, r4
  4015d4:	4628      	mov	r0, r5
  4015d6:	47c0      	blx	r8
			temp &= ~pixelmask;
  4015d8:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4015dc:	2300      	movs	r3, #0
  4015de:	b2d2      	uxtb	r2, r2
  4015e0:	4621      	mov	r1, r4
  4015e2:	4628      	mov	r0, r5
  4015e4:	47c8      	blx	r9
  4015e6:	3c01      	subs	r4, #1
  4015e8:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4015ea:	42bc      	cmp	r4, r7
  4015ec:	d1f1      	bne.n	4015d2 <gfx_mono_generic_draw_horizontal_line+0xa6>
  4015ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015f2:	bf00      	nop
  4015f4:	0040182d 	.word	0x0040182d
  4015f8:	00401729 	.word	0x00401729

004015fc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4015fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401600:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  401604:	b18b      	cbz	r3, 40162a <gfx_mono_generic_draw_filled_rect+0x2e>
  401606:	461c      	mov	r4, r3
  401608:	4690      	mov	r8, r2
  40160a:	4606      	mov	r6, r0
  40160c:	1e4d      	subs	r5, r1, #1
  40160e:	b2ed      	uxtb	r5, r5
  401610:	442c      	add	r4, r5
  401612:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  401614:	f8df 9018 	ldr.w	r9, [pc, #24]	; 401630 <gfx_mono_generic_draw_filled_rect+0x34>
  401618:	463b      	mov	r3, r7
  40161a:	4642      	mov	r2, r8
  40161c:	4621      	mov	r1, r4
  40161e:	4630      	mov	r0, r6
  401620:	47c8      	blx	r9
  401622:	3c01      	subs	r4, #1
  401624:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  401626:	42ac      	cmp	r4, r5
  401628:	d1f6      	bne.n	401618 <gfx_mono_generic_draw_filled_rect+0x1c>
  40162a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40162e:	bf00      	nop
  401630:	0040152d 	.word	0x0040152d

00401634 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  401634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401638:	b083      	sub	sp, #12
  40163a:	4604      	mov	r4, r0
  40163c:	4688      	mov	r8, r1
  40163e:	4691      	mov	r9, r2
  401640:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  401642:	7a5b      	ldrb	r3, [r3, #9]
  401644:	f89b 2008 	ldrb.w	r2, [fp, #8]
  401648:	2100      	movs	r1, #0
  40164a:	9100      	str	r1, [sp, #0]
  40164c:	4649      	mov	r1, r9
  40164e:	4640      	mov	r0, r8
  401650:	4d21      	ldr	r5, [pc, #132]	; (4016d8 <gfx_mono_draw_char+0xa4>)
  401652:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  401654:	f89b 3000 	ldrb.w	r3, [fp]
  401658:	b113      	cbz	r3, 401660 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  40165a:	b003      	add	sp, #12
  40165c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  401660:	f89b 2008 	ldrb.w	r2, [fp, #8]
  401664:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  401666:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40166a:	bf18      	it	ne
  40166c:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  40166e:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  401672:	f89b 700a 	ldrb.w	r7, [fp, #10]
  401676:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  401678:	fb17 f70a 	smulbb	r7, r7, sl
  40167c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  401680:	f8db 3004 	ldr.w	r3, [fp, #4]
  401684:	fa13 f787 	uxtah	r7, r3, r7
  401688:	e01f      	b.n	4016ca <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40168a:	0064      	lsls	r4, r4, #1
  40168c:	b2e4      	uxtb	r4, r4
  40168e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  401690:	b2eb      	uxtb	r3, r5
  401692:	429e      	cmp	r6, r3
  401694:	d910      	bls.n	4016b8 <gfx_mono_draw_char+0x84>
  401696:	b2eb      	uxtb	r3, r5
  401698:	eb08 0003 	add.w	r0, r8, r3
  40169c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  40169e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4016a2:	bf08      	it	eq
  4016a4:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4016a8:	f014 0f80 	tst.w	r4, #128	; 0x80
  4016ac:	d0ed      	beq.n	40168a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  4016ae:	2201      	movs	r2, #1
  4016b0:	4649      	mov	r1, r9
  4016b2:	4b0a      	ldr	r3, [pc, #40]	; (4016dc <gfx_mono_draw_char+0xa8>)
  4016b4:	4798      	blx	r3
  4016b6:	e7e8      	b.n	40168a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  4016b8:	f109 0901 	add.w	r9, r9, #1
  4016bc:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4016c0:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4016c4:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4016c8:	d0c7      	beq.n	40165a <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4016ca:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4016ce:	2e00      	cmp	r6, #0
  4016d0:	d0f2      	beq.n	4016b8 <gfx_mono_draw_char+0x84>
  4016d2:	2500      	movs	r5, #0
  4016d4:	462c      	mov	r4, r5
  4016d6:	e7de      	b.n	401696 <gfx_mono_draw_char+0x62>
  4016d8:	004015fd 	.word	0x004015fd
  4016dc:	004017c9 	.word	0x004017c9

004016e0 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  4016e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4016e4:	4604      	mov	r4, r0
  4016e6:	4690      	mov	r8, r2
  4016e8:	461d      	mov	r5, r3
  4016ea:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  4016ec:	4f0d      	ldr	r7, [pc, #52]	; (401724 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  4016ee:	460e      	mov	r6, r1
  4016f0:	e008      	b.n	401704 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  4016f2:	7a6a      	ldrb	r2, [r5, #9]
  4016f4:	3201      	adds	r2, #1
  4016f6:	4442      	add	r2, r8
  4016f8:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  4016fc:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  4016fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401702:	b16b      	cbz	r3, 401720 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  401704:	7820      	ldrb	r0, [r4, #0]
  401706:	280a      	cmp	r0, #10
  401708:	d0f3      	beq.n	4016f2 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  40170a:	280d      	cmp	r0, #13
  40170c:	d0f7      	beq.n	4016fe <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  40170e:	462b      	mov	r3, r5
  401710:	4642      	mov	r2, r8
  401712:	4649      	mov	r1, r9
  401714:	47b8      	blx	r7
			x += font->width;
  401716:	7a2b      	ldrb	r3, [r5, #8]
  401718:	4499      	add	r9, r3
  40171a:	fa5f f989 	uxtb.w	r9, r9
  40171e:	e7ee      	b.n	4016fe <gfx_mono_draw_string+0x1e>
}
  401720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401724:	00401635 	.word	0x00401635

00401728 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  401728:	b570      	push	{r4, r5, r6, lr}
  40172a:	4604      	mov	r4, r0
  40172c:	460d      	mov	r5, r1
  40172e:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  401730:	b91b      	cbnz	r3, 40173a <gfx_mono_ssd1306_put_byte+0x12>
  401732:	4b0d      	ldr	r3, [pc, #52]	; (401768 <gfx_mono_ssd1306_put_byte+0x40>)
  401734:	4798      	blx	r3
  401736:	42b0      	cmp	r0, r6
  401738:	d015      	beq.n	401766 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  40173a:	4632      	mov	r2, r6
  40173c:	4629      	mov	r1, r5
  40173e:	4620      	mov	r0, r4
  401740:	4b0a      	ldr	r3, [pc, #40]	; (40176c <gfx_mono_ssd1306_put_byte+0x44>)
  401742:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  401744:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401748:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  40174c:	4c08      	ldr	r4, [pc, #32]	; (401770 <gfx_mono_ssd1306_put_byte+0x48>)
  40174e:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  401750:	f3c5 1002 	ubfx	r0, r5, #4, #3
  401754:	f040 0010 	orr.w	r0, r0, #16
  401758:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40175a:	f005 000f 	and.w	r0, r5, #15
  40175e:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  401760:	4630      	mov	r0, r6
  401762:	4b04      	ldr	r3, [pc, #16]	; (401774 <gfx_mono_ssd1306_put_byte+0x4c>)
  401764:	4798      	blx	r3
  401766:	bd70      	pop	{r4, r5, r6, pc}
  401768:	0040151d 	.word	0x0040151d
  40176c:	0040150d 	.word	0x0040150d
  401770:	00401839 	.word	0x00401839
  401774:	00401a59 	.word	0x00401a59

00401778 <gfx_mono_ssd1306_init>:
{
  401778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  40177c:	480d      	ldr	r0, [pc, #52]	; (4017b4 <gfx_mono_ssd1306_init+0x3c>)
  40177e:	4b0e      	ldr	r3, [pc, #56]	; (4017b8 <gfx_mono_ssd1306_init+0x40>)
  401780:	4798      	blx	r3
	ssd1306_init();
  401782:	4b0e      	ldr	r3, [pc, #56]	; (4017bc <gfx_mono_ssd1306_init+0x44>)
  401784:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  401786:	2040      	movs	r0, #64	; 0x40
  401788:	4b0d      	ldr	r3, [pc, #52]	; (4017c0 <gfx_mono_ssd1306_init+0x48>)
  40178a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40178c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40178e:	f04f 0801 	mov.w	r8, #1
  401792:	462f      	mov	r7, r5
  401794:	4e0b      	ldr	r6, [pc, #44]	; (4017c4 <gfx_mono_ssd1306_init+0x4c>)
{
  401796:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  401798:	4643      	mov	r3, r8
  40179a:	463a      	mov	r2, r7
  40179c:	b2e1      	uxtb	r1, r4
  40179e:	4628      	mov	r0, r5
  4017a0:	47b0      	blx	r6
  4017a2:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  4017a4:	2c80      	cmp	r4, #128	; 0x80
  4017a6:	d1f7      	bne.n	401798 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4017a8:	3501      	adds	r5, #1
  4017aa:	b2ed      	uxtb	r5, r5
  4017ac:	2d04      	cmp	r5, #4
  4017ae:	d1f2      	bne.n	401796 <gfx_mono_ssd1306_init+0x1e>
  4017b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4017b4:	204009fc 	.word	0x204009fc
  4017b8:	00401501 	.word	0x00401501
  4017bc:	00401879 	.word	0x00401879
  4017c0:	00401839 	.word	0x00401839
  4017c4:	00401729 	.word	0x00401729

004017c8 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4017c8:	09c3      	lsrs	r3, r0, #7
  4017ca:	d12a      	bne.n	401822 <gfx_mono_ssd1306_draw_pixel+0x5a>
  4017cc:	291f      	cmp	r1, #31
  4017ce:	d828      	bhi.n	401822 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4017d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4017d4:	4614      	mov	r4, r2
  4017d6:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  4017d8:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  4017da:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  4017de:	2201      	movs	r2, #1
  4017e0:	fa02 f701 	lsl.w	r7, r2, r1
  4017e4:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  4017e8:	4601      	mov	r1, r0
  4017ea:	4630      	mov	r0, r6
  4017ec:	4b0d      	ldr	r3, [pc, #52]	; (401824 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  4017ee:	4798      	blx	r3
  4017f0:	4602      	mov	r2, r0
	switch (color) {
  4017f2:	2c01      	cmp	r4, #1
  4017f4:	d009      	beq.n	40180a <gfx_mono_ssd1306_draw_pixel+0x42>
  4017f6:	b164      	cbz	r4, 401812 <gfx_mono_ssd1306_draw_pixel+0x4a>
  4017f8:	2c02      	cmp	r4, #2
  4017fa:	d00e      	beq.n	40181a <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4017fc:	2300      	movs	r3, #0
  4017fe:	4629      	mov	r1, r5
  401800:	4630      	mov	r0, r6
  401802:	4c09      	ldr	r4, [pc, #36]	; (401828 <gfx_mono_ssd1306_draw_pixel+0x60>)
  401804:	47a0      	blx	r4
  401806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  40180a:	ea48 0200 	orr.w	r2, r8, r0
  40180e:	b2d2      	uxtb	r2, r2
		break;
  401810:	e7f4      	b.n	4017fc <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  401812:	ea20 0207 	bic.w	r2, r0, r7
  401816:	b2d2      	uxtb	r2, r2
		break;
  401818:	e7f0      	b.n	4017fc <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  40181a:	ea88 0200 	eor.w	r2, r8, r0
  40181e:	b2d2      	uxtb	r2, r2
		break;
  401820:	e7ec      	b.n	4017fc <gfx_mono_ssd1306_draw_pixel+0x34>
  401822:	4770      	bx	lr
  401824:	0040151d 	.word	0x0040151d
  401828:	00401729 	.word	0x00401729

0040182c <gfx_mono_ssd1306_get_byte>:
{
  40182c:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  40182e:	4b01      	ldr	r3, [pc, #4]	; (401834 <gfx_mono_ssd1306_get_byte+0x8>)
  401830:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  401832:	bd08      	pop	{r3, pc}
  401834:	0040151d 	.word	0x0040151d

00401838 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  401838:	b538      	push	{r3, r4, r5, lr}
  40183a:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40183c:	2208      	movs	r2, #8
  40183e:	4b09      	ldr	r3, [pc, #36]	; (401864 <ssd1306_write_command+0x2c>)
  401840:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401842:	4c09      	ldr	r4, [pc, #36]	; (401868 <ssd1306_write_command+0x30>)
  401844:	2101      	movs	r1, #1
  401846:	4620      	mov	r0, r4
  401848:	4b08      	ldr	r3, [pc, #32]	; (40186c <ssd1306_write_command+0x34>)
  40184a:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  40184c:	2301      	movs	r3, #1
  40184e:	461a      	mov	r2, r3
  401850:	4629      	mov	r1, r5
  401852:	4620      	mov	r0, r4
  401854:	4c06      	ldr	r4, [pc, #24]	; (401870 <ssd1306_write_command+0x38>)
  401856:	47a0      	blx	r4
	delay_us(10);
  401858:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  40185c:	4b05      	ldr	r3, [pc, #20]	; (401874 <ssd1306_write_command+0x3c>)
  40185e:	4798      	blx	r3
  401860:	bd38      	pop	{r3, r4, r5, pc}
  401862:	bf00      	nop
  401864:	400e1000 	.word	0x400e1000
  401868:	40008000 	.word	0x40008000
  40186c:	004004e5 	.word	0x004004e5
  401870:	004004fb 	.word	0x004004fb
  401874:	20400001 	.word	0x20400001

00401878 <ssd1306_init>:
{
  401878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40187c:	4d66      	ldr	r5, [pc, #408]	; (401a18 <ssd1306_init+0x1a0>)
  40187e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  401882:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401884:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401888:	4b64      	ldr	r3, [pc, #400]	; (401a1c <ssd1306_init+0x1a4>)
  40188a:	2708      	movs	r7, #8
  40188c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40188e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401892:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401894:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  401898:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40189a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40189c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4018a0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  4018a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4018a6:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4018a8:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4018aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4018ae:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  4018b0:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4018b2:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4018b6:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4018b8:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4018ba:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4018be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4018c0:	f022 0208 	bic.w	r2, r2, #8
  4018c4:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4018c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4018c8:	f022 0208 	bic.w	r2, r2, #8
  4018cc:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4018ce:	601f      	str	r7, [r3, #0]
  4018d0:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4018d2:	631f      	str	r7, [r3, #48]	; 0x30
  4018d4:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4018d6:	f8df 817c 	ldr.w	r8, [pc, #380]	; 401a54 <ssd1306_init+0x1dc>
  4018da:	2300      	movs	r3, #0
  4018dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4018e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4018e4:	4640      	mov	r0, r8
  4018e6:	4c4e      	ldr	r4, [pc, #312]	; (401a20 <ssd1306_init+0x1a8>)
  4018e8:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4018ea:	2300      	movs	r3, #0
  4018ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4018f0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4018f4:	4640      	mov	r0, r8
  4018f6:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4018f8:	2300      	movs	r3, #0
  4018fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4018fe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401902:	4640      	mov	r0, r8
  401904:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  401906:	2300      	movs	r3, #0
  401908:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40190c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401910:	4640      	mov	r0, r8
  401912:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  401914:	2300      	movs	r3, #0
  401916:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40191a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40191e:	4640      	mov	r0, r8
  401920:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  401922:	2300      	movs	r3, #0
  401924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401928:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40192c:	4640      	mov	r0, r8
  40192e:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  401930:	4c3c      	ldr	r4, [pc, #240]	; (401a24 <ssd1306_init+0x1ac>)
  401932:	f04f 0902 	mov.w	r9, #2
  401936:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40193a:	f04f 0880 	mov.w	r8, #128	; 0x80
  40193e:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401942:	6863      	ldr	r3, [r4, #4]
  401944:	f043 0301 	orr.w	r3, r3, #1
  401948:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  40194a:	463a      	mov	r2, r7
  40194c:	2101      	movs	r1, #1
  40194e:	4620      	mov	r0, r4
  401950:	4b35      	ldr	r3, [pc, #212]	; (401a28 <ssd1306_init+0x1b0>)
  401952:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  401954:	2200      	movs	r2, #0
  401956:	2101      	movs	r1, #1
  401958:	4620      	mov	r0, r4
  40195a:	4b34      	ldr	r3, [pc, #208]	; (401a2c <ssd1306_init+0x1b4>)
  40195c:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  40195e:	2200      	movs	r2, #0
  401960:	2101      	movs	r1, #1
  401962:	4620      	mov	r0, r4
  401964:	4b32      	ldr	r3, [pc, #200]	; (401a30 <ssd1306_init+0x1b8>)
  401966:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  401968:	6863      	ldr	r3, [r4, #4]
  40196a:	f023 0302 	bic.w	r3, r3, #2
  40196e:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  401970:	2200      	movs	r2, #0
  401972:	2101      	movs	r1, #1
  401974:	4620      	mov	r0, r4
  401976:	4b2f      	ldr	r3, [pc, #188]	; (401a34 <ssd1306_init+0x1bc>)
  401978:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40197a:	6863      	ldr	r3, [r4, #4]
  40197c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401980:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401982:	6863      	ldr	r3, [r4, #4]
  401984:	f043 0310 	orr.w	r3, r3, #16
  401988:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  40198a:	492b      	ldr	r1, [pc, #172]	; (401a38 <ssd1306_init+0x1c0>)
  40198c:	482b      	ldr	r0, [pc, #172]	; (401a3c <ssd1306_init+0x1c4>)
  40198e:	4b2c      	ldr	r3, [pc, #176]	; (401a40 <ssd1306_init+0x1c8>)
  401990:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  401992:	b2c2      	uxtb	r2, r0
  401994:	2101      	movs	r1, #1
  401996:	4620      	mov	r0, r4
  401998:	4b2a      	ldr	r3, [pc, #168]	; (401a44 <ssd1306_init+0x1cc>)
  40199a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  40199c:	4620      	mov	r0, r4
  40199e:	4b2a      	ldr	r3, [pc, #168]	; (401a48 <ssd1306_init+0x1d0>)
  4019a0:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4019a2:	2301      	movs	r3, #1
  4019a4:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4019a6:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  4019a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4019ac:	4c27      	ldr	r4, [pc, #156]	; (401a4c <ssd1306_init+0x1d4>)
  4019ae:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019b0:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  4019b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4019b6:	47a0      	blx	r4
  4019b8:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4019ba:	20a8      	movs	r0, #168	; 0xa8
  4019bc:	4c24      	ldr	r4, [pc, #144]	; (401a50 <ssd1306_init+0x1d8>)
  4019be:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4019c0:	201f      	movs	r0, #31
  4019c2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4019c4:	20d3      	movs	r0, #211	; 0xd3
  4019c6:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4019c8:	2000      	movs	r0, #0
  4019ca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  4019cc:	2040      	movs	r0, #64	; 0x40
  4019ce:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4019d0:	20a1      	movs	r0, #161	; 0xa1
  4019d2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4019d4:	20c8      	movs	r0, #200	; 0xc8
  4019d6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4019d8:	20da      	movs	r0, #218	; 0xda
  4019da:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4019dc:	4648      	mov	r0, r9
  4019de:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4019e0:	2081      	movs	r0, #129	; 0x81
  4019e2:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  4019e4:	208f      	movs	r0, #143	; 0x8f
  4019e6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  4019e8:	20a4      	movs	r0, #164	; 0xa4
  4019ea:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4019ec:	20a6      	movs	r0, #166	; 0xa6
  4019ee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4019f0:	20d5      	movs	r0, #213	; 0xd5
  4019f2:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4019f4:	4640      	mov	r0, r8
  4019f6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4019f8:	208d      	movs	r0, #141	; 0x8d
  4019fa:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4019fc:	2014      	movs	r0, #20
  4019fe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  401a00:	20db      	movs	r0, #219	; 0xdb
  401a02:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  401a04:	2040      	movs	r0, #64	; 0x40
  401a06:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  401a08:	20d9      	movs	r0, #217	; 0xd9
  401a0a:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  401a0c:	20f1      	movs	r0, #241	; 0xf1
  401a0e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  401a10:	20af      	movs	r0, #175	; 0xaf
  401a12:	47a0      	blx	r4
  401a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401a18:	400e1200 	.word	0x400e1200
  401a1c:	400e1000 	.word	0x400e1000
  401a20:	00401e41 	.word	0x00401e41
  401a24:	40008000 	.word	0x40008000
  401a28:	0040056b 	.word	0x0040056b
  401a2c:	0040052f 	.word	0x0040052f
  401a30:	0040054d 	.word	0x0040054d
  401a34:	004005b1 	.word	0x004005b1
  401a38:	08f0d180 	.word	0x08f0d180
  401a3c:	001e8480 	.word	0x001e8480
  401a40:	004005c5 	.word	0x004005c5
  401a44:	004005db 	.word	0x004005db
  401a48:	004004b9 	.word	0x004004b9
  401a4c:	20400001 	.word	0x20400001
  401a50:	00401839 	.word	0x00401839
  401a54:	400e1400 	.word	0x400e1400

00401a58 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  401a58:	b538      	push	{r3, r4, r5, lr}
  401a5a:	4605      	mov	r5, r0
  401a5c:	2208      	movs	r2, #8
  401a5e:	4b09      	ldr	r3, [pc, #36]	; (401a84 <ssd1306_write_data+0x2c>)
  401a60:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401a62:	4c09      	ldr	r4, [pc, #36]	; (401a88 <ssd1306_write_data+0x30>)
  401a64:	2101      	movs	r1, #1
  401a66:	4620      	mov	r0, r4
  401a68:	4b08      	ldr	r3, [pc, #32]	; (401a8c <ssd1306_write_data+0x34>)
  401a6a:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  401a6c:	2301      	movs	r3, #1
  401a6e:	461a      	mov	r2, r3
  401a70:	4629      	mov	r1, r5
  401a72:	4620      	mov	r0, r4
  401a74:	4c06      	ldr	r4, [pc, #24]	; (401a90 <ssd1306_write_data+0x38>)
  401a76:	47a0      	blx	r4
	delay_us(10);
  401a78:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  401a7c:	4b05      	ldr	r3, [pc, #20]	; (401a94 <ssd1306_write_data+0x3c>)
  401a7e:	4798      	blx	r3
  401a80:	bd38      	pop	{r3, r4, r5, pc}
  401a82:	bf00      	nop
  401a84:	400e1000 	.word	0x400e1000
  401a88:	40008000 	.word	0x40008000
  401a8c:	004004e5 	.word	0x004004e5
  401a90:	004004fb 	.word	0x004004fb
  401a94:	20400001 	.word	0x20400001

00401a98 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401a98:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401a9a:	4810      	ldr	r0, [pc, #64]	; (401adc <sysclk_init+0x44>)
  401a9c:	4b10      	ldr	r3, [pc, #64]	; (401ae0 <sysclk_init+0x48>)
  401a9e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401aa0:	213e      	movs	r1, #62	; 0x3e
  401aa2:	2000      	movs	r0, #0
  401aa4:	4b0f      	ldr	r3, [pc, #60]	; (401ae4 <sysclk_init+0x4c>)
  401aa6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401aa8:	4c0f      	ldr	r4, [pc, #60]	; (401ae8 <sysclk_init+0x50>)
  401aaa:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401aac:	2800      	cmp	r0, #0
  401aae:	d0fc      	beq.n	401aaa <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401ab0:	4b0e      	ldr	r3, [pc, #56]	; (401aec <sysclk_init+0x54>)
  401ab2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401ab4:	4a0e      	ldr	r2, [pc, #56]	; (401af0 <sysclk_init+0x58>)
  401ab6:	4b0f      	ldr	r3, [pc, #60]	; (401af4 <sysclk_init+0x5c>)
  401ab8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401aba:	4c0f      	ldr	r4, [pc, #60]	; (401af8 <sysclk_init+0x60>)
  401abc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401abe:	2800      	cmp	r0, #0
  401ac0:	d0fc      	beq.n	401abc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401ac2:	2002      	movs	r0, #2
  401ac4:	4b0d      	ldr	r3, [pc, #52]	; (401afc <sysclk_init+0x64>)
  401ac6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401ac8:	2000      	movs	r0, #0
  401aca:	4b0d      	ldr	r3, [pc, #52]	; (401b00 <sysclk_init+0x68>)
  401acc:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401ace:	4b0d      	ldr	r3, [pc, #52]	; (401b04 <sysclk_init+0x6c>)
  401ad0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401ad2:	4802      	ldr	r0, [pc, #8]	; (401adc <sysclk_init+0x44>)
  401ad4:	4b02      	ldr	r3, [pc, #8]	; (401ae0 <sysclk_init+0x48>)
  401ad6:	4798      	blx	r3
  401ad8:	bd10      	pop	{r4, pc}
  401ada:	bf00      	nop
  401adc:	11e1a300 	.word	0x11e1a300
  401ae0:	004024d1 	.word	0x004024d1
  401ae4:	004020dd 	.word	0x004020dd
  401ae8:	00402131 	.word	0x00402131
  401aec:	00402141 	.word	0x00402141
  401af0:	20183f01 	.word	0x20183f01
  401af4:	400e0600 	.word	0x400e0600
  401af8:	00402151 	.word	0x00402151
  401afc:	00402041 	.word	0x00402041
  401b00:	00402079 	.word	0x00402079
  401b04:	004023c5 	.word	0x004023c5

00401b08 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  401b0c:	b980      	cbnz	r0, 401b30 <_read+0x28>
  401b0e:	460c      	mov	r4, r1
  401b10:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  401b12:	2a00      	cmp	r2, #0
  401b14:	dd0f      	ble.n	401b36 <_read+0x2e>
  401b16:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401b18:	4e08      	ldr	r6, [pc, #32]	; (401b3c <_read+0x34>)
  401b1a:	4d09      	ldr	r5, [pc, #36]	; (401b40 <_read+0x38>)
  401b1c:	6830      	ldr	r0, [r6, #0]
  401b1e:	4621      	mov	r1, r4
  401b20:	682b      	ldr	r3, [r5, #0]
  401b22:	4798      	blx	r3
		ptr++;
  401b24:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  401b26:	42bc      	cmp	r4, r7
  401b28:	d1f8      	bne.n	401b1c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  401b2a:	4640      	mov	r0, r8
  401b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401b30:	f04f 38ff 	mov.w	r8, #4294967295
  401b34:	e7f9      	b.n	401b2a <_read+0x22>
	for (; len > 0; --len) {
  401b36:	4680      	mov	r8, r0
  401b38:	e7f7      	b.n	401b2a <_read+0x22>
  401b3a:	bf00      	nop
  401b3c:	20400e98 	.word	0x20400e98
  401b40:	20400e90 	.word	0x20400e90

00401b44 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  401b44:	3801      	subs	r0, #1
  401b46:	2802      	cmp	r0, #2
  401b48:	d815      	bhi.n	401b76 <_write+0x32>
{
  401b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401b4e:	460e      	mov	r6, r1
  401b50:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  401b52:	b19a      	cbz	r2, 401b7c <_write+0x38>
  401b54:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401b56:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401b90 <_write+0x4c>
  401b5a:	4f0c      	ldr	r7, [pc, #48]	; (401b8c <_write+0x48>)
  401b5c:	f8d8 0000 	ldr.w	r0, [r8]
  401b60:	f815 1b01 	ldrb.w	r1, [r5], #1
  401b64:	683b      	ldr	r3, [r7, #0]
  401b66:	4798      	blx	r3
  401b68:	2800      	cmp	r0, #0
  401b6a:	db0a      	blt.n	401b82 <_write+0x3e>
  401b6c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  401b6e:	3c01      	subs	r4, #1
  401b70:	d1f4      	bne.n	401b5c <_write+0x18>
  401b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  401b76:	f04f 30ff 	mov.w	r0, #4294967295
  401b7a:	4770      	bx	lr
	for (; len != 0; --len) {
  401b7c:	4610      	mov	r0, r2
  401b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  401b82:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  401b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b8a:	bf00      	nop
  401b8c:	20400e94 	.word	0x20400e94
  401b90:	20400e98 	.word	0x20400e98

00401b94 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  401b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401b96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401b9a:	4b5c      	ldr	r3, [pc, #368]	; (401d0c <board_init+0x178>)
  401b9c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  401b9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ba2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401ba6:	4b5a      	ldr	r3, [pc, #360]	; (401d10 <board_init+0x17c>)
  401ba8:	2200      	movs	r2, #0
  401baa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401bae:	695a      	ldr	r2, [r3, #20]
  401bb0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  401bb4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  401bb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401bba:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401bbe:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401bc2:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401bc6:	f007 0007 	and.w	r0, r7, #7
  401bca:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401bcc:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401bd0:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  401bd4:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  401bd8:	f3bf 8f4f 	dsb	sy
  401bdc:	f04f 34ff 	mov.w	r4, #4294967295
  401be0:	fa04 fc00 	lsl.w	ip, r4, r0
  401be4:	fa06 f000 	lsl.w	r0, r6, r0
  401be8:	fa04 f40e 	lsl.w	r4, r4, lr
  401bec:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  401bf0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  401bf2:	463a      	mov	r2, r7
  401bf4:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  401bf6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  401bfa:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  401bfe:	3a01      	subs	r2, #1
  401c00:	4423      	add	r3, r4
  401c02:	f1b2 3fff 	cmp.w	r2, #4294967295
  401c06:	d1f6      	bne.n	401bf6 <board_init+0x62>
        } while(sets--);
  401c08:	3e01      	subs	r6, #1
  401c0a:	4460      	add	r0, ip
  401c0c:	f1b6 3fff 	cmp.w	r6, #4294967295
  401c10:	d1ef      	bne.n	401bf2 <board_init+0x5e>
  401c12:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  401c16:	4b3e      	ldr	r3, [pc, #248]	; (401d10 <board_init+0x17c>)
  401c18:	695a      	ldr	r2, [r3, #20]
  401c1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  401c1e:	615a      	str	r2, [r3, #20]
  401c20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c24:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c28:	4a3a      	ldr	r2, [pc, #232]	; (401d14 <board_init+0x180>)
  401c2a:	493b      	ldr	r1, [pc, #236]	; (401d18 <board_init+0x184>)
  401c2c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c2e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  401c32:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  401c34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c38:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401c3c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  401c40:	f022 0201 	bic.w	r2, r2, #1
  401c44:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401c48:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  401c4c:	f022 0201 	bic.w	r2, r2, #1
  401c50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  401c54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c58:	f3bf 8f6f 	isb	sy
  401c5c:	200a      	movs	r0, #10
  401c5e:	4c2f      	ldr	r4, [pc, #188]	; (401d1c <board_init+0x188>)
  401c60:	47a0      	blx	r4
  401c62:	200b      	movs	r0, #11
  401c64:	47a0      	blx	r4
  401c66:	200c      	movs	r0, #12
  401c68:	47a0      	blx	r4
  401c6a:	2010      	movs	r0, #16
  401c6c:	47a0      	blx	r4
  401c6e:	2011      	movs	r0, #17
  401c70:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401c72:	4b2b      	ldr	r3, [pc, #172]	; (401d20 <board_init+0x18c>)
  401c74:	f44f 7280 	mov.w	r2, #256	; 0x100
  401c78:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c7a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401c7e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401c80:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401c88:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c8a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401c8e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401c90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401c94:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401c96:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401c9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401c9e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401ca2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401ca4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401ca6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401caa:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401cac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401cb0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401cb4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401cb8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401cbc:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401cc2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401cc4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401cca:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401ccc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401cd0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401cd2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401cd4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  401cd8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401cda:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  401cdc:	4a11      	ldr	r2, [pc, #68]	; (401d24 <board_init+0x190>)
  401cde:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401ce2:	f043 0310 	orr.w	r3, r3, #16
  401ce6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  401cea:	4b0f      	ldr	r3, [pc, #60]	; (401d28 <board_init+0x194>)
  401cec:	2210      	movs	r2, #16
  401cee:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401cf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401cf4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401cf6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401cfc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401cfe:	4311      	orrs	r1, r2
  401d00:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401d02:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401d04:	4311      	orrs	r1, r2
  401d06:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d08:	605a      	str	r2, [r3, #4]
  401d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d0c:	400e1850 	.word	0x400e1850
  401d10:	e000ed00 	.word	0xe000ed00
  401d14:	400e0c00 	.word	0x400e0c00
  401d18:	5a00080c 	.word	0x5a00080c
  401d1c:	00402161 	.word	0x00402161
  401d20:	400e1200 	.word	0x400e1200
  401d24:	40088000 	.word	0x40088000
  401d28:	400e1000 	.word	0x400e1000

00401d2c <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401d2c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401d30:	0053      	lsls	r3, r2, #1
  401d32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401d36:	fbb2 f2f3 	udiv	r2, r2, r3
  401d3a:	3a01      	subs	r2, #1
  401d3c:	f3c2 020d 	ubfx	r2, r2, #0, #14
  401d40:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  401d44:	4770      	bx	lr

00401d46 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401d46:	6301      	str	r1, [r0, #48]	; 0x30
  401d48:	4770      	bx	lr

00401d4a <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  401d4a:	6341      	str	r1, [r0, #52]	; 0x34
  401d4c:	4770      	bx	lr

00401d4e <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401d4e:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401d50:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401d54:	d03a      	beq.n	401dcc <pio_set_peripheral+0x7e>
  401d56:	d813      	bhi.n	401d80 <pio_set_peripheral+0x32>
  401d58:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401d5c:	d025      	beq.n	401daa <pio_set_peripheral+0x5c>
  401d5e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401d62:	d10a      	bne.n	401d7a <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d64:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401d66:	4313      	orrs	r3, r2
  401d68:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401d6a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401d6c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401d6e:	400b      	ands	r3, r1
  401d70:	ea23 0302 	bic.w	r3, r3, r2
  401d74:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401d76:	6042      	str	r2, [r0, #4]
  401d78:	4770      	bx	lr
	switch (ul_type) {
  401d7a:	2900      	cmp	r1, #0
  401d7c:	d1fb      	bne.n	401d76 <pio_set_peripheral+0x28>
  401d7e:	4770      	bx	lr
  401d80:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401d84:	d021      	beq.n	401dca <pio_set_peripheral+0x7c>
  401d86:	d809      	bhi.n	401d9c <pio_set_peripheral+0x4e>
  401d88:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401d8c:	d1f3      	bne.n	401d76 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d8e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401d90:	4313      	orrs	r3, r2
  401d92:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401d94:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401d96:	4313      	orrs	r3, r2
  401d98:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401d9a:	e7ec      	b.n	401d76 <pio_set_peripheral+0x28>
	switch (ul_type) {
  401d9c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401da0:	d013      	beq.n	401dca <pio_set_peripheral+0x7c>
  401da2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401da6:	d010      	beq.n	401dca <pio_set_peripheral+0x7c>
  401da8:	e7e5      	b.n	401d76 <pio_set_peripheral+0x28>
{
  401daa:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dac:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401dae:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401db0:	43d3      	mvns	r3, r2
  401db2:	4021      	ands	r1, r4
  401db4:	461c      	mov	r4, r3
  401db6:	4019      	ands	r1, r3
  401db8:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401dba:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401dbc:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401dbe:	400b      	ands	r3, r1
  401dc0:	4023      	ands	r3, r4
  401dc2:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401dc4:	6042      	str	r2, [r0, #4]
}
  401dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
  401dca:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dcc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401dce:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401dd0:	400b      	ands	r3, r1
  401dd2:	ea23 0302 	bic.w	r3, r3, r2
  401dd6:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401dd8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401dda:	4313      	orrs	r3, r2
  401ddc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401dde:	e7ca      	b.n	401d76 <pio_set_peripheral+0x28>

00401de0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401de0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401de2:	f012 0f01 	tst.w	r2, #1
  401de6:	d10d      	bne.n	401e04 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401de8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401dea:	f012 0f0a 	tst.w	r2, #10
  401dee:	d00b      	beq.n	401e08 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  401df0:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401df2:	f012 0f02 	tst.w	r2, #2
  401df6:	d109      	bne.n	401e0c <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401df8:	f012 0f08 	tst.w	r2, #8
  401dfc:	d008      	beq.n	401e10 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401dfe:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401e02:	e005      	b.n	401e10 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401e04:	6641      	str	r1, [r0, #100]	; 0x64
  401e06:	e7f0      	b.n	401dea <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401e08:	6241      	str	r1, [r0, #36]	; 0x24
  401e0a:	e7f2      	b.n	401df2 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401e0c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401e10:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401e12:	6001      	str	r1, [r0, #0]
  401e14:	4770      	bx	lr

00401e16 <pio_set_output>:
{
  401e16:	b410      	push	{r4}
  401e18:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401e1a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401e1c:	b94c      	cbnz	r4, 401e32 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401e1e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401e20:	b14b      	cbz	r3, 401e36 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401e22:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401e24:	b94a      	cbnz	r2, 401e3a <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401e26:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401e28:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401e2a:	6001      	str	r1, [r0, #0]
}
  401e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e30:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401e32:	6641      	str	r1, [r0, #100]	; 0x64
  401e34:	e7f4      	b.n	401e20 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401e36:	6541      	str	r1, [r0, #84]	; 0x54
  401e38:	e7f4      	b.n	401e24 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401e3a:	6301      	str	r1, [r0, #48]	; 0x30
  401e3c:	e7f4      	b.n	401e28 <pio_set_output+0x12>
	...

00401e40 <pio_configure>:
{
  401e40:	b570      	push	{r4, r5, r6, lr}
  401e42:	b082      	sub	sp, #8
  401e44:	4605      	mov	r5, r0
  401e46:	4616      	mov	r6, r2
  401e48:	461c      	mov	r4, r3
	switch (ul_type) {
  401e4a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401e4e:	d014      	beq.n	401e7a <pio_configure+0x3a>
  401e50:	d90a      	bls.n	401e68 <pio_configure+0x28>
  401e52:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401e56:	d024      	beq.n	401ea2 <pio_configure+0x62>
  401e58:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401e5c:	d021      	beq.n	401ea2 <pio_configure+0x62>
  401e5e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401e62:	d017      	beq.n	401e94 <pio_configure+0x54>
		return 0;
  401e64:	2000      	movs	r0, #0
  401e66:	e01a      	b.n	401e9e <pio_configure+0x5e>
	switch (ul_type) {
  401e68:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401e6c:	d005      	beq.n	401e7a <pio_configure+0x3a>
  401e6e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401e72:	d002      	beq.n	401e7a <pio_configure+0x3a>
  401e74:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401e78:	d1f4      	bne.n	401e64 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401e7a:	4632      	mov	r2, r6
  401e7c:	4628      	mov	r0, r5
  401e7e:	4b11      	ldr	r3, [pc, #68]	; (401ec4 <pio_configure+0x84>)
  401e80:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401e82:	f014 0f01 	tst.w	r4, #1
  401e86:	d102      	bne.n	401e8e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401e88:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  401e8a:	2001      	movs	r0, #1
  401e8c:	e007      	b.n	401e9e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401e8e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401e90:	2001      	movs	r0, #1
  401e92:	e004      	b.n	401e9e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401e94:	461a      	mov	r2, r3
  401e96:	4631      	mov	r1, r6
  401e98:	4b0b      	ldr	r3, [pc, #44]	; (401ec8 <pio_configure+0x88>)
  401e9a:	4798      	blx	r3
	return 1;
  401e9c:	2001      	movs	r0, #1
}
  401e9e:	b002      	add	sp, #8
  401ea0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401ea2:	f004 0301 	and.w	r3, r4, #1
  401ea6:	9300      	str	r3, [sp, #0]
  401ea8:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401eac:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401eb0:	bf14      	ite	ne
  401eb2:	2200      	movne	r2, #0
  401eb4:	2201      	moveq	r2, #1
  401eb6:	4631      	mov	r1, r6
  401eb8:	4628      	mov	r0, r5
  401eba:	4c04      	ldr	r4, [pc, #16]	; (401ecc <pio_configure+0x8c>)
  401ebc:	47a0      	blx	r4
	return 1;
  401ebe:	2001      	movs	r0, #1
		break;
  401ec0:	e7ed      	b.n	401e9e <pio_configure+0x5e>
  401ec2:	bf00      	nop
  401ec4:	00401d4f 	.word	0x00401d4f
  401ec8:	00401de1 	.word	0x00401de1
  401ecc:	00401e17 	.word	0x00401e17

00401ed0 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  401ed0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401ed2:	420b      	tst	r3, r1
}
  401ed4:	bf14      	ite	ne
  401ed6:	2001      	movne	r0, #1
  401ed8:	2000      	moveq	r0, #0
  401eda:	4770      	bx	lr

00401edc <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  401edc:	f012 0f10 	tst.w	r2, #16
  401ee0:	d012      	beq.n	401f08 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  401ee2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401ee6:	f012 0f20 	tst.w	r2, #32
  401eea:	d007      	beq.n	401efc <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  401eec:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  401ef0:	f012 0f40 	tst.w	r2, #64	; 0x40
  401ef4:	d005      	beq.n	401f02 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  401ef6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  401efa:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  401efc:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  401f00:	e7f6      	b.n	401ef0 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  401f02:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  401f06:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  401f08:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  401f0c:	4770      	bx	lr

00401f0e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  401f0e:	6401      	str	r1, [r0, #64]	; 0x40
  401f10:	4770      	bx	lr

00401f12 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401f12:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401f14:	4770      	bx	lr

00401f16 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401f16:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401f18:	4770      	bx	lr
	...

00401f1c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f20:	4604      	mov	r4, r0
  401f22:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401f24:	4b0e      	ldr	r3, [pc, #56]	; (401f60 <pio_handler_process+0x44>)
  401f26:	4798      	blx	r3
  401f28:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f2a:	4620      	mov	r0, r4
  401f2c:	4b0d      	ldr	r3, [pc, #52]	; (401f64 <pio_handler_process+0x48>)
  401f2e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401f30:	4005      	ands	r5, r0
  401f32:	d013      	beq.n	401f5c <pio_handler_process+0x40>
  401f34:	4c0c      	ldr	r4, [pc, #48]	; (401f68 <pio_handler_process+0x4c>)
  401f36:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401f3a:	e003      	b.n	401f44 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401f3c:	42b4      	cmp	r4, r6
  401f3e:	d00d      	beq.n	401f5c <pio_handler_process+0x40>
  401f40:	3410      	adds	r4, #16
		while (status != 0) {
  401f42:	b15d      	cbz	r5, 401f5c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401f44:	6820      	ldr	r0, [r4, #0]
  401f46:	4540      	cmp	r0, r8
  401f48:	d1f8      	bne.n	401f3c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f4a:	6861      	ldr	r1, [r4, #4]
  401f4c:	4229      	tst	r1, r5
  401f4e:	d0f5      	beq.n	401f3c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f50:	68e3      	ldr	r3, [r4, #12]
  401f52:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401f54:	6863      	ldr	r3, [r4, #4]
  401f56:	ea25 0503 	bic.w	r5, r5, r3
  401f5a:	e7ef      	b.n	401f3c <pio_handler_process+0x20>
  401f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f60:	00401f13 	.word	0x00401f13
  401f64:	00401f17 	.word	0x00401f17
  401f68:	20400bfc 	.word	0x20400bfc

00401f6c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401f6e:	4c18      	ldr	r4, [pc, #96]	; (401fd0 <pio_handler_set+0x64>)
  401f70:	6826      	ldr	r6, [r4, #0]
  401f72:	2e06      	cmp	r6, #6
  401f74:	d82a      	bhi.n	401fcc <pio_handler_set+0x60>
  401f76:	f04f 0c00 	mov.w	ip, #0
  401f7a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401f7c:	4f15      	ldr	r7, [pc, #84]	; (401fd4 <pio_handler_set+0x68>)
  401f7e:	e004      	b.n	401f8a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401f80:	3401      	adds	r4, #1
  401f82:	b2e4      	uxtb	r4, r4
  401f84:	46a4      	mov	ip, r4
  401f86:	42a6      	cmp	r6, r4
  401f88:	d309      	bcc.n	401f9e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  401f8a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401f8c:	0125      	lsls	r5, r4, #4
  401f8e:	597d      	ldr	r5, [r7, r5]
  401f90:	428d      	cmp	r5, r1
  401f92:	d1f5      	bne.n	401f80 <pio_handler_set+0x14>
  401f94:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  401f98:	686d      	ldr	r5, [r5, #4]
  401f9a:	4295      	cmp	r5, r2
  401f9c:	d1f0      	bne.n	401f80 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401f9e:	4d0d      	ldr	r5, [pc, #52]	; (401fd4 <pio_handler_set+0x68>)
  401fa0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401fa4:	eb05 040e 	add.w	r4, r5, lr
  401fa8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401fac:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401fae:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401fb0:	9906      	ldr	r1, [sp, #24]
  401fb2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401fb4:	3601      	adds	r6, #1
  401fb6:	4566      	cmp	r6, ip
  401fb8:	d005      	beq.n	401fc6 <pio_handler_set+0x5a>
  401fba:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401fbc:	461a      	mov	r2, r3
  401fbe:	4b06      	ldr	r3, [pc, #24]	; (401fd8 <pio_handler_set+0x6c>)
  401fc0:	4798      	blx	r3

	return 0;
  401fc2:	2000      	movs	r0, #0
  401fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  401fc6:	4902      	ldr	r1, [pc, #8]	; (401fd0 <pio_handler_set+0x64>)
  401fc8:	600e      	str	r6, [r1, #0]
  401fca:	e7f6      	b.n	401fba <pio_handler_set+0x4e>
		return 1;
  401fcc:	2001      	movs	r0, #1
}
  401fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401fd0:	20400c6c 	.word	0x20400c6c
  401fd4:	20400bfc 	.word	0x20400bfc
  401fd8:	00401edd 	.word	0x00401edd

00401fdc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401fdc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401fde:	210a      	movs	r1, #10
  401fe0:	4801      	ldr	r0, [pc, #4]	; (401fe8 <PIOA_Handler+0xc>)
  401fe2:	4b02      	ldr	r3, [pc, #8]	; (401fec <PIOA_Handler+0x10>)
  401fe4:	4798      	blx	r3
  401fe6:	bd08      	pop	{r3, pc}
  401fe8:	400e0e00 	.word	0x400e0e00
  401fec:	00401f1d 	.word	0x00401f1d

00401ff0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401ff0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401ff2:	210b      	movs	r1, #11
  401ff4:	4801      	ldr	r0, [pc, #4]	; (401ffc <PIOB_Handler+0xc>)
  401ff6:	4b02      	ldr	r3, [pc, #8]	; (402000 <PIOB_Handler+0x10>)
  401ff8:	4798      	blx	r3
  401ffa:	bd08      	pop	{r3, pc}
  401ffc:	400e1000 	.word	0x400e1000
  402000:	00401f1d 	.word	0x00401f1d

00402004 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402004:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  402006:	210c      	movs	r1, #12
  402008:	4801      	ldr	r0, [pc, #4]	; (402010 <PIOC_Handler+0xc>)
  40200a:	4b02      	ldr	r3, [pc, #8]	; (402014 <PIOC_Handler+0x10>)
  40200c:	4798      	blx	r3
  40200e:	bd08      	pop	{r3, pc}
  402010:	400e1200 	.word	0x400e1200
  402014:	00401f1d 	.word	0x00401f1d

00402018 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402018:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40201a:	2110      	movs	r1, #16
  40201c:	4801      	ldr	r0, [pc, #4]	; (402024 <PIOD_Handler+0xc>)
  40201e:	4b02      	ldr	r3, [pc, #8]	; (402028 <PIOD_Handler+0x10>)
  402020:	4798      	blx	r3
  402022:	bd08      	pop	{r3, pc}
  402024:	400e1400 	.word	0x400e1400
  402028:	00401f1d 	.word	0x00401f1d

0040202c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40202c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40202e:	2111      	movs	r1, #17
  402030:	4801      	ldr	r0, [pc, #4]	; (402038 <PIOE_Handler+0xc>)
  402032:	4b02      	ldr	r3, [pc, #8]	; (40203c <PIOE_Handler+0x10>)
  402034:	4798      	blx	r3
  402036:	bd08      	pop	{r3, pc}
  402038:	400e1600 	.word	0x400e1600
  40203c:	00401f1d 	.word	0x00401f1d

00402040 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  402040:	2803      	cmp	r0, #3
  402042:	d011      	beq.n	402068 <pmc_mck_set_division+0x28>
  402044:	2804      	cmp	r0, #4
  402046:	d012      	beq.n	40206e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402048:	2802      	cmp	r0, #2
  40204a:	bf0c      	ite	eq
  40204c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  402050:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402052:	4a08      	ldr	r2, [pc, #32]	; (402074 <pmc_mck_set_division+0x34>)
  402054:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40205a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40205c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40205e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402060:	f013 0f08 	tst.w	r3, #8
  402064:	d0fb      	beq.n	40205e <pmc_mck_set_division+0x1e>
}
  402066:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402068:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40206c:	e7f1      	b.n	402052 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40206e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  402072:	e7ee      	b.n	402052 <pmc_mck_set_division+0x12>
  402074:	400e0600 	.word	0x400e0600

00402078 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402078:	4a17      	ldr	r2, [pc, #92]	; (4020d8 <pmc_switch_mck_to_pllack+0x60>)
  40207a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40207c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402080:	4318      	orrs	r0, r3
  402082:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402084:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402086:	f013 0f08 	tst.w	r3, #8
  40208a:	d10a      	bne.n	4020a2 <pmc_switch_mck_to_pllack+0x2a>
  40208c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402090:	4911      	ldr	r1, [pc, #68]	; (4020d8 <pmc_switch_mck_to_pllack+0x60>)
  402092:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402094:	f012 0f08 	tst.w	r2, #8
  402098:	d103      	bne.n	4020a2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40209a:	3b01      	subs	r3, #1
  40209c:	d1f9      	bne.n	402092 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40209e:	2001      	movs	r0, #1
  4020a0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4020a2:	4a0d      	ldr	r2, [pc, #52]	; (4020d8 <pmc_switch_mck_to_pllack+0x60>)
  4020a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4020a6:	f023 0303 	bic.w	r3, r3, #3
  4020aa:	f043 0302 	orr.w	r3, r3, #2
  4020ae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4020b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4020b2:	f013 0f08 	tst.w	r3, #8
  4020b6:	d10a      	bne.n	4020ce <pmc_switch_mck_to_pllack+0x56>
  4020b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4020bc:	4906      	ldr	r1, [pc, #24]	; (4020d8 <pmc_switch_mck_to_pllack+0x60>)
  4020be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4020c0:	f012 0f08 	tst.w	r2, #8
  4020c4:	d105      	bne.n	4020d2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4020c6:	3b01      	subs	r3, #1
  4020c8:	d1f9      	bne.n	4020be <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4020ca:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4020cc:	4770      	bx	lr
	return 0;
  4020ce:	2000      	movs	r0, #0
  4020d0:	4770      	bx	lr
  4020d2:	2000      	movs	r0, #0
  4020d4:	4770      	bx	lr
  4020d6:	bf00      	nop
  4020d8:	400e0600 	.word	0x400e0600

004020dc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4020dc:	b9a0      	cbnz	r0, 402108 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4020de:	480e      	ldr	r0, [pc, #56]	; (402118 <pmc_switch_mainck_to_xtal+0x3c>)
  4020e0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4020e2:	0209      	lsls	r1, r1, #8
  4020e4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4020e6:	4a0d      	ldr	r2, [pc, #52]	; (40211c <pmc_switch_mainck_to_xtal+0x40>)
  4020e8:	401a      	ands	r2, r3
  4020ea:	4b0d      	ldr	r3, [pc, #52]	; (402120 <pmc_switch_mainck_to_xtal+0x44>)
  4020ec:	4313      	orrs	r3, r2
  4020ee:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4020f0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4020f2:	4602      	mov	r2, r0
  4020f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4020f6:	f013 0f01 	tst.w	r3, #1
  4020fa:	d0fb      	beq.n	4020f4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4020fc:	4a06      	ldr	r2, [pc, #24]	; (402118 <pmc_switch_mainck_to_xtal+0x3c>)
  4020fe:	6a11      	ldr	r1, [r2, #32]
  402100:	4b08      	ldr	r3, [pc, #32]	; (402124 <pmc_switch_mainck_to_xtal+0x48>)
  402102:	430b      	orrs	r3, r1
  402104:	6213      	str	r3, [r2, #32]
  402106:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402108:	4903      	ldr	r1, [pc, #12]	; (402118 <pmc_switch_mainck_to_xtal+0x3c>)
  40210a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40210c:	4a06      	ldr	r2, [pc, #24]	; (402128 <pmc_switch_mainck_to_xtal+0x4c>)
  40210e:	401a      	ands	r2, r3
  402110:	4b06      	ldr	r3, [pc, #24]	; (40212c <pmc_switch_mainck_to_xtal+0x50>)
  402112:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402114:	620b      	str	r3, [r1, #32]
  402116:	4770      	bx	lr
  402118:	400e0600 	.word	0x400e0600
  40211c:	ffc8fffc 	.word	0xffc8fffc
  402120:	00370001 	.word	0x00370001
  402124:	01370000 	.word	0x01370000
  402128:	fec8fffc 	.word	0xfec8fffc
  40212c:	01370002 	.word	0x01370002

00402130 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402130:	4b02      	ldr	r3, [pc, #8]	; (40213c <pmc_osc_is_ready_mainck+0xc>)
  402132:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402134:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402138:	4770      	bx	lr
  40213a:	bf00      	nop
  40213c:	400e0600 	.word	0x400e0600

00402140 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402140:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402144:	4b01      	ldr	r3, [pc, #4]	; (40214c <pmc_disable_pllack+0xc>)
  402146:	629a      	str	r2, [r3, #40]	; 0x28
  402148:	4770      	bx	lr
  40214a:	bf00      	nop
  40214c:	400e0600 	.word	0x400e0600

00402150 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402150:	4b02      	ldr	r3, [pc, #8]	; (40215c <pmc_is_locked_pllack+0xc>)
  402152:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402154:	f000 0002 	and.w	r0, r0, #2
  402158:	4770      	bx	lr
  40215a:	bf00      	nop
  40215c:	400e0600 	.word	0x400e0600

00402160 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402160:	283f      	cmp	r0, #63	; 0x3f
  402162:	d81e      	bhi.n	4021a2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402164:	281f      	cmp	r0, #31
  402166:	d80c      	bhi.n	402182 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402168:	4b11      	ldr	r3, [pc, #68]	; (4021b0 <pmc_enable_periph_clk+0x50>)
  40216a:	699a      	ldr	r2, [r3, #24]
  40216c:	2301      	movs	r3, #1
  40216e:	4083      	lsls	r3, r0
  402170:	4393      	bics	r3, r2
  402172:	d018      	beq.n	4021a6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402174:	2301      	movs	r3, #1
  402176:	fa03 f000 	lsl.w	r0, r3, r0
  40217a:	4b0d      	ldr	r3, [pc, #52]	; (4021b0 <pmc_enable_periph_clk+0x50>)
  40217c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40217e:	2000      	movs	r0, #0
  402180:	4770      	bx	lr
		ul_id -= 32;
  402182:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402184:	4b0a      	ldr	r3, [pc, #40]	; (4021b0 <pmc_enable_periph_clk+0x50>)
  402186:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40218a:	2301      	movs	r3, #1
  40218c:	4083      	lsls	r3, r0
  40218e:	4393      	bics	r3, r2
  402190:	d00b      	beq.n	4021aa <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402192:	2301      	movs	r3, #1
  402194:	fa03 f000 	lsl.w	r0, r3, r0
  402198:	4b05      	ldr	r3, [pc, #20]	; (4021b0 <pmc_enable_periph_clk+0x50>)
  40219a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40219e:	2000      	movs	r0, #0
  4021a0:	4770      	bx	lr
		return 1;
  4021a2:	2001      	movs	r0, #1
  4021a4:	4770      	bx	lr
	return 0;
  4021a6:	2000      	movs	r0, #0
  4021a8:	4770      	bx	lr
  4021aa:	2000      	movs	r0, #0
}
  4021ac:	4770      	bx	lr
  4021ae:	bf00      	nop
  4021b0:	400e0600 	.word	0x400e0600

004021b4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4021b4:	6943      	ldr	r3, [r0, #20]
  4021b6:	f013 0f02 	tst.w	r3, #2
  4021ba:	d002      	beq.n	4021c2 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4021bc:	61c1      	str	r1, [r0, #28]
	return 0;
  4021be:	2000      	movs	r0, #0
  4021c0:	4770      	bx	lr
		return 1;
  4021c2:	2001      	movs	r0, #1
}
  4021c4:	4770      	bx	lr

004021c6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4021c6:	6943      	ldr	r3, [r0, #20]
  4021c8:	f013 0f01 	tst.w	r3, #1
  4021cc:	d003      	beq.n	4021d6 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4021ce:	6983      	ldr	r3, [r0, #24]
  4021d0:	700b      	strb	r3, [r1, #0]
	return 0;
  4021d2:	2000      	movs	r0, #0
  4021d4:	4770      	bx	lr
		return 1;
  4021d6:	2001      	movs	r0, #1
}
  4021d8:	4770      	bx	lr

004021da <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4021da:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4021dc:	010b      	lsls	r3, r1, #4
  4021de:	4293      	cmp	r3, r2
  4021e0:	d914      	bls.n	40220c <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4021e2:	00c9      	lsls	r1, r1, #3
  4021e4:	084b      	lsrs	r3, r1, #1
  4021e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4021ea:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4021ee:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4021f0:	1e5c      	subs	r4, r3, #1
  4021f2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4021f6:	428c      	cmp	r4, r1
  4021f8:	d901      	bls.n	4021fe <usart_set_async_baudrate+0x24>
		return 1;
  4021fa:	2001      	movs	r0, #1
  4021fc:	e017      	b.n	40222e <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4021fe:	6841      	ldr	r1, [r0, #4]
  402200:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  402204:	6041      	str	r1, [r0, #4]
  402206:	e00c      	b.n	402222 <usart_set_async_baudrate+0x48>
		return 1;
  402208:	2001      	movs	r0, #1
  40220a:	e010      	b.n	40222e <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40220c:	0859      	lsrs	r1, r3, #1
  40220e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  402212:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  402216:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402218:	1e5c      	subs	r4, r3, #1
  40221a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40221e:	428c      	cmp	r4, r1
  402220:	d8f2      	bhi.n	402208 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402222:	0412      	lsls	r2, r2, #16
  402224:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  402228:	431a      	orrs	r2, r3
  40222a:	6202      	str	r2, [r0, #32]

	return 0;
  40222c:	2000      	movs	r0, #0
}
  40222e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402232:	4770      	bx	lr

00402234 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  402234:	4b08      	ldr	r3, [pc, #32]	; (402258 <usart_reset+0x24>)
  402236:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40223a:	2300      	movs	r3, #0
  40223c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40223e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  402240:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  402242:	2388      	movs	r3, #136	; 0x88
  402244:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  402246:	2324      	movs	r3, #36	; 0x24
  402248:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40224a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40224e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  402250:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402254:	6003      	str	r3, [r0, #0]
  402256:	4770      	bx	lr
  402258:	55534100 	.word	0x55534100

0040225c <usart_init_rs232>:
{
  40225c:	b570      	push	{r4, r5, r6, lr}
  40225e:	4605      	mov	r5, r0
  402260:	460c      	mov	r4, r1
  402262:	4616      	mov	r6, r2
	usart_reset(p_usart);
  402264:	4b0f      	ldr	r3, [pc, #60]	; (4022a4 <usart_init_rs232+0x48>)
  402266:	4798      	blx	r3
	ul_reg_val = 0;
  402268:	2200      	movs	r2, #0
  40226a:	4b0f      	ldr	r3, [pc, #60]	; (4022a8 <usart_init_rs232+0x4c>)
  40226c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40226e:	b1a4      	cbz	r4, 40229a <usart_init_rs232+0x3e>
  402270:	4632      	mov	r2, r6
  402272:	6821      	ldr	r1, [r4, #0]
  402274:	4628      	mov	r0, r5
  402276:	4b0d      	ldr	r3, [pc, #52]	; (4022ac <usart_init_rs232+0x50>)
  402278:	4798      	blx	r3
  40227a:	4602      	mov	r2, r0
  40227c:	b978      	cbnz	r0, 40229e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40227e:	6863      	ldr	r3, [r4, #4]
  402280:	68a1      	ldr	r1, [r4, #8]
  402282:	430b      	orrs	r3, r1
  402284:	6921      	ldr	r1, [r4, #16]
  402286:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402288:	68e1      	ldr	r1, [r4, #12]
  40228a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40228c:	4906      	ldr	r1, [pc, #24]	; (4022a8 <usart_init_rs232+0x4c>)
  40228e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  402290:	6869      	ldr	r1, [r5, #4]
  402292:	430b      	orrs	r3, r1
  402294:	606b      	str	r3, [r5, #4]
}
  402296:	4610      	mov	r0, r2
  402298:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40229a:	2201      	movs	r2, #1
  40229c:	e7fb      	b.n	402296 <usart_init_rs232+0x3a>
  40229e:	2201      	movs	r2, #1
  4022a0:	e7f9      	b.n	402296 <usart_init_rs232+0x3a>
  4022a2:	bf00      	nop
  4022a4:	00402235 	.word	0x00402235
  4022a8:	20400c70 	.word	0x20400c70
  4022ac:	004021db 	.word	0x004021db

004022b0 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4022b0:	2340      	movs	r3, #64	; 0x40
  4022b2:	6003      	str	r3, [r0, #0]
  4022b4:	4770      	bx	lr

004022b6 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4022b6:	2310      	movs	r3, #16
  4022b8:	6003      	str	r3, [r0, #0]
  4022ba:	4770      	bx	lr

004022bc <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  4022bc:	6081      	str	r1, [r0, #8]
  4022be:	4770      	bx	lr

004022c0 <usart_get_status>:
	return p_usart->US_CSR;
  4022c0:	6940      	ldr	r0, [r0, #20]
}
  4022c2:	4770      	bx	lr

004022c4 <usart_is_tx_ready>:
	return (p_usart->US_CSR & US_CSR_TXRDY) > 0;
  4022c4:	6940      	ldr	r0, [r0, #20]
}
  4022c6:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4022ca:	4770      	bx	lr

004022cc <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4022cc:	6943      	ldr	r3, [r0, #20]
  4022ce:	f013 0f02 	tst.w	r3, #2
  4022d2:	d004      	beq.n	4022de <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4022d4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4022d8:	61c1      	str	r1, [r0, #28]
	return 0;
  4022da:	2000      	movs	r0, #0
  4022dc:	4770      	bx	lr
		return 1;
  4022de:	2001      	movs	r0, #1
}
  4022e0:	4770      	bx	lr

004022e2 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4022e2:	6943      	ldr	r3, [r0, #20]
  4022e4:	f013 0f01 	tst.w	r3, #1
  4022e8:	d005      	beq.n	4022f6 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4022ea:	6983      	ldr	r3, [r0, #24]
  4022ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4022f0:	600b      	str	r3, [r1, #0]
	return 0;
  4022f2:	2000      	movs	r0, #0
  4022f4:	4770      	bx	lr
		return 1;
  4022f6:	2001      	movs	r0, #1
}
  4022f8:	4770      	bx	lr

004022fa <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4022fa:	e7fe      	b.n	4022fa <Dummy_Handler>

004022fc <Reset_Handler>:
{
  4022fc:	b500      	push	{lr}
  4022fe:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  402300:	4b25      	ldr	r3, [pc, #148]	; (402398 <Reset_Handler+0x9c>)
  402302:	4a26      	ldr	r2, [pc, #152]	; (40239c <Reset_Handler+0xa0>)
  402304:	429a      	cmp	r2, r3
  402306:	d010      	beq.n	40232a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  402308:	4b25      	ldr	r3, [pc, #148]	; (4023a0 <Reset_Handler+0xa4>)
  40230a:	4a23      	ldr	r2, [pc, #140]	; (402398 <Reset_Handler+0x9c>)
  40230c:	429a      	cmp	r2, r3
  40230e:	d20c      	bcs.n	40232a <Reset_Handler+0x2e>
  402310:	3b01      	subs	r3, #1
  402312:	1a9b      	subs	r3, r3, r2
  402314:	f023 0303 	bic.w	r3, r3, #3
  402318:	3304      	adds	r3, #4
  40231a:	4413      	add	r3, r2
  40231c:	491f      	ldr	r1, [pc, #124]	; (40239c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40231e:	f851 0b04 	ldr.w	r0, [r1], #4
  402322:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  402326:	429a      	cmp	r2, r3
  402328:	d1f9      	bne.n	40231e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40232a:	4b1e      	ldr	r3, [pc, #120]	; (4023a4 <Reset_Handler+0xa8>)
  40232c:	4a1e      	ldr	r2, [pc, #120]	; (4023a8 <Reset_Handler+0xac>)
  40232e:	429a      	cmp	r2, r3
  402330:	d20a      	bcs.n	402348 <Reset_Handler+0x4c>
  402332:	3b01      	subs	r3, #1
  402334:	1a9b      	subs	r3, r3, r2
  402336:	f023 0303 	bic.w	r3, r3, #3
  40233a:	3304      	adds	r3, #4
  40233c:	4413      	add	r3, r2
                *pDest++ = 0;
  40233e:	2100      	movs	r1, #0
  402340:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  402344:	4293      	cmp	r3, r2
  402346:	d1fb      	bne.n	402340 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402348:	4a18      	ldr	r2, [pc, #96]	; (4023ac <Reset_Handler+0xb0>)
  40234a:	4b19      	ldr	r3, [pc, #100]	; (4023b0 <Reset_Handler+0xb4>)
  40234c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402350:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402352:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402356:	fab3 f383 	clz	r3, r3
  40235a:	095b      	lsrs	r3, r3, #5
  40235c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40235e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402360:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402364:	2200      	movs	r2, #0
  402366:	4b13      	ldr	r3, [pc, #76]	; (4023b4 <Reset_Handler+0xb8>)
  402368:	701a      	strb	r2, [r3, #0]
	return flags;
  40236a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40236c:	4a12      	ldr	r2, [pc, #72]	; (4023b8 <Reset_Handler+0xbc>)
  40236e:	6813      	ldr	r3, [r2, #0]
  402370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402374:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402376:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40237a:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40237e:	b129      	cbz	r1, 40238c <Reset_Handler+0x90>
		cpu_irq_enable();
  402380:	2201      	movs	r2, #1
  402382:	4b0c      	ldr	r3, [pc, #48]	; (4023b4 <Reset_Handler+0xb8>)
  402384:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402386:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40238a:	b662      	cpsie	i
        __libc_init_array();
  40238c:	4b0b      	ldr	r3, [pc, #44]	; (4023bc <Reset_Handler+0xc0>)
  40238e:	4798      	blx	r3
        main();
  402390:	4b0b      	ldr	r3, [pc, #44]	; (4023c0 <Reset_Handler+0xc4>)
  402392:	4798      	blx	r3
  402394:	e7fe      	b.n	402394 <Reset_Handler+0x98>
  402396:	bf00      	nop
  402398:	20400000 	.word	0x20400000
  40239c:	0040792c 	.word	0x0040792c
  4023a0:	204009d0 	.word	0x204009d0
  4023a4:	20400f04 	.word	0x20400f04
  4023a8:	204009d0 	.word	0x204009d0
  4023ac:	e000ed00 	.word	0xe000ed00
  4023b0:	00400000 	.word	0x00400000
  4023b4:	20400018 	.word	0x20400018
  4023b8:	e000ed88 	.word	0xe000ed88
  4023bc:	004046fd 	.word	0x004046fd
  4023c0:	004043d5 	.word	0x004043d5

004023c4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4023c4:	4b3b      	ldr	r3, [pc, #236]	; (4024b4 <SystemCoreClockUpdate+0xf0>)
  4023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023c8:	f003 0303 	and.w	r3, r3, #3
  4023cc:	2b01      	cmp	r3, #1
  4023ce:	d01d      	beq.n	40240c <SystemCoreClockUpdate+0x48>
  4023d0:	b183      	cbz	r3, 4023f4 <SystemCoreClockUpdate+0x30>
  4023d2:	2b02      	cmp	r3, #2
  4023d4:	d036      	beq.n	402444 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4023d6:	4b37      	ldr	r3, [pc, #220]	; (4024b4 <SystemCoreClockUpdate+0xf0>)
  4023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023da:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4023de:	2b70      	cmp	r3, #112	; 0x70
  4023e0:	d05f      	beq.n	4024a2 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4023e2:	4b34      	ldr	r3, [pc, #208]	; (4024b4 <SystemCoreClockUpdate+0xf0>)
  4023e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023e6:	4934      	ldr	r1, [pc, #208]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
  4023e8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4023ec:	680b      	ldr	r3, [r1, #0]
  4023ee:	40d3      	lsrs	r3, r2
  4023f0:	600b      	str	r3, [r1, #0]
  4023f2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4023f4:	4b31      	ldr	r3, [pc, #196]	; (4024bc <SystemCoreClockUpdate+0xf8>)
  4023f6:	695b      	ldr	r3, [r3, #20]
  4023f8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4023fc:	bf14      	ite	ne
  4023fe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402402:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402406:	4b2c      	ldr	r3, [pc, #176]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
  402408:	601a      	str	r2, [r3, #0]
  40240a:	e7e4      	b.n	4023d6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40240c:	4b29      	ldr	r3, [pc, #164]	; (4024b4 <SystemCoreClockUpdate+0xf0>)
  40240e:	6a1b      	ldr	r3, [r3, #32]
  402410:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402414:	d003      	beq.n	40241e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402416:	4a2a      	ldr	r2, [pc, #168]	; (4024c0 <SystemCoreClockUpdate+0xfc>)
  402418:	4b27      	ldr	r3, [pc, #156]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
  40241a:	601a      	str	r2, [r3, #0]
  40241c:	e7db      	b.n	4023d6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40241e:	4a29      	ldr	r2, [pc, #164]	; (4024c4 <SystemCoreClockUpdate+0x100>)
  402420:	4b25      	ldr	r3, [pc, #148]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
  402422:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402424:	4b23      	ldr	r3, [pc, #140]	; (4024b4 <SystemCoreClockUpdate+0xf0>)
  402426:	6a1b      	ldr	r3, [r3, #32]
  402428:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40242c:	2b10      	cmp	r3, #16
  40242e:	d005      	beq.n	40243c <SystemCoreClockUpdate+0x78>
  402430:	2b20      	cmp	r3, #32
  402432:	d1d0      	bne.n	4023d6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  402434:	4a22      	ldr	r2, [pc, #136]	; (4024c0 <SystemCoreClockUpdate+0xfc>)
  402436:	4b20      	ldr	r3, [pc, #128]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
  402438:	601a      	str	r2, [r3, #0]
          break;
  40243a:	e7cc      	b.n	4023d6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40243c:	4a22      	ldr	r2, [pc, #136]	; (4024c8 <SystemCoreClockUpdate+0x104>)
  40243e:	4b1e      	ldr	r3, [pc, #120]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
  402440:	601a      	str	r2, [r3, #0]
          break;
  402442:	e7c8      	b.n	4023d6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402444:	4b1b      	ldr	r3, [pc, #108]	; (4024b4 <SystemCoreClockUpdate+0xf0>)
  402446:	6a1b      	ldr	r3, [r3, #32]
  402448:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40244c:	d016      	beq.n	40247c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40244e:	4a1c      	ldr	r2, [pc, #112]	; (4024c0 <SystemCoreClockUpdate+0xfc>)
  402450:	4b19      	ldr	r3, [pc, #100]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
  402452:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402454:	4b17      	ldr	r3, [pc, #92]	; (4024b4 <SystemCoreClockUpdate+0xf0>)
  402456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402458:	f003 0303 	and.w	r3, r3, #3
  40245c:	2b02      	cmp	r3, #2
  40245e:	d1ba      	bne.n	4023d6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402460:	4a14      	ldr	r2, [pc, #80]	; (4024b4 <SystemCoreClockUpdate+0xf0>)
  402462:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402464:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402466:	4814      	ldr	r0, [pc, #80]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402468:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40246c:	6803      	ldr	r3, [r0, #0]
  40246e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402472:	b2d2      	uxtb	r2, r2
  402474:	fbb3 f3f2 	udiv	r3, r3, r2
  402478:	6003      	str	r3, [r0, #0]
  40247a:	e7ac      	b.n	4023d6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40247c:	4a11      	ldr	r2, [pc, #68]	; (4024c4 <SystemCoreClockUpdate+0x100>)
  40247e:	4b0e      	ldr	r3, [pc, #56]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
  402480:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402482:	4b0c      	ldr	r3, [pc, #48]	; (4024b4 <SystemCoreClockUpdate+0xf0>)
  402484:	6a1b      	ldr	r3, [r3, #32]
  402486:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40248a:	2b10      	cmp	r3, #16
  40248c:	d005      	beq.n	40249a <SystemCoreClockUpdate+0xd6>
  40248e:	2b20      	cmp	r3, #32
  402490:	d1e0      	bne.n	402454 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  402492:	4a0b      	ldr	r2, [pc, #44]	; (4024c0 <SystemCoreClockUpdate+0xfc>)
  402494:	4b08      	ldr	r3, [pc, #32]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
  402496:	601a      	str	r2, [r3, #0]
          break;
  402498:	e7dc      	b.n	402454 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40249a:	4a0b      	ldr	r2, [pc, #44]	; (4024c8 <SystemCoreClockUpdate+0x104>)
  40249c:	4b06      	ldr	r3, [pc, #24]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
  40249e:	601a      	str	r2, [r3, #0]
          break;
  4024a0:	e7d8      	b.n	402454 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4024a2:	4a05      	ldr	r2, [pc, #20]	; (4024b8 <SystemCoreClockUpdate+0xf4>)
  4024a4:	6813      	ldr	r3, [r2, #0]
  4024a6:	4909      	ldr	r1, [pc, #36]	; (4024cc <SystemCoreClockUpdate+0x108>)
  4024a8:	fba1 1303 	umull	r1, r3, r1, r3
  4024ac:	085b      	lsrs	r3, r3, #1
  4024ae:	6013      	str	r3, [r2, #0]
  4024b0:	4770      	bx	lr
  4024b2:	bf00      	nop
  4024b4:	400e0600 	.word	0x400e0600
  4024b8:	2040001c 	.word	0x2040001c
  4024bc:	400e1810 	.word	0x400e1810
  4024c0:	00b71b00 	.word	0x00b71b00
  4024c4:	003d0900 	.word	0x003d0900
  4024c8:	007a1200 	.word	0x007a1200
  4024cc:	aaaaaaab 	.word	0xaaaaaaab

004024d0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4024d0:	4b16      	ldr	r3, [pc, #88]	; (40252c <system_init_flash+0x5c>)
  4024d2:	4298      	cmp	r0, r3
  4024d4:	d913      	bls.n	4024fe <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4024d6:	4b16      	ldr	r3, [pc, #88]	; (402530 <system_init_flash+0x60>)
  4024d8:	4298      	cmp	r0, r3
  4024da:	d915      	bls.n	402508 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4024dc:	4b15      	ldr	r3, [pc, #84]	; (402534 <system_init_flash+0x64>)
  4024de:	4298      	cmp	r0, r3
  4024e0:	d916      	bls.n	402510 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4024e2:	4b15      	ldr	r3, [pc, #84]	; (402538 <system_init_flash+0x68>)
  4024e4:	4298      	cmp	r0, r3
  4024e6:	d917      	bls.n	402518 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4024e8:	4b14      	ldr	r3, [pc, #80]	; (40253c <system_init_flash+0x6c>)
  4024ea:	4298      	cmp	r0, r3
  4024ec:	d918      	bls.n	402520 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4024ee:	4b14      	ldr	r3, [pc, #80]	; (402540 <system_init_flash+0x70>)
  4024f0:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4024f2:	bf94      	ite	ls
  4024f4:	4a13      	ldrls	r2, [pc, #76]	; (402544 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4024f6:	4a14      	ldrhi	r2, [pc, #80]	; (402548 <system_init_flash+0x78>)
  4024f8:	4b14      	ldr	r3, [pc, #80]	; (40254c <system_init_flash+0x7c>)
  4024fa:	601a      	str	r2, [r3, #0]
  4024fc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4024fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402502:	4b12      	ldr	r3, [pc, #72]	; (40254c <system_init_flash+0x7c>)
  402504:	601a      	str	r2, [r3, #0]
  402506:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402508:	4a11      	ldr	r2, [pc, #68]	; (402550 <system_init_flash+0x80>)
  40250a:	4b10      	ldr	r3, [pc, #64]	; (40254c <system_init_flash+0x7c>)
  40250c:	601a      	str	r2, [r3, #0]
  40250e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402510:	4a10      	ldr	r2, [pc, #64]	; (402554 <system_init_flash+0x84>)
  402512:	4b0e      	ldr	r3, [pc, #56]	; (40254c <system_init_flash+0x7c>)
  402514:	601a      	str	r2, [r3, #0]
  402516:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402518:	4a0f      	ldr	r2, [pc, #60]	; (402558 <system_init_flash+0x88>)
  40251a:	4b0c      	ldr	r3, [pc, #48]	; (40254c <system_init_flash+0x7c>)
  40251c:	601a      	str	r2, [r3, #0]
  40251e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402520:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402524:	4b09      	ldr	r3, [pc, #36]	; (40254c <system_init_flash+0x7c>)
  402526:	601a      	str	r2, [r3, #0]
  402528:	4770      	bx	lr
  40252a:	bf00      	nop
  40252c:	015ef3bf 	.word	0x015ef3bf
  402530:	02bde77f 	.word	0x02bde77f
  402534:	041cdb3f 	.word	0x041cdb3f
  402538:	057bceff 	.word	0x057bceff
  40253c:	06dac2bf 	.word	0x06dac2bf
  402540:	0839b67f 	.word	0x0839b67f
  402544:	04000500 	.word	0x04000500
  402548:	04000600 	.word	0x04000600
  40254c:	400e0c00 	.word	0x400e0c00
  402550:	04000100 	.word	0x04000100
  402554:	04000200 	.word	0x04000200
  402558:	04000300 	.word	0x04000300

0040255c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40255c:	4b0a      	ldr	r3, [pc, #40]	; (402588 <_sbrk+0x2c>)
  40255e:	681b      	ldr	r3, [r3, #0]
  402560:	b153      	cbz	r3, 402578 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402562:	4b09      	ldr	r3, [pc, #36]	; (402588 <_sbrk+0x2c>)
  402564:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402566:	181a      	adds	r2, r3, r0
  402568:	4908      	ldr	r1, [pc, #32]	; (40258c <_sbrk+0x30>)
  40256a:	4291      	cmp	r1, r2
  40256c:	db08      	blt.n	402580 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40256e:	4610      	mov	r0, r2
  402570:	4a05      	ldr	r2, [pc, #20]	; (402588 <_sbrk+0x2c>)
  402572:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402574:	4618      	mov	r0, r3
  402576:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402578:	4a05      	ldr	r2, [pc, #20]	; (402590 <_sbrk+0x34>)
  40257a:	4b03      	ldr	r3, [pc, #12]	; (402588 <_sbrk+0x2c>)
  40257c:	601a      	str	r2, [r3, #0]
  40257e:	e7f0      	b.n	402562 <_sbrk+0x6>
		return (caddr_t) -1;	
  402580:	f04f 30ff 	mov.w	r0, #4294967295
}
  402584:	4770      	bx	lr
  402586:	bf00      	nop
  402588:	20400c74 	.word	0x20400c74
  40258c:	2045fffc 	.word	0x2045fffc
  402590:	20403108 	.word	0x20403108

00402594 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402594:	f04f 30ff 	mov.w	r0, #4294967295
  402598:	4770      	bx	lr

0040259a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40259a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40259e:	604b      	str	r3, [r1, #4]

	return 0;
}
  4025a0:	2000      	movs	r0, #0
  4025a2:	4770      	bx	lr

004025a4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4025a4:	2001      	movs	r0, #1
  4025a6:	4770      	bx	lr

004025a8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4025a8:	2000      	movs	r0, #0
  4025aa:	4770      	bx	lr

004025ac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4025ac:	f100 0308 	add.w	r3, r0, #8
  4025b0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4025b2:	f04f 32ff 	mov.w	r2, #4294967295
  4025b6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4025b8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4025ba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4025bc:	2300      	movs	r3, #0
  4025be:	6003      	str	r3, [r0, #0]
  4025c0:	4770      	bx	lr

004025c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4025c2:	2300      	movs	r3, #0
  4025c4:	6103      	str	r3, [r0, #16]
  4025c6:	4770      	bx	lr

004025c8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4025c8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4025ca:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4025cc:	689a      	ldr	r2, [r3, #8]
  4025ce:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4025d0:	689a      	ldr	r2, [r3, #8]
  4025d2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4025d4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4025d6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4025d8:	6803      	ldr	r3, [r0, #0]
  4025da:	3301      	adds	r3, #1
  4025dc:	6003      	str	r3, [r0, #0]
  4025de:	4770      	bx	lr

004025e0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4025e0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4025e2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4025e4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4025e8:	d002      	beq.n	4025f0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4025ea:	f100 0208 	add.w	r2, r0, #8
  4025ee:	e002      	b.n	4025f6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4025f0:	6902      	ldr	r2, [r0, #16]
  4025f2:	e004      	b.n	4025fe <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4025f4:	461a      	mov	r2, r3
  4025f6:	6853      	ldr	r3, [r2, #4]
  4025f8:	681c      	ldr	r4, [r3, #0]
  4025fa:	42a5      	cmp	r5, r4
  4025fc:	d2fa      	bcs.n	4025f4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4025fe:	6853      	ldr	r3, [r2, #4]
  402600:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  402602:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  402604:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  402606:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  402608:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40260a:	6803      	ldr	r3, [r0, #0]
  40260c:	3301      	adds	r3, #1
  40260e:	6003      	str	r3, [r0, #0]
}
  402610:	bc30      	pop	{r4, r5}
  402612:	4770      	bx	lr

00402614 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  402614:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  402616:	6842      	ldr	r2, [r0, #4]
  402618:	6881      	ldr	r1, [r0, #8]
  40261a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40261c:	6882      	ldr	r2, [r0, #8]
  40261e:	6841      	ldr	r1, [r0, #4]
  402620:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  402622:	685a      	ldr	r2, [r3, #4]
  402624:	4290      	cmp	r0, r2
  402626:	d005      	beq.n	402634 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  402628:	2200      	movs	r2, #0
  40262a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  40262c:	6818      	ldr	r0, [r3, #0]
  40262e:	3801      	subs	r0, #1
  402630:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  402632:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  402634:	6882      	ldr	r2, [r0, #8]
  402636:	605a      	str	r2, [r3, #4]
  402638:	e7f6      	b.n	402628 <uxListRemove+0x14>
	...

0040263c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  40263c:	4b0d      	ldr	r3, [pc, #52]	; (402674 <prvTaskExitError+0x38>)
  40263e:	681b      	ldr	r3, [r3, #0]
  402640:	f1b3 3fff 	cmp.w	r3, #4294967295
  402644:	d00a      	beq.n	40265c <prvTaskExitError+0x20>
  402646:	f04f 0380 	mov.w	r3, #128	; 0x80
  40264a:	b672      	cpsid	i
  40264c:	f383 8811 	msr	BASEPRI, r3
  402650:	f3bf 8f6f 	isb	sy
  402654:	f3bf 8f4f 	dsb	sy
  402658:	b662      	cpsie	i
  40265a:	e7fe      	b.n	40265a <prvTaskExitError+0x1e>
  40265c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402660:	b672      	cpsid	i
  402662:	f383 8811 	msr	BASEPRI, r3
  402666:	f3bf 8f6f 	isb	sy
  40266a:	f3bf 8f4f 	dsb	sy
  40266e:	b662      	cpsie	i
  402670:	e7fe      	b.n	402670 <prvTaskExitError+0x34>
  402672:	bf00      	nop
  402674:	20400020 	.word	0x20400020

00402678 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  402678:	4806      	ldr	r0, [pc, #24]	; (402694 <prvPortStartFirstTask+0x1c>)
  40267a:	6800      	ldr	r0, [r0, #0]
  40267c:	6800      	ldr	r0, [r0, #0]
  40267e:	f380 8808 	msr	MSP, r0
  402682:	b662      	cpsie	i
  402684:	b661      	cpsie	f
  402686:	f3bf 8f4f 	dsb	sy
  40268a:	f3bf 8f6f 	isb	sy
  40268e:	df00      	svc	0
  402690:	bf00      	nop
  402692:	0000      	.short	0x0000
  402694:	e000ed08 	.word	0xe000ed08

00402698 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  402698:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4026a8 <vPortEnableVFP+0x10>
  40269c:	6801      	ldr	r1, [r0, #0]
  40269e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4026a2:	6001      	str	r1, [r0, #0]
  4026a4:	4770      	bx	lr
  4026a6:	0000      	.short	0x0000
  4026a8:	e000ed88 	.word	0xe000ed88

004026ac <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4026ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4026b0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4026b4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4026b8:	4b05      	ldr	r3, [pc, #20]	; (4026d0 <pxPortInitialiseStack+0x24>)
  4026ba:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4026be:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4026c2:	f06f 0302 	mvn.w	r3, #2
  4026c6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4026ca:	3844      	subs	r0, #68	; 0x44
  4026cc:	4770      	bx	lr
  4026ce:	bf00      	nop
  4026d0:	0040263d 	.word	0x0040263d

004026d4 <SVC_Handler>:
	__asm volatile (
  4026d4:	4b06      	ldr	r3, [pc, #24]	; (4026f0 <pxCurrentTCBConst2>)
  4026d6:	6819      	ldr	r1, [r3, #0]
  4026d8:	6808      	ldr	r0, [r1, #0]
  4026da:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026de:	f380 8809 	msr	PSP, r0
  4026e2:	f3bf 8f6f 	isb	sy
  4026e6:	f04f 0000 	mov.w	r0, #0
  4026ea:	f380 8811 	msr	BASEPRI, r0
  4026ee:	4770      	bx	lr

004026f0 <pxCurrentTCBConst2>:
  4026f0:	20400c80 	.word	0x20400c80
  4026f4:	4770      	bx	lr
  4026f6:	bf00      	nop

004026f8 <vPortEnterCritical>:
  4026f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026fc:	b672      	cpsid	i
  4026fe:	f383 8811 	msr	BASEPRI, r3
  402702:	f3bf 8f6f 	isb	sy
  402706:	f3bf 8f4f 	dsb	sy
  40270a:	b662      	cpsie	i
	uxCriticalNesting++;
  40270c:	4a0b      	ldr	r2, [pc, #44]	; (40273c <vPortEnterCritical+0x44>)
  40270e:	6813      	ldr	r3, [r2, #0]
  402710:	3301      	adds	r3, #1
  402712:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  402714:	2b01      	cmp	r3, #1
  402716:	d10f      	bne.n	402738 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  402718:	4b09      	ldr	r3, [pc, #36]	; (402740 <vPortEnterCritical+0x48>)
  40271a:	681b      	ldr	r3, [r3, #0]
  40271c:	f013 0fff 	tst.w	r3, #255	; 0xff
  402720:	d00a      	beq.n	402738 <vPortEnterCritical+0x40>
  402722:	f04f 0380 	mov.w	r3, #128	; 0x80
  402726:	b672      	cpsid	i
  402728:	f383 8811 	msr	BASEPRI, r3
  40272c:	f3bf 8f6f 	isb	sy
  402730:	f3bf 8f4f 	dsb	sy
  402734:	b662      	cpsie	i
  402736:	e7fe      	b.n	402736 <vPortEnterCritical+0x3e>
  402738:	4770      	bx	lr
  40273a:	bf00      	nop
  40273c:	20400020 	.word	0x20400020
  402740:	e000ed04 	.word	0xe000ed04

00402744 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  402744:	4b0a      	ldr	r3, [pc, #40]	; (402770 <vPortExitCritical+0x2c>)
  402746:	681b      	ldr	r3, [r3, #0]
  402748:	b953      	cbnz	r3, 402760 <vPortExitCritical+0x1c>
  40274a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40274e:	b672      	cpsid	i
  402750:	f383 8811 	msr	BASEPRI, r3
  402754:	f3bf 8f6f 	isb	sy
  402758:	f3bf 8f4f 	dsb	sy
  40275c:	b662      	cpsie	i
  40275e:	e7fe      	b.n	40275e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  402760:	3b01      	subs	r3, #1
  402762:	4a03      	ldr	r2, [pc, #12]	; (402770 <vPortExitCritical+0x2c>)
  402764:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  402766:	b90b      	cbnz	r3, 40276c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  402768:	f383 8811 	msr	BASEPRI, r3
  40276c:	4770      	bx	lr
  40276e:	bf00      	nop
  402770:	20400020 	.word	0x20400020

00402774 <PendSV_Handler>:
	__asm volatile
  402774:	f3ef 8009 	mrs	r0, PSP
  402778:	f3bf 8f6f 	isb	sy
  40277c:	4b15      	ldr	r3, [pc, #84]	; (4027d4 <pxCurrentTCBConst>)
  40277e:	681a      	ldr	r2, [r3, #0]
  402780:	f01e 0f10 	tst.w	lr, #16
  402784:	bf08      	it	eq
  402786:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40278a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40278e:	6010      	str	r0, [r2, #0]
  402790:	f84d 3d04 	str.w	r3, [sp, #-4]!
  402794:	f04f 0080 	mov.w	r0, #128	; 0x80
  402798:	b672      	cpsid	i
  40279a:	f380 8811 	msr	BASEPRI, r0
  40279e:	f3bf 8f4f 	dsb	sy
  4027a2:	f3bf 8f6f 	isb	sy
  4027a6:	b662      	cpsie	i
  4027a8:	f001 f8fe 	bl	4039a8 <vTaskSwitchContext>
  4027ac:	f04f 0000 	mov.w	r0, #0
  4027b0:	f380 8811 	msr	BASEPRI, r0
  4027b4:	bc08      	pop	{r3}
  4027b6:	6819      	ldr	r1, [r3, #0]
  4027b8:	6808      	ldr	r0, [r1, #0]
  4027ba:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027be:	f01e 0f10 	tst.w	lr, #16
  4027c2:	bf08      	it	eq
  4027c4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4027c8:	f380 8809 	msr	PSP, r0
  4027cc:	f3bf 8f6f 	isb	sy
  4027d0:	4770      	bx	lr
  4027d2:	bf00      	nop

004027d4 <pxCurrentTCBConst>:
  4027d4:	20400c80 	.word	0x20400c80
  4027d8:	4770      	bx	lr
  4027da:	bf00      	nop

004027dc <SysTick_Handler>:
{
  4027dc:	b508      	push	{r3, lr}
	__asm volatile
  4027de:	f3ef 8311 	mrs	r3, BASEPRI
  4027e2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4027e6:	b672      	cpsid	i
  4027e8:	f382 8811 	msr	BASEPRI, r2
  4027ec:	f3bf 8f6f 	isb	sy
  4027f0:	f3bf 8f4f 	dsb	sy
  4027f4:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4027f6:	4b05      	ldr	r3, [pc, #20]	; (40280c <SysTick_Handler+0x30>)
  4027f8:	4798      	blx	r3
  4027fa:	b118      	cbz	r0, 402804 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4027fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402800:	4b03      	ldr	r3, [pc, #12]	; (402810 <SysTick_Handler+0x34>)
  402802:	601a      	str	r2, [r3, #0]
	__asm volatile
  402804:	2300      	movs	r3, #0
  402806:	f383 8811 	msr	BASEPRI, r3
  40280a:	bd08      	pop	{r3, pc}
  40280c:	00403615 	.word	0x00403615
  402810:	e000ed04 	.word	0xe000ed04

00402814 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  402814:	4a03      	ldr	r2, [pc, #12]	; (402824 <vPortSetupTimerInterrupt+0x10>)
  402816:	4b04      	ldr	r3, [pc, #16]	; (402828 <vPortSetupTimerInterrupt+0x14>)
  402818:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40281a:	2207      	movs	r2, #7
  40281c:	3b04      	subs	r3, #4
  40281e:	601a      	str	r2, [r3, #0]
  402820:	4770      	bx	lr
  402822:	bf00      	nop
  402824:	000927bf 	.word	0x000927bf
  402828:	e000e014 	.word	0xe000e014

0040282c <xPortStartScheduler>:
{
  40282c:	b500      	push	{lr}
  40282e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  402830:	4b25      	ldr	r3, [pc, #148]	; (4028c8 <xPortStartScheduler+0x9c>)
  402832:	781a      	ldrb	r2, [r3, #0]
  402834:	b2d2      	uxtb	r2, r2
  402836:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  402838:	22ff      	movs	r2, #255	; 0xff
  40283a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  40283c:	781b      	ldrb	r3, [r3, #0]
  40283e:	b2db      	uxtb	r3, r3
  402840:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  402844:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402848:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40284c:	4a1f      	ldr	r2, [pc, #124]	; (4028cc <xPortStartScheduler+0xa0>)
  40284e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  402850:	2207      	movs	r2, #7
  402852:	4b1f      	ldr	r3, [pc, #124]	; (4028d0 <xPortStartScheduler+0xa4>)
  402854:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402856:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40285a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40285e:	d010      	beq.n	402882 <xPortStartScheduler+0x56>
  402860:	2206      	movs	r2, #6
  402862:	e000      	b.n	402866 <xPortStartScheduler+0x3a>
  402864:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  402866:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40286a:	005b      	lsls	r3, r3, #1
  40286c:	b2db      	uxtb	r3, r3
  40286e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402872:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402876:	1e51      	subs	r1, r2, #1
  402878:	f013 0f80 	tst.w	r3, #128	; 0x80
  40287c:	d1f2      	bne.n	402864 <xPortStartScheduler+0x38>
  40287e:	4b14      	ldr	r3, [pc, #80]	; (4028d0 <xPortStartScheduler+0xa4>)
  402880:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402882:	4a13      	ldr	r2, [pc, #76]	; (4028d0 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  402884:	6813      	ldr	r3, [r2, #0]
  402886:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402888:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40288c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40288e:	9b01      	ldr	r3, [sp, #4]
  402890:	b2db      	uxtb	r3, r3
  402892:	4a0d      	ldr	r2, [pc, #52]	; (4028c8 <xPortStartScheduler+0x9c>)
  402894:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  402896:	4b0f      	ldr	r3, [pc, #60]	; (4028d4 <xPortStartScheduler+0xa8>)
  402898:	681a      	ldr	r2, [r3, #0]
  40289a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40289e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4028a0:	681a      	ldr	r2, [r3, #0]
  4028a2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4028a6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4028a8:	4b0b      	ldr	r3, [pc, #44]	; (4028d8 <xPortStartScheduler+0xac>)
  4028aa:	4798      	blx	r3
	uxCriticalNesting = 0;
  4028ac:	2200      	movs	r2, #0
  4028ae:	4b0b      	ldr	r3, [pc, #44]	; (4028dc <xPortStartScheduler+0xb0>)
  4028b0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4028b2:	4b0b      	ldr	r3, [pc, #44]	; (4028e0 <xPortStartScheduler+0xb4>)
  4028b4:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4028b6:	4a0b      	ldr	r2, [pc, #44]	; (4028e4 <xPortStartScheduler+0xb8>)
  4028b8:	6813      	ldr	r3, [r2, #0]
  4028ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4028be:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4028c0:	4b09      	ldr	r3, [pc, #36]	; (4028e8 <xPortStartScheduler+0xbc>)
  4028c2:	4798      	blx	r3
	prvTaskExitError();
  4028c4:	4b09      	ldr	r3, [pc, #36]	; (4028ec <xPortStartScheduler+0xc0>)
  4028c6:	4798      	blx	r3
  4028c8:	e000e400 	.word	0xe000e400
  4028cc:	20400c78 	.word	0x20400c78
  4028d0:	20400c7c 	.word	0x20400c7c
  4028d4:	e000ed20 	.word	0xe000ed20
  4028d8:	00402815 	.word	0x00402815
  4028dc:	20400020 	.word	0x20400020
  4028e0:	00402699 	.word	0x00402699
  4028e4:	e000ef34 	.word	0xe000ef34
  4028e8:	00402679 	.word	0x00402679
  4028ec:	0040263d 	.word	0x0040263d

004028f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4028f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4028f4:	2b0f      	cmp	r3, #15
  4028f6:	d911      	bls.n	40291c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4028f8:	4a12      	ldr	r2, [pc, #72]	; (402944 <vPortValidateInterruptPriority+0x54>)
  4028fa:	5c9b      	ldrb	r3, [r3, r2]
  4028fc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4028fe:	4a12      	ldr	r2, [pc, #72]	; (402948 <vPortValidateInterruptPriority+0x58>)
  402900:	7812      	ldrb	r2, [r2, #0]
  402902:	429a      	cmp	r2, r3
  402904:	d90a      	bls.n	40291c <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  402906:	f04f 0380 	mov.w	r3, #128	; 0x80
  40290a:	b672      	cpsid	i
  40290c:	f383 8811 	msr	BASEPRI, r3
  402910:	f3bf 8f6f 	isb	sy
  402914:	f3bf 8f4f 	dsb	sy
  402918:	b662      	cpsie	i
  40291a:	e7fe      	b.n	40291a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40291c:	4b0b      	ldr	r3, [pc, #44]	; (40294c <vPortValidateInterruptPriority+0x5c>)
  40291e:	681b      	ldr	r3, [r3, #0]
  402920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402924:	4a0a      	ldr	r2, [pc, #40]	; (402950 <vPortValidateInterruptPriority+0x60>)
  402926:	6812      	ldr	r2, [r2, #0]
  402928:	4293      	cmp	r3, r2
  40292a:	d90a      	bls.n	402942 <vPortValidateInterruptPriority+0x52>
  40292c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402930:	b672      	cpsid	i
  402932:	f383 8811 	msr	BASEPRI, r3
  402936:	f3bf 8f6f 	isb	sy
  40293a:	f3bf 8f4f 	dsb	sy
  40293e:	b662      	cpsie	i
  402940:	e7fe      	b.n	402940 <vPortValidateInterruptPriority+0x50>
  402942:	4770      	bx	lr
  402944:	e000e3f0 	.word	0xe000e3f0
  402948:	20400c78 	.word	0x20400c78
  40294c:	e000ed0c 	.word	0xe000ed0c
  402950:	20400c7c 	.word	0x20400c7c

00402954 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  402954:	b510      	push	{r4, lr}
  402956:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  402958:	4b06      	ldr	r3, [pc, #24]	; (402974 <pvPortMalloc+0x20>)
  40295a:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  40295c:	4620      	mov	r0, r4
  40295e:	4b06      	ldr	r3, [pc, #24]	; (402978 <pvPortMalloc+0x24>)
  402960:	4798      	blx	r3
  402962:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  402964:	4b05      	ldr	r3, [pc, #20]	; (40297c <pvPortMalloc+0x28>)
  402966:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  402968:	b10c      	cbz	r4, 40296e <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  40296a:	4620      	mov	r0, r4
  40296c:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40296e:	4b04      	ldr	r3, [pc, #16]	; (402980 <pvPortMalloc+0x2c>)
  402970:	4798      	blx	r3
	return pvReturn;
  402972:	e7fa      	b.n	40296a <pvPortMalloc+0x16>
  402974:	004035f9 	.word	0x004035f9
  402978:	00404775 	.word	0x00404775
  40297c:	00403761 	.word	0x00403761
  402980:	00401147 	.word	0x00401147

00402984 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  402984:	b148      	cbz	r0, 40299a <vPortFree+0x16>
{
  402986:	b510      	push	{r4, lr}
  402988:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  40298a:	4b04      	ldr	r3, [pc, #16]	; (40299c <vPortFree+0x18>)
  40298c:	4798      	blx	r3
		{
			free( pv );
  40298e:	4620      	mov	r0, r4
  402990:	4b03      	ldr	r3, [pc, #12]	; (4029a0 <vPortFree+0x1c>)
  402992:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  402994:	4b03      	ldr	r3, [pc, #12]	; (4029a4 <vPortFree+0x20>)
  402996:	4798      	blx	r3
  402998:	bd10      	pop	{r4, pc}
  40299a:	4770      	bx	lr
  40299c:	004035f9 	.word	0x004035f9
  4029a0:	00404785 	.word	0x00404785
  4029a4:	00403761 	.word	0x00403761

004029a8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4029a8:	b538      	push	{r3, r4, r5, lr}
  4029aa:	4604      	mov	r4, r0
  4029ac:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4029ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4029b0:	b95a      	cbnz	r2, 4029ca <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4029b2:	6803      	ldr	r3, [r0, #0]
  4029b4:	2b00      	cmp	r3, #0
  4029b6:	d12e      	bne.n	402a16 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4029b8:	6840      	ldr	r0, [r0, #4]
  4029ba:	4b1b      	ldr	r3, [pc, #108]	; (402a28 <prvCopyDataToQueue+0x80>)
  4029bc:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4029be:	2300      	movs	r3, #0
  4029c0:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4029c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4029c4:	3301      	adds	r3, #1
  4029c6:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4029c8:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4029ca:	b96d      	cbnz	r5, 4029e8 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4029cc:	6880      	ldr	r0, [r0, #8]
  4029ce:	4b17      	ldr	r3, [pc, #92]	; (402a2c <prvCopyDataToQueue+0x84>)
  4029d0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4029d2:	68a3      	ldr	r3, [r4, #8]
  4029d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4029d6:	4413      	add	r3, r2
  4029d8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4029da:	6862      	ldr	r2, [r4, #4]
  4029dc:	4293      	cmp	r3, r2
  4029de:	d31c      	bcc.n	402a1a <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4029e0:	6823      	ldr	r3, [r4, #0]
  4029e2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4029e4:	2000      	movs	r0, #0
  4029e6:	e7ec      	b.n	4029c2 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4029e8:	68c0      	ldr	r0, [r0, #12]
  4029ea:	4b10      	ldr	r3, [pc, #64]	; (402a2c <prvCopyDataToQueue+0x84>)
  4029ec:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4029ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4029f0:	425b      	negs	r3, r3
  4029f2:	68e2      	ldr	r2, [r4, #12]
  4029f4:	441a      	add	r2, r3
  4029f6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4029f8:	6821      	ldr	r1, [r4, #0]
  4029fa:	428a      	cmp	r2, r1
  4029fc:	d202      	bcs.n	402a04 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4029fe:	6862      	ldr	r2, [r4, #4]
  402a00:	4413      	add	r3, r2
  402a02:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  402a04:	2d02      	cmp	r5, #2
  402a06:	d10a      	bne.n	402a1e <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402a08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402a0a:	b153      	cbz	r3, 402a22 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  402a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402a0e:	3b01      	subs	r3, #1
  402a10:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  402a12:	2000      	movs	r0, #0
  402a14:	e7d5      	b.n	4029c2 <prvCopyDataToQueue+0x1a>
  402a16:	2000      	movs	r0, #0
  402a18:	e7d3      	b.n	4029c2 <prvCopyDataToQueue+0x1a>
  402a1a:	2000      	movs	r0, #0
  402a1c:	e7d1      	b.n	4029c2 <prvCopyDataToQueue+0x1a>
  402a1e:	2000      	movs	r0, #0
  402a20:	e7cf      	b.n	4029c2 <prvCopyDataToQueue+0x1a>
  402a22:	2000      	movs	r0, #0
  402a24:	e7cd      	b.n	4029c2 <prvCopyDataToQueue+0x1a>
  402a26:	bf00      	nop
  402a28:	00403e9d 	.word	0x00403e9d
  402a2c:	00404cf5 	.word	0x00404cf5

00402a30 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  402a30:	b530      	push	{r4, r5, lr}
  402a32:	b083      	sub	sp, #12
  402a34:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  402a36:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  402a38:	b174      	cbz	r4, 402a58 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  402a3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402a3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402a3e:	429a      	cmp	r2, r3
  402a40:	d315      	bcc.n	402a6e <prvNotifyQueueSetContainer+0x3e>
  402a42:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a46:	b672      	cpsid	i
  402a48:	f383 8811 	msr	BASEPRI, r3
  402a4c:	f3bf 8f6f 	isb	sy
  402a50:	f3bf 8f4f 	dsb	sy
  402a54:	b662      	cpsie	i
  402a56:	e7fe      	b.n	402a56 <prvNotifyQueueSetContainer+0x26>
  402a58:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a5c:	b672      	cpsid	i
  402a5e:	f383 8811 	msr	BASEPRI, r3
  402a62:	f3bf 8f6f 	isb	sy
  402a66:	f3bf 8f4f 	dsb	sy
  402a6a:	b662      	cpsie	i
  402a6c:	e7fe      	b.n	402a6c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  402a6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402a70:	4293      	cmp	r3, r2
  402a72:	d803      	bhi.n	402a7c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  402a74:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402a76:	4628      	mov	r0, r5
  402a78:	b003      	add	sp, #12
  402a7a:	bd30      	pop	{r4, r5, pc}
  402a7c:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  402a7e:	a901      	add	r1, sp, #4
  402a80:	4620      	mov	r0, r4
  402a82:	4b0b      	ldr	r3, [pc, #44]	; (402ab0 <prvNotifyQueueSetContainer+0x80>)
  402a84:	4798      	blx	r3
  402a86:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  402a88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a8e:	d10a      	bne.n	402aa6 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  402a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402a92:	2b00      	cmp	r3, #0
  402a94:	d0ef      	beq.n	402a76 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  402a96:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402a9a:	4b06      	ldr	r3, [pc, #24]	; (402ab4 <prvNotifyQueueSetContainer+0x84>)
  402a9c:	4798      	blx	r3
  402a9e:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  402aa0:	bf18      	it	ne
  402aa2:	2501      	movne	r5, #1
  402aa4:	e7e7      	b.n	402a76 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  402aa6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402aa8:	3301      	adds	r3, #1
  402aaa:	64a3      	str	r3, [r4, #72]	; 0x48
  402aac:	e7e3      	b.n	402a76 <prvNotifyQueueSetContainer+0x46>
  402aae:	bf00      	nop
  402ab0:	004029a9 	.word	0x004029a9
  402ab4:	00403c71 	.word	0x00403c71

00402ab8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  402ab8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402aba:	b172      	cbz	r2, 402ada <prvCopyDataFromQueue+0x22>
{
  402abc:	b510      	push	{r4, lr}
  402abe:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  402ac0:	68c4      	ldr	r4, [r0, #12]
  402ac2:	4414      	add	r4, r2
  402ac4:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  402ac6:	6840      	ldr	r0, [r0, #4]
  402ac8:	4284      	cmp	r4, r0
  402aca:	d301      	bcc.n	402ad0 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  402acc:	6818      	ldr	r0, [r3, #0]
  402ace:	60d8      	str	r0, [r3, #12]
  402ad0:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  402ad2:	68d9      	ldr	r1, [r3, #12]
  402ad4:	4b01      	ldr	r3, [pc, #4]	; (402adc <prvCopyDataFromQueue+0x24>)
  402ad6:	4798      	blx	r3
  402ad8:	bd10      	pop	{r4, pc}
  402ada:	4770      	bx	lr
  402adc:	00404cf5 	.word	0x00404cf5

00402ae0 <prvUnlockQueue>:
{
  402ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402ae2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  402ae4:	4b22      	ldr	r3, [pc, #136]	; (402b70 <prvUnlockQueue+0x90>)
  402ae6:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402ae8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402aea:	2b00      	cmp	r3, #0
  402aec:	dd1b      	ble.n	402b26 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402aee:	4d21      	ldr	r5, [pc, #132]	; (402b74 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  402af0:	4f21      	ldr	r7, [pc, #132]	; (402b78 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402af2:	4e22      	ldr	r6, [pc, #136]	; (402b7c <prvUnlockQueue+0x9c>)
  402af4:	e00b      	b.n	402b0e <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402af8:	b1ab      	cbz	r3, 402b26 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402afa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402afe:	47b0      	blx	r6
  402b00:	b978      	cbnz	r0, 402b22 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  402b02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402b04:	3b01      	subs	r3, #1
  402b06:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402b08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402b0a:	2b00      	cmp	r3, #0
  402b0c:	dd0b      	ble.n	402b26 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  402b0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402b10:	2b00      	cmp	r3, #0
  402b12:	d0f0      	beq.n	402af6 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402b14:	2100      	movs	r1, #0
  402b16:	4620      	mov	r0, r4
  402b18:	47a8      	blx	r5
  402b1a:	2801      	cmp	r0, #1
  402b1c:	d1f1      	bne.n	402b02 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  402b1e:	47b8      	blx	r7
  402b20:	e7ef      	b.n	402b02 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  402b22:	47b8      	blx	r7
  402b24:	e7ed      	b.n	402b02 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  402b26:	f04f 33ff 	mov.w	r3, #4294967295
  402b2a:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  402b2c:	4b14      	ldr	r3, [pc, #80]	; (402b80 <prvUnlockQueue+0xa0>)
  402b2e:	4798      	blx	r3
	taskENTER_CRITICAL();
  402b30:	4b0f      	ldr	r3, [pc, #60]	; (402b70 <prvUnlockQueue+0x90>)
  402b32:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402b34:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402b36:	2b00      	cmp	r3, #0
  402b38:	dd14      	ble.n	402b64 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402b3a:	6923      	ldr	r3, [r4, #16]
  402b3c:	b193      	cbz	r3, 402b64 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402b3e:	f104 0610 	add.w	r6, r4, #16
  402b42:	4d0e      	ldr	r5, [pc, #56]	; (402b7c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  402b44:	4f0c      	ldr	r7, [pc, #48]	; (402b78 <prvUnlockQueue+0x98>)
  402b46:	e007      	b.n	402b58 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  402b48:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402b4a:	3b01      	subs	r3, #1
  402b4c:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402b4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402b50:	2b00      	cmp	r3, #0
  402b52:	dd07      	ble.n	402b64 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402b54:	6923      	ldr	r3, [r4, #16]
  402b56:	b12b      	cbz	r3, 402b64 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402b58:	4630      	mov	r0, r6
  402b5a:	47a8      	blx	r5
  402b5c:	2800      	cmp	r0, #0
  402b5e:	d0f3      	beq.n	402b48 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  402b60:	47b8      	blx	r7
  402b62:	e7f1      	b.n	402b48 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  402b64:	f04f 33ff 	mov.w	r3, #4294967295
  402b68:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  402b6a:	4b05      	ldr	r3, [pc, #20]	; (402b80 <prvUnlockQueue+0xa0>)
  402b6c:	4798      	blx	r3
  402b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b70:	004026f9 	.word	0x004026f9
  402b74:	00402a31 	.word	0x00402a31
  402b78:	00403dcd 	.word	0x00403dcd
  402b7c:	00403c71 	.word	0x00403c71
  402b80:	00402745 	.word	0x00402745

00402b84 <xQueueGenericReset>:
{
  402b84:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  402b86:	b308      	cbz	r0, 402bcc <xQueueGenericReset+0x48>
  402b88:	4604      	mov	r4, r0
  402b8a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402b8c:	4b1d      	ldr	r3, [pc, #116]	; (402c04 <xQueueGenericReset+0x80>)
  402b8e:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  402b90:	6822      	ldr	r2, [r4, #0]
  402b92:	6c21      	ldr	r1, [r4, #64]	; 0x40
  402b94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402b96:	fb03 f301 	mul.w	r3, r3, r1
  402b9a:	18d0      	adds	r0, r2, r3
  402b9c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  402b9e:	2000      	movs	r0, #0
  402ba0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  402ba2:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  402ba4:	1a5b      	subs	r3, r3, r1
  402ba6:	4413      	add	r3, r2
  402ba8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  402baa:	f04f 33ff 	mov.w	r3, #4294967295
  402bae:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  402bb0:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  402bb2:	b9fd      	cbnz	r5, 402bf4 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402bb4:	6923      	ldr	r3, [r4, #16]
  402bb6:	b12b      	cbz	r3, 402bc4 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402bb8:	f104 0010 	add.w	r0, r4, #16
  402bbc:	4b12      	ldr	r3, [pc, #72]	; (402c08 <xQueueGenericReset+0x84>)
  402bbe:	4798      	blx	r3
  402bc0:	2801      	cmp	r0, #1
  402bc2:	d00e      	beq.n	402be2 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  402bc4:	4b11      	ldr	r3, [pc, #68]	; (402c0c <xQueueGenericReset+0x88>)
  402bc6:	4798      	blx	r3
}
  402bc8:	2001      	movs	r0, #1
  402bca:	bd38      	pop	{r3, r4, r5, pc}
  402bcc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bd0:	b672      	cpsid	i
  402bd2:	f383 8811 	msr	BASEPRI, r3
  402bd6:	f3bf 8f6f 	isb	sy
  402bda:	f3bf 8f4f 	dsb	sy
  402bde:	b662      	cpsie	i
  402be0:	e7fe      	b.n	402be0 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  402be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402be6:	4b0a      	ldr	r3, [pc, #40]	; (402c10 <xQueueGenericReset+0x8c>)
  402be8:	601a      	str	r2, [r3, #0]
  402bea:	f3bf 8f4f 	dsb	sy
  402bee:	f3bf 8f6f 	isb	sy
  402bf2:	e7e7      	b.n	402bc4 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  402bf4:	f104 0010 	add.w	r0, r4, #16
  402bf8:	4d06      	ldr	r5, [pc, #24]	; (402c14 <xQueueGenericReset+0x90>)
  402bfa:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  402bfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402c00:	47a8      	blx	r5
  402c02:	e7df      	b.n	402bc4 <xQueueGenericReset+0x40>
  402c04:	004026f9 	.word	0x004026f9
  402c08:	00403c71 	.word	0x00403c71
  402c0c:	00402745 	.word	0x00402745
  402c10:	e000ed04 	.word	0xe000ed04
  402c14:	004025ad 	.word	0x004025ad

00402c18 <xQueueGenericCreate>:
{
  402c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  402c1a:	b950      	cbnz	r0, 402c32 <xQueueGenericCreate+0x1a>
  402c1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c20:	b672      	cpsid	i
  402c22:	f383 8811 	msr	BASEPRI, r3
  402c26:	f3bf 8f6f 	isb	sy
  402c2a:	f3bf 8f4f 	dsb	sy
  402c2e:	b662      	cpsie	i
  402c30:	e7fe      	b.n	402c30 <xQueueGenericCreate+0x18>
  402c32:	4606      	mov	r6, r0
  402c34:	4617      	mov	r7, r2
  402c36:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  402c38:	b189      	cbz	r1, 402c5e <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402c3a:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402c3e:	3059      	adds	r0, #89	; 0x59
  402c40:	4b12      	ldr	r3, [pc, #72]	; (402c8c <xQueueGenericCreate+0x74>)
  402c42:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402c44:	4604      	mov	r4, r0
  402c46:	b9e8      	cbnz	r0, 402c84 <xQueueGenericCreate+0x6c>
  402c48:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c4c:	b672      	cpsid	i
  402c4e:	f383 8811 	msr	BASEPRI, r3
  402c52:	f3bf 8f6f 	isb	sy
  402c56:	f3bf 8f4f 	dsb	sy
  402c5a:	b662      	cpsie	i
  402c5c:	e7fe      	b.n	402c5c <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402c5e:	2058      	movs	r0, #88	; 0x58
  402c60:	4b0a      	ldr	r3, [pc, #40]	; (402c8c <xQueueGenericCreate+0x74>)
  402c62:	4798      	blx	r3
	if( pxNewQueue != NULL )
  402c64:	4604      	mov	r4, r0
  402c66:	2800      	cmp	r0, #0
  402c68:	d0ee      	beq.n	402c48 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  402c6a:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  402c6c:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  402c6e:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  402c70:	2101      	movs	r1, #1
  402c72:	4620      	mov	r0, r4
  402c74:	4b06      	ldr	r3, [pc, #24]	; (402c90 <xQueueGenericCreate+0x78>)
  402c76:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  402c78:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  402c7c:	2300      	movs	r3, #0
  402c7e:	6563      	str	r3, [r4, #84]	; 0x54
}
  402c80:	4620      	mov	r0, r4
  402c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  402c84:	f100 0358 	add.w	r3, r0, #88	; 0x58
  402c88:	6003      	str	r3, [r0, #0]
  402c8a:	e7ef      	b.n	402c6c <xQueueGenericCreate+0x54>
  402c8c:	00402955 	.word	0x00402955
  402c90:	00402b85 	.word	0x00402b85

00402c94 <xQueueGenericSend>:
{
  402c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c98:	b085      	sub	sp, #20
  402c9a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402c9c:	b1b8      	cbz	r0, 402cce <xQueueGenericSend+0x3a>
  402c9e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402ca0:	b301      	cbz	r1, 402ce4 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402ca2:	2b02      	cmp	r3, #2
  402ca4:	d02c      	beq.n	402d00 <xQueueGenericSend+0x6c>
  402ca6:	461d      	mov	r5, r3
  402ca8:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402caa:	4b66      	ldr	r3, [pc, #408]	; (402e44 <xQueueGenericSend+0x1b0>)
  402cac:	4798      	blx	r3
  402cae:	2800      	cmp	r0, #0
  402cb0:	d134      	bne.n	402d1c <xQueueGenericSend+0x88>
  402cb2:	9b01      	ldr	r3, [sp, #4]
  402cb4:	2b00      	cmp	r3, #0
  402cb6:	d038      	beq.n	402d2a <xQueueGenericSend+0x96>
  402cb8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cbc:	b672      	cpsid	i
  402cbe:	f383 8811 	msr	BASEPRI, r3
  402cc2:	f3bf 8f6f 	isb	sy
  402cc6:	f3bf 8f4f 	dsb	sy
  402cca:	b662      	cpsie	i
  402ccc:	e7fe      	b.n	402ccc <xQueueGenericSend+0x38>
  402cce:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cd2:	b672      	cpsid	i
  402cd4:	f383 8811 	msr	BASEPRI, r3
  402cd8:	f3bf 8f6f 	isb	sy
  402cdc:	f3bf 8f4f 	dsb	sy
  402ce0:	b662      	cpsie	i
  402ce2:	e7fe      	b.n	402ce2 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402ce4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402ce6:	2a00      	cmp	r2, #0
  402ce8:	d0db      	beq.n	402ca2 <xQueueGenericSend+0xe>
  402cea:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cee:	b672      	cpsid	i
  402cf0:	f383 8811 	msr	BASEPRI, r3
  402cf4:	f3bf 8f6f 	isb	sy
  402cf8:	f3bf 8f4f 	dsb	sy
  402cfc:	b662      	cpsie	i
  402cfe:	e7fe      	b.n	402cfe <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402d00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  402d02:	2a01      	cmp	r2, #1
  402d04:	d0cf      	beq.n	402ca6 <xQueueGenericSend+0x12>
  402d06:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d0a:	b672      	cpsid	i
  402d0c:	f383 8811 	msr	BASEPRI, r3
  402d10:	f3bf 8f6f 	isb	sy
  402d14:	f3bf 8f4f 	dsb	sy
  402d18:	b662      	cpsie	i
  402d1a:	e7fe      	b.n	402d1a <xQueueGenericSend+0x86>
  402d1c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  402d1e:	4e4a      	ldr	r6, [pc, #296]	; (402e48 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  402d20:	f8df a150 	ldr.w	sl, [pc, #336]	; 402e74 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  402d24:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402e54 <xQueueGenericSend+0x1c0>
  402d28:	e042      	b.n	402db0 <xQueueGenericSend+0x11c>
  402d2a:	2700      	movs	r7, #0
  402d2c:	e7f7      	b.n	402d1e <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402d2e:	462a      	mov	r2, r5
  402d30:	4641      	mov	r1, r8
  402d32:	4620      	mov	r0, r4
  402d34:	4b45      	ldr	r3, [pc, #276]	; (402e4c <xQueueGenericSend+0x1b8>)
  402d36:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  402d38:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402d3a:	b19b      	cbz	r3, 402d64 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402d3c:	4629      	mov	r1, r5
  402d3e:	4620      	mov	r0, r4
  402d40:	4b43      	ldr	r3, [pc, #268]	; (402e50 <xQueueGenericSend+0x1bc>)
  402d42:	4798      	blx	r3
  402d44:	2801      	cmp	r0, #1
  402d46:	d107      	bne.n	402d58 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402d4c:	4b41      	ldr	r3, [pc, #260]	; (402e54 <xQueueGenericSend+0x1c0>)
  402d4e:	601a      	str	r2, [r3, #0]
  402d50:	f3bf 8f4f 	dsb	sy
  402d54:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402d58:	4b3f      	ldr	r3, [pc, #252]	; (402e58 <xQueueGenericSend+0x1c4>)
  402d5a:	4798      	blx	r3
				return pdPASS;
  402d5c:	2001      	movs	r0, #1
}
  402d5e:	b005      	add	sp, #20
  402d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402d66:	b173      	cbz	r3, 402d86 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  402d68:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402d6c:	4b3b      	ldr	r3, [pc, #236]	; (402e5c <xQueueGenericSend+0x1c8>)
  402d6e:	4798      	blx	r3
  402d70:	2801      	cmp	r0, #1
  402d72:	d1f1      	bne.n	402d58 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  402d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402d78:	4b36      	ldr	r3, [pc, #216]	; (402e54 <xQueueGenericSend+0x1c0>)
  402d7a:	601a      	str	r2, [r3, #0]
  402d7c:	f3bf 8f4f 	dsb	sy
  402d80:	f3bf 8f6f 	isb	sy
  402d84:	e7e8      	b.n	402d58 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  402d86:	2800      	cmp	r0, #0
  402d88:	d0e6      	beq.n	402d58 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402d8e:	4b31      	ldr	r3, [pc, #196]	; (402e54 <xQueueGenericSend+0x1c0>)
  402d90:	601a      	str	r2, [r3, #0]
  402d92:	f3bf 8f4f 	dsb	sy
  402d96:	f3bf 8f6f 	isb	sy
  402d9a:	e7dd      	b.n	402d58 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  402d9c:	4b2e      	ldr	r3, [pc, #184]	; (402e58 <xQueueGenericSend+0x1c4>)
  402d9e:	4798      	blx	r3
					return errQUEUE_FULL;
  402da0:	2000      	movs	r0, #0
  402da2:	e7dc      	b.n	402d5e <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  402da4:	4620      	mov	r0, r4
  402da6:	4b2e      	ldr	r3, [pc, #184]	; (402e60 <xQueueGenericSend+0x1cc>)
  402da8:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402daa:	4b2e      	ldr	r3, [pc, #184]	; (402e64 <xQueueGenericSend+0x1d0>)
  402dac:	4798      	blx	r3
  402dae:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  402db0:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402db2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402db4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402db6:	429a      	cmp	r2, r3
  402db8:	d3b9      	bcc.n	402d2e <xQueueGenericSend+0x9a>
  402dba:	2d02      	cmp	r5, #2
  402dbc:	d0b7      	beq.n	402d2e <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  402dbe:	9b01      	ldr	r3, [sp, #4]
  402dc0:	2b00      	cmp	r3, #0
  402dc2:	d0eb      	beq.n	402d9c <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  402dc4:	b90f      	cbnz	r7, 402dca <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  402dc6:	a802      	add	r0, sp, #8
  402dc8:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402dca:	4b23      	ldr	r3, [pc, #140]	; (402e58 <xQueueGenericSend+0x1c4>)
  402dcc:	4798      	blx	r3
		vTaskSuspendAll();
  402dce:	4b26      	ldr	r3, [pc, #152]	; (402e68 <xQueueGenericSend+0x1d4>)
  402dd0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402dd2:	47b0      	blx	r6
  402dd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
  402dda:	d101      	bne.n	402de0 <xQueueGenericSend+0x14c>
  402ddc:	2300      	movs	r3, #0
  402dde:	6463      	str	r3, [r4, #68]	; 0x44
  402de0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402de2:	f1b3 3fff 	cmp.w	r3, #4294967295
  402de6:	d101      	bne.n	402dec <xQueueGenericSend+0x158>
  402de8:	2300      	movs	r3, #0
  402dea:	64a3      	str	r3, [r4, #72]	; 0x48
  402dec:	4b1a      	ldr	r3, [pc, #104]	; (402e58 <xQueueGenericSend+0x1c4>)
  402dee:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402df0:	a901      	add	r1, sp, #4
  402df2:	a802      	add	r0, sp, #8
  402df4:	4b1d      	ldr	r3, [pc, #116]	; (402e6c <xQueueGenericSend+0x1d8>)
  402df6:	4798      	blx	r3
  402df8:	b9e0      	cbnz	r0, 402e34 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  402dfa:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  402dfc:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  402e00:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  402e02:	4b15      	ldr	r3, [pc, #84]	; (402e58 <xQueueGenericSend+0x1c4>)
  402e04:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  402e06:	45bb      	cmp	fp, r7
  402e08:	d1cc      	bne.n	402da4 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  402e0a:	9901      	ldr	r1, [sp, #4]
  402e0c:	f104 0010 	add.w	r0, r4, #16
  402e10:	4b17      	ldr	r3, [pc, #92]	; (402e70 <xQueueGenericSend+0x1dc>)
  402e12:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402e14:	4620      	mov	r0, r4
  402e16:	4b12      	ldr	r3, [pc, #72]	; (402e60 <xQueueGenericSend+0x1cc>)
  402e18:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402e1a:	4b12      	ldr	r3, [pc, #72]	; (402e64 <xQueueGenericSend+0x1d0>)
  402e1c:	4798      	blx	r3
  402e1e:	2800      	cmp	r0, #0
  402e20:	d1c5      	bne.n	402dae <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  402e22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402e26:	f8c9 3000 	str.w	r3, [r9]
  402e2a:	f3bf 8f4f 	dsb	sy
  402e2e:	f3bf 8f6f 	isb	sy
  402e32:	e7bc      	b.n	402dae <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  402e34:	4620      	mov	r0, r4
  402e36:	4b0a      	ldr	r3, [pc, #40]	; (402e60 <xQueueGenericSend+0x1cc>)
  402e38:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402e3a:	4b0a      	ldr	r3, [pc, #40]	; (402e64 <xQueueGenericSend+0x1d0>)
  402e3c:	4798      	blx	r3
			return errQUEUE_FULL;
  402e3e:	2000      	movs	r0, #0
  402e40:	e78d      	b.n	402d5e <xQueueGenericSend+0xca>
  402e42:	bf00      	nop
  402e44:	00403dd9 	.word	0x00403dd9
  402e48:	004026f9 	.word	0x004026f9
  402e4c:	004029a9 	.word	0x004029a9
  402e50:	00402a31 	.word	0x00402a31
  402e54:	e000ed04 	.word	0xe000ed04
  402e58:	00402745 	.word	0x00402745
  402e5c:	00403c71 	.word	0x00403c71
  402e60:	00402ae1 	.word	0x00402ae1
  402e64:	00403761 	.word	0x00403761
  402e68:	004035f9 	.word	0x004035f9
  402e6c:	00403d39 	.word	0x00403d39
  402e70:	00403b6d 	.word	0x00403b6d
  402e74:	00403d09 	.word	0x00403d09

00402e78 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  402e78:	2800      	cmp	r0, #0
  402e7a:	d036      	beq.n	402eea <xQueueGenericSendFromISR+0x72>
{
  402e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e80:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402e82:	2900      	cmp	r1, #0
  402e84:	d03c      	beq.n	402f00 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402e86:	2b02      	cmp	r3, #2
  402e88:	d048      	beq.n	402f1c <xQueueGenericSendFromISR+0xa4>
  402e8a:	461e      	mov	r6, r3
  402e8c:	4615      	mov	r5, r2
  402e8e:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402e90:	4b35      	ldr	r3, [pc, #212]	; (402f68 <xQueueGenericSendFromISR+0xf0>)
  402e92:	4798      	blx	r3
	__asm volatile
  402e94:	f3ef 8711 	mrs	r7, BASEPRI
  402e98:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e9c:	b672      	cpsid	i
  402e9e:	f383 8811 	msr	BASEPRI, r3
  402ea2:	f3bf 8f6f 	isb	sy
  402ea6:	f3bf 8f4f 	dsb	sy
  402eaa:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402eac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402eae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402eb0:	429a      	cmp	r2, r3
  402eb2:	d301      	bcc.n	402eb8 <xQueueGenericSendFromISR+0x40>
  402eb4:	2e02      	cmp	r6, #2
  402eb6:	d14f      	bne.n	402f58 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402eb8:	4632      	mov	r2, r6
  402eba:	4641      	mov	r1, r8
  402ebc:	4620      	mov	r0, r4
  402ebe:	4b2b      	ldr	r3, [pc, #172]	; (402f6c <xQueueGenericSendFromISR+0xf4>)
  402ec0:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  402ec2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
  402ec8:	d141      	bne.n	402f4e <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  402eca:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402ecc:	2b00      	cmp	r3, #0
  402ece:	d033      	beq.n	402f38 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402ed0:	4631      	mov	r1, r6
  402ed2:	4620      	mov	r0, r4
  402ed4:	4b26      	ldr	r3, [pc, #152]	; (402f70 <xQueueGenericSendFromISR+0xf8>)
  402ed6:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  402ed8:	2d00      	cmp	r5, #0
  402eda:	d03f      	beq.n	402f5c <xQueueGenericSendFromISR+0xe4>
  402edc:	2801      	cmp	r0, #1
  402ede:	d13d      	bne.n	402f5c <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402ee0:	6028      	str	r0, [r5, #0]
	__asm volatile
  402ee2:	f387 8811 	msr	BASEPRI, r7
}
  402ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  402eea:	f04f 0380 	mov.w	r3, #128	; 0x80
  402eee:	b672      	cpsid	i
  402ef0:	f383 8811 	msr	BASEPRI, r3
  402ef4:	f3bf 8f6f 	isb	sy
  402ef8:	f3bf 8f4f 	dsb	sy
  402efc:	b662      	cpsie	i
  402efe:	e7fe      	b.n	402efe <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402f00:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402f02:	2800      	cmp	r0, #0
  402f04:	d0bf      	beq.n	402e86 <xQueueGenericSendFromISR+0xe>
  402f06:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f0a:	b672      	cpsid	i
  402f0c:	f383 8811 	msr	BASEPRI, r3
  402f10:	f3bf 8f6f 	isb	sy
  402f14:	f3bf 8f4f 	dsb	sy
  402f18:	b662      	cpsie	i
  402f1a:	e7fe      	b.n	402f1a <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402f1c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  402f1e:	2801      	cmp	r0, #1
  402f20:	d0b3      	beq.n	402e8a <xQueueGenericSendFromISR+0x12>
  402f22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f26:	b672      	cpsid	i
  402f28:	f383 8811 	msr	BASEPRI, r3
  402f2c:	f3bf 8f6f 	isb	sy
  402f30:	f3bf 8f4f 	dsb	sy
  402f34:	b662      	cpsie	i
  402f36:	e7fe      	b.n	402f36 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402f3a:	b18b      	cbz	r3, 402f60 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402f3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402f40:	4b0c      	ldr	r3, [pc, #48]	; (402f74 <xQueueGenericSendFromISR+0xfc>)
  402f42:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402f44:	b175      	cbz	r5, 402f64 <xQueueGenericSendFromISR+0xec>
  402f46:	b168      	cbz	r0, 402f64 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402f48:	2001      	movs	r0, #1
  402f4a:	6028      	str	r0, [r5, #0]
  402f4c:	e7c9      	b.n	402ee2 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  402f4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402f50:	3301      	adds	r3, #1
  402f52:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402f54:	2001      	movs	r0, #1
  402f56:	e7c4      	b.n	402ee2 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  402f58:	2000      	movs	r0, #0
  402f5a:	e7c2      	b.n	402ee2 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  402f5c:	2001      	movs	r0, #1
  402f5e:	e7c0      	b.n	402ee2 <xQueueGenericSendFromISR+0x6a>
  402f60:	2001      	movs	r0, #1
  402f62:	e7be      	b.n	402ee2 <xQueueGenericSendFromISR+0x6a>
  402f64:	2001      	movs	r0, #1
  402f66:	e7bc      	b.n	402ee2 <xQueueGenericSendFromISR+0x6a>
  402f68:	004028f1 	.word	0x004028f1
  402f6c:	004029a9 	.word	0x004029a9
  402f70:	00402a31 	.word	0x00402a31
  402f74:	00403c71 	.word	0x00403c71

00402f78 <xQueueGenericReceive>:
{
  402f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f7c:	b084      	sub	sp, #16
  402f7e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  402f80:	b198      	cbz	r0, 402faa <xQueueGenericReceive+0x32>
  402f82:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402f84:	b1e1      	cbz	r1, 402fc0 <xQueueGenericReceive+0x48>
  402f86:	4698      	mov	r8, r3
  402f88:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402f8a:	4b61      	ldr	r3, [pc, #388]	; (403110 <xQueueGenericReceive+0x198>)
  402f8c:	4798      	blx	r3
  402f8e:	bb28      	cbnz	r0, 402fdc <xQueueGenericReceive+0x64>
  402f90:	9b01      	ldr	r3, [sp, #4]
  402f92:	b353      	cbz	r3, 402fea <xQueueGenericReceive+0x72>
  402f94:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f98:	b672      	cpsid	i
  402f9a:	f383 8811 	msr	BASEPRI, r3
  402f9e:	f3bf 8f6f 	isb	sy
  402fa2:	f3bf 8f4f 	dsb	sy
  402fa6:	b662      	cpsie	i
  402fa8:	e7fe      	b.n	402fa8 <xQueueGenericReceive+0x30>
  402faa:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fae:	b672      	cpsid	i
  402fb0:	f383 8811 	msr	BASEPRI, r3
  402fb4:	f3bf 8f6f 	isb	sy
  402fb8:	f3bf 8f4f 	dsb	sy
  402fbc:	b662      	cpsie	i
  402fbe:	e7fe      	b.n	402fbe <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402fc0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402fc2:	2a00      	cmp	r2, #0
  402fc4:	d0df      	beq.n	402f86 <xQueueGenericReceive+0xe>
  402fc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fca:	b672      	cpsid	i
  402fcc:	f383 8811 	msr	BASEPRI, r3
  402fd0:	f3bf 8f6f 	isb	sy
  402fd4:	f3bf 8f4f 	dsb	sy
  402fd8:	b662      	cpsie	i
  402fda:	e7fe      	b.n	402fda <xQueueGenericReceive+0x62>
  402fdc:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402fde:	4d4d      	ldr	r5, [pc, #308]	; (403114 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402fe0:	f8df a160 	ldr.w	sl, [pc, #352]	; 403144 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  402fe4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 403124 <xQueueGenericReceive+0x1ac>
  402fe8:	e04b      	b.n	403082 <xQueueGenericReceive+0x10a>
  402fea:	2600      	movs	r6, #0
  402fec:	e7f7      	b.n	402fde <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402fee:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402ff0:	4639      	mov	r1, r7
  402ff2:	4620      	mov	r0, r4
  402ff4:	4b48      	ldr	r3, [pc, #288]	; (403118 <xQueueGenericReceive+0x1a0>)
  402ff6:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  402ff8:	f1b8 0f00 	cmp.w	r8, #0
  402ffc:	d11d      	bne.n	40303a <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  402ffe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403000:	3b01      	subs	r3, #1
  403002:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  403004:	6823      	ldr	r3, [r4, #0]
  403006:	b913      	cbnz	r3, 40300e <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  403008:	4b44      	ldr	r3, [pc, #272]	; (40311c <xQueueGenericReceive+0x1a4>)
  40300a:	4798      	blx	r3
  40300c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40300e:	6923      	ldr	r3, [r4, #16]
  403010:	b16b      	cbz	r3, 40302e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  403012:	f104 0010 	add.w	r0, r4, #16
  403016:	4b42      	ldr	r3, [pc, #264]	; (403120 <xQueueGenericReceive+0x1a8>)
  403018:	4798      	blx	r3
  40301a:	2801      	cmp	r0, #1
  40301c:	d107      	bne.n	40302e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40301e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403022:	4b40      	ldr	r3, [pc, #256]	; (403124 <xQueueGenericReceive+0x1ac>)
  403024:	601a      	str	r2, [r3, #0]
  403026:	f3bf 8f4f 	dsb	sy
  40302a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40302e:	4b3e      	ldr	r3, [pc, #248]	; (403128 <xQueueGenericReceive+0x1b0>)
  403030:	4798      	blx	r3
				return pdPASS;
  403032:	2001      	movs	r0, #1
}
  403034:	b004      	add	sp, #16
  403036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40303a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40303c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40303e:	2b00      	cmp	r3, #0
  403040:	d0f5      	beq.n	40302e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  403042:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403046:	4b36      	ldr	r3, [pc, #216]	; (403120 <xQueueGenericReceive+0x1a8>)
  403048:	4798      	blx	r3
  40304a:	2800      	cmp	r0, #0
  40304c:	d0ef      	beq.n	40302e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40304e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403052:	4b34      	ldr	r3, [pc, #208]	; (403124 <xQueueGenericReceive+0x1ac>)
  403054:	601a      	str	r2, [r3, #0]
  403056:	f3bf 8f4f 	dsb	sy
  40305a:	f3bf 8f6f 	isb	sy
  40305e:	e7e6      	b.n	40302e <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  403060:	4b31      	ldr	r3, [pc, #196]	; (403128 <xQueueGenericReceive+0x1b0>)
  403062:	4798      	blx	r3
					return errQUEUE_EMPTY;
  403064:	2000      	movs	r0, #0
  403066:	e7e5      	b.n	403034 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  403068:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40306a:	6860      	ldr	r0, [r4, #4]
  40306c:	4b2f      	ldr	r3, [pc, #188]	; (40312c <xQueueGenericReceive+0x1b4>)
  40306e:	4798      	blx	r3
						taskEXIT_CRITICAL();
  403070:	4b2d      	ldr	r3, [pc, #180]	; (403128 <xQueueGenericReceive+0x1b0>)
  403072:	4798      	blx	r3
  403074:	e030      	b.n	4030d8 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  403076:	4620      	mov	r0, r4
  403078:	4b2d      	ldr	r3, [pc, #180]	; (403130 <xQueueGenericReceive+0x1b8>)
  40307a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40307c:	4b2d      	ldr	r3, [pc, #180]	; (403134 <xQueueGenericReceive+0x1bc>)
  40307e:	4798      	blx	r3
  403080:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  403082:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  403084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403086:	2b00      	cmp	r3, #0
  403088:	d1b1      	bne.n	402fee <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40308a:	9b01      	ldr	r3, [sp, #4]
  40308c:	2b00      	cmp	r3, #0
  40308e:	d0e7      	beq.n	403060 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  403090:	b90e      	cbnz	r6, 403096 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  403092:	a802      	add	r0, sp, #8
  403094:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  403096:	4b24      	ldr	r3, [pc, #144]	; (403128 <xQueueGenericReceive+0x1b0>)
  403098:	4798      	blx	r3
		vTaskSuspendAll();
  40309a:	4b27      	ldr	r3, [pc, #156]	; (403138 <xQueueGenericReceive+0x1c0>)
  40309c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40309e:	47a8      	blx	r5
  4030a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4030a6:	d101      	bne.n	4030ac <xQueueGenericReceive+0x134>
  4030a8:	2300      	movs	r3, #0
  4030aa:	6463      	str	r3, [r4, #68]	; 0x44
  4030ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
  4030b2:	d101      	bne.n	4030b8 <xQueueGenericReceive+0x140>
  4030b4:	2300      	movs	r3, #0
  4030b6:	64a3      	str	r3, [r4, #72]	; 0x48
  4030b8:	4b1b      	ldr	r3, [pc, #108]	; (403128 <xQueueGenericReceive+0x1b0>)
  4030ba:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4030bc:	a901      	add	r1, sp, #4
  4030be:	a802      	add	r0, sp, #8
  4030c0:	4b1e      	ldr	r3, [pc, #120]	; (40313c <xQueueGenericReceive+0x1c4>)
  4030c2:	4798      	blx	r3
  4030c4:	b9e8      	cbnz	r0, 403102 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  4030c6:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4030c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  4030ca:	4b17      	ldr	r3, [pc, #92]	; (403128 <xQueueGenericReceive+0x1b0>)
  4030cc:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4030ce:	2e00      	cmp	r6, #0
  4030d0:	d1d1      	bne.n	403076 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4030d2:	6823      	ldr	r3, [r4, #0]
  4030d4:	2b00      	cmp	r3, #0
  4030d6:	d0c7      	beq.n	403068 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4030d8:	9901      	ldr	r1, [sp, #4]
  4030da:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4030de:	4b18      	ldr	r3, [pc, #96]	; (403140 <xQueueGenericReceive+0x1c8>)
  4030e0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4030e2:	4620      	mov	r0, r4
  4030e4:	4b12      	ldr	r3, [pc, #72]	; (403130 <xQueueGenericReceive+0x1b8>)
  4030e6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4030e8:	4b12      	ldr	r3, [pc, #72]	; (403134 <xQueueGenericReceive+0x1bc>)
  4030ea:	4798      	blx	r3
  4030ec:	2800      	cmp	r0, #0
  4030ee:	d1c7      	bne.n	403080 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  4030f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4030f4:	f8c9 3000 	str.w	r3, [r9]
  4030f8:	f3bf 8f4f 	dsb	sy
  4030fc:	f3bf 8f6f 	isb	sy
  403100:	e7be      	b.n	403080 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  403102:	4620      	mov	r0, r4
  403104:	4b0a      	ldr	r3, [pc, #40]	; (403130 <xQueueGenericReceive+0x1b8>)
  403106:	4798      	blx	r3
			( void ) xTaskResumeAll();
  403108:	4b0a      	ldr	r3, [pc, #40]	; (403134 <xQueueGenericReceive+0x1bc>)
  40310a:	4798      	blx	r3
			return errQUEUE_EMPTY;
  40310c:	2000      	movs	r0, #0
  40310e:	e791      	b.n	403034 <xQueueGenericReceive+0xbc>
  403110:	00403dd9 	.word	0x00403dd9
  403114:	004026f9 	.word	0x004026f9
  403118:	00402ab9 	.word	0x00402ab9
  40311c:	00403f59 	.word	0x00403f59
  403120:	00403c71 	.word	0x00403c71
  403124:	e000ed04 	.word	0xe000ed04
  403128:	00402745 	.word	0x00402745
  40312c:	00403df9 	.word	0x00403df9
  403130:	00402ae1 	.word	0x00402ae1
  403134:	00403761 	.word	0x00403761
  403138:	004035f9 	.word	0x004035f9
  40313c:	00403d39 	.word	0x00403d39
  403140:	00403b6d 	.word	0x00403b6d
  403144:	00403d09 	.word	0x00403d09

00403148 <vQueueAddToRegistry>:
	{
  403148:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40314a:	4b0b      	ldr	r3, [pc, #44]	; (403178 <vQueueAddToRegistry+0x30>)
  40314c:	681b      	ldr	r3, [r3, #0]
  40314e:	b153      	cbz	r3, 403166 <vQueueAddToRegistry+0x1e>
  403150:	2301      	movs	r3, #1
  403152:	4c09      	ldr	r4, [pc, #36]	; (403178 <vQueueAddToRegistry+0x30>)
  403154:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  403158:	b132      	cbz	r2, 403168 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40315a:	3301      	adds	r3, #1
  40315c:	2b08      	cmp	r3, #8
  40315e:	d1f9      	bne.n	403154 <vQueueAddToRegistry+0xc>
	}
  403160:	f85d 4b04 	ldr.w	r4, [sp], #4
  403164:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  403166:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  403168:	4a03      	ldr	r2, [pc, #12]	; (403178 <vQueueAddToRegistry+0x30>)
  40316a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40316e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403172:	6058      	str	r0, [r3, #4]
				break;
  403174:	e7f4      	b.n	403160 <vQueueAddToRegistry+0x18>
  403176:	bf00      	nop
  403178:	20400e9c 	.word	0x20400e9c

0040317c <vQueueWaitForMessageRestricted>:
	{
  40317c:	b570      	push	{r4, r5, r6, lr}
  40317e:	4604      	mov	r4, r0
  403180:	460d      	mov	r5, r1
  403182:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  403184:	4b0f      	ldr	r3, [pc, #60]	; (4031c4 <vQueueWaitForMessageRestricted+0x48>)
  403186:	4798      	blx	r3
  403188:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40318a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40318e:	d00b      	beq.n	4031a8 <vQueueWaitForMessageRestricted+0x2c>
  403190:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403192:	f1b3 3fff 	cmp.w	r3, #4294967295
  403196:	d00a      	beq.n	4031ae <vQueueWaitForMessageRestricted+0x32>
  403198:	4b0b      	ldr	r3, [pc, #44]	; (4031c8 <vQueueWaitForMessageRestricted+0x4c>)
  40319a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  40319c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40319e:	b14b      	cbz	r3, 4031b4 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  4031a0:	4620      	mov	r0, r4
  4031a2:	4b0a      	ldr	r3, [pc, #40]	; (4031cc <vQueueWaitForMessageRestricted+0x50>)
  4031a4:	4798      	blx	r3
  4031a6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4031a8:	2300      	movs	r3, #0
  4031aa:	6463      	str	r3, [r4, #68]	; 0x44
  4031ac:	e7f0      	b.n	403190 <vQueueWaitForMessageRestricted+0x14>
  4031ae:	2300      	movs	r3, #0
  4031b0:	64a3      	str	r3, [r4, #72]	; 0x48
  4031b2:	e7f1      	b.n	403198 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4031b4:	4632      	mov	r2, r6
  4031b6:	4629      	mov	r1, r5
  4031b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4031bc:	4b04      	ldr	r3, [pc, #16]	; (4031d0 <vQueueWaitForMessageRestricted+0x54>)
  4031be:	4798      	blx	r3
  4031c0:	e7ee      	b.n	4031a0 <vQueueWaitForMessageRestricted+0x24>
  4031c2:	bf00      	nop
  4031c4:	004026f9 	.word	0x004026f9
  4031c8:	00402745 	.word	0x00402745
  4031cc:	00402ae1 	.word	0x00402ae1
  4031d0:	00403bf1 	.word	0x00403bf1

004031d4 <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
  4031d4:	b158      	cbz	r0, 4031ee <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4031d6:	6941      	ldr	r1, [r0, #20]
  4031d8:	4a0c      	ldr	r2, [pc, #48]	; (40320c <prvTaskIsTaskSuspended+0x38>)
  4031da:	4291      	cmp	r1, r2
  4031dc:	d112      	bne.n	403204 <prvTaskIsTaskSuspended+0x30>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  4031de:	6a80      	ldr	r0, [r0, #40]	; 0x28
  4031e0:	4b0b      	ldr	r3, [pc, #44]	; (403210 <prvTaskIsTaskSuspended+0x3c>)
  4031e2:	4298      	cmp	r0, r3
  4031e4:	d010      	beq.n	403208 <prvTaskIsTaskSuspended+0x34>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  4031e6:	fab0 f080 	clz	r0, r0
  4031ea:	0940      	lsrs	r0, r0, #5
  4031ec:	4770      	bx	lr
  4031ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031f2:	b672      	cpsid	i
  4031f4:	f383 8811 	msr	BASEPRI, r3
  4031f8:	f3bf 8f6f 	isb	sy
  4031fc:	f3bf 8f4f 	dsb	sy
  403200:	b662      	cpsie	i
  403202:	e7fe      	b.n	403202 <prvTaskIsTaskSuspended+0x2e>
	BaseType_t xReturn = pdFALSE;
  403204:	2000      	movs	r0, #0
  403206:	4770      	bx	lr
  403208:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  40320a:	4770      	bx	lr
  40320c:	20400d50 	.word	0x20400d50
  403210:	20400d38 	.word	0x20400d38

00403214 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  403214:	4b08      	ldr	r3, [pc, #32]	; (403238 <prvResetNextTaskUnblockTime+0x24>)
  403216:	681b      	ldr	r3, [r3, #0]
  403218:	681b      	ldr	r3, [r3, #0]
  40321a:	b13b      	cbz	r3, 40322c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40321c:	4b06      	ldr	r3, [pc, #24]	; (403238 <prvResetNextTaskUnblockTime+0x24>)
  40321e:	681b      	ldr	r3, [r3, #0]
  403220:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  403222:	68db      	ldr	r3, [r3, #12]
  403224:	685a      	ldr	r2, [r3, #4]
  403226:	4b05      	ldr	r3, [pc, #20]	; (40323c <prvResetNextTaskUnblockTime+0x28>)
  403228:	601a      	str	r2, [r3, #0]
  40322a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  40322c:	f04f 32ff 	mov.w	r2, #4294967295
  403230:	4b02      	ldr	r3, [pc, #8]	; (40323c <prvResetNextTaskUnblockTime+0x28>)
  403232:	601a      	str	r2, [r3, #0]
  403234:	4770      	bx	lr
  403236:	bf00      	nop
  403238:	20400c84 	.word	0x20400c84
  40323c:	20400d30 	.word	0x20400d30

00403240 <prvAddCurrentTaskToDelayedList>:
{
  403240:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  403242:	4b0f      	ldr	r3, [pc, #60]	; (403280 <prvAddCurrentTaskToDelayedList+0x40>)
  403244:	681b      	ldr	r3, [r3, #0]
  403246:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  403248:	4b0e      	ldr	r3, [pc, #56]	; (403284 <prvAddCurrentTaskToDelayedList+0x44>)
  40324a:	681b      	ldr	r3, [r3, #0]
  40324c:	4298      	cmp	r0, r3
  40324e:	d30e      	bcc.n	40326e <prvAddCurrentTaskToDelayedList+0x2e>
  403250:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403252:	4b0d      	ldr	r3, [pc, #52]	; (403288 <prvAddCurrentTaskToDelayedList+0x48>)
  403254:	6818      	ldr	r0, [r3, #0]
  403256:	4b0a      	ldr	r3, [pc, #40]	; (403280 <prvAddCurrentTaskToDelayedList+0x40>)
  403258:	6819      	ldr	r1, [r3, #0]
  40325a:	3104      	adds	r1, #4
  40325c:	4b0b      	ldr	r3, [pc, #44]	; (40328c <prvAddCurrentTaskToDelayedList+0x4c>)
  40325e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  403260:	4b0b      	ldr	r3, [pc, #44]	; (403290 <prvAddCurrentTaskToDelayedList+0x50>)
  403262:	681b      	ldr	r3, [r3, #0]
  403264:	429c      	cmp	r4, r3
  403266:	d201      	bcs.n	40326c <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  403268:	4b09      	ldr	r3, [pc, #36]	; (403290 <prvAddCurrentTaskToDelayedList+0x50>)
  40326a:	601c      	str	r4, [r3, #0]
  40326c:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40326e:	4b09      	ldr	r3, [pc, #36]	; (403294 <prvAddCurrentTaskToDelayedList+0x54>)
  403270:	6818      	ldr	r0, [r3, #0]
  403272:	4b03      	ldr	r3, [pc, #12]	; (403280 <prvAddCurrentTaskToDelayedList+0x40>)
  403274:	6819      	ldr	r1, [r3, #0]
  403276:	3104      	adds	r1, #4
  403278:	4b04      	ldr	r3, [pc, #16]	; (40328c <prvAddCurrentTaskToDelayedList+0x4c>)
  40327a:	4798      	blx	r3
  40327c:	bd10      	pop	{r4, pc}
  40327e:	bf00      	nop
  403280:	20400c80 	.word	0x20400c80
  403284:	20400d78 	.word	0x20400d78
  403288:	20400c84 	.word	0x20400c84
  40328c:	004025e1 	.word	0x004025e1
  403290:	20400d30 	.word	0x20400d30
  403294:	20400c88 	.word	0x20400c88

00403298 <xTaskGenericCreate>:
{
  403298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40329c:	b083      	sub	sp, #12
  40329e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4032a0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4032a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4032a6:	b160      	cbz	r0, 4032c2 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4032a8:	2d04      	cmp	r5, #4
  4032aa:	d915      	bls.n	4032d8 <xTaskGenericCreate+0x40>
  4032ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032b0:	b672      	cpsid	i
  4032b2:	f383 8811 	msr	BASEPRI, r3
  4032b6:	f3bf 8f6f 	isb	sy
  4032ba:	f3bf 8f4f 	dsb	sy
  4032be:	b662      	cpsie	i
  4032c0:	e7fe      	b.n	4032c0 <xTaskGenericCreate+0x28>
  4032c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032c6:	b672      	cpsid	i
  4032c8:	f383 8811 	msr	BASEPRI, r3
  4032cc:	f3bf 8f6f 	isb	sy
  4032d0:	f3bf 8f4f 	dsb	sy
  4032d4:	b662      	cpsie	i
  4032d6:	e7fe      	b.n	4032d6 <xTaskGenericCreate+0x3e>
  4032d8:	9001      	str	r0, [sp, #4]
  4032da:	4698      	mov	r8, r3
  4032dc:	4691      	mov	r9, r2
  4032de:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4032e0:	b936      	cbnz	r6, 4032f0 <xTaskGenericCreate+0x58>
  4032e2:	0090      	lsls	r0, r2, #2
  4032e4:	4b62      	ldr	r3, [pc, #392]	; (403470 <xTaskGenericCreate+0x1d8>)
  4032e6:	4798      	blx	r3
		if( pxStack != NULL )
  4032e8:	4606      	mov	r6, r0
  4032ea:	2800      	cmp	r0, #0
  4032ec:	f000 809e 	beq.w	40342c <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4032f0:	2058      	movs	r0, #88	; 0x58
  4032f2:	4b5f      	ldr	r3, [pc, #380]	; (403470 <xTaskGenericCreate+0x1d8>)
  4032f4:	4798      	blx	r3
			if( pxNewTCB != NULL )
  4032f6:	4604      	mov	r4, r0
  4032f8:	2800      	cmp	r0, #0
  4032fa:	f000 8094 	beq.w	403426 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  4032fe:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  403300:	ea4f 0289 	mov.w	r2, r9, lsl #2
  403304:	21a5      	movs	r1, #165	; 0xa5
  403306:	4630      	mov	r0, r6
  403308:	4b5a      	ldr	r3, [pc, #360]	; (403474 <xTaskGenericCreate+0x1dc>)
  40330a:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  40330c:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  403310:	444e      	add	r6, r9
  403312:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403314:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  403318:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40331c:	783b      	ldrb	r3, [r7, #0]
  40331e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  403322:	783b      	ldrb	r3, [r7, #0]
  403324:	2b00      	cmp	r3, #0
  403326:	f040 8084 	bne.w	403432 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40332a:	2700      	movs	r7, #0
  40332c:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  403330:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  403332:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  403334:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  403336:	f104 0904 	add.w	r9, r4, #4
  40333a:	4648      	mov	r0, r9
  40333c:	f8df b184 	ldr.w	fp, [pc, #388]	; 4034c4 <xTaskGenericCreate+0x22c>
  403340:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  403342:	f104 0018 	add.w	r0, r4, #24
  403346:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  403348:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40334a:	f1c5 0305 	rsb	r3, r5, #5
  40334e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  403350:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  403352:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  403354:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  403358:	4642      	mov	r2, r8
  40335a:	9901      	ldr	r1, [sp, #4]
  40335c:	4630      	mov	r0, r6
  40335e:	4b46      	ldr	r3, [pc, #280]	; (403478 <xTaskGenericCreate+0x1e0>)
  403360:	4798      	blx	r3
  403362:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  403364:	f1ba 0f00 	cmp.w	sl, #0
  403368:	d001      	beq.n	40336e <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40336a:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  40336e:	4b43      	ldr	r3, [pc, #268]	; (40347c <xTaskGenericCreate+0x1e4>)
  403370:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  403372:	4a43      	ldr	r2, [pc, #268]	; (403480 <xTaskGenericCreate+0x1e8>)
  403374:	6813      	ldr	r3, [r2, #0]
  403376:	3301      	adds	r3, #1
  403378:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40337a:	4b42      	ldr	r3, [pc, #264]	; (403484 <xTaskGenericCreate+0x1ec>)
  40337c:	681b      	ldr	r3, [r3, #0]
  40337e:	2b00      	cmp	r3, #0
  403380:	d166      	bne.n	403450 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  403382:	4b40      	ldr	r3, [pc, #256]	; (403484 <xTaskGenericCreate+0x1ec>)
  403384:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  403386:	6813      	ldr	r3, [r2, #0]
  403388:	2b01      	cmp	r3, #1
  40338a:	d121      	bne.n	4033d0 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40338c:	4f3e      	ldr	r7, [pc, #248]	; (403488 <xTaskGenericCreate+0x1f0>)
  40338e:	4638      	mov	r0, r7
  403390:	4e3e      	ldr	r6, [pc, #248]	; (40348c <xTaskGenericCreate+0x1f4>)
  403392:	47b0      	blx	r6
  403394:	f107 0014 	add.w	r0, r7, #20
  403398:	47b0      	blx	r6
  40339a:	f107 0028 	add.w	r0, r7, #40	; 0x28
  40339e:	47b0      	blx	r6
  4033a0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4033a4:	47b0      	blx	r6
  4033a6:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4033aa:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4033ac:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4034c8 <xTaskGenericCreate+0x230>
  4033b0:	4640      	mov	r0, r8
  4033b2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4033b4:	4f36      	ldr	r7, [pc, #216]	; (403490 <xTaskGenericCreate+0x1f8>)
  4033b6:	4638      	mov	r0, r7
  4033b8:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4033ba:	4836      	ldr	r0, [pc, #216]	; (403494 <xTaskGenericCreate+0x1fc>)
  4033bc:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4033be:	4836      	ldr	r0, [pc, #216]	; (403498 <xTaskGenericCreate+0x200>)
  4033c0:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4033c2:	4836      	ldr	r0, [pc, #216]	; (40349c <xTaskGenericCreate+0x204>)
  4033c4:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4033c6:	4b36      	ldr	r3, [pc, #216]	; (4034a0 <xTaskGenericCreate+0x208>)
  4033c8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4033cc:	4b35      	ldr	r3, [pc, #212]	; (4034a4 <xTaskGenericCreate+0x20c>)
  4033ce:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  4033d0:	4a35      	ldr	r2, [pc, #212]	; (4034a8 <xTaskGenericCreate+0x210>)
  4033d2:	6813      	ldr	r3, [r2, #0]
  4033d4:	3301      	adds	r3, #1
  4033d6:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4033d8:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4033da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4033dc:	4a33      	ldr	r2, [pc, #204]	; (4034ac <xTaskGenericCreate+0x214>)
  4033de:	6811      	ldr	r1, [r2, #0]
  4033e0:	2301      	movs	r3, #1
  4033e2:	4083      	lsls	r3, r0
  4033e4:	430b      	orrs	r3, r1
  4033e6:	6013      	str	r3, [r2, #0]
  4033e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4033ec:	4649      	mov	r1, r9
  4033ee:	4b26      	ldr	r3, [pc, #152]	; (403488 <xTaskGenericCreate+0x1f0>)
  4033f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4033f4:	4b2e      	ldr	r3, [pc, #184]	; (4034b0 <xTaskGenericCreate+0x218>)
  4033f6:	4798      	blx	r3
		taskEXIT_CRITICAL();
  4033f8:	4b2e      	ldr	r3, [pc, #184]	; (4034b4 <xTaskGenericCreate+0x21c>)
  4033fa:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4033fc:	4b2e      	ldr	r3, [pc, #184]	; (4034b8 <xTaskGenericCreate+0x220>)
  4033fe:	681b      	ldr	r3, [r3, #0]
  403400:	2b00      	cmp	r3, #0
  403402:	d031      	beq.n	403468 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  403404:	4b1f      	ldr	r3, [pc, #124]	; (403484 <xTaskGenericCreate+0x1ec>)
  403406:	681b      	ldr	r3, [r3, #0]
  403408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40340a:	429d      	cmp	r5, r3
  40340c:	d92e      	bls.n	40346c <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  40340e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403412:	4b2a      	ldr	r3, [pc, #168]	; (4034bc <xTaskGenericCreate+0x224>)
  403414:	601a      	str	r2, [r3, #0]
  403416:	f3bf 8f4f 	dsb	sy
  40341a:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40341e:	2001      	movs	r0, #1
}
  403420:	b003      	add	sp, #12
  403422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  403426:	4630      	mov	r0, r6
  403428:	4b25      	ldr	r3, [pc, #148]	; (4034c0 <xTaskGenericCreate+0x228>)
  40342a:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40342c:	f04f 30ff 	mov.w	r0, #4294967295
  403430:	e7f6      	b.n	403420 <xTaskGenericCreate+0x188>
  403432:	463b      	mov	r3, r7
  403434:	f104 0234 	add.w	r2, r4, #52	; 0x34
  403438:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40343a:	7859      	ldrb	r1, [r3, #1]
  40343c:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  403440:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  403444:	2900      	cmp	r1, #0
  403446:	f43f af70 	beq.w	40332a <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40344a:	42bb      	cmp	r3, r7
  40344c:	d1f5      	bne.n	40343a <xTaskGenericCreate+0x1a2>
  40344e:	e76c      	b.n	40332a <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  403450:	4b19      	ldr	r3, [pc, #100]	; (4034b8 <xTaskGenericCreate+0x220>)
  403452:	681b      	ldr	r3, [r3, #0]
  403454:	2b00      	cmp	r3, #0
  403456:	d1bb      	bne.n	4033d0 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  403458:	4b0a      	ldr	r3, [pc, #40]	; (403484 <xTaskGenericCreate+0x1ec>)
  40345a:	681b      	ldr	r3, [r3, #0]
  40345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40345e:	429d      	cmp	r5, r3
  403460:	d3b6      	bcc.n	4033d0 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  403462:	4b08      	ldr	r3, [pc, #32]	; (403484 <xTaskGenericCreate+0x1ec>)
  403464:	601c      	str	r4, [r3, #0]
  403466:	e7b3      	b.n	4033d0 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  403468:	2001      	movs	r0, #1
  40346a:	e7d9      	b.n	403420 <xTaskGenericCreate+0x188>
  40346c:	2001      	movs	r0, #1
	return xReturn;
  40346e:	e7d7      	b.n	403420 <xTaskGenericCreate+0x188>
  403470:	00402955 	.word	0x00402955
  403474:	00404e29 	.word	0x00404e29
  403478:	004026ad 	.word	0x004026ad
  40347c:	004026f9 	.word	0x004026f9
  403480:	20400cf0 	.word	0x20400cf0
  403484:	20400c80 	.word	0x20400c80
  403488:	20400c8c 	.word	0x20400c8c
  40348c:	004025ad 	.word	0x004025ad
  403490:	20400d1c 	.word	0x20400d1c
  403494:	20400d38 	.word	0x20400d38
  403498:	20400d64 	.word	0x20400d64
  40349c:	20400d50 	.word	0x20400d50
  4034a0:	20400c84 	.word	0x20400c84
  4034a4:	20400c88 	.word	0x20400c88
  4034a8:	20400cfc 	.word	0x20400cfc
  4034ac:	20400d04 	.word	0x20400d04
  4034b0:	004025c9 	.word	0x004025c9
  4034b4:	00402745 	.word	0x00402745
  4034b8:	20400d4c 	.word	0x20400d4c
  4034bc:	e000ed04 	.word	0xe000ed04
  4034c0:	00402985 	.word	0x00402985
  4034c4:	004025c3 	.word	0x004025c3
  4034c8:	20400d08 	.word	0x20400d08

004034cc <vTaskResume>:
	{
  4034cc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( xTaskToResume );
  4034ce:	b170      	cbz	r0, 4034ee <vTaskResume+0x22>
  4034d0:	4604      	mov	r4, r0
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
  4034d2:	4b1d      	ldr	r3, [pc, #116]	; (403548 <vTaskResume+0x7c>)
  4034d4:	681b      	ldr	r3, [r3, #0]
  4034d6:	4298      	cmp	r0, r3
  4034d8:	d008      	beq.n	4034ec <vTaskResume+0x20>
			taskENTER_CRITICAL();
  4034da:	4b1c      	ldr	r3, [pc, #112]	; (40354c <vTaskResume+0x80>)
  4034dc:	4798      	blx	r3
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
  4034de:	4620      	mov	r0, r4
  4034e0:	4b1b      	ldr	r3, [pc, #108]	; (403550 <vTaskResume+0x84>)
  4034e2:	4798      	blx	r3
  4034e4:	2801      	cmp	r0, #1
  4034e6:	d00d      	beq.n	403504 <vTaskResume+0x38>
			taskEXIT_CRITICAL();
  4034e8:	4b1a      	ldr	r3, [pc, #104]	; (403554 <vTaskResume+0x88>)
  4034ea:	4798      	blx	r3
  4034ec:	bd38      	pop	{r3, r4, r5, pc}
  4034ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034f2:	b672      	cpsid	i
  4034f4:	f383 8811 	msr	BASEPRI, r3
  4034f8:	f3bf 8f6f 	isb	sy
  4034fc:	f3bf 8f4f 	dsb	sy
  403500:	b662      	cpsie	i
  403502:	e7fe      	b.n	403502 <vTaskResume+0x36>
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
  403504:	1d25      	adds	r5, r4, #4
  403506:	4628      	mov	r0, r5
  403508:	4b13      	ldr	r3, [pc, #76]	; (403558 <vTaskResume+0x8c>)
  40350a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  40350c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40350e:	4a13      	ldr	r2, [pc, #76]	; (40355c <vTaskResume+0x90>)
  403510:	6811      	ldr	r1, [r2, #0]
  403512:	2301      	movs	r3, #1
  403514:	4083      	lsls	r3, r0
  403516:	430b      	orrs	r3, r1
  403518:	6013      	str	r3, [r2, #0]
  40351a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40351e:	4629      	mov	r1, r5
  403520:	4b0f      	ldr	r3, [pc, #60]	; (403560 <vTaskResume+0x94>)
  403522:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403526:	4b0f      	ldr	r3, [pc, #60]	; (403564 <vTaskResume+0x98>)
  403528:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40352a:	4b07      	ldr	r3, [pc, #28]	; (403548 <vTaskResume+0x7c>)
  40352c:	681b      	ldr	r3, [r3, #0]
  40352e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403532:	429a      	cmp	r2, r3
  403534:	d3d8      	bcc.n	4034e8 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
  403536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40353a:	4b0b      	ldr	r3, [pc, #44]	; (403568 <vTaskResume+0x9c>)
  40353c:	601a      	str	r2, [r3, #0]
  40353e:	f3bf 8f4f 	dsb	sy
  403542:	f3bf 8f6f 	isb	sy
  403546:	e7cf      	b.n	4034e8 <vTaskResume+0x1c>
  403548:	20400c80 	.word	0x20400c80
  40354c:	004026f9 	.word	0x004026f9
  403550:	004031d5 	.word	0x004031d5
  403554:	00402745 	.word	0x00402745
  403558:	00402615 	.word	0x00402615
  40355c:	20400d04 	.word	0x20400d04
  403560:	20400c8c 	.word	0x20400c8c
  403564:	004025c9 	.word	0x004025c9
  403568:	e000ed04 	.word	0xe000ed04

0040356c <vTaskStartScheduler>:
{
  40356c:	b510      	push	{r4, lr}
  40356e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  403570:	2300      	movs	r3, #0
  403572:	9303      	str	r3, [sp, #12]
  403574:	9302      	str	r3, [sp, #8]
  403576:	9301      	str	r3, [sp, #4]
  403578:	9300      	str	r3, [sp, #0]
  40357a:	2282      	movs	r2, #130	; 0x82
  40357c:	4916      	ldr	r1, [pc, #88]	; (4035d8 <vTaskStartScheduler+0x6c>)
  40357e:	4817      	ldr	r0, [pc, #92]	; (4035dc <vTaskStartScheduler+0x70>)
  403580:	4c17      	ldr	r4, [pc, #92]	; (4035e0 <vTaskStartScheduler+0x74>)
  403582:	47a0      	blx	r4
		if( xReturn == pdPASS )
  403584:	2801      	cmp	r0, #1
  403586:	d00b      	beq.n	4035a0 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  403588:	bb20      	cbnz	r0, 4035d4 <vTaskStartScheduler+0x68>
  40358a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40358e:	b672      	cpsid	i
  403590:	f383 8811 	msr	BASEPRI, r3
  403594:	f3bf 8f6f 	isb	sy
  403598:	f3bf 8f4f 	dsb	sy
  40359c:	b662      	cpsie	i
  40359e:	e7fe      	b.n	40359e <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4035a0:	4b10      	ldr	r3, [pc, #64]	; (4035e4 <vTaskStartScheduler+0x78>)
  4035a2:	4798      	blx	r3
	if( xReturn == pdPASS )
  4035a4:	2801      	cmp	r0, #1
  4035a6:	d1ef      	bne.n	403588 <vTaskStartScheduler+0x1c>
  4035a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035ac:	b672      	cpsid	i
  4035ae:	f383 8811 	msr	BASEPRI, r3
  4035b2:	f3bf 8f6f 	isb	sy
  4035b6:	f3bf 8f4f 	dsb	sy
  4035ba:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4035bc:	f04f 32ff 	mov.w	r2, #4294967295
  4035c0:	4b09      	ldr	r3, [pc, #36]	; (4035e8 <vTaskStartScheduler+0x7c>)
  4035c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4035c4:	2201      	movs	r2, #1
  4035c6:	4b09      	ldr	r3, [pc, #36]	; (4035ec <vTaskStartScheduler+0x80>)
  4035c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4035ca:	2200      	movs	r2, #0
  4035cc:	4b08      	ldr	r3, [pc, #32]	; (4035f0 <vTaskStartScheduler+0x84>)
  4035ce:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4035d0:	4b08      	ldr	r3, [pc, #32]	; (4035f4 <vTaskStartScheduler+0x88>)
  4035d2:	4798      	blx	r3
}
  4035d4:	b004      	add	sp, #16
  4035d6:	bd10      	pop	{r4, pc}
  4035d8:	00407780 	.word	0x00407780
  4035dc:	00403911 	.word	0x00403911
  4035e0:	00403299 	.word	0x00403299
  4035e4:	00404045 	.word	0x00404045
  4035e8:	20400d30 	.word	0x20400d30
  4035ec:	20400d4c 	.word	0x20400d4c
  4035f0:	20400d78 	.word	0x20400d78
  4035f4:	0040282d 	.word	0x0040282d

004035f8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4035f8:	4a02      	ldr	r2, [pc, #8]	; (403604 <vTaskSuspendAll+0xc>)
  4035fa:	6813      	ldr	r3, [r2, #0]
  4035fc:	3301      	adds	r3, #1
  4035fe:	6013      	str	r3, [r2, #0]
  403600:	4770      	bx	lr
  403602:	bf00      	nop
  403604:	20400cf8 	.word	0x20400cf8

00403608 <xTaskGetTickCount>:
		xTicks = xTickCount;
  403608:	4b01      	ldr	r3, [pc, #4]	; (403610 <xTaskGetTickCount+0x8>)
  40360a:	6818      	ldr	r0, [r3, #0]
}
  40360c:	4770      	bx	lr
  40360e:	bf00      	nop
  403610:	20400d78 	.word	0x20400d78

00403614 <xTaskIncrementTick>:
{
  403614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403618:	4b42      	ldr	r3, [pc, #264]	; (403724 <xTaskIncrementTick+0x110>)
  40361a:	681b      	ldr	r3, [r3, #0]
  40361c:	2b00      	cmp	r3, #0
  40361e:	d178      	bne.n	403712 <xTaskIncrementTick+0xfe>
		++xTickCount;
  403620:	4b41      	ldr	r3, [pc, #260]	; (403728 <xTaskIncrementTick+0x114>)
  403622:	681a      	ldr	r2, [r3, #0]
  403624:	3201      	adds	r2, #1
  403626:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  403628:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40362a:	b9d6      	cbnz	r6, 403662 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  40362c:	4b3f      	ldr	r3, [pc, #252]	; (40372c <xTaskIncrementTick+0x118>)
  40362e:	681b      	ldr	r3, [r3, #0]
  403630:	681b      	ldr	r3, [r3, #0]
  403632:	b153      	cbz	r3, 40364a <xTaskIncrementTick+0x36>
  403634:	f04f 0380 	mov.w	r3, #128	; 0x80
  403638:	b672      	cpsid	i
  40363a:	f383 8811 	msr	BASEPRI, r3
  40363e:	f3bf 8f6f 	isb	sy
  403642:	f3bf 8f4f 	dsb	sy
  403646:	b662      	cpsie	i
  403648:	e7fe      	b.n	403648 <xTaskIncrementTick+0x34>
  40364a:	4a38      	ldr	r2, [pc, #224]	; (40372c <xTaskIncrementTick+0x118>)
  40364c:	6811      	ldr	r1, [r2, #0]
  40364e:	4b38      	ldr	r3, [pc, #224]	; (403730 <xTaskIncrementTick+0x11c>)
  403650:	6818      	ldr	r0, [r3, #0]
  403652:	6010      	str	r0, [r2, #0]
  403654:	6019      	str	r1, [r3, #0]
  403656:	4a37      	ldr	r2, [pc, #220]	; (403734 <xTaskIncrementTick+0x120>)
  403658:	6813      	ldr	r3, [r2, #0]
  40365a:	3301      	adds	r3, #1
  40365c:	6013      	str	r3, [r2, #0]
  40365e:	4b36      	ldr	r3, [pc, #216]	; (403738 <xTaskIncrementTick+0x124>)
  403660:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  403662:	4b36      	ldr	r3, [pc, #216]	; (40373c <xTaskIncrementTick+0x128>)
  403664:	681b      	ldr	r3, [r3, #0]
  403666:	429e      	cmp	r6, r3
  403668:	d218      	bcs.n	40369c <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40366a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40366c:	4b34      	ldr	r3, [pc, #208]	; (403740 <xTaskIncrementTick+0x12c>)
  40366e:	681b      	ldr	r3, [r3, #0]
  403670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403672:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403676:	4a33      	ldr	r2, [pc, #204]	; (403744 <xTaskIncrementTick+0x130>)
  403678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  40367c:	2b02      	cmp	r3, #2
  40367e:	bf28      	it	cs
  403680:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  403682:	4b31      	ldr	r3, [pc, #196]	; (403748 <xTaskIncrementTick+0x134>)
  403684:	681b      	ldr	r3, [r3, #0]
  403686:	b90b      	cbnz	r3, 40368c <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  403688:	4b30      	ldr	r3, [pc, #192]	; (40374c <xTaskIncrementTick+0x138>)
  40368a:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  40368c:	4b30      	ldr	r3, [pc, #192]	; (403750 <xTaskIncrementTick+0x13c>)
  40368e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  403690:	2b00      	cmp	r3, #0
}
  403692:	bf0c      	ite	eq
  403694:	4620      	moveq	r0, r4
  403696:	2001      	movne	r0, #1
  403698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40369c:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40369e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 40372c <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4036a2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 40375c <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4036a6:	4f2b      	ldr	r7, [pc, #172]	; (403754 <xTaskIncrementTick+0x140>)
  4036a8:	e01f      	b.n	4036ea <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4036aa:	f04f 32ff 	mov.w	r2, #4294967295
  4036ae:	4b23      	ldr	r3, [pc, #140]	; (40373c <xTaskIncrementTick+0x128>)
  4036b0:	601a      	str	r2, [r3, #0]
						break;
  4036b2:	e7db      	b.n	40366c <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4036b4:	4a21      	ldr	r2, [pc, #132]	; (40373c <xTaskIncrementTick+0x128>)
  4036b6:	6013      	str	r3, [r2, #0]
							break;
  4036b8:	e7d8      	b.n	40366c <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4036ba:	f105 0018 	add.w	r0, r5, #24
  4036be:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4036c0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4036c2:	683a      	ldr	r2, [r7, #0]
  4036c4:	2301      	movs	r3, #1
  4036c6:	4083      	lsls	r3, r0
  4036c8:	4313      	orrs	r3, r2
  4036ca:	603b      	str	r3, [r7, #0]
  4036cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4036d0:	4651      	mov	r1, sl
  4036d2:	4b1c      	ldr	r3, [pc, #112]	; (403744 <xTaskIncrementTick+0x130>)
  4036d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4036d8:	4b1f      	ldr	r3, [pc, #124]	; (403758 <xTaskIncrementTick+0x144>)
  4036da:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4036dc:	4b18      	ldr	r3, [pc, #96]	; (403740 <xTaskIncrementTick+0x12c>)
  4036de:	681b      	ldr	r3, [r3, #0]
  4036e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4036e4:	429a      	cmp	r2, r3
  4036e6:	bf28      	it	cs
  4036e8:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4036ea:	f8d9 3000 	ldr.w	r3, [r9]
  4036ee:	681b      	ldr	r3, [r3, #0]
  4036f0:	2b00      	cmp	r3, #0
  4036f2:	d0da      	beq.n	4036aa <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4036f4:	f8d9 3000 	ldr.w	r3, [r9]
  4036f8:	68db      	ldr	r3, [r3, #12]
  4036fa:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4036fc:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4036fe:	429e      	cmp	r6, r3
  403700:	d3d8      	bcc.n	4036b4 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  403702:	f105 0a04 	add.w	sl, r5, #4
  403706:	4650      	mov	r0, sl
  403708:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40370a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40370c:	2b00      	cmp	r3, #0
  40370e:	d1d4      	bne.n	4036ba <xTaskIncrementTick+0xa6>
  403710:	e7d6      	b.n	4036c0 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  403712:	4a0d      	ldr	r2, [pc, #52]	; (403748 <xTaskIncrementTick+0x134>)
  403714:	6813      	ldr	r3, [r2, #0]
  403716:	3301      	adds	r3, #1
  403718:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40371a:	4b0c      	ldr	r3, [pc, #48]	; (40374c <xTaskIncrementTick+0x138>)
  40371c:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40371e:	2400      	movs	r4, #0
  403720:	e7b4      	b.n	40368c <xTaskIncrementTick+0x78>
  403722:	bf00      	nop
  403724:	20400cf8 	.word	0x20400cf8
  403728:	20400d78 	.word	0x20400d78
  40372c:	20400c84 	.word	0x20400c84
  403730:	20400c88 	.word	0x20400c88
  403734:	20400d34 	.word	0x20400d34
  403738:	00403215 	.word	0x00403215
  40373c:	20400d30 	.word	0x20400d30
  403740:	20400c80 	.word	0x20400c80
  403744:	20400c8c 	.word	0x20400c8c
  403748:	20400cf4 	.word	0x20400cf4
  40374c:	00401145 	.word	0x00401145
  403750:	20400d7c 	.word	0x20400d7c
  403754:	20400d04 	.word	0x20400d04
  403758:	004025c9 	.word	0x004025c9
  40375c:	00402615 	.word	0x00402615

00403760 <xTaskResumeAll>:
{
  403760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  403764:	4b38      	ldr	r3, [pc, #224]	; (403848 <xTaskResumeAll+0xe8>)
  403766:	681b      	ldr	r3, [r3, #0]
  403768:	b953      	cbnz	r3, 403780 <xTaskResumeAll+0x20>
  40376a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40376e:	b672      	cpsid	i
  403770:	f383 8811 	msr	BASEPRI, r3
  403774:	f3bf 8f6f 	isb	sy
  403778:	f3bf 8f4f 	dsb	sy
  40377c:	b662      	cpsie	i
  40377e:	e7fe      	b.n	40377e <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  403780:	4b32      	ldr	r3, [pc, #200]	; (40384c <xTaskResumeAll+0xec>)
  403782:	4798      	blx	r3
		--uxSchedulerSuspended;
  403784:	4b30      	ldr	r3, [pc, #192]	; (403848 <xTaskResumeAll+0xe8>)
  403786:	681a      	ldr	r2, [r3, #0]
  403788:	3a01      	subs	r2, #1
  40378a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40378c:	681b      	ldr	r3, [r3, #0]
  40378e:	2b00      	cmp	r3, #0
  403790:	d155      	bne.n	40383e <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  403792:	4b2f      	ldr	r3, [pc, #188]	; (403850 <xTaskResumeAll+0xf0>)
  403794:	681b      	ldr	r3, [r3, #0]
  403796:	2b00      	cmp	r3, #0
  403798:	d132      	bne.n	403800 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40379a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40379c:	4b2d      	ldr	r3, [pc, #180]	; (403854 <xTaskResumeAll+0xf4>)
  40379e:	4798      	blx	r3
}
  4037a0:	4620      	mov	r0, r4
  4037a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4037a6:	68fb      	ldr	r3, [r7, #12]
  4037a8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4037aa:	f104 0018 	add.w	r0, r4, #24
  4037ae:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4037b0:	f104 0804 	add.w	r8, r4, #4
  4037b4:	4640      	mov	r0, r8
  4037b6:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4037b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4037ba:	682a      	ldr	r2, [r5, #0]
  4037bc:	2301      	movs	r3, #1
  4037be:	4083      	lsls	r3, r0
  4037c0:	4313      	orrs	r3, r2
  4037c2:	602b      	str	r3, [r5, #0]
  4037c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4037c8:	4641      	mov	r1, r8
  4037ca:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4037ce:	4b22      	ldr	r3, [pc, #136]	; (403858 <xTaskResumeAll+0xf8>)
  4037d0:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4037d2:	4b22      	ldr	r3, [pc, #136]	; (40385c <xTaskResumeAll+0xfc>)
  4037d4:	681b      	ldr	r3, [r3, #0]
  4037d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4037da:	429a      	cmp	r2, r3
  4037dc:	d20c      	bcs.n	4037f8 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4037de:	683b      	ldr	r3, [r7, #0]
  4037e0:	2b00      	cmp	r3, #0
  4037e2:	d1e0      	bne.n	4037a6 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4037e4:	4b1e      	ldr	r3, [pc, #120]	; (403860 <xTaskResumeAll+0x100>)
  4037e6:	681b      	ldr	r3, [r3, #0]
  4037e8:	b1db      	cbz	r3, 403822 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4037ea:	4b1d      	ldr	r3, [pc, #116]	; (403860 <xTaskResumeAll+0x100>)
  4037ec:	681b      	ldr	r3, [r3, #0]
  4037ee:	b1c3      	cbz	r3, 403822 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4037f0:	4e1c      	ldr	r6, [pc, #112]	; (403864 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4037f2:	4d1d      	ldr	r5, [pc, #116]	; (403868 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4037f4:	4c1a      	ldr	r4, [pc, #104]	; (403860 <xTaskResumeAll+0x100>)
  4037f6:	e00e      	b.n	403816 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4037f8:	2201      	movs	r2, #1
  4037fa:	4b1b      	ldr	r3, [pc, #108]	; (403868 <xTaskResumeAll+0x108>)
  4037fc:	601a      	str	r2, [r3, #0]
  4037fe:	e7ee      	b.n	4037de <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403800:	4f1a      	ldr	r7, [pc, #104]	; (40386c <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403802:	4e1b      	ldr	r6, [pc, #108]	; (403870 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  403804:	4d1b      	ldr	r5, [pc, #108]	; (403874 <xTaskResumeAll+0x114>)
  403806:	f8df 9074 	ldr.w	r9, [pc, #116]	; 40387c <xTaskResumeAll+0x11c>
  40380a:	e7e8      	b.n	4037de <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  40380c:	6823      	ldr	r3, [r4, #0]
  40380e:	3b01      	subs	r3, #1
  403810:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  403812:	6823      	ldr	r3, [r4, #0]
  403814:	b12b      	cbz	r3, 403822 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  403816:	47b0      	blx	r6
  403818:	2800      	cmp	r0, #0
  40381a:	d0f7      	beq.n	40380c <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  40381c:	2301      	movs	r3, #1
  40381e:	602b      	str	r3, [r5, #0]
  403820:	e7f4      	b.n	40380c <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  403822:	4b11      	ldr	r3, [pc, #68]	; (403868 <xTaskResumeAll+0x108>)
  403824:	681b      	ldr	r3, [r3, #0]
  403826:	2b01      	cmp	r3, #1
  403828:	d10b      	bne.n	403842 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40382a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40382e:	4b12      	ldr	r3, [pc, #72]	; (403878 <xTaskResumeAll+0x118>)
  403830:	601a      	str	r2, [r3, #0]
  403832:	f3bf 8f4f 	dsb	sy
  403836:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40383a:	2401      	movs	r4, #1
  40383c:	e7ae      	b.n	40379c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40383e:	2400      	movs	r4, #0
  403840:	e7ac      	b.n	40379c <xTaskResumeAll+0x3c>
  403842:	2400      	movs	r4, #0
  403844:	e7aa      	b.n	40379c <xTaskResumeAll+0x3c>
  403846:	bf00      	nop
  403848:	20400cf8 	.word	0x20400cf8
  40384c:	004026f9 	.word	0x004026f9
  403850:	20400cf0 	.word	0x20400cf0
  403854:	00402745 	.word	0x00402745
  403858:	004025c9 	.word	0x004025c9
  40385c:	20400c80 	.word	0x20400c80
  403860:	20400cf4 	.word	0x20400cf4
  403864:	00403615 	.word	0x00403615
  403868:	20400d7c 	.word	0x20400d7c
  40386c:	20400d38 	.word	0x20400d38
  403870:	00402615 	.word	0x00402615
  403874:	20400d04 	.word	0x20400d04
  403878:	e000ed04 	.word	0xe000ed04
  40387c:	20400c8c 	.word	0x20400c8c

00403880 <vTaskDelay>:
	{
  403880:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  403882:	2800      	cmp	r0, #0
  403884:	d029      	beq.n	4038da <vTaskDelay+0x5a>
  403886:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  403888:	4b18      	ldr	r3, [pc, #96]	; (4038ec <vTaskDelay+0x6c>)
  40388a:	681b      	ldr	r3, [r3, #0]
  40388c:	b153      	cbz	r3, 4038a4 <vTaskDelay+0x24>
  40388e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403892:	b672      	cpsid	i
  403894:	f383 8811 	msr	BASEPRI, r3
  403898:	f3bf 8f6f 	isb	sy
  40389c:	f3bf 8f4f 	dsb	sy
  4038a0:	b662      	cpsie	i
  4038a2:	e7fe      	b.n	4038a2 <vTaskDelay+0x22>
			vTaskSuspendAll();
  4038a4:	4b12      	ldr	r3, [pc, #72]	; (4038f0 <vTaskDelay+0x70>)
  4038a6:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4038a8:	4b12      	ldr	r3, [pc, #72]	; (4038f4 <vTaskDelay+0x74>)
  4038aa:	681b      	ldr	r3, [r3, #0]
  4038ac:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4038ae:	4b12      	ldr	r3, [pc, #72]	; (4038f8 <vTaskDelay+0x78>)
  4038b0:	6818      	ldr	r0, [r3, #0]
  4038b2:	3004      	adds	r0, #4
  4038b4:	4b11      	ldr	r3, [pc, #68]	; (4038fc <vTaskDelay+0x7c>)
  4038b6:	4798      	blx	r3
  4038b8:	b948      	cbnz	r0, 4038ce <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4038ba:	4b0f      	ldr	r3, [pc, #60]	; (4038f8 <vTaskDelay+0x78>)
  4038bc:	681a      	ldr	r2, [r3, #0]
  4038be:	4910      	ldr	r1, [pc, #64]	; (403900 <vTaskDelay+0x80>)
  4038c0:	680b      	ldr	r3, [r1, #0]
  4038c2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4038c4:	2201      	movs	r2, #1
  4038c6:	4082      	lsls	r2, r0
  4038c8:	ea23 0302 	bic.w	r3, r3, r2
  4038cc:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4038ce:	4620      	mov	r0, r4
  4038d0:	4b0c      	ldr	r3, [pc, #48]	; (403904 <vTaskDelay+0x84>)
  4038d2:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4038d4:	4b0c      	ldr	r3, [pc, #48]	; (403908 <vTaskDelay+0x88>)
  4038d6:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4038d8:	b938      	cbnz	r0, 4038ea <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4038da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4038de:	4b0b      	ldr	r3, [pc, #44]	; (40390c <vTaskDelay+0x8c>)
  4038e0:	601a      	str	r2, [r3, #0]
  4038e2:	f3bf 8f4f 	dsb	sy
  4038e6:	f3bf 8f6f 	isb	sy
  4038ea:	bd10      	pop	{r4, pc}
  4038ec:	20400cf8 	.word	0x20400cf8
  4038f0:	004035f9 	.word	0x004035f9
  4038f4:	20400d78 	.word	0x20400d78
  4038f8:	20400c80 	.word	0x20400c80
  4038fc:	00402615 	.word	0x00402615
  403900:	20400d04 	.word	0x20400d04
  403904:	00403241 	.word	0x00403241
  403908:	00403761 	.word	0x00403761
  40390c:	e000ed04 	.word	0xe000ed04

00403910 <prvIdleTask>:
{
  403910:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  403912:	f8df 8088 	ldr.w	r8, [pc, #136]	; 40399c <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  403916:	4e19      	ldr	r6, [pc, #100]	; (40397c <prvIdleTask+0x6c>)
				taskYIELD();
  403918:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4039a0 <prvIdleTask+0x90>
  40391c:	e02a      	b.n	403974 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40391e:	4b18      	ldr	r3, [pc, #96]	; (403980 <prvIdleTask+0x70>)
  403920:	681b      	ldr	r3, [r3, #0]
  403922:	2b01      	cmp	r3, #1
  403924:	d81e      	bhi.n	403964 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  403926:	682b      	ldr	r3, [r5, #0]
  403928:	2b00      	cmp	r3, #0
  40392a:	d0f8      	beq.n	40391e <prvIdleTask+0xe>
			vTaskSuspendAll();
  40392c:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40392e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  403930:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  403932:	2c00      	cmp	r4, #0
  403934:	d0f7      	beq.n	403926 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  403936:	4b13      	ldr	r3, [pc, #76]	; (403984 <prvIdleTask+0x74>)
  403938:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40393a:	68f3      	ldr	r3, [r6, #12]
  40393c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40393e:	1d20      	adds	r0, r4, #4
  403940:	4b11      	ldr	r3, [pc, #68]	; (403988 <prvIdleTask+0x78>)
  403942:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  403944:	4a11      	ldr	r2, [pc, #68]	; (40398c <prvIdleTask+0x7c>)
  403946:	6813      	ldr	r3, [r2, #0]
  403948:	3b01      	subs	r3, #1
  40394a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  40394c:	682b      	ldr	r3, [r5, #0]
  40394e:	3b01      	subs	r3, #1
  403950:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  403952:	4b0f      	ldr	r3, [pc, #60]	; (403990 <prvIdleTask+0x80>)
  403954:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  403956:	6b20      	ldr	r0, [r4, #48]	; 0x30
  403958:	f8df a048 	ldr.w	sl, [pc, #72]	; 4039a4 <prvIdleTask+0x94>
  40395c:	47d0      	blx	sl
		vPortFree( pxTCB );
  40395e:	4620      	mov	r0, r4
  403960:	47d0      	blx	sl
  403962:	e7e0      	b.n	403926 <prvIdleTask+0x16>
				taskYIELD();
  403964:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403968:	f8c9 3000 	str.w	r3, [r9]
  40396c:	f3bf 8f4f 	dsb	sy
  403970:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  403974:	4d07      	ldr	r5, [pc, #28]	; (403994 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  403976:	4f08      	ldr	r7, [pc, #32]	; (403998 <prvIdleTask+0x88>)
  403978:	e7d5      	b.n	403926 <prvIdleTask+0x16>
  40397a:	bf00      	nop
  40397c:	20400d64 	.word	0x20400d64
  403980:	20400c8c 	.word	0x20400c8c
  403984:	004026f9 	.word	0x004026f9
  403988:	00402615 	.word	0x00402615
  40398c:	20400cf0 	.word	0x20400cf0
  403990:	00402745 	.word	0x00402745
  403994:	20400d00 	.word	0x20400d00
  403998:	00403761 	.word	0x00403761
  40399c:	004035f9 	.word	0x004035f9
  4039a0:	e000ed04 	.word	0xe000ed04
  4039a4:	00402985 	.word	0x00402985

004039a8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4039a8:	4b2d      	ldr	r3, [pc, #180]	; (403a60 <vTaskSwitchContext+0xb8>)
  4039aa:	681b      	ldr	r3, [r3, #0]
  4039ac:	2b00      	cmp	r3, #0
  4039ae:	d12c      	bne.n	403a0a <vTaskSwitchContext+0x62>
{
  4039b0:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4039b2:	2200      	movs	r2, #0
  4039b4:	4b2b      	ldr	r3, [pc, #172]	; (403a64 <vTaskSwitchContext+0xbc>)
  4039b6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4039b8:	4b2b      	ldr	r3, [pc, #172]	; (403a68 <vTaskSwitchContext+0xc0>)
  4039ba:	681b      	ldr	r3, [r3, #0]
  4039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4039be:	681a      	ldr	r2, [r3, #0]
  4039c0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4039c4:	d103      	bne.n	4039ce <vTaskSwitchContext+0x26>
  4039c6:	685a      	ldr	r2, [r3, #4]
  4039c8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4039cc:	d021      	beq.n	403a12 <vTaskSwitchContext+0x6a>
  4039ce:	4b26      	ldr	r3, [pc, #152]	; (403a68 <vTaskSwitchContext+0xc0>)
  4039d0:	6818      	ldr	r0, [r3, #0]
  4039d2:	6819      	ldr	r1, [r3, #0]
  4039d4:	3134      	adds	r1, #52	; 0x34
  4039d6:	4b25      	ldr	r3, [pc, #148]	; (403a6c <vTaskSwitchContext+0xc4>)
  4039d8:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4039da:	4b25      	ldr	r3, [pc, #148]	; (403a70 <vTaskSwitchContext+0xc8>)
  4039dc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4039de:	fab3 f383 	clz	r3, r3
  4039e2:	b2db      	uxtb	r3, r3
  4039e4:	f1c3 031f 	rsb	r3, r3, #31
  4039e8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4039ec:	4a21      	ldr	r2, [pc, #132]	; (403a74 <vTaskSwitchContext+0xcc>)
  4039ee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4039f2:	b9ba      	cbnz	r2, 403a24 <vTaskSwitchContext+0x7c>
	__asm volatile
  4039f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4039f8:	b672      	cpsid	i
  4039fa:	f383 8811 	msr	BASEPRI, r3
  4039fe:	f3bf 8f6f 	isb	sy
  403a02:	f3bf 8f4f 	dsb	sy
  403a06:	b662      	cpsie	i
  403a08:	e7fe      	b.n	403a08 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  403a0a:	2201      	movs	r2, #1
  403a0c:	4b15      	ldr	r3, [pc, #84]	; (403a64 <vTaskSwitchContext+0xbc>)
  403a0e:	601a      	str	r2, [r3, #0]
  403a10:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  403a12:	689a      	ldr	r2, [r3, #8]
  403a14:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403a18:	d1d9      	bne.n	4039ce <vTaskSwitchContext+0x26>
  403a1a:	68db      	ldr	r3, [r3, #12]
  403a1c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  403a20:	d1d5      	bne.n	4039ce <vTaskSwitchContext+0x26>
  403a22:	e7da      	b.n	4039da <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403a24:	4a13      	ldr	r2, [pc, #76]	; (403a74 <vTaskSwitchContext+0xcc>)
  403a26:	0099      	lsls	r1, r3, #2
  403a28:	18c8      	adds	r0, r1, r3
  403a2a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  403a2e:	6844      	ldr	r4, [r0, #4]
  403a30:	6864      	ldr	r4, [r4, #4]
  403a32:	6044      	str	r4, [r0, #4]
  403a34:	4419      	add	r1, r3
  403a36:	4602      	mov	r2, r0
  403a38:	3208      	adds	r2, #8
  403a3a:	4294      	cmp	r4, r2
  403a3c:	d009      	beq.n	403a52 <vTaskSwitchContext+0xaa>
  403a3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403a42:	4a0c      	ldr	r2, [pc, #48]	; (403a74 <vTaskSwitchContext+0xcc>)
  403a44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403a48:	685b      	ldr	r3, [r3, #4]
  403a4a:	68da      	ldr	r2, [r3, #12]
  403a4c:	4b06      	ldr	r3, [pc, #24]	; (403a68 <vTaskSwitchContext+0xc0>)
  403a4e:	601a      	str	r2, [r3, #0]
  403a50:	bd10      	pop	{r4, pc}
  403a52:	6860      	ldr	r0, [r4, #4]
  403a54:	4a07      	ldr	r2, [pc, #28]	; (403a74 <vTaskSwitchContext+0xcc>)
  403a56:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  403a5a:	6050      	str	r0, [r2, #4]
  403a5c:	e7ef      	b.n	403a3e <vTaskSwitchContext+0x96>
  403a5e:	bf00      	nop
  403a60:	20400cf8 	.word	0x20400cf8
  403a64:	20400d7c 	.word	0x20400d7c
  403a68:	20400c80 	.word	0x20400c80
  403a6c:	0040112d 	.word	0x0040112d
  403a70:	20400d04 	.word	0x20400d04
  403a74:	20400c8c 	.word	0x20400c8c

00403a78 <vTaskSuspend>:
	{
  403a78:	b538      	push	{r3, r4, r5, lr}
  403a7a:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
  403a7c:	4b2d      	ldr	r3, [pc, #180]	; (403b34 <vTaskSuspend+0xbc>)
  403a7e:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
  403a80:	b33c      	cbz	r4, 403ad2 <vTaskSuspend+0x5a>
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403a82:	1d25      	adds	r5, r4, #4
  403a84:	4628      	mov	r0, r5
  403a86:	4b2c      	ldr	r3, [pc, #176]	; (403b38 <vTaskSuspend+0xc0>)
  403a88:	4798      	blx	r3
  403a8a:	b968      	cbnz	r0, 403aa8 <vTaskSuspend+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403a8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  403a8e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403a92:	4b2a      	ldr	r3, [pc, #168]	; (403b3c <vTaskSuspend+0xc4>)
  403a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403a98:	b933      	cbnz	r3, 403aa8 <vTaskSuspend+0x30>
  403a9a:	4829      	ldr	r0, [pc, #164]	; (403b40 <vTaskSuspend+0xc8>)
  403a9c:	6803      	ldr	r3, [r0, #0]
  403a9e:	2201      	movs	r2, #1
  403aa0:	408a      	lsls	r2, r1
  403aa2:	ea23 0302 	bic.w	r3, r3, r2
  403aa6:	6003      	str	r3, [r0, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  403aa8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  403aaa:	b11b      	cbz	r3, 403ab4 <vTaskSuspend+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403aac:	f104 0018 	add.w	r0, r4, #24
  403ab0:	4b21      	ldr	r3, [pc, #132]	; (403b38 <vTaskSuspend+0xc0>)
  403ab2:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
  403ab4:	4629      	mov	r1, r5
  403ab6:	4823      	ldr	r0, [pc, #140]	; (403b44 <vTaskSuspend+0xcc>)
  403ab8:	4b23      	ldr	r3, [pc, #140]	; (403b48 <vTaskSuspend+0xd0>)
  403aba:	4798      	blx	r3
		taskEXIT_CRITICAL();
  403abc:	4b23      	ldr	r3, [pc, #140]	; (403b4c <vTaskSuspend+0xd4>)
  403abe:	4798      	blx	r3
		if( pxTCB == pxCurrentTCB )
  403ac0:	4b23      	ldr	r3, [pc, #140]	; (403b50 <vTaskSuspend+0xd8>)
  403ac2:	681b      	ldr	r3, [r3, #0]
  403ac4:	429c      	cmp	r4, r3
  403ac6:	d007      	beq.n	403ad8 <vTaskSuspend+0x60>
			if( xSchedulerRunning != pdFALSE )
  403ac8:	4b22      	ldr	r3, [pc, #136]	; (403b54 <vTaskSuspend+0xdc>)
  403aca:	681b      	ldr	r3, [r3, #0]
  403acc:	2b00      	cmp	r3, #0
  403ace:	d12a      	bne.n	403b26 <vTaskSuspend+0xae>
  403ad0:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
  403ad2:	4b1f      	ldr	r3, [pc, #124]	; (403b50 <vTaskSuspend+0xd8>)
  403ad4:	681c      	ldr	r4, [r3, #0]
  403ad6:	e7d4      	b.n	403a82 <vTaskSuspend+0xa>
			if( xSchedulerRunning != pdFALSE )
  403ad8:	4b1e      	ldr	r3, [pc, #120]	; (403b54 <vTaskSuspend+0xdc>)
  403ada:	681b      	ldr	r3, [r3, #0]
  403adc:	b1b3      	cbz	r3, 403b0c <vTaskSuspend+0x94>
				configASSERT( uxSchedulerSuspended == 0 );
  403ade:	4b1e      	ldr	r3, [pc, #120]	; (403b58 <vTaskSuspend+0xe0>)
  403ae0:	681b      	ldr	r3, [r3, #0]
  403ae2:	b153      	cbz	r3, 403afa <vTaskSuspend+0x82>
  403ae4:	f04f 0380 	mov.w	r3, #128	; 0x80
  403ae8:	b672      	cpsid	i
  403aea:	f383 8811 	msr	BASEPRI, r3
  403aee:	f3bf 8f6f 	isb	sy
  403af2:	f3bf 8f4f 	dsb	sy
  403af6:	b662      	cpsie	i
  403af8:	e7fe      	b.n	403af8 <vTaskSuspend+0x80>
				portYIELD_WITHIN_API();
  403afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403afe:	4b17      	ldr	r3, [pc, #92]	; (403b5c <vTaskSuspend+0xe4>)
  403b00:	601a      	str	r2, [r3, #0]
  403b02:	f3bf 8f4f 	dsb	sy
  403b06:	f3bf 8f6f 	isb	sy
  403b0a:	bd38      	pop	{r3, r4, r5, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
  403b0c:	4b14      	ldr	r3, [pc, #80]	; (403b60 <vTaskSuspend+0xe8>)
  403b0e:	681b      	ldr	r3, [r3, #0]
  403b10:	4a0c      	ldr	r2, [pc, #48]	; (403b44 <vTaskSuspend+0xcc>)
  403b12:	6812      	ldr	r2, [r2, #0]
  403b14:	429a      	cmp	r2, r3
  403b16:	d103      	bne.n	403b20 <vTaskSuspend+0xa8>
					pxCurrentTCB = NULL;
  403b18:	2200      	movs	r2, #0
  403b1a:	4b0d      	ldr	r3, [pc, #52]	; (403b50 <vTaskSuspend+0xd8>)
  403b1c:	601a      	str	r2, [r3, #0]
  403b1e:	bd38      	pop	{r3, r4, r5, pc}
					vTaskSwitchContext();
  403b20:	4b10      	ldr	r3, [pc, #64]	; (403b64 <vTaskSuspend+0xec>)
  403b22:	4798      	blx	r3
  403b24:	bd38      	pop	{r3, r4, r5, pc}
				taskENTER_CRITICAL();
  403b26:	4b03      	ldr	r3, [pc, #12]	; (403b34 <vTaskSuspend+0xbc>)
  403b28:	4798      	blx	r3
					prvResetNextTaskUnblockTime();
  403b2a:	4b0f      	ldr	r3, [pc, #60]	; (403b68 <vTaskSuspend+0xf0>)
  403b2c:	4798      	blx	r3
				taskEXIT_CRITICAL();
  403b2e:	4b07      	ldr	r3, [pc, #28]	; (403b4c <vTaskSuspend+0xd4>)
  403b30:	4798      	blx	r3
	}
  403b32:	e7cd      	b.n	403ad0 <vTaskSuspend+0x58>
  403b34:	004026f9 	.word	0x004026f9
  403b38:	00402615 	.word	0x00402615
  403b3c:	20400c8c 	.word	0x20400c8c
  403b40:	20400d04 	.word	0x20400d04
  403b44:	20400d50 	.word	0x20400d50
  403b48:	004025c9 	.word	0x004025c9
  403b4c:	00402745 	.word	0x00402745
  403b50:	20400c80 	.word	0x20400c80
  403b54:	20400d4c 	.word	0x20400d4c
  403b58:	20400cf8 	.word	0x20400cf8
  403b5c:	e000ed04 	.word	0xe000ed04
  403b60:	20400cf0 	.word	0x20400cf0
  403b64:	004039a9 	.word	0x004039a9
  403b68:	00403215 	.word	0x00403215

00403b6c <vTaskPlaceOnEventList>:
{
  403b6c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  403b6e:	b1e0      	cbz	r0, 403baa <vTaskPlaceOnEventList+0x3e>
  403b70:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  403b72:	4d17      	ldr	r5, [pc, #92]	; (403bd0 <vTaskPlaceOnEventList+0x64>)
  403b74:	6829      	ldr	r1, [r5, #0]
  403b76:	3118      	adds	r1, #24
  403b78:	4b16      	ldr	r3, [pc, #88]	; (403bd4 <vTaskPlaceOnEventList+0x68>)
  403b7a:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403b7c:	6828      	ldr	r0, [r5, #0]
  403b7e:	3004      	adds	r0, #4
  403b80:	4b15      	ldr	r3, [pc, #84]	; (403bd8 <vTaskPlaceOnEventList+0x6c>)
  403b82:	4798      	blx	r3
  403b84:	b940      	cbnz	r0, 403b98 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403b86:	682a      	ldr	r2, [r5, #0]
  403b88:	4914      	ldr	r1, [pc, #80]	; (403bdc <vTaskPlaceOnEventList+0x70>)
  403b8a:	680b      	ldr	r3, [r1, #0]
  403b8c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403b8e:	2201      	movs	r2, #1
  403b90:	4082      	lsls	r2, r0
  403b92:	ea23 0302 	bic.w	r3, r3, r2
  403b96:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  403b98:	f1b4 3fff 	cmp.w	r4, #4294967295
  403b9c:	d010      	beq.n	403bc0 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  403b9e:	4b10      	ldr	r3, [pc, #64]	; (403be0 <vTaskPlaceOnEventList+0x74>)
  403ba0:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  403ba2:	4420      	add	r0, r4
  403ba4:	4b0f      	ldr	r3, [pc, #60]	; (403be4 <vTaskPlaceOnEventList+0x78>)
  403ba6:	4798      	blx	r3
  403ba8:	bd38      	pop	{r3, r4, r5, pc}
  403baa:	f04f 0380 	mov.w	r3, #128	; 0x80
  403bae:	b672      	cpsid	i
  403bb0:	f383 8811 	msr	BASEPRI, r3
  403bb4:	f3bf 8f6f 	isb	sy
  403bb8:	f3bf 8f4f 	dsb	sy
  403bbc:	b662      	cpsie	i
  403bbe:	e7fe      	b.n	403bbe <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403bc0:	4b03      	ldr	r3, [pc, #12]	; (403bd0 <vTaskPlaceOnEventList+0x64>)
  403bc2:	6819      	ldr	r1, [r3, #0]
  403bc4:	3104      	adds	r1, #4
  403bc6:	4808      	ldr	r0, [pc, #32]	; (403be8 <vTaskPlaceOnEventList+0x7c>)
  403bc8:	4b08      	ldr	r3, [pc, #32]	; (403bec <vTaskPlaceOnEventList+0x80>)
  403bca:	4798      	blx	r3
  403bcc:	bd38      	pop	{r3, r4, r5, pc}
  403bce:	bf00      	nop
  403bd0:	20400c80 	.word	0x20400c80
  403bd4:	004025e1 	.word	0x004025e1
  403bd8:	00402615 	.word	0x00402615
  403bdc:	20400d04 	.word	0x20400d04
  403be0:	20400d78 	.word	0x20400d78
  403be4:	00403241 	.word	0x00403241
  403be8:	20400d50 	.word	0x20400d50
  403bec:	004025c9 	.word	0x004025c9

00403bf0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  403bf0:	b1e8      	cbz	r0, 403c2e <vTaskPlaceOnEventListRestricted+0x3e>
	{
  403bf2:	b570      	push	{r4, r5, r6, lr}
  403bf4:	4615      	mov	r5, r2
  403bf6:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  403bf8:	4e16      	ldr	r6, [pc, #88]	; (403c54 <vTaskPlaceOnEventListRestricted+0x64>)
  403bfa:	6831      	ldr	r1, [r6, #0]
  403bfc:	3118      	adds	r1, #24
  403bfe:	4b16      	ldr	r3, [pc, #88]	; (403c58 <vTaskPlaceOnEventListRestricted+0x68>)
  403c00:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403c02:	6830      	ldr	r0, [r6, #0]
  403c04:	3004      	adds	r0, #4
  403c06:	4b15      	ldr	r3, [pc, #84]	; (403c5c <vTaskPlaceOnEventListRestricted+0x6c>)
  403c08:	4798      	blx	r3
  403c0a:	b940      	cbnz	r0, 403c1e <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403c0c:	6832      	ldr	r2, [r6, #0]
  403c0e:	4914      	ldr	r1, [pc, #80]	; (403c60 <vTaskPlaceOnEventListRestricted+0x70>)
  403c10:	680b      	ldr	r3, [r1, #0]
  403c12:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403c14:	2201      	movs	r2, #1
  403c16:	4082      	lsls	r2, r0
  403c18:	ea23 0302 	bic.w	r3, r3, r2
  403c1c:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  403c1e:	2d01      	cmp	r5, #1
  403c20:	d010      	beq.n	403c44 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  403c22:	4b10      	ldr	r3, [pc, #64]	; (403c64 <vTaskPlaceOnEventListRestricted+0x74>)
  403c24:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  403c26:	4420      	add	r0, r4
  403c28:	4b0f      	ldr	r3, [pc, #60]	; (403c68 <vTaskPlaceOnEventListRestricted+0x78>)
  403c2a:	4798      	blx	r3
  403c2c:	bd70      	pop	{r4, r5, r6, pc}
  403c2e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c32:	b672      	cpsid	i
  403c34:	f383 8811 	msr	BASEPRI, r3
  403c38:	f3bf 8f6f 	isb	sy
  403c3c:	f3bf 8f4f 	dsb	sy
  403c40:	b662      	cpsie	i
  403c42:	e7fe      	b.n	403c42 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403c44:	4b03      	ldr	r3, [pc, #12]	; (403c54 <vTaskPlaceOnEventListRestricted+0x64>)
  403c46:	6819      	ldr	r1, [r3, #0]
  403c48:	3104      	adds	r1, #4
  403c4a:	4808      	ldr	r0, [pc, #32]	; (403c6c <vTaskPlaceOnEventListRestricted+0x7c>)
  403c4c:	4b02      	ldr	r3, [pc, #8]	; (403c58 <vTaskPlaceOnEventListRestricted+0x68>)
  403c4e:	4798      	blx	r3
  403c50:	bd70      	pop	{r4, r5, r6, pc}
  403c52:	bf00      	nop
  403c54:	20400c80 	.word	0x20400c80
  403c58:	004025c9 	.word	0x004025c9
  403c5c:	00402615 	.word	0x00402615
  403c60:	20400d04 	.word	0x20400d04
  403c64:	20400d78 	.word	0x20400d78
  403c68:	00403241 	.word	0x00403241
  403c6c:	20400d50 	.word	0x20400d50

00403c70 <xTaskRemoveFromEventList>:
{
  403c70:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  403c72:	68c3      	ldr	r3, [r0, #12]
  403c74:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  403c76:	b324      	cbz	r4, 403cc2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  403c78:	f104 0518 	add.w	r5, r4, #24
  403c7c:	4628      	mov	r0, r5
  403c7e:	4b1a      	ldr	r3, [pc, #104]	; (403ce8 <xTaskRemoveFromEventList+0x78>)
  403c80:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403c82:	4b1a      	ldr	r3, [pc, #104]	; (403cec <xTaskRemoveFromEventList+0x7c>)
  403c84:	681b      	ldr	r3, [r3, #0]
  403c86:	bb3b      	cbnz	r3, 403cd8 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  403c88:	1d25      	adds	r5, r4, #4
  403c8a:	4628      	mov	r0, r5
  403c8c:	4b16      	ldr	r3, [pc, #88]	; (403ce8 <xTaskRemoveFromEventList+0x78>)
  403c8e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  403c90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403c92:	4a17      	ldr	r2, [pc, #92]	; (403cf0 <xTaskRemoveFromEventList+0x80>)
  403c94:	6811      	ldr	r1, [r2, #0]
  403c96:	2301      	movs	r3, #1
  403c98:	4083      	lsls	r3, r0
  403c9a:	430b      	orrs	r3, r1
  403c9c:	6013      	str	r3, [r2, #0]
  403c9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403ca2:	4629      	mov	r1, r5
  403ca4:	4b13      	ldr	r3, [pc, #76]	; (403cf4 <xTaskRemoveFromEventList+0x84>)
  403ca6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403caa:	4b13      	ldr	r3, [pc, #76]	; (403cf8 <xTaskRemoveFromEventList+0x88>)
  403cac:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  403cae:	4b13      	ldr	r3, [pc, #76]	; (403cfc <xTaskRemoveFromEventList+0x8c>)
  403cb0:	681b      	ldr	r3, [r3, #0]
  403cb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403cb6:	429a      	cmp	r2, r3
  403cb8:	d913      	bls.n	403ce2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  403cba:	2001      	movs	r0, #1
  403cbc:	4b10      	ldr	r3, [pc, #64]	; (403d00 <xTaskRemoveFromEventList+0x90>)
  403cbe:	6018      	str	r0, [r3, #0]
  403cc0:	bd38      	pop	{r3, r4, r5, pc}
  403cc2:	f04f 0380 	mov.w	r3, #128	; 0x80
  403cc6:	b672      	cpsid	i
  403cc8:	f383 8811 	msr	BASEPRI, r3
  403ccc:	f3bf 8f6f 	isb	sy
  403cd0:	f3bf 8f4f 	dsb	sy
  403cd4:	b662      	cpsie	i
  403cd6:	e7fe      	b.n	403cd6 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  403cd8:	4629      	mov	r1, r5
  403cda:	480a      	ldr	r0, [pc, #40]	; (403d04 <xTaskRemoveFromEventList+0x94>)
  403cdc:	4b06      	ldr	r3, [pc, #24]	; (403cf8 <xTaskRemoveFromEventList+0x88>)
  403cde:	4798      	blx	r3
  403ce0:	e7e5      	b.n	403cae <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  403ce2:	2000      	movs	r0, #0
}
  403ce4:	bd38      	pop	{r3, r4, r5, pc}
  403ce6:	bf00      	nop
  403ce8:	00402615 	.word	0x00402615
  403cec:	20400cf8 	.word	0x20400cf8
  403cf0:	20400d04 	.word	0x20400d04
  403cf4:	20400c8c 	.word	0x20400c8c
  403cf8:	004025c9 	.word	0x004025c9
  403cfc:	20400c80 	.word	0x20400c80
  403d00:	20400d7c 	.word	0x20400d7c
  403d04:	20400d38 	.word	0x20400d38

00403d08 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  403d08:	b130      	cbz	r0, 403d18 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  403d0a:	4a09      	ldr	r2, [pc, #36]	; (403d30 <vTaskSetTimeOutState+0x28>)
  403d0c:	6812      	ldr	r2, [r2, #0]
  403d0e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  403d10:	4a08      	ldr	r2, [pc, #32]	; (403d34 <vTaskSetTimeOutState+0x2c>)
  403d12:	6812      	ldr	r2, [r2, #0]
  403d14:	6042      	str	r2, [r0, #4]
  403d16:	4770      	bx	lr
  403d18:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d1c:	b672      	cpsid	i
  403d1e:	f383 8811 	msr	BASEPRI, r3
  403d22:	f3bf 8f6f 	isb	sy
  403d26:	f3bf 8f4f 	dsb	sy
  403d2a:	b662      	cpsie	i
  403d2c:	e7fe      	b.n	403d2c <vTaskSetTimeOutState+0x24>
  403d2e:	bf00      	nop
  403d30:	20400d34 	.word	0x20400d34
  403d34:	20400d78 	.word	0x20400d78

00403d38 <xTaskCheckForTimeOut>:
{
  403d38:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  403d3a:	b1c0      	cbz	r0, 403d6e <xTaskCheckForTimeOut+0x36>
  403d3c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  403d3e:	b309      	cbz	r1, 403d84 <xTaskCheckForTimeOut+0x4c>
  403d40:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  403d42:	4b1d      	ldr	r3, [pc, #116]	; (403db8 <xTaskCheckForTimeOut+0x80>)
  403d44:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  403d46:	4b1d      	ldr	r3, [pc, #116]	; (403dbc <xTaskCheckForTimeOut+0x84>)
  403d48:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  403d4a:	682b      	ldr	r3, [r5, #0]
  403d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
  403d50:	d02e      	beq.n	403db0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  403d52:	491b      	ldr	r1, [pc, #108]	; (403dc0 <xTaskCheckForTimeOut+0x88>)
  403d54:	6809      	ldr	r1, [r1, #0]
  403d56:	6820      	ldr	r0, [r4, #0]
  403d58:	4288      	cmp	r0, r1
  403d5a:	d002      	beq.n	403d62 <xTaskCheckForTimeOut+0x2a>
  403d5c:	6861      	ldr	r1, [r4, #4]
  403d5e:	428a      	cmp	r2, r1
  403d60:	d228      	bcs.n	403db4 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  403d62:	6861      	ldr	r1, [r4, #4]
  403d64:	1a50      	subs	r0, r2, r1
  403d66:	4283      	cmp	r3, r0
  403d68:	d817      	bhi.n	403d9a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  403d6a:	2401      	movs	r4, #1
  403d6c:	e01c      	b.n	403da8 <xTaskCheckForTimeOut+0x70>
  403d6e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d72:	b672      	cpsid	i
  403d74:	f383 8811 	msr	BASEPRI, r3
  403d78:	f3bf 8f6f 	isb	sy
  403d7c:	f3bf 8f4f 	dsb	sy
  403d80:	b662      	cpsie	i
  403d82:	e7fe      	b.n	403d82 <xTaskCheckForTimeOut+0x4a>
  403d84:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d88:	b672      	cpsid	i
  403d8a:	f383 8811 	msr	BASEPRI, r3
  403d8e:	f3bf 8f6f 	isb	sy
  403d92:	f3bf 8f4f 	dsb	sy
  403d96:	b662      	cpsie	i
  403d98:	e7fe      	b.n	403d98 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  403d9a:	1a9b      	subs	r3, r3, r2
  403d9c:	440b      	add	r3, r1
  403d9e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  403da0:	4620      	mov	r0, r4
  403da2:	4b08      	ldr	r3, [pc, #32]	; (403dc4 <xTaskCheckForTimeOut+0x8c>)
  403da4:	4798      	blx	r3
			xReturn = pdFALSE;
  403da6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403da8:	4b07      	ldr	r3, [pc, #28]	; (403dc8 <xTaskCheckForTimeOut+0x90>)
  403daa:	4798      	blx	r3
}
  403dac:	4620      	mov	r0, r4
  403dae:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  403db0:	2400      	movs	r4, #0
  403db2:	e7f9      	b.n	403da8 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  403db4:	2401      	movs	r4, #1
  403db6:	e7f7      	b.n	403da8 <xTaskCheckForTimeOut+0x70>
  403db8:	004026f9 	.word	0x004026f9
  403dbc:	20400d78 	.word	0x20400d78
  403dc0:	20400d34 	.word	0x20400d34
  403dc4:	00403d09 	.word	0x00403d09
  403dc8:	00402745 	.word	0x00402745

00403dcc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  403dcc:	2201      	movs	r2, #1
  403dce:	4b01      	ldr	r3, [pc, #4]	; (403dd4 <vTaskMissedYield+0x8>)
  403dd0:	601a      	str	r2, [r3, #0]
  403dd2:	4770      	bx	lr
  403dd4:	20400d7c 	.word	0x20400d7c

00403dd8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  403dd8:	4b05      	ldr	r3, [pc, #20]	; (403df0 <xTaskGetSchedulerState+0x18>)
  403dda:	681b      	ldr	r3, [r3, #0]
  403ddc:	b133      	cbz	r3, 403dec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403dde:	4b05      	ldr	r3, [pc, #20]	; (403df4 <xTaskGetSchedulerState+0x1c>)
  403de0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  403de2:	2b00      	cmp	r3, #0
  403de4:	bf0c      	ite	eq
  403de6:	2002      	moveq	r0, #2
  403de8:	2000      	movne	r0, #0
  403dea:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  403dec:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  403dee:	4770      	bx	lr
  403df0:	20400d4c 	.word	0x20400d4c
  403df4:	20400cf8 	.word	0x20400cf8

00403df8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  403df8:	2800      	cmp	r0, #0
  403dfa:	d044      	beq.n	403e86 <vTaskPriorityInherit+0x8e>
	{
  403dfc:	b538      	push	{r3, r4, r5, lr}
  403dfe:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  403e00:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  403e02:	4921      	ldr	r1, [pc, #132]	; (403e88 <vTaskPriorityInherit+0x90>)
  403e04:	6809      	ldr	r1, [r1, #0]
  403e06:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403e08:	428a      	cmp	r2, r1
  403e0a:	d214      	bcs.n	403e36 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  403e0c:	6981      	ldr	r1, [r0, #24]
  403e0e:	2900      	cmp	r1, #0
  403e10:	db05      	blt.n	403e1e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403e12:	491d      	ldr	r1, [pc, #116]	; (403e88 <vTaskPriorityInherit+0x90>)
  403e14:	6809      	ldr	r1, [r1, #0]
  403e16:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  403e18:	f1c1 0105 	rsb	r1, r1, #5
  403e1c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  403e1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403e22:	491a      	ldr	r1, [pc, #104]	; (403e8c <vTaskPriorityInherit+0x94>)
  403e24:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  403e28:	6961      	ldr	r1, [r4, #20]
  403e2a:	4291      	cmp	r1, r2
  403e2c:	d004      	beq.n	403e38 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403e2e:	4a16      	ldr	r2, [pc, #88]	; (403e88 <vTaskPriorityInherit+0x90>)
  403e30:	6812      	ldr	r2, [r2, #0]
  403e32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  403e34:	62e2      	str	r2, [r4, #44]	; 0x2c
  403e36:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403e38:	1d25      	adds	r5, r4, #4
  403e3a:	4628      	mov	r0, r5
  403e3c:	4b14      	ldr	r3, [pc, #80]	; (403e90 <vTaskPriorityInherit+0x98>)
  403e3e:	4798      	blx	r3
  403e40:	b970      	cbnz	r0, 403e60 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403e42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403e44:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403e48:	4a10      	ldr	r2, [pc, #64]	; (403e8c <vTaskPriorityInherit+0x94>)
  403e4a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403e4e:	b93a      	cbnz	r2, 403e60 <vTaskPriorityInherit+0x68>
  403e50:	4810      	ldr	r0, [pc, #64]	; (403e94 <vTaskPriorityInherit+0x9c>)
  403e52:	6802      	ldr	r2, [r0, #0]
  403e54:	2101      	movs	r1, #1
  403e56:	fa01 f303 	lsl.w	r3, r1, r3
  403e5a:	ea22 0303 	bic.w	r3, r2, r3
  403e5e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  403e60:	4b09      	ldr	r3, [pc, #36]	; (403e88 <vTaskPriorityInherit+0x90>)
  403e62:	681b      	ldr	r3, [r3, #0]
  403e64:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  403e66:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  403e68:	4a0a      	ldr	r2, [pc, #40]	; (403e94 <vTaskPriorityInherit+0x9c>)
  403e6a:	6811      	ldr	r1, [r2, #0]
  403e6c:	2301      	movs	r3, #1
  403e6e:	4083      	lsls	r3, r0
  403e70:	430b      	orrs	r3, r1
  403e72:	6013      	str	r3, [r2, #0]
  403e74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403e78:	4629      	mov	r1, r5
  403e7a:	4b04      	ldr	r3, [pc, #16]	; (403e8c <vTaskPriorityInherit+0x94>)
  403e7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403e80:	4b05      	ldr	r3, [pc, #20]	; (403e98 <vTaskPriorityInherit+0xa0>)
  403e82:	4798      	blx	r3
  403e84:	bd38      	pop	{r3, r4, r5, pc}
  403e86:	4770      	bx	lr
  403e88:	20400c80 	.word	0x20400c80
  403e8c:	20400c8c 	.word	0x20400c8c
  403e90:	00402615 	.word	0x00402615
  403e94:	20400d04 	.word	0x20400d04
  403e98:	004025c9 	.word	0x004025c9

00403e9c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403e9c:	2800      	cmp	r0, #0
  403e9e:	d04d      	beq.n	403f3c <xTaskPriorityDisinherit+0xa0>
	{
  403ea0:	b538      	push	{r3, r4, r5, lr}
  403ea2:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  403ea4:	4a27      	ldr	r2, [pc, #156]	; (403f44 <xTaskPriorityDisinherit+0xa8>)
  403ea6:	6812      	ldr	r2, [r2, #0]
  403ea8:	4290      	cmp	r0, r2
  403eaa:	d00a      	beq.n	403ec2 <xTaskPriorityDisinherit+0x26>
  403eac:	f04f 0380 	mov.w	r3, #128	; 0x80
  403eb0:	b672      	cpsid	i
  403eb2:	f383 8811 	msr	BASEPRI, r3
  403eb6:	f3bf 8f6f 	isb	sy
  403eba:	f3bf 8f4f 	dsb	sy
  403ebe:	b662      	cpsie	i
  403ec0:	e7fe      	b.n	403ec0 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  403ec2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  403ec4:	b952      	cbnz	r2, 403edc <xTaskPriorityDisinherit+0x40>
  403ec6:	f04f 0380 	mov.w	r3, #128	; 0x80
  403eca:	b672      	cpsid	i
  403ecc:	f383 8811 	msr	BASEPRI, r3
  403ed0:	f3bf 8f6f 	isb	sy
  403ed4:	f3bf 8f4f 	dsb	sy
  403ed8:	b662      	cpsie	i
  403eda:	e7fe      	b.n	403eda <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  403edc:	3a01      	subs	r2, #1
  403ede:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  403ee0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  403ee2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  403ee4:	4288      	cmp	r0, r1
  403ee6:	d02b      	beq.n	403f40 <xTaskPriorityDisinherit+0xa4>
  403ee8:	bb52      	cbnz	r2, 403f40 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403eea:	1d25      	adds	r5, r4, #4
  403eec:	4628      	mov	r0, r5
  403eee:	4b16      	ldr	r3, [pc, #88]	; (403f48 <xTaskPriorityDisinherit+0xac>)
  403ef0:	4798      	blx	r3
  403ef2:	b968      	cbnz	r0, 403f10 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403ef4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  403ef6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403efa:	4b14      	ldr	r3, [pc, #80]	; (403f4c <xTaskPriorityDisinherit+0xb0>)
  403efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403f00:	b933      	cbnz	r3, 403f10 <xTaskPriorityDisinherit+0x74>
  403f02:	4813      	ldr	r0, [pc, #76]	; (403f50 <xTaskPriorityDisinherit+0xb4>)
  403f04:	6803      	ldr	r3, [r0, #0]
  403f06:	2201      	movs	r2, #1
  403f08:	408a      	lsls	r2, r1
  403f0a:	ea23 0302 	bic.w	r3, r3, r2
  403f0e:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  403f10:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  403f12:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403f14:	f1c0 0305 	rsb	r3, r0, #5
  403f18:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  403f1a:	4a0d      	ldr	r2, [pc, #52]	; (403f50 <xTaskPriorityDisinherit+0xb4>)
  403f1c:	6811      	ldr	r1, [r2, #0]
  403f1e:	2401      	movs	r4, #1
  403f20:	fa04 f300 	lsl.w	r3, r4, r0
  403f24:	430b      	orrs	r3, r1
  403f26:	6013      	str	r3, [r2, #0]
  403f28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403f2c:	4629      	mov	r1, r5
  403f2e:	4b07      	ldr	r3, [pc, #28]	; (403f4c <xTaskPriorityDisinherit+0xb0>)
  403f30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403f34:	4b07      	ldr	r3, [pc, #28]	; (403f54 <xTaskPriorityDisinherit+0xb8>)
  403f36:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  403f38:	4620      	mov	r0, r4
  403f3a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  403f3c:	2000      	movs	r0, #0
  403f3e:	4770      	bx	lr
  403f40:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  403f42:	bd38      	pop	{r3, r4, r5, pc}
  403f44:	20400c80 	.word	0x20400c80
  403f48:	00402615 	.word	0x00402615
  403f4c:	20400c8c 	.word	0x20400c8c
  403f50:	20400d04 	.word	0x20400d04
  403f54:	004025c9 	.word	0x004025c9

00403f58 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  403f58:	4b05      	ldr	r3, [pc, #20]	; (403f70 <pvTaskIncrementMutexHeldCount+0x18>)
  403f5a:	681b      	ldr	r3, [r3, #0]
  403f5c:	b123      	cbz	r3, 403f68 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  403f5e:	4b04      	ldr	r3, [pc, #16]	; (403f70 <pvTaskIncrementMutexHeldCount+0x18>)
  403f60:	681a      	ldr	r2, [r3, #0]
  403f62:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403f64:	3301      	adds	r3, #1
  403f66:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  403f68:	4b01      	ldr	r3, [pc, #4]	; (403f70 <pvTaskIncrementMutexHeldCount+0x18>)
  403f6a:	6818      	ldr	r0, [r3, #0]
	}
  403f6c:	4770      	bx	lr
  403f6e:	bf00      	nop
  403f70:	20400c80 	.word	0x20400c80

00403f74 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  403f74:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  403f76:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403f78:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  403f7a:	4291      	cmp	r1, r2
  403f7c:	d80c      	bhi.n	403f98 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403f7e:	1ad2      	subs	r2, r2, r3
  403f80:	6983      	ldr	r3, [r0, #24]
  403f82:	429a      	cmp	r2, r3
  403f84:	d301      	bcc.n	403f8a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  403f86:	2001      	movs	r0, #1
  403f88:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  403f8a:	1d01      	adds	r1, r0, #4
  403f8c:	4b09      	ldr	r3, [pc, #36]	; (403fb4 <prvInsertTimerInActiveList+0x40>)
  403f8e:	6818      	ldr	r0, [r3, #0]
  403f90:	4b09      	ldr	r3, [pc, #36]	; (403fb8 <prvInsertTimerInActiveList+0x44>)
  403f92:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403f94:	2000      	movs	r0, #0
  403f96:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  403f98:	429a      	cmp	r2, r3
  403f9a:	d203      	bcs.n	403fa4 <prvInsertTimerInActiveList+0x30>
  403f9c:	4299      	cmp	r1, r3
  403f9e:	d301      	bcc.n	403fa4 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  403fa0:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  403fa2:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403fa4:	1d01      	adds	r1, r0, #4
  403fa6:	4b05      	ldr	r3, [pc, #20]	; (403fbc <prvInsertTimerInActiveList+0x48>)
  403fa8:	6818      	ldr	r0, [r3, #0]
  403faa:	4b03      	ldr	r3, [pc, #12]	; (403fb8 <prvInsertTimerInActiveList+0x44>)
  403fac:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403fae:	2000      	movs	r0, #0
  403fb0:	bd08      	pop	{r3, pc}
  403fb2:	bf00      	nop
  403fb4:	20400d84 	.word	0x20400d84
  403fb8:	004025e1 	.word	0x004025e1
  403fbc:	20400d80 	.word	0x20400d80

00403fc0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  403fc0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  403fc2:	4b15      	ldr	r3, [pc, #84]	; (404018 <prvCheckForValidListAndQueue+0x58>)
  403fc4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  403fc6:	4b15      	ldr	r3, [pc, #84]	; (40401c <prvCheckForValidListAndQueue+0x5c>)
  403fc8:	681b      	ldr	r3, [r3, #0]
  403fca:	b113      	cbz	r3, 403fd2 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  403fcc:	4b14      	ldr	r3, [pc, #80]	; (404020 <prvCheckForValidListAndQueue+0x60>)
  403fce:	4798      	blx	r3
  403fd0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  403fd2:	4d14      	ldr	r5, [pc, #80]	; (404024 <prvCheckForValidListAndQueue+0x64>)
  403fd4:	4628      	mov	r0, r5
  403fd6:	4e14      	ldr	r6, [pc, #80]	; (404028 <prvCheckForValidListAndQueue+0x68>)
  403fd8:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  403fda:	4c14      	ldr	r4, [pc, #80]	; (40402c <prvCheckForValidListAndQueue+0x6c>)
  403fdc:	4620      	mov	r0, r4
  403fde:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  403fe0:	4b13      	ldr	r3, [pc, #76]	; (404030 <prvCheckForValidListAndQueue+0x70>)
  403fe2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  403fe4:	4b13      	ldr	r3, [pc, #76]	; (404034 <prvCheckForValidListAndQueue+0x74>)
  403fe6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  403fe8:	2200      	movs	r2, #0
  403fea:	2110      	movs	r1, #16
  403fec:	2005      	movs	r0, #5
  403fee:	4b12      	ldr	r3, [pc, #72]	; (404038 <prvCheckForValidListAndQueue+0x78>)
  403ff0:	4798      	blx	r3
  403ff2:	4b0a      	ldr	r3, [pc, #40]	; (40401c <prvCheckForValidListAndQueue+0x5c>)
  403ff4:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  403ff6:	b118      	cbz	r0, 404000 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  403ff8:	4910      	ldr	r1, [pc, #64]	; (40403c <prvCheckForValidListAndQueue+0x7c>)
  403ffa:	4b11      	ldr	r3, [pc, #68]	; (404040 <prvCheckForValidListAndQueue+0x80>)
  403ffc:	4798      	blx	r3
  403ffe:	e7e5      	b.n	403fcc <prvCheckForValidListAndQueue+0xc>
  404000:	f04f 0380 	mov.w	r3, #128	; 0x80
  404004:	b672      	cpsid	i
  404006:	f383 8811 	msr	BASEPRI, r3
  40400a:	f3bf 8f6f 	isb	sy
  40400e:	f3bf 8f4f 	dsb	sy
  404012:	b662      	cpsie	i
  404014:	e7fe      	b.n	404014 <prvCheckForValidListAndQueue+0x54>
  404016:	bf00      	nop
  404018:	004026f9 	.word	0x004026f9
  40401c:	20400db4 	.word	0x20400db4
  404020:	00402745 	.word	0x00402745
  404024:	20400d88 	.word	0x20400d88
  404028:	004025ad 	.word	0x004025ad
  40402c:	20400d9c 	.word	0x20400d9c
  404030:	20400d80 	.word	0x20400d80
  404034:	20400d84 	.word	0x20400d84
  404038:	00402c19 	.word	0x00402c19
  40403c:	00407788 	.word	0x00407788
  404040:	00403149 	.word	0x00403149

00404044 <xTimerCreateTimerTask>:
{
  404044:	b510      	push	{r4, lr}
  404046:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  404048:	4b0f      	ldr	r3, [pc, #60]	; (404088 <xTimerCreateTimerTask+0x44>)
  40404a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  40404c:	4b0f      	ldr	r3, [pc, #60]	; (40408c <xTimerCreateTimerTask+0x48>)
  40404e:	681b      	ldr	r3, [r3, #0]
  404050:	b173      	cbz	r3, 404070 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  404052:	2300      	movs	r3, #0
  404054:	9303      	str	r3, [sp, #12]
  404056:	9302      	str	r3, [sp, #8]
  404058:	9301      	str	r3, [sp, #4]
  40405a:	2204      	movs	r2, #4
  40405c:	9200      	str	r2, [sp, #0]
  40405e:	f44f 7282 	mov.w	r2, #260	; 0x104
  404062:	490b      	ldr	r1, [pc, #44]	; (404090 <xTimerCreateTimerTask+0x4c>)
  404064:	480b      	ldr	r0, [pc, #44]	; (404094 <xTimerCreateTimerTask+0x50>)
  404066:	4c0c      	ldr	r4, [pc, #48]	; (404098 <xTimerCreateTimerTask+0x54>)
  404068:	47a0      	blx	r4
	configASSERT( xReturn );
  40406a:	b108      	cbz	r0, 404070 <xTimerCreateTimerTask+0x2c>
}
  40406c:	b004      	add	sp, #16
  40406e:	bd10      	pop	{r4, pc}
  404070:	f04f 0380 	mov.w	r3, #128	; 0x80
  404074:	b672      	cpsid	i
  404076:	f383 8811 	msr	BASEPRI, r3
  40407a:	f3bf 8f6f 	isb	sy
  40407e:	f3bf 8f4f 	dsb	sy
  404082:	b662      	cpsie	i
  404084:	e7fe      	b.n	404084 <xTimerCreateTimerTask+0x40>
  404086:	bf00      	nop
  404088:	00403fc1 	.word	0x00403fc1
  40408c:	20400db4 	.word	0x20400db4
  404090:	00407790 	.word	0x00407790
  404094:	004041c5 	.word	0x004041c5
  404098:	00403299 	.word	0x00403299

0040409c <xTimerGenericCommand>:
	configASSERT( xTimer );
  40409c:	b1d8      	cbz	r0, 4040d6 <xTimerGenericCommand+0x3a>
{
  40409e:	b530      	push	{r4, r5, lr}
  4040a0:	b085      	sub	sp, #20
  4040a2:	4615      	mov	r5, r2
  4040a4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4040a6:	4a15      	ldr	r2, [pc, #84]	; (4040fc <xTimerGenericCommand+0x60>)
  4040a8:	6810      	ldr	r0, [r2, #0]
  4040aa:	b320      	cbz	r0, 4040f6 <xTimerGenericCommand+0x5a>
  4040ac:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4040ae:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4040b0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4040b2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4040b4:	2905      	cmp	r1, #5
  4040b6:	dc19      	bgt.n	4040ec <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4040b8:	4b11      	ldr	r3, [pc, #68]	; (404100 <xTimerGenericCommand+0x64>)
  4040ba:	4798      	blx	r3
  4040bc:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4040be:	f04f 0300 	mov.w	r3, #0
  4040c2:	bf0c      	ite	eq
  4040c4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4040c6:	461a      	movne	r2, r3
  4040c8:	4669      	mov	r1, sp
  4040ca:	480c      	ldr	r0, [pc, #48]	; (4040fc <xTimerGenericCommand+0x60>)
  4040cc:	6800      	ldr	r0, [r0, #0]
  4040ce:	4c0d      	ldr	r4, [pc, #52]	; (404104 <xTimerGenericCommand+0x68>)
  4040d0:	47a0      	blx	r4
}
  4040d2:	b005      	add	sp, #20
  4040d4:	bd30      	pop	{r4, r5, pc}
  4040d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4040da:	b672      	cpsid	i
  4040dc:	f383 8811 	msr	BASEPRI, r3
  4040e0:	f3bf 8f6f 	isb	sy
  4040e4:	f3bf 8f4f 	dsb	sy
  4040e8:	b662      	cpsie	i
  4040ea:	e7fe      	b.n	4040ea <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4040ec:	2300      	movs	r3, #0
  4040ee:	4669      	mov	r1, sp
  4040f0:	4c05      	ldr	r4, [pc, #20]	; (404108 <xTimerGenericCommand+0x6c>)
  4040f2:	47a0      	blx	r4
  4040f4:	e7ed      	b.n	4040d2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4040f6:	2000      	movs	r0, #0
	return xReturn;
  4040f8:	e7eb      	b.n	4040d2 <xTimerGenericCommand+0x36>
  4040fa:	bf00      	nop
  4040fc:	20400db4 	.word	0x20400db4
  404100:	00403dd9 	.word	0x00403dd9
  404104:	00402c95 	.word	0x00402c95
  404108:	00402e79 	.word	0x00402e79

0040410c <prvSampleTimeNow>:
{
  40410c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404110:	b082      	sub	sp, #8
  404112:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  404114:	4b24      	ldr	r3, [pc, #144]	; (4041a8 <prvSampleTimeNow+0x9c>)
  404116:	4798      	blx	r3
  404118:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40411a:	4b24      	ldr	r3, [pc, #144]	; (4041ac <prvSampleTimeNow+0xa0>)
  40411c:	681b      	ldr	r3, [r3, #0]
  40411e:	4298      	cmp	r0, r3
  404120:	d31b      	bcc.n	40415a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  404122:	2300      	movs	r3, #0
  404124:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  404128:	4b20      	ldr	r3, [pc, #128]	; (4041ac <prvSampleTimeNow+0xa0>)
  40412a:	601f      	str	r7, [r3, #0]
}
  40412c:	4638      	mov	r0, r7
  40412e:	b002      	add	sp, #8
  404130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  404134:	2100      	movs	r1, #0
  404136:	9100      	str	r1, [sp, #0]
  404138:	460b      	mov	r3, r1
  40413a:	4652      	mov	r2, sl
  40413c:	4620      	mov	r0, r4
  40413e:	4c1c      	ldr	r4, [pc, #112]	; (4041b0 <prvSampleTimeNow+0xa4>)
  404140:	47a0      	blx	r4
				configASSERT( xResult );
  404142:	b960      	cbnz	r0, 40415e <prvSampleTimeNow+0x52>
  404144:	f04f 0380 	mov.w	r3, #128	; 0x80
  404148:	b672      	cpsid	i
  40414a:	f383 8811 	msr	BASEPRI, r3
  40414e:	f3bf 8f6f 	isb	sy
  404152:	f3bf 8f4f 	dsb	sy
  404156:	b662      	cpsie	i
  404158:	e7fe      	b.n	404158 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40415a:	4d16      	ldr	r5, [pc, #88]	; (4041b4 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40415c:	4e16      	ldr	r6, [pc, #88]	; (4041b8 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40415e:	682b      	ldr	r3, [r5, #0]
  404160:	681a      	ldr	r2, [r3, #0]
  404162:	b1c2      	cbz	r2, 404196 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  404164:	68db      	ldr	r3, [r3, #12]
  404166:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40416a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40416c:	f104 0904 	add.w	r9, r4, #4
  404170:	4648      	mov	r0, r9
  404172:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  404174:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404176:	4620      	mov	r0, r4
  404178:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40417a:	69e3      	ldr	r3, [r4, #28]
  40417c:	2b01      	cmp	r3, #1
  40417e:	d1ee      	bne.n	40415e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  404180:	69a3      	ldr	r3, [r4, #24]
  404182:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  404184:	459a      	cmp	sl, r3
  404186:	d2d5      	bcs.n	404134 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  404188:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40418a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40418c:	4649      	mov	r1, r9
  40418e:	6828      	ldr	r0, [r5, #0]
  404190:	4b0a      	ldr	r3, [pc, #40]	; (4041bc <prvSampleTimeNow+0xb0>)
  404192:	4798      	blx	r3
  404194:	e7e3      	b.n	40415e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  404196:	4a0a      	ldr	r2, [pc, #40]	; (4041c0 <prvSampleTimeNow+0xb4>)
  404198:	6810      	ldr	r0, [r2, #0]
  40419a:	4906      	ldr	r1, [pc, #24]	; (4041b4 <prvSampleTimeNow+0xa8>)
  40419c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40419e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  4041a0:	2301      	movs	r3, #1
  4041a2:	f8c8 3000 	str.w	r3, [r8]
  4041a6:	e7bf      	b.n	404128 <prvSampleTimeNow+0x1c>
  4041a8:	00403609 	.word	0x00403609
  4041ac:	20400db0 	.word	0x20400db0
  4041b0:	0040409d 	.word	0x0040409d
  4041b4:	20400d80 	.word	0x20400d80
  4041b8:	00402615 	.word	0x00402615
  4041bc:	004025e1 	.word	0x004025e1
  4041c0:	20400d84 	.word	0x20400d84

004041c4 <prvTimerTask>:
{
  4041c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4041c8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4041ca:	4e75      	ldr	r6, [pc, #468]	; (4043a0 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4041cc:	4f75      	ldr	r7, [pc, #468]	; (4043a4 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4041ce:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4043cc <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4041d2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4043d0 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4041d6:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4041d8:	681a      	ldr	r2, [r3, #0]
  4041da:	2a00      	cmp	r2, #0
  4041dc:	f000 80ce 	beq.w	40437c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4041e0:	68db      	ldr	r3, [r3, #12]
  4041e2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4041e4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4041e6:	a804      	add	r0, sp, #16
  4041e8:	4b6f      	ldr	r3, [pc, #444]	; (4043a8 <prvTimerTask+0x1e4>)
  4041ea:	4798      	blx	r3
  4041ec:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4041ee:	9b04      	ldr	r3, [sp, #16]
  4041f0:	2b00      	cmp	r3, #0
  4041f2:	d144      	bne.n	40427e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4041f4:	42a0      	cmp	r0, r4
  4041f6:	d212      	bcs.n	40421e <prvTimerTask+0x5a>
  4041f8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4041fa:	1b61      	subs	r1, r4, r5
  4041fc:	4b6b      	ldr	r3, [pc, #428]	; (4043ac <prvTimerTask+0x1e8>)
  4041fe:	6818      	ldr	r0, [r3, #0]
  404200:	4b6b      	ldr	r3, [pc, #428]	; (4043b0 <prvTimerTask+0x1ec>)
  404202:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  404204:	4b6b      	ldr	r3, [pc, #428]	; (4043b4 <prvTimerTask+0x1f0>)
  404206:	4798      	blx	r3
  404208:	2800      	cmp	r0, #0
  40420a:	d13a      	bne.n	404282 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  40420c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  404210:	f8c9 3000 	str.w	r3, [r9]
  404214:	f3bf 8f4f 	dsb	sy
  404218:	f3bf 8f6f 	isb	sy
  40421c:	e031      	b.n	404282 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  40421e:	4b65      	ldr	r3, [pc, #404]	; (4043b4 <prvTimerTask+0x1f0>)
  404220:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  404222:	6833      	ldr	r3, [r6, #0]
  404224:	68db      	ldr	r3, [r3, #12]
  404226:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40422a:	f10a 0004 	add.w	r0, sl, #4
  40422e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  404230:	f8da 301c 	ldr.w	r3, [sl, #28]
  404234:	2b01      	cmp	r3, #1
  404236:	d004      	beq.n	404242 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  404238:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40423c:	4650      	mov	r0, sl
  40423e:	4798      	blx	r3
  404240:	e01f      	b.n	404282 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  404242:	f8da 1018 	ldr.w	r1, [sl, #24]
  404246:	4623      	mov	r3, r4
  404248:	462a      	mov	r2, r5
  40424a:	4421      	add	r1, r4
  40424c:	4650      	mov	r0, sl
  40424e:	4d5a      	ldr	r5, [pc, #360]	; (4043b8 <prvTimerTask+0x1f4>)
  404250:	47a8      	blx	r5
  404252:	2801      	cmp	r0, #1
  404254:	d1f0      	bne.n	404238 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  404256:	2100      	movs	r1, #0
  404258:	9100      	str	r1, [sp, #0]
  40425a:	460b      	mov	r3, r1
  40425c:	4622      	mov	r2, r4
  40425e:	4650      	mov	r0, sl
  404260:	4c56      	ldr	r4, [pc, #344]	; (4043bc <prvTimerTask+0x1f8>)
  404262:	47a0      	blx	r4
			configASSERT( xResult );
  404264:	2800      	cmp	r0, #0
  404266:	d1e7      	bne.n	404238 <prvTimerTask+0x74>
  404268:	f04f 0380 	mov.w	r3, #128	; 0x80
  40426c:	b672      	cpsid	i
  40426e:	f383 8811 	msr	BASEPRI, r3
  404272:	f3bf 8f6f 	isb	sy
  404276:	f3bf 8f4f 	dsb	sy
  40427a:	b662      	cpsie	i
  40427c:	e7fe      	b.n	40427c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  40427e:	4b4d      	ldr	r3, [pc, #308]	; (4043b4 <prvTimerTask+0x1f0>)
  404280:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  404282:	4d4a      	ldr	r5, [pc, #296]	; (4043ac <prvTimerTask+0x1e8>)
  404284:	4c4e      	ldr	r4, [pc, #312]	; (4043c0 <prvTimerTask+0x1fc>)
  404286:	e006      	b.n	404296 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  404288:	9907      	ldr	r1, [sp, #28]
  40428a:	9806      	ldr	r0, [sp, #24]
  40428c:	9b05      	ldr	r3, [sp, #20]
  40428e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  404290:	9b04      	ldr	r3, [sp, #16]
  404292:	2b00      	cmp	r3, #0
  404294:	da09      	bge.n	4042aa <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  404296:	2300      	movs	r3, #0
  404298:	461a      	mov	r2, r3
  40429a:	a904      	add	r1, sp, #16
  40429c:	6828      	ldr	r0, [r5, #0]
  40429e:	47a0      	blx	r4
  4042a0:	2800      	cmp	r0, #0
  4042a2:	d098      	beq.n	4041d6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4042a4:	9b04      	ldr	r3, [sp, #16]
  4042a6:	2b00      	cmp	r3, #0
  4042a8:	dbee      	blt.n	404288 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4042aa:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4042ae:	f8da 3014 	ldr.w	r3, [sl, #20]
  4042b2:	b113      	cbz	r3, 4042ba <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4042b4:	f10a 0004 	add.w	r0, sl, #4
  4042b8:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4042ba:	a803      	add	r0, sp, #12
  4042bc:	4b3a      	ldr	r3, [pc, #232]	; (4043a8 <prvTimerTask+0x1e4>)
  4042be:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4042c0:	9b04      	ldr	r3, [sp, #16]
  4042c2:	2b09      	cmp	r3, #9
  4042c4:	d8e7      	bhi.n	404296 <prvTimerTask+0xd2>
  4042c6:	a201      	add	r2, pc, #4	; (adr r2, 4042cc <prvTimerTask+0x108>)
  4042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4042cc:	004042f5 	.word	0x004042f5
  4042d0:	004042f5 	.word	0x004042f5
  4042d4:	004042f5 	.word	0x004042f5
  4042d8:	00404297 	.word	0x00404297
  4042dc:	00404349 	.word	0x00404349
  4042e0:	00404375 	.word	0x00404375
  4042e4:	004042f5 	.word	0x004042f5
  4042e8:	004042f5 	.word	0x004042f5
  4042ec:	00404297 	.word	0x00404297
  4042f0:	00404349 	.word	0x00404349
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4042f4:	9c05      	ldr	r4, [sp, #20]
  4042f6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4042fa:	4623      	mov	r3, r4
  4042fc:	4602      	mov	r2, r0
  4042fe:	4421      	add	r1, r4
  404300:	4650      	mov	r0, sl
  404302:	4c2d      	ldr	r4, [pc, #180]	; (4043b8 <prvTimerTask+0x1f4>)
  404304:	47a0      	blx	r4
  404306:	2801      	cmp	r0, #1
  404308:	d1bc      	bne.n	404284 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40430a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40430e:	4650      	mov	r0, sl
  404310:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  404312:	f8da 301c 	ldr.w	r3, [sl, #28]
  404316:	2b01      	cmp	r3, #1
  404318:	d1b4      	bne.n	404284 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40431a:	f8da 2018 	ldr.w	r2, [sl, #24]
  40431e:	2100      	movs	r1, #0
  404320:	9100      	str	r1, [sp, #0]
  404322:	460b      	mov	r3, r1
  404324:	9805      	ldr	r0, [sp, #20]
  404326:	4402      	add	r2, r0
  404328:	4650      	mov	r0, sl
  40432a:	4c24      	ldr	r4, [pc, #144]	; (4043bc <prvTimerTask+0x1f8>)
  40432c:	47a0      	blx	r4
							configASSERT( xResult );
  40432e:	2800      	cmp	r0, #0
  404330:	d1a8      	bne.n	404284 <prvTimerTask+0xc0>
  404332:	f04f 0380 	mov.w	r3, #128	; 0x80
  404336:	b672      	cpsid	i
  404338:	f383 8811 	msr	BASEPRI, r3
  40433c:	f3bf 8f6f 	isb	sy
  404340:	f3bf 8f4f 	dsb	sy
  404344:	b662      	cpsie	i
  404346:	e7fe      	b.n	404346 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  404348:	9905      	ldr	r1, [sp, #20]
  40434a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40434e:	b131      	cbz	r1, 40435e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  404350:	4603      	mov	r3, r0
  404352:	4602      	mov	r2, r0
  404354:	4401      	add	r1, r0
  404356:	4650      	mov	r0, sl
  404358:	4c17      	ldr	r4, [pc, #92]	; (4043b8 <prvTimerTask+0x1f4>)
  40435a:	47a0      	blx	r4
  40435c:	e792      	b.n	404284 <prvTimerTask+0xc0>
  40435e:	f04f 0380 	mov.w	r3, #128	; 0x80
  404362:	b672      	cpsid	i
  404364:	f383 8811 	msr	BASEPRI, r3
  404368:	f3bf 8f6f 	isb	sy
  40436c:	f3bf 8f4f 	dsb	sy
  404370:	b662      	cpsie	i
  404372:	e7fe      	b.n	404372 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  404374:	4650      	mov	r0, sl
  404376:	4b13      	ldr	r3, [pc, #76]	; (4043c4 <prvTimerTask+0x200>)
  404378:	4798      	blx	r3
  40437a:	e783      	b.n	404284 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  40437c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40437e:	a804      	add	r0, sp, #16
  404380:	4b09      	ldr	r3, [pc, #36]	; (4043a8 <prvTimerTask+0x1e4>)
  404382:	4798      	blx	r3
  404384:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  404386:	9b04      	ldr	r3, [sp, #16]
  404388:	2b00      	cmp	r3, #0
  40438a:	f47f af78 	bne.w	40427e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40438e:	4b0e      	ldr	r3, [pc, #56]	; (4043c8 <prvTimerTask+0x204>)
  404390:	681b      	ldr	r3, [r3, #0]
  404392:	681a      	ldr	r2, [r3, #0]
  404394:	fab2 f282 	clz	r2, r2
  404398:	0952      	lsrs	r2, r2, #5
  40439a:	2400      	movs	r4, #0
  40439c:	e72d      	b.n	4041fa <prvTimerTask+0x36>
  40439e:	bf00      	nop
  4043a0:	20400d80 	.word	0x20400d80
  4043a4:	004035f9 	.word	0x004035f9
  4043a8:	0040410d 	.word	0x0040410d
  4043ac:	20400db4 	.word	0x20400db4
  4043b0:	0040317d 	.word	0x0040317d
  4043b4:	00403761 	.word	0x00403761
  4043b8:	00403f75 	.word	0x00403f75
  4043bc:	0040409d 	.word	0x0040409d
  4043c0:	00402f79 	.word	0x00402f79
  4043c4:	00402985 	.word	0x00402985
  4043c8:	20400d84 	.word	0x20400d84
  4043cc:	e000ed04 	.word	0xe000ed04
  4043d0:	00402615 	.word	0x00402615

004043d4 <main>:
#include "auxiliary/aux_hw/aux_hw.h"
#include "auxiliary/aux_rtos/aux_rtos.h"

int main(void)
{
  4043d4:	b508      	push	{r3, lr}
	init_hw();
  4043d6:	4b03      	ldr	r3, [pc, #12]	; (4043e4 <main+0x10>)
  4043d8:	4798      	blx	r3
	init_rtos();
  4043da:	4b03      	ldr	r3, [pc, #12]	; (4043e8 <main+0x14>)
  4043dc:	4798      	blx	r3
	return 0;
}
  4043de:	2000      	movs	r0, #0
  4043e0:	bd08      	pop	{r3, pc}
  4043e2:	bf00      	nop
  4043e4:	00400d39 	.word	0x00400d39
  4043e8:	0040115d 	.word	0x0040115d

004043ec <__aeabi_uldivmod>:
  4043ec:	b953      	cbnz	r3, 404404 <__aeabi_uldivmod+0x18>
  4043ee:	b94a      	cbnz	r2, 404404 <__aeabi_uldivmod+0x18>
  4043f0:	2900      	cmp	r1, #0
  4043f2:	bf08      	it	eq
  4043f4:	2800      	cmpeq	r0, #0
  4043f6:	bf1c      	itt	ne
  4043f8:	f04f 31ff 	movne.w	r1, #4294967295
  4043fc:	f04f 30ff 	movne.w	r0, #4294967295
  404400:	f000 b97a 	b.w	4046f8 <__aeabi_idiv0>
  404404:	f1ad 0c08 	sub.w	ip, sp, #8
  404408:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40440c:	f000 f806 	bl	40441c <__udivmoddi4>
  404410:	f8dd e004 	ldr.w	lr, [sp, #4]
  404414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404418:	b004      	add	sp, #16
  40441a:	4770      	bx	lr

0040441c <__udivmoddi4>:
  40441c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404420:	468c      	mov	ip, r1
  404422:	460d      	mov	r5, r1
  404424:	4604      	mov	r4, r0
  404426:	9e08      	ldr	r6, [sp, #32]
  404428:	2b00      	cmp	r3, #0
  40442a:	d151      	bne.n	4044d0 <__udivmoddi4+0xb4>
  40442c:	428a      	cmp	r2, r1
  40442e:	4617      	mov	r7, r2
  404430:	d96d      	bls.n	40450e <__udivmoddi4+0xf2>
  404432:	fab2 fe82 	clz	lr, r2
  404436:	f1be 0f00 	cmp.w	lr, #0
  40443a:	d00b      	beq.n	404454 <__udivmoddi4+0x38>
  40443c:	f1ce 0c20 	rsb	ip, lr, #32
  404440:	fa01 f50e 	lsl.w	r5, r1, lr
  404444:	fa20 fc0c 	lsr.w	ip, r0, ip
  404448:	fa02 f70e 	lsl.w	r7, r2, lr
  40444c:	ea4c 0c05 	orr.w	ip, ip, r5
  404450:	fa00 f40e 	lsl.w	r4, r0, lr
  404454:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404458:	0c25      	lsrs	r5, r4, #16
  40445a:	fbbc f8fa 	udiv	r8, ip, sl
  40445e:	fa1f f987 	uxth.w	r9, r7
  404462:	fb0a cc18 	mls	ip, sl, r8, ip
  404466:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40446a:	fb08 f309 	mul.w	r3, r8, r9
  40446e:	42ab      	cmp	r3, r5
  404470:	d90a      	bls.n	404488 <__udivmoddi4+0x6c>
  404472:	19ed      	adds	r5, r5, r7
  404474:	f108 32ff 	add.w	r2, r8, #4294967295
  404478:	f080 8123 	bcs.w	4046c2 <__udivmoddi4+0x2a6>
  40447c:	42ab      	cmp	r3, r5
  40447e:	f240 8120 	bls.w	4046c2 <__udivmoddi4+0x2a6>
  404482:	f1a8 0802 	sub.w	r8, r8, #2
  404486:	443d      	add	r5, r7
  404488:	1aed      	subs	r5, r5, r3
  40448a:	b2a4      	uxth	r4, r4
  40448c:	fbb5 f0fa 	udiv	r0, r5, sl
  404490:	fb0a 5510 	mls	r5, sl, r0, r5
  404494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  404498:	fb00 f909 	mul.w	r9, r0, r9
  40449c:	45a1      	cmp	r9, r4
  40449e:	d909      	bls.n	4044b4 <__udivmoddi4+0x98>
  4044a0:	19e4      	adds	r4, r4, r7
  4044a2:	f100 33ff 	add.w	r3, r0, #4294967295
  4044a6:	f080 810a 	bcs.w	4046be <__udivmoddi4+0x2a2>
  4044aa:	45a1      	cmp	r9, r4
  4044ac:	f240 8107 	bls.w	4046be <__udivmoddi4+0x2a2>
  4044b0:	3802      	subs	r0, #2
  4044b2:	443c      	add	r4, r7
  4044b4:	eba4 0409 	sub.w	r4, r4, r9
  4044b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4044bc:	2100      	movs	r1, #0
  4044be:	2e00      	cmp	r6, #0
  4044c0:	d061      	beq.n	404586 <__udivmoddi4+0x16a>
  4044c2:	fa24 f40e 	lsr.w	r4, r4, lr
  4044c6:	2300      	movs	r3, #0
  4044c8:	6034      	str	r4, [r6, #0]
  4044ca:	6073      	str	r3, [r6, #4]
  4044cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4044d0:	428b      	cmp	r3, r1
  4044d2:	d907      	bls.n	4044e4 <__udivmoddi4+0xc8>
  4044d4:	2e00      	cmp	r6, #0
  4044d6:	d054      	beq.n	404582 <__udivmoddi4+0x166>
  4044d8:	2100      	movs	r1, #0
  4044da:	e886 0021 	stmia.w	r6, {r0, r5}
  4044de:	4608      	mov	r0, r1
  4044e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4044e4:	fab3 f183 	clz	r1, r3
  4044e8:	2900      	cmp	r1, #0
  4044ea:	f040 808e 	bne.w	40460a <__udivmoddi4+0x1ee>
  4044ee:	42ab      	cmp	r3, r5
  4044f0:	d302      	bcc.n	4044f8 <__udivmoddi4+0xdc>
  4044f2:	4282      	cmp	r2, r0
  4044f4:	f200 80fa 	bhi.w	4046ec <__udivmoddi4+0x2d0>
  4044f8:	1a84      	subs	r4, r0, r2
  4044fa:	eb65 0503 	sbc.w	r5, r5, r3
  4044fe:	2001      	movs	r0, #1
  404500:	46ac      	mov	ip, r5
  404502:	2e00      	cmp	r6, #0
  404504:	d03f      	beq.n	404586 <__udivmoddi4+0x16a>
  404506:	e886 1010 	stmia.w	r6, {r4, ip}
  40450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40450e:	b912      	cbnz	r2, 404516 <__udivmoddi4+0xfa>
  404510:	2701      	movs	r7, #1
  404512:	fbb7 f7f2 	udiv	r7, r7, r2
  404516:	fab7 fe87 	clz	lr, r7
  40451a:	f1be 0f00 	cmp.w	lr, #0
  40451e:	d134      	bne.n	40458a <__udivmoddi4+0x16e>
  404520:	1beb      	subs	r3, r5, r7
  404522:	0c3a      	lsrs	r2, r7, #16
  404524:	fa1f fc87 	uxth.w	ip, r7
  404528:	2101      	movs	r1, #1
  40452a:	fbb3 f8f2 	udiv	r8, r3, r2
  40452e:	0c25      	lsrs	r5, r4, #16
  404530:	fb02 3318 	mls	r3, r2, r8, r3
  404534:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404538:	fb0c f308 	mul.w	r3, ip, r8
  40453c:	42ab      	cmp	r3, r5
  40453e:	d907      	bls.n	404550 <__udivmoddi4+0x134>
  404540:	19ed      	adds	r5, r5, r7
  404542:	f108 30ff 	add.w	r0, r8, #4294967295
  404546:	d202      	bcs.n	40454e <__udivmoddi4+0x132>
  404548:	42ab      	cmp	r3, r5
  40454a:	f200 80d1 	bhi.w	4046f0 <__udivmoddi4+0x2d4>
  40454e:	4680      	mov	r8, r0
  404550:	1aed      	subs	r5, r5, r3
  404552:	b2a3      	uxth	r3, r4
  404554:	fbb5 f0f2 	udiv	r0, r5, r2
  404558:	fb02 5510 	mls	r5, r2, r0, r5
  40455c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  404560:	fb0c fc00 	mul.w	ip, ip, r0
  404564:	45a4      	cmp	ip, r4
  404566:	d907      	bls.n	404578 <__udivmoddi4+0x15c>
  404568:	19e4      	adds	r4, r4, r7
  40456a:	f100 33ff 	add.w	r3, r0, #4294967295
  40456e:	d202      	bcs.n	404576 <__udivmoddi4+0x15a>
  404570:	45a4      	cmp	ip, r4
  404572:	f200 80b8 	bhi.w	4046e6 <__udivmoddi4+0x2ca>
  404576:	4618      	mov	r0, r3
  404578:	eba4 040c 	sub.w	r4, r4, ip
  40457c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404580:	e79d      	b.n	4044be <__udivmoddi4+0xa2>
  404582:	4631      	mov	r1, r6
  404584:	4630      	mov	r0, r6
  404586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40458a:	f1ce 0420 	rsb	r4, lr, #32
  40458e:	fa05 f30e 	lsl.w	r3, r5, lr
  404592:	fa07 f70e 	lsl.w	r7, r7, lr
  404596:	fa20 f804 	lsr.w	r8, r0, r4
  40459a:	0c3a      	lsrs	r2, r7, #16
  40459c:	fa25 f404 	lsr.w	r4, r5, r4
  4045a0:	ea48 0803 	orr.w	r8, r8, r3
  4045a4:	fbb4 f1f2 	udiv	r1, r4, r2
  4045a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4045ac:	fb02 4411 	mls	r4, r2, r1, r4
  4045b0:	fa1f fc87 	uxth.w	ip, r7
  4045b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4045b8:	fb01 f30c 	mul.w	r3, r1, ip
  4045bc:	42ab      	cmp	r3, r5
  4045be:	fa00 f40e 	lsl.w	r4, r0, lr
  4045c2:	d909      	bls.n	4045d8 <__udivmoddi4+0x1bc>
  4045c4:	19ed      	adds	r5, r5, r7
  4045c6:	f101 30ff 	add.w	r0, r1, #4294967295
  4045ca:	f080 808a 	bcs.w	4046e2 <__udivmoddi4+0x2c6>
  4045ce:	42ab      	cmp	r3, r5
  4045d0:	f240 8087 	bls.w	4046e2 <__udivmoddi4+0x2c6>
  4045d4:	3902      	subs	r1, #2
  4045d6:	443d      	add	r5, r7
  4045d8:	1aeb      	subs	r3, r5, r3
  4045da:	fa1f f588 	uxth.w	r5, r8
  4045de:	fbb3 f0f2 	udiv	r0, r3, r2
  4045e2:	fb02 3310 	mls	r3, r2, r0, r3
  4045e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4045ea:	fb00 f30c 	mul.w	r3, r0, ip
  4045ee:	42ab      	cmp	r3, r5
  4045f0:	d907      	bls.n	404602 <__udivmoddi4+0x1e6>
  4045f2:	19ed      	adds	r5, r5, r7
  4045f4:	f100 38ff 	add.w	r8, r0, #4294967295
  4045f8:	d26f      	bcs.n	4046da <__udivmoddi4+0x2be>
  4045fa:	42ab      	cmp	r3, r5
  4045fc:	d96d      	bls.n	4046da <__udivmoddi4+0x2be>
  4045fe:	3802      	subs	r0, #2
  404600:	443d      	add	r5, r7
  404602:	1aeb      	subs	r3, r5, r3
  404604:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404608:	e78f      	b.n	40452a <__udivmoddi4+0x10e>
  40460a:	f1c1 0720 	rsb	r7, r1, #32
  40460e:	fa22 f807 	lsr.w	r8, r2, r7
  404612:	408b      	lsls	r3, r1
  404614:	fa05 f401 	lsl.w	r4, r5, r1
  404618:	ea48 0303 	orr.w	r3, r8, r3
  40461c:	fa20 fe07 	lsr.w	lr, r0, r7
  404620:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404624:	40fd      	lsrs	r5, r7
  404626:	ea4e 0e04 	orr.w	lr, lr, r4
  40462a:	fbb5 f9fc 	udiv	r9, r5, ip
  40462e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  404632:	fb0c 5519 	mls	r5, ip, r9, r5
  404636:	fa1f f883 	uxth.w	r8, r3
  40463a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40463e:	fb09 f408 	mul.w	r4, r9, r8
  404642:	42ac      	cmp	r4, r5
  404644:	fa02 f201 	lsl.w	r2, r2, r1
  404648:	fa00 fa01 	lsl.w	sl, r0, r1
  40464c:	d908      	bls.n	404660 <__udivmoddi4+0x244>
  40464e:	18ed      	adds	r5, r5, r3
  404650:	f109 30ff 	add.w	r0, r9, #4294967295
  404654:	d243      	bcs.n	4046de <__udivmoddi4+0x2c2>
  404656:	42ac      	cmp	r4, r5
  404658:	d941      	bls.n	4046de <__udivmoddi4+0x2c2>
  40465a:	f1a9 0902 	sub.w	r9, r9, #2
  40465e:	441d      	add	r5, r3
  404660:	1b2d      	subs	r5, r5, r4
  404662:	fa1f fe8e 	uxth.w	lr, lr
  404666:	fbb5 f0fc 	udiv	r0, r5, ip
  40466a:	fb0c 5510 	mls	r5, ip, r0, r5
  40466e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  404672:	fb00 f808 	mul.w	r8, r0, r8
  404676:	45a0      	cmp	r8, r4
  404678:	d907      	bls.n	40468a <__udivmoddi4+0x26e>
  40467a:	18e4      	adds	r4, r4, r3
  40467c:	f100 35ff 	add.w	r5, r0, #4294967295
  404680:	d229      	bcs.n	4046d6 <__udivmoddi4+0x2ba>
  404682:	45a0      	cmp	r8, r4
  404684:	d927      	bls.n	4046d6 <__udivmoddi4+0x2ba>
  404686:	3802      	subs	r0, #2
  404688:	441c      	add	r4, r3
  40468a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40468e:	eba4 0408 	sub.w	r4, r4, r8
  404692:	fba0 8902 	umull	r8, r9, r0, r2
  404696:	454c      	cmp	r4, r9
  404698:	46c6      	mov	lr, r8
  40469a:	464d      	mov	r5, r9
  40469c:	d315      	bcc.n	4046ca <__udivmoddi4+0x2ae>
  40469e:	d012      	beq.n	4046c6 <__udivmoddi4+0x2aa>
  4046a0:	b156      	cbz	r6, 4046b8 <__udivmoddi4+0x29c>
  4046a2:	ebba 030e 	subs.w	r3, sl, lr
  4046a6:	eb64 0405 	sbc.w	r4, r4, r5
  4046aa:	fa04 f707 	lsl.w	r7, r4, r7
  4046ae:	40cb      	lsrs	r3, r1
  4046b0:	431f      	orrs	r7, r3
  4046b2:	40cc      	lsrs	r4, r1
  4046b4:	6037      	str	r7, [r6, #0]
  4046b6:	6074      	str	r4, [r6, #4]
  4046b8:	2100      	movs	r1, #0
  4046ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4046be:	4618      	mov	r0, r3
  4046c0:	e6f8      	b.n	4044b4 <__udivmoddi4+0x98>
  4046c2:	4690      	mov	r8, r2
  4046c4:	e6e0      	b.n	404488 <__udivmoddi4+0x6c>
  4046c6:	45c2      	cmp	sl, r8
  4046c8:	d2ea      	bcs.n	4046a0 <__udivmoddi4+0x284>
  4046ca:	ebb8 0e02 	subs.w	lr, r8, r2
  4046ce:	eb69 0503 	sbc.w	r5, r9, r3
  4046d2:	3801      	subs	r0, #1
  4046d4:	e7e4      	b.n	4046a0 <__udivmoddi4+0x284>
  4046d6:	4628      	mov	r0, r5
  4046d8:	e7d7      	b.n	40468a <__udivmoddi4+0x26e>
  4046da:	4640      	mov	r0, r8
  4046dc:	e791      	b.n	404602 <__udivmoddi4+0x1e6>
  4046de:	4681      	mov	r9, r0
  4046e0:	e7be      	b.n	404660 <__udivmoddi4+0x244>
  4046e2:	4601      	mov	r1, r0
  4046e4:	e778      	b.n	4045d8 <__udivmoddi4+0x1bc>
  4046e6:	3802      	subs	r0, #2
  4046e8:	443c      	add	r4, r7
  4046ea:	e745      	b.n	404578 <__udivmoddi4+0x15c>
  4046ec:	4608      	mov	r0, r1
  4046ee:	e708      	b.n	404502 <__udivmoddi4+0xe6>
  4046f0:	f1a8 0802 	sub.w	r8, r8, #2
  4046f4:	443d      	add	r5, r7
  4046f6:	e72b      	b.n	404550 <__udivmoddi4+0x134>

004046f8 <__aeabi_idiv0>:
  4046f8:	4770      	bx	lr
  4046fa:	bf00      	nop

004046fc <__libc_init_array>:
  4046fc:	b570      	push	{r4, r5, r6, lr}
  4046fe:	4e0f      	ldr	r6, [pc, #60]	; (40473c <__libc_init_array+0x40>)
  404700:	4d0f      	ldr	r5, [pc, #60]	; (404740 <__libc_init_array+0x44>)
  404702:	1b76      	subs	r6, r6, r5
  404704:	10b6      	asrs	r6, r6, #2
  404706:	bf18      	it	ne
  404708:	2400      	movne	r4, #0
  40470a:	d005      	beq.n	404718 <__libc_init_array+0x1c>
  40470c:	3401      	adds	r4, #1
  40470e:	f855 3b04 	ldr.w	r3, [r5], #4
  404712:	4798      	blx	r3
  404714:	42a6      	cmp	r6, r4
  404716:	d1f9      	bne.n	40470c <__libc_init_array+0x10>
  404718:	4e0a      	ldr	r6, [pc, #40]	; (404744 <__libc_init_array+0x48>)
  40471a:	4d0b      	ldr	r5, [pc, #44]	; (404748 <__libc_init_array+0x4c>)
  40471c:	1b76      	subs	r6, r6, r5
  40471e:	f003 f8ef 	bl	407900 <_init>
  404722:	10b6      	asrs	r6, r6, #2
  404724:	bf18      	it	ne
  404726:	2400      	movne	r4, #0
  404728:	d006      	beq.n	404738 <__libc_init_array+0x3c>
  40472a:	3401      	adds	r4, #1
  40472c:	f855 3b04 	ldr.w	r3, [r5], #4
  404730:	4798      	blx	r3
  404732:	42a6      	cmp	r6, r4
  404734:	d1f9      	bne.n	40472a <__libc_init_array+0x2e>
  404736:	bd70      	pop	{r4, r5, r6, pc}
  404738:	bd70      	pop	{r4, r5, r6, pc}
  40473a:	bf00      	nop
  40473c:	0040790c 	.word	0x0040790c
  404740:	0040790c 	.word	0x0040790c
  404744:	00407914 	.word	0x00407914
  404748:	0040790c 	.word	0x0040790c

0040474c <iprintf>:
  40474c:	b40f      	push	{r0, r1, r2, r3}
  40474e:	b500      	push	{lr}
  404750:	4907      	ldr	r1, [pc, #28]	; (404770 <iprintf+0x24>)
  404752:	b083      	sub	sp, #12
  404754:	ab04      	add	r3, sp, #16
  404756:	6808      	ldr	r0, [r1, #0]
  404758:	f853 2b04 	ldr.w	r2, [r3], #4
  40475c:	6881      	ldr	r1, [r0, #8]
  40475e:	9301      	str	r3, [sp, #4]
  404760:	f000 fd5c 	bl	40521c <_vfiprintf_r>
  404764:	b003      	add	sp, #12
  404766:	f85d eb04 	ldr.w	lr, [sp], #4
  40476a:	b004      	add	sp, #16
  40476c:	4770      	bx	lr
  40476e:	bf00      	nop
  404770:	20400024 	.word	0x20400024

00404774 <malloc>:
  404774:	4b02      	ldr	r3, [pc, #8]	; (404780 <malloc+0xc>)
  404776:	4601      	mov	r1, r0
  404778:	6818      	ldr	r0, [r3, #0]
  40477a:	f000 b80b 	b.w	404794 <_malloc_r>
  40477e:	bf00      	nop
  404780:	20400024 	.word	0x20400024

00404784 <free>:
  404784:	4b02      	ldr	r3, [pc, #8]	; (404790 <free+0xc>)
  404786:	4601      	mov	r1, r0
  404788:	6818      	ldr	r0, [r3, #0]
  40478a:	f001 be63 	b.w	406454 <_free_r>
  40478e:	bf00      	nop
  404790:	20400024 	.word	0x20400024

00404794 <_malloc_r>:
  404794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404798:	f101 060b 	add.w	r6, r1, #11
  40479c:	2e16      	cmp	r6, #22
  40479e:	b083      	sub	sp, #12
  4047a0:	4605      	mov	r5, r0
  4047a2:	f240 809e 	bls.w	4048e2 <_malloc_r+0x14e>
  4047a6:	f036 0607 	bics.w	r6, r6, #7
  4047aa:	f100 80bd 	bmi.w	404928 <_malloc_r+0x194>
  4047ae:	42b1      	cmp	r1, r6
  4047b0:	f200 80ba 	bhi.w	404928 <_malloc_r+0x194>
  4047b4:	f000 fb86 	bl	404ec4 <__malloc_lock>
  4047b8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4047bc:	f0c0 8293 	bcc.w	404ce6 <_malloc_r+0x552>
  4047c0:	0a73      	lsrs	r3, r6, #9
  4047c2:	f000 80b8 	beq.w	404936 <_malloc_r+0x1a2>
  4047c6:	2b04      	cmp	r3, #4
  4047c8:	f200 8179 	bhi.w	404abe <_malloc_r+0x32a>
  4047cc:	09b3      	lsrs	r3, r6, #6
  4047ce:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4047d2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4047d6:	00c3      	lsls	r3, r0, #3
  4047d8:	4fbf      	ldr	r7, [pc, #764]	; (404ad8 <_malloc_r+0x344>)
  4047da:	443b      	add	r3, r7
  4047dc:	f1a3 0108 	sub.w	r1, r3, #8
  4047e0:	685c      	ldr	r4, [r3, #4]
  4047e2:	42a1      	cmp	r1, r4
  4047e4:	d106      	bne.n	4047f4 <_malloc_r+0x60>
  4047e6:	e00c      	b.n	404802 <_malloc_r+0x6e>
  4047e8:	2a00      	cmp	r2, #0
  4047ea:	f280 80aa 	bge.w	404942 <_malloc_r+0x1ae>
  4047ee:	68e4      	ldr	r4, [r4, #12]
  4047f0:	42a1      	cmp	r1, r4
  4047f2:	d006      	beq.n	404802 <_malloc_r+0x6e>
  4047f4:	6863      	ldr	r3, [r4, #4]
  4047f6:	f023 0303 	bic.w	r3, r3, #3
  4047fa:	1b9a      	subs	r2, r3, r6
  4047fc:	2a0f      	cmp	r2, #15
  4047fe:	ddf3      	ble.n	4047e8 <_malloc_r+0x54>
  404800:	4670      	mov	r0, lr
  404802:	693c      	ldr	r4, [r7, #16]
  404804:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404aec <_malloc_r+0x358>
  404808:	4574      	cmp	r4, lr
  40480a:	f000 81ab 	beq.w	404b64 <_malloc_r+0x3d0>
  40480e:	6863      	ldr	r3, [r4, #4]
  404810:	f023 0303 	bic.w	r3, r3, #3
  404814:	1b9a      	subs	r2, r3, r6
  404816:	2a0f      	cmp	r2, #15
  404818:	f300 8190 	bgt.w	404b3c <_malloc_r+0x3a8>
  40481c:	2a00      	cmp	r2, #0
  40481e:	f8c7 e014 	str.w	lr, [r7, #20]
  404822:	f8c7 e010 	str.w	lr, [r7, #16]
  404826:	f280 809d 	bge.w	404964 <_malloc_r+0x1d0>
  40482a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40482e:	f080 8161 	bcs.w	404af4 <_malloc_r+0x360>
  404832:	08db      	lsrs	r3, r3, #3
  404834:	f103 0c01 	add.w	ip, r3, #1
  404838:	1099      	asrs	r1, r3, #2
  40483a:	687a      	ldr	r2, [r7, #4]
  40483c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404840:	f8c4 8008 	str.w	r8, [r4, #8]
  404844:	2301      	movs	r3, #1
  404846:	408b      	lsls	r3, r1
  404848:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40484c:	4313      	orrs	r3, r2
  40484e:	3908      	subs	r1, #8
  404850:	60e1      	str	r1, [r4, #12]
  404852:	607b      	str	r3, [r7, #4]
  404854:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404858:	f8c8 400c 	str.w	r4, [r8, #12]
  40485c:	1082      	asrs	r2, r0, #2
  40485e:	2401      	movs	r4, #1
  404860:	4094      	lsls	r4, r2
  404862:	429c      	cmp	r4, r3
  404864:	f200 808b 	bhi.w	40497e <_malloc_r+0x1ea>
  404868:	421c      	tst	r4, r3
  40486a:	d106      	bne.n	40487a <_malloc_r+0xe6>
  40486c:	f020 0003 	bic.w	r0, r0, #3
  404870:	0064      	lsls	r4, r4, #1
  404872:	421c      	tst	r4, r3
  404874:	f100 0004 	add.w	r0, r0, #4
  404878:	d0fa      	beq.n	404870 <_malloc_r+0xdc>
  40487a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40487e:	46cc      	mov	ip, r9
  404880:	4680      	mov	r8, r0
  404882:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404886:	459c      	cmp	ip, r3
  404888:	d107      	bne.n	40489a <_malloc_r+0x106>
  40488a:	e16d      	b.n	404b68 <_malloc_r+0x3d4>
  40488c:	2a00      	cmp	r2, #0
  40488e:	f280 817b 	bge.w	404b88 <_malloc_r+0x3f4>
  404892:	68db      	ldr	r3, [r3, #12]
  404894:	459c      	cmp	ip, r3
  404896:	f000 8167 	beq.w	404b68 <_malloc_r+0x3d4>
  40489a:	6859      	ldr	r1, [r3, #4]
  40489c:	f021 0103 	bic.w	r1, r1, #3
  4048a0:	1b8a      	subs	r2, r1, r6
  4048a2:	2a0f      	cmp	r2, #15
  4048a4:	ddf2      	ble.n	40488c <_malloc_r+0xf8>
  4048a6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4048aa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4048ae:	9300      	str	r3, [sp, #0]
  4048b0:	199c      	adds	r4, r3, r6
  4048b2:	4628      	mov	r0, r5
  4048b4:	f046 0601 	orr.w	r6, r6, #1
  4048b8:	f042 0501 	orr.w	r5, r2, #1
  4048bc:	605e      	str	r6, [r3, #4]
  4048be:	f8c8 c00c 	str.w	ip, [r8, #12]
  4048c2:	f8cc 8008 	str.w	r8, [ip, #8]
  4048c6:	617c      	str	r4, [r7, #20]
  4048c8:	613c      	str	r4, [r7, #16]
  4048ca:	f8c4 e00c 	str.w	lr, [r4, #12]
  4048ce:	f8c4 e008 	str.w	lr, [r4, #8]
  4048d2:	6065      	str	r5, [r4, #4]
  4048d4:	505a      	str	r2, [r3, r1]
  4048d6:	f000 fafb 	bl	404ed0 <__malloc_unlock>
  4048da:	9b00      	ldr	r3, [sp, #0]
  4048dc:	f103 0408 	add.w	r4, r3, #8
  4048e0:	e01e      	b.n	404920 <_malloc_r+0x18c>
  4048e2:	2910      	cmp	r1, #16
  4048e4:	d820      	bhi.n	404928 <_malloc_r+0x194>
  4048e6:	f000 faed 	bl	404ec4 <__malloc_lock>
  4048ea:	2610      	movs	r6, #16
  4048ec:	2318      	movs	r3, #24
  4048ee:	2002      	movs	r0, #2
  4048f0:	4f79      	ldr	r7, [pc, #484]	; (404ad8 <_malloc_r+0x344>)
  4048f2:	443b      	add	r3, r7
  4048f4:	f1a3 0208 	sub.w	r2, r3, #8
  4048f8:	685c      	ldr	r4, [r3, #4]
  4048fa:	4294      	cmp	r4, r2
  4048fc:	f000 813d 	beq.w	404b7a <_malloc_r+0x3e6>
  404900:	6863      	ldr	r3, [r4, #4]
  404902:	68e1      	ldr	r1, [r4, #12]
  404904:	68a6      	ldr	r6, [r4, #8]
  404906:	f023 0303 	bic.w	r3, r3, #3
  40490a:	4423      	add	r3, r4
  40490c:	4628      	mov	r0, r5
  40490e:	685a      	ldr	r2, [r3, #4]
  404910:	60f1      	str	r1, [r6, #12]
  404912:	f042 0201 	orr.w	r2, r2, #1
  404916:	608e      	str	r6, [r1, #8]
  404918:	605a      	str	r2, [r3, #4]
  40491a:	f000 fad9 	bl	404ed0 <__malloc_unlock>
  40491e:	3408      	adds	r4, #8
  404920:	4620      	mov	r0, r4
  404922:	b003      	add	sp, #12
  404924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404928:	2400      	movs	r4, #0
  40492a:	230c      	movs	r3, #12
  40492c:	4620      	mov	r0, r4
  40492e:	602b      	str	r3, [r5, #0]
  404930:	b003      	add	sp, #12
  404932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404936:	2040      	movs	r0, #64	; 0x40
  404938:	f44f 7300 	mov.w	r3, #512	; 0x200
  40493c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404940:	e74a      	b.n	4047d8 <_malloc_r+0x44>
  404942:	4423      	add	r3, r4
  404944:	68e1      	ldr	r1, [r4, #12]
  404946:	685a      	ldr	r2, [r3, #4]
  404948:	68a6      	ldr	r6, [r4, #8]
  40494a:	f042 0201 	orr.w	r2, r2, #1
  40494e:	60f1      	str	r1, [r6, #12]
  404950:	4628      	mov	r0, r5
  404952:	608e      	str	r6, [r1, #8]
  404954:	605a      	str	r2, [r3, #4]
  404956:	f000 fabb 	bl	404ed0 <__malloc_unlock>
  40495a:	3408      	adds	r4, #8
  40495c:	4620      	mov	r0, r4
  40495e:	b003      	add	sp, #12
  404960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404964:	4423      	add	r3, r4
  404966:	4628      	mov	r0, r5
  404968:	685a      	ldr	r2, [r3, #4]
  40496a:	f042 0201 	orr.w	r2, r2, #1
  40496e:	605a      	str	r2, [r3, #4]
  404970:	f000 faae 	bl	404ed0 <__malloc_unlock>
  404974:	3408      	adds	r4, #8
  404976:	4620      	mov	r0, r4
  404978:	b003      	add	sp, #12
  40497a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40497e:	68bc      	ldr	r4, [r7, #8]
  404980:	6863      	ldr	r3, [r4, #4]
  404982:	f023 0803 	bic.w	r8, r3, #3
  404986:	45b0      	cmp	r8, r6
  404988:	d304      	bcc.n	404994 <_malloc_r+0x200>
  40498a:	eba8 0306 	sub.w	r3, r8, r6
  40498e:	2b0f      	cmp	r3, #15
  404990:	f300 8085 	bgt.w	404a9e <_malloc_r+0x30a>
  404994:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404af0 <_malloc_r+0x35c>
  404998:	4b50      	ldr	r3, [pc, #320]	; (404adc <_malloc_r+0x348>)
  40499a:	f8d9 2000 	ldr.w	r2, [r9]
  40499e:	681b      	ldr	r3, [r3, #0]
  4049a0:	3201      	adds	r2, #1
  4049a2:	4433      	add	r3, r6
  4049a4:	eb04 0a08 	add.w	sl, r4, r8
  4049a8:	f000 8155 	beq.w	404c56 <_malloc_r+0x4c2>
  4049ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4049b0:	330f      	adds	r3, #15
  4049b2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4049b6:	f02b 0b0f 	bic.w	fp, fp, #15
  4049ba:	4659      	mov	r1, fp
  4049bc:	4628      	mov	r0, r5
  4049be:	f000 fa8d 	bl	404edc <_sbrk_r>
  4049c2:	1c41      	adds	r1, r0, #1
  4049c4:	4602      	mov	r2, r0
  4049c6:	f000 80fc 	beq.w	404bc2 <_malloc_r+0x42e>
  4049ca:	4582      	cmp	sl, r0
  4049cc:	f200 80f7 	bhi.w	404bbe <_malloc_r+0x42a>
  4049d0:	4b43      	ldr	r3, [pc, #268]	; (404ae0 <_malloc_r+0x34c>)
  4049d2:	6819      	ldr	r1, [r3, #0]
  4049d4:	4459      	add	r1, fp
  4049d6:	6019      	str	r1, [r3, #0]
  4049d8:	f000 814d 	beq.w	404c76 <_malloc_r+0x4e2>
  4049dc:	f8d9 0000 	ldr.w	r0, [r9]
  4049e0:	3001      	adds	r0, #1
  4049e2:	bf1b      	ittet	ne
  4049e4:	eba2 0a0a 	subne.w	sl, r2, sl
  4049e8:	4451      	addne	r1, sl
  4049ea:	f8c9 2000 	streq.w	r2, [r9]
  4049ee:	6019      	strne	r1, [r3, #0]
  4049f0:	f012 0107 	ands.w	r1, r2, #7
  4049f4:	f000 8115 	beq.w	404c22 <_malloc_r+0x48e>
  4049f8:	f1c1 0008 	rsb	r0, r1, #8
  4049fc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404a00:	4402      	add	r2, r0
  404a02:	3108      	adds	r1, #8
  404a04:	eb02 090b 	add.w	r9, r2, fp
  404a08:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404a0c:	eba1 0909 	sub.w	r9, r1, r9
  404a10:	4649      	mov	r1, r9
  404a12:	4628      	mov	r0, r5
  404a14:	9301      	str	r3, [sp, #4]
  404a16:	9200      	str	r2, [sp, #0]
  404a18:	f000 fa60 	bl	404edc <_sbrk_r>
  404a1c:	1c43      	adds	r3, r0, #1
  404a1e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404a22:	f000 8143 	beq.w	404cac <_malloc_r+0x518>
  404a26:	1a80      	subs	r0, r0, r2
  404a28:	4448      	add	r0, r9
  404a2a:	f040 0001 	orr.w	r0, r0, #1
  404a2e:	6819      	ldr	r1, [r3, #0]
  404a30:	60ba      	str	r2, [r7, #8]
  404a32:	4449      	add	r1, r9
  404a34:	42bc      	cmp	r4, r7
  404a36:	6050      	str	r0, [r2, #4]
  404a38:	6019      	str	r1, [r3, #0]
  404a3a:	d017      	beq.n	404a6c <_malloc_r+0x2d8>
  404a3c:	f1b8 0f0f 	cmp.w	r8, #15
  404a40:	f240 80fb 	bls.w	404c3a <_malloc_r+0x4a6>
  404a44:	6860      	ldr	r0, [r4, #4]
  404a46:	f1a8 020c 	sub.w	r2, r8, #12
  404a4a:	f022 0207 	bic.w	r2, r2, #7
  404a4e:	eb04 0e02 	add.w	lr, r4, r2
  404a52:	f000 0001 	and.w	r0, r0, #1
  404a56:	f04f 0c05 	mov.w	ip, #5
  404a5a:	4310      	orrs	r0, r2
  404a5c:	2a0f      	cmp	r2, #15
  404a5e:	6060      	str	r0, [r4, #4]
  404a60:	f8ce c004 	str.w	ip, [lr, #4]
  404a64:	f8ce c008 	str.w	ip, [lr, #8]
  404a68:	f200 8117 	bhi.w	404c9a <_malloc_r+0x506>
  404a6c:	4b1d      	ldr	r3, [pc, #116]	; (404ae4 <_malloc_r+0x350>)
  404a6e:	68bc      	ldr	r4, [r7, #8]
  404a70:	681a      	ldr	r2, [r3, #0]
  404a72:	4291      	cmp	r1, r2
  404a74:	bf88      	it	hi
  404a76:	6019      	strhi	r1, [r3, #0]
  404a78:	4b1b      	ldr	r3, [pc, #108]	; (404ae8 <_malloc_r+0x354>)
  404a7a:	681a      	ldr	r2, [r3, #0]
  404a7c:	4291      	cmp	r1, r2
  404a7e:	6862      	ldr	r2, [r4, #4]
  404a80:	bf88      	it	hi
  404a82:	6019      	strhi	r1, [r3, #0]
  404a84:	f022 0203 	bic.w	r2, r2, #3
  404a88:	4296      	cmp	r6, r2
  404a8a:	eba2 0306 	sub.w	r3, r2, r6
  404a8e:	d801      	bhi.n	404a94 <_malloc_r+0x300>
  404a90:	2b0f      	cmp	r3, #15
  404a92:	dc04      	bgt.n	404a9e <_malloc_r+0x30a>
  404a94:	4628      	mov	r0, r5
  404a96:	f000 fa1b 	bl	404ed0 <__malloc_unlock>
  404a9a:	2400      	movs	r4, #0
  404a9c:	e740      	b.n	404920 <_malloc_r+0x18c>
  404a9e:	19a2      	adds	r2, r4, r6
  404aa0:	f043 0301 	orr.w	r3, r3, #1
  404aa4:	f046 0601 	orr.w	r6, r6, #1
  404aa8:	6066      	str	r6, [r4, #4]
  404aaa:	4628      	mov	r0, r5
  404aac:	60ba      	str	r2, [r7, #8]
  404aae:	6053      	str	r3, [r2, #4]
  404ab0:	f000 fa0e 	bl	404ed0 <__malloc_unlock>
  404ab4:	3408      	adds	r4, #8
  404ab6:	4620      	mov	r0, r4
  404ab8:	b003      	add	sp, #12
  404aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404abe:	2b14      	cmp	r3, #20
  404ac0:	d971      	bls.n	404ba6 <_malloc_r+0x412>
  404ac2:	2b54      	cmp	r3, #84	; 0x54
  404ac4:	f200 80a3 	bhi.w	404c0e <_malloc_r+0x47a>
  404ac8:	0b33      	lsrs	r3, r6, #12
  404aca:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404ace:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404ad2:	00c3      	lsls	r3, r0, #3
  404ad4:	e680      	b.n	4047d8 <_malloc_r+0x44>
  404ad6:	bf00      	nop
  404ad8:	20400450 	.word	0x20400450
  404adc:	20400de8 	.word	0x20400de8
  404ae0:	20400db8 	.word	0x20400db8
  404ae4:	20400de0 	.word	0x20400de0
  404ae8:	20400de4 	.word	0x20400de4
  404aec:	20400458 	.word	0x20400458
  404af0:	20400858 	.word	0x20400858
  404af4:	0a5a      	lsrs	r2, r3, #9
  404af6:	2a04      	cmp	r2, #4
  404af8:	d95b      	bls.n	404bb2 <_malloc_r+0x41e>
  404afa:	2a14      	cmp	r2, #20
  404afc:	f200 80ae 	bhi.w	404c5c <_malloc_r+0x4c8>
  404b00:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404b04:	00c9      	lsls	r1, r1, #3
  404b06:	325b      	adds	r2, #91	; 0x5b
  404b08:	eb07 0c01 	add.w	ip, r7, r1
  404b0c:	5879      	ldr	r1, [r7, r1]
  404b0e:	f1ac 0c08 	sub.w	ip, ip, #8
  404b12:	458c      	cmp	ip, r1
  404b14:	f000 8088 	beq.w	404c28 <_malloc_r+0x494>
  404b18:	684a      	ldr	r2, [r1, #4]
  404b1a:	f022 0203 	bic.w	r2, r2, #3
  404b1e:	4293      	cmp	r3, r2
  404b20:	d273      	bcs.n	404c0a <_malloc_r+0x476>
  404b22:	6889      	ldr	r1, [r1, #8]
  404b24:	458c      	cmp	ip, r1
  404b26:	d1f7      	bne.n	404b18 <_malloc_r+0x384>
  404b28:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404b2c:	687b      	ldr	r3, [r7, #4]
  404b2e:	60e2      	str	r2, [r4, #12]
  404b30:	f8c4 c008 	str.w	ip, [r4, #8]
  404b34:	6094      	str	r4, [r2, #8]
  404b36:	f8cc 400c 	str.w	r4, [ip, #12]
  404b3a:	e68f      	b.n	40485c <_malloc_r+0xc8>
  404b3c:	19a1      	adds	r1, r4, r6
  404b3e:	f046 0c01 	orr.w	ip, r6, #1
  404b42:	f042 0601 	orr.w	r6, r2, #1
  404b46:	f8c4 c004 	str.w	ip, [r4, #4]
  404b4a:	4628      	mov	r0, r5
  404b4c:	6179      	str	r1, [r7, #20]
  404b4e:	6139      	str	r1, [r7, #16]
  404b50:	f8c1 e00c 	str.w	lr, [r1, #12]
  404b54:	f8c1 e008 	str.w	lr, [r1, #8]
  404b58:	604e      	str	r6, [r1, #4]
  404b5a:	50e2      	str	r2, [r4, r3]
  404b5c:	f000 f9b8 	bl	404ed0 <__malloc_unlock>
  404b60:	3408      	adds	r4, #8
  404b62:	e6dd      	b.n	404920 <_malloc_r+0x18c>
  404b64:	687b      	ldr	r3, [r7, #4]
  404b66:	e679      	b.n	40485c <_malloc_r+0xc8>
  404b68:	f108 0801 	add.w	r8, r8, #1
  404b6c:	f018 0f03 	tst.w	r8, #3
  404b70:	f10c 0c08 	add.w	ip, ip, #8
  404b74:	f47f ae85 	bne.w	404882 <_malloc_r+0xee>
  404b78:	e02d      	b.n	404bd6 <_malloc_r+0x442>
  404b7a:	68dc      	ldr	r4, [r3, #12]
  404b7c:	42a3      	cmp	r3, r4
  404b7e:	bf08      	it	eq
  404b80:	3002      	addeq	r0, #2
  404b82:	f43f ae3e 	beq.w	404802 <_malloc_r+0x6e>
  404b86:	e6bb      	b.n	404900 <_malloc_r+0x16c>
  404b88:	4419      	add	r1, r3
  404b8a:	461c      	mov	r4, r3
  404b8c:	684a      	ldr	r2, [r1, #4]
  404b8e:	68db      	ldr	r3, [r3, #12]
  404b90:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404b94:	f042 0201 	orr.w	r2, r2, #1
  404b98:	604a      	str	r2, [r1, #4]
  404b9a:	4628      	mov	r0, r5
  404b9c:	60f3      	str	r3, [r6, #12]
  404b9e:	609e      	str	r6, [r3, #8]
  404ba0:	f000 f996 	bl	404ed0 <__malloc_unlock>
  404ba4:	e6bc      	b.n	404920 <_malloc_r+0x18c>
  404ba6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404baa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404bae:	00c3      	lsls	r3, r0, #3
  404bb0:	e612      	b.n	4047d8 <_malloc_r+0x44>
  404bb2:	099a      	lsrs	r2, r3, #6
  404bb4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404bb8:	00c9      	lsls	r1, r1, #3
  404bba:	3238      	adds	r2, #56	; 0x38
  404bbc:	e7a4      	b.n	404b08 <_malloc_r+0x374>
  404bbe:	42bc      	cmp	r4, r7
  404bc0:	d054      	beq.n	404c6c <_malloc_r+0x4d8>
  404bc2:	68bc      	ldr	r4, [r7, #8]
  404bc4:	6862      	ldr	r2, [r4, #4]
  404bc6:	f022 0203 	bic.w	r2, r2, #3
  404bca:	e75d      	b.n	404a88 <_malloc_r+0x2f4>
  404bcc:	f859 3908 	ldr.w	r3, [r9], #-8
  404bd0:	4599      	cmp	r9, r3
  404bd2:	f040 8086 	bne.w	404ce2 <_malloc_r+0x54e>
  404bd6:	f010 0f03 	tst.w	r0, #3
  404bda:	f100 30ff 	add.w	r0, r0, #4294967295
  404bde:	d1f5      	bne.n	404bcc <_malloc_r+0x438>
  404be0:	687b      	ldr	r3, [r7, #4]
  404be2:	ea23 0304 	bic.w	r3, r3, r4
  404be6:	607b      	str	r3, [r7, #4]
  404be8:	0064      	lsls	r4, r4, #1
  404bea:	429c      	cmp	r4, r3
  404bec:	f63f aec7 	bhi.w	40497e <_malloc_r+0x1ea>
  404bf0:	2c00      	cmp	r4, #0
  404bf2:	f43f aec4 	beq.w	40497e <_malloc_r+0x1ea>
  404bf6:	421c      	tst	r4, r3
  404bf8:	4640      	mov	r0, r8
  404bfa:	f47f ae3e 	bne.w	40487a <_malloc_r+0xe6>
  404bfe:	0064      	lsls	r4, r4, #1
  404c00:	421c      	tst	r4, r3
  404c02:	f100 0004 	add.w	r0, r0, #4
  404c06:	d0fa      	beq.n	404bfe <_malloc_r+0x46a>
  404c08:	e637      	b.n	40487a <_malloc_r+0xe6>
  404c0a:	468c      	mov	ip, r1
  404c0c:	e78c      	b.n	404b28 <_malloc_r+0x394>
  404c0e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404c12:	d815      	bhi.n	404c40 <_malloc_r+0x4ac>
  404c14:	0bf3      	lsrs	r3, r6, #15
  404c16:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404c1a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404c1e:	00c3      	lsls	r3, r0, #3
  404c20:	e5da      	b.n	4047d8 <_malloc_r+0x44>
  404c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404c26:	e6ed      	b.n	404a04 <_malloc_r+0x270>
  404c28:	687b      	ldr	r3, [r7, #4]
  404c2a:	1092      	asrs	r2, r2, #2
  404c2c:	2101      	movs	r1, #1
  404c2e:	fa01 f202 	lsl.w	r2, r1, r2
  404c32:	4313      	orrs	r3, r2
  404c34:	607b      	str	r3, [r7, #4]
  404c36:	4662      	mov	r2, ip
  404c38:	e779      	b.n	404b2e <_malloc_r+0x39a>
  404c3a:	2301      	movs	r3, #1
  404c3c:	6053      	str	r3, [r2, #4]
  404c3e:	e729      	b.n	404a94 <_malloc_r+0x300>
  404c40:	f240 5254 	movw	r2, #1364	; 0x554
  404c44:	4293      	cmp	r3, r2
  404c46:	d822      	bhi.n	404c8e <_malloc_r+0x4fa>
  404c48:	0cb3      	lsrs	r3, r6, #18
  404c4a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404c4e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404c52:	00c3      	lsls	r3, r0, #3
  404c54:	e5c0      	b.n	4047d8 <_malloc_r+0x44>
  404c56:	f103 0b10 	add.w	fp, r3, #16
  404c5a:	e6ae      	b.n	4049ba <_malloc_r+0x226>
  404c5c:	2a54      	cmp	r2, #84	; 0x54
  404c5e:	d829      	bhi.n	404cb4 <_malloc_r+0x520>
  404c60:	0b1a      	lsrs	r2, r3, #12
  404c62:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404c66:	00c9      	lsls	r1, r1, #3
  404c68:	326e      	adds	r2, #110	; 0x6e
  404c6a:	e74d      	b.n	404b08 <_malloc_r+0x374>
  404c6c:	4b20      	ldr	r3, [pc, #128]	; (404cf0 <_malloc_r+0x55c>)
  404c6e:	6819      	ldr	r1, [r3, #0]
  404c70:	4459      	add	r1, fp
  404c72:	6019      	str	r1, [r3, #0]
  404c74:	e6b2      	b.n	4049dc <_malloc_r+0x248>
  404c76:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404c7a:	2800      	cmp	r0, #0
  404c7c:	f47f aeae 	bne.w	4049dc <_malloc_r+0x248>
  404c80:	eb08 030b 	add.w	r3, r8, fp
  404c84:	68ba      	ldr	r2, [r7, #8]
  404c86:	f043 0301 	orr.w	r3, r3, #1
  404c8a:	6053      	str	r3, [r2, #4]
  404c8c:	e6ee      	b.n	404a6c <_malloc_r+0x2d8>
  404c8e:	207f      	movs	r0, #127	; 0x7f
  404c90:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404c94:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404c98:	e59e      	b.n	4047d8 <_malloc_r+0x44>
  404c9a:	f104 0108 	add.w	r1, r4, #8
  404c9e:	4628      	mov	r0, r5
  404ca0:	9300      	str	r3, [sp, #0]
  404ca2:	f001 fbd7 	bl	406454 <_free_r>
  404ca6:	9b00      	ldr	r3, [sp, #0]
  404ca8:	6819      	ldr	r1, [r3, #0]
  404caa:	e6df      	b.n	404a6c <_malloc_r+0x2d8>
  404cac:	2001      	movs	r0, #1
  404cae:	f04f 0900 	mov.w	r9, #0
  404cb2:	e6bc      	b.n	404a2e <_malloc_r+0x29a>
  404cb4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404cb8:	d805      	bhi.n	404cc6 <_malloc_r+0x532>
  404cba:	0bda      	lsrs	r2, r3, #15
  404cbc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404cc0:	00c9      	lsls	r1, r1, #3
  404cc2:	3277      	adds	r2, #119	; 0x77
  404cc4:	e720      	b.n	404b08 <_malloc_r+0x374>
  404cc6:	f240 5154 	movw	r1, #1364	; 0x554
  404cca:	428a      	cmp	r2, r1
  404ccc:	d805      	bhi.n	404cda <_malloc_r+0x546>
  404cce:	0c9a      	lsrs	r2, r3, #18
  404cd0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404cd4:	00c9      	lsls	r1, r1, #3
  404cd6:	327c      	adds	r2, #124	; 0x7c
  404cd8:	e716      	b.n	404b08 <_malloc_r+0x374>
  404cda:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404cde:	227e      	movs	r2, #126	; 0x7e
  404ce0:	e712      	b.n	404b08 <_malloc_r+0x374>
  404ce2:	687b      	ldr	r3, [r7, #4]
  404ce4:	e780      	b.n	404be8 <_malloc_r+0x454>
  404ce6:	08f0      	lsrs	r0, r6, #3
  404ce8:	f106 0308 	add.w	r3, r6, #8
  404cec:	e600      	b.n	4048f0 <_malloc_r+0x15c>
  404cee:	bf00      	nop
  404cf0:	20400db8 	.word	0x20400db8

00404cf4 <memcpy>:
  404cf4:	4684      	mov	ip, r0
  404cf6:	ea41 0300 	orr.w	r3, r1, r0
  404cfa:	f013 0303 	ands.w	r3, r3, #3
  404cfe:	d16d      	bne.n	404ddc <memcpy+0xe8>
  404d00:	3a40      	subs	r2, #64	; 0x40
  404d02:	d341      	bcc.n	404d88 <memcpy+0x94>
  404d04:	f851 3b04 	ldr.w	r3, [r1], #4
  404d08:	f840 3b04 	str.w	r3, [r0], #4
  404d0c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d10:	f840 3b04 	str.w	r3, [r0], #4
  404d14:	f851 3b04 	ldr.w	r3, [r1], #4
  404d18:	f840 3b04 	str.w	r3, [r0], #4
  404d1c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d20:	f840 3b04 	str.w	r3, [r0], #4
  404d24:	f851 3b04 	ldr.w	r3, [r1], #4
  404d28:	f840 3b04 	str.w	r3, [r0], #4
  404d2c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d30:	f840 3b04 	str.w	r3, [r0], #4
  404d34:	f851 3b04 	ldr.w	r3, [r1], #4
  404d38:	f840 3b04 	str.w	r3, [r0], #4
  404d3c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d40:	f840 3b04 	str.w	r3, [r0], #4
  404d44:	f851 3b04 	ldr.w	r3, [r1], #4
  404d48:	f840 3b04 	str.w	r3, [r0], #4
  404d4c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d50:	f840 3b04 	str.w	r3, [r0], #4
  404d54:	f851 3b04 	ldr.w	r3, [r1], #4
  404d58:	f840 3b04 	str.w	r3, [r0], #4
  404d5c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d60:	f840 3b04 	str.w	r3, [r0], #4
  404d64:	f851 3b04 	ldr.w	r3, [r1], #4
  404d68:	f840 3b04 	str.w	r3, [r0], #4
  404d6c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d70:	f840 3b04 	str.w	r3, [r0], #4
  404d74:	f851 3b04 	ldr.w	r3, [r1], #4
  404d78:	f840 3b04 	str.w	r3, [r0], #4
  404d7c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d80:	f840 3b04 	str.w	r3, [r0], #4
  404d84:	3a40      	subs	r2, #64	; 0x40
  404d86:	d2bd      	bcs.n	404d04 <memcpy+0x10>
  404d88:	3230      	adds	r2, #48	; 0x30
  404d8a:	d311      	bcc.n	404db0 <memcpy+0xbc>
  404d8c:	f851 3b04 	ldr.w	r3, [r1], #4
  404d90:	f840 3b04 	str.w	r3, [r0], #4
  404d94:	f851 3b04 	ldr.w	r3, [r1], #4
  404d98:	f840 3b04 	str.w	r3, [r0], #4
  404d9c:	f851 3b04 	ldr.w	r3, [r1], #4
  404da0:	f840 3b04 	str.w	r3, [r0], #4
  404da4:	f851 3b04 	ldr.w	r3, [r1], #4
  404da8:	f840 3b04 	str.w	r3, [r0], #4
  404dac:	3a10      	subs	r2, #16
  404dae:	d2ed      	bcs.n	404d8c <memcpy+0x98>
  404db0:	320c      	adds	r2, #12
  404db2:	d305      	bcc.n	404dc0 <memcpy+0xcc>
  404db4:	f851 3b04 	ldr.w	r3, [r1], #4
  404db8:	f840 3b04 	str.w	r3, [r0], #4
  404dbc:	3a04      	subs	r2, #4
  404dbe:	d2f9      	bcs.n	404db4 <memcpy+0xc0>
  404dc0:	3204      	adds	r2, #4
  404dc2:	d008      	beq.n	404dd6 <memcpy+0xe2>
  404dc4:	07d2      	lsls	r2, r2, #31
  404dc6:	bf1c      	itt	ne
  404dc8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404dcc:	f800 3b01 	strbne.w	r3, [r0], #1
  404dd0:	d301      	bcc.n	404dd6 <memcpy+0xe2>
  404dd2:	880b      	ldrh	r3, [r1, #0]
  404dd4:	8003      	strh	r3, [r0, #0]
  404dd6:	4660      	mov	r0, ip
  404dd8:	4770      	bx	lr
  404dda:	bf00      	nop
  404ddc:	2a08      	cmp	r2, #8
  404dde:	d313      	bcc.n	404e08 <memcpy+0x114>
  404de0:	078b      	lsls	r3, r1, #30
  404de2:	d08d      	beq.n	404d00 <memcpy+0xc>
  404de4:	f010 0303 	ands.w	r3, r0, #3
  404de8:	d08a      	beq.n	404d00 <memcpy+0xc>
  404dea:	f1c3 0304 	rsb	r3, r3, #4
  404dee:	1ad2      	subs	r2, r2, r3
  404df0:	07db      	lsls	r3, r3, #31
  404df2:	bf1c      	itt	ne
  404df4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404df8:	f800 3b01 	strbne.w	r3, [r0], #1
  404dfc:	d380      	bcc.n	404d00 <memcpy+0xc>
  404dfe:	f831 3b02 	ldrh.w	r3, [r1], #2
  404e02:	f820 3b02 	strh.w	r3, [r0], #2
  404e06:	e77b      	b.n	404d00 <memcpy+0xc>
  404e08:	3a04      	subs	r2, #4
  404e0a:	d3d9      	bcc.n	404dc0 <memcpy+0xcc>
  404e0c:	3a01      	subs	r2, #1
  404e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
  404e12:	f800 3b01 	strb.w	r3, [r0], #1
  404e16:	d2f9      	bcs.n	404e0c <memcpy+0x118>
  404e18:	780b      	ldrb	r3, [r1, #0]
  404e1a:	7003      	strb	r3, [r0, #0]
  404e1c:	784b      	ldrb	r3, [r1, #1]
  404e1e:	7043      	strb	r3, [r0, #1]
  404e20:	788b      	ldrb	r3, [r1, #2]
  404e22:	7083      	strb	r3, [r0, #2]
  404e24:	4660      	mov	r0, ip
  404e26:	4770      	bx	lr

00404e28 <memset>:
  404e28:	b470      	push	{r4, r5, r6}
  404e2a:	0786      	lsls	r6, r0, #30
  404e2c:	d046      	beq.n	404ebc <memset+0x94>
  404e2e:	1e54      	subs	r4, r2, #1
  404e30:	2a00      	cmp	r2, #0
  404e32:	d041      	beq.n	404eb8 <memset+0x90>
  404e34:	b2ca      	uxtb	r2, r1
  404e36:	4603      	mov	r3, r0
  404e38:	e002      	b.n	404e40 <memset+0x18>
  404e3a:	f114 34ff 	adds.w	r4, r4, #4294967295
  404e3e:	d33b      	bcc.n	404eb8 <memset+0x90>
  404e40:	f803 2b01 	strb.w	r2, [r3], #1
  404e44:	079d      	lsls	r5, r3, #30
  404e46:	d1f8      	bne.n	404e3a <memset+0x12>
  404e48:	2c03      	cmp	r4, #3
  404e4a:	d92e      	bls.n	404eaa <memset+0x82>
  404e4c:	b2cd      	uxtb	r5, r1
  404e4e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404e52:	2c0f      	cmp	r4, #15
  404e54:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404e58:	d919      	bls.n	404e8e <memset+0x66>
  404e5a:	f103 0210 	add.w	r2, r3, #16
  404e5e:	4626      	mov	r6, r4
  404e60:	3e10      	subs	r6, #16
  404e62:	2e0f      	cmp	r6, #15
  404e64:	f842 5c10 	str.w	r5, [r2, #-16]
  404e68:	f842 5c0c 	str.w	r5, [r2, #-12]
  404e6c:	f842 5c08 	str.w	r5, [r2, #-8]
  404e70:	f842 5c04 	str.w	r5, [r2, #-4]
  404e74:	f102 0210 	add.w	r2, r2, #16
  404e78:	d8f2      	bhi.n	404e60 <memset+0x38>
  404e7a:	f1a4 0210 	sub.w	r2, r4, #16
  404e7e:	f022 020f 	bic.w	r2, r2, #15
  404e82:	f004 040f 	and.w	r4, r4, #15
  404e86:	3210      	adds	r2, #16
  404e88:	2c03      	cmp	r4, #3
  404e8a:	4413      	add	r3, r2
  404e8c:	d90d      	bls.n	404eaa <memset+0x82>
  404e8e:	461e      	mov	r6, r3
  404e90:	4622      	mov	r2, r4
  404e92:	3a04      	subs	r2, #4
  404e94:	2a03      	cmp	r2, #3
  404e96:	f846 5b04 	str.w	r5, [r6], #4
  404e9a:	d8fa      	bhi.n	404e92 <memset+0x6a>
  404e9c:	1f22      	subs	r2, r4, #4
  404e9e:	f022 0203 	bic.w	r2, r2, #3
  404ea2:	3204      	adds	r2, #4
  404ea4:	4413      	add	r3, r2
  404ea6:	f004 0403 	and.w	r4, r4, #3
  404eaa:	b12c      	cbz	r4, 404eb8 <memset+0x90>
  404eac:	b2c9      	uxtb	r1, r1
  404eae:	441c      	add	r4, r3
  404eb0:	f803 1b01 	strb.w	r1, [r3], #1
  404eb4:	429c      	cmp	r4, r3
  404eb6:	d1fb      	bne.n	404eb0 <memset+0x88>
  404eb8:	bc70      	pop	{r4, r5, r6}
  404eba:	4770      	bx	lr
  404ebc:	4614      	mov	r4, r2
  404ebe:	4603      	mov	r3, r0
  404ec0:	e7c2      	b.n	404e48 <memset+0x20>
  404ec2:	bf00      	nop

00404ec4 <__malloc_lock>:
  404ec4:	4801      	ldr	r0, [pc, #4]	; (404ecc <__malloc_lock+0x8>)
  404ec6:	f001 bd5f 	b.w	406988 <__retarget_lock_acquire_recursive>
  404eca:	bf00      	nop
  404ecc:	20400eec 	.word	0x20400eec

00404ed0 <__malloc_unlock>:
  404ed0:	4801      	ldr	r0, [pc, #4]	; (404ed8 <__malloc_unlock+0x8>)
  404ed2:	f001 bd5b 	b.w	40698c <__retarget_lock_release_recursive>
  404ed6:	bf00      	nop
  404ed8:	20400eec 	.word	0x20400eec

00404edc <_sbrk_r>:
  404edc:	b538      	push	{r3, r4, r5, lr}
  404ede:	4c07      	ldr	r4, [pc, #28]	; (404efc <_sbrk_r+0x20>)
  404ee0:	2300      	movs	r3, #0
  404ee2:	4605      	mov	r5, r0
  404ee4:	4608      	mov	r0, r1
  404ee6:	6023      	str	r3, [r4, #0]
  404ee8:	f7fd fb38 	bl	40255c <_sbrk>
  404eec:	1c43      	adds	r3, r0, #1
  404eee:	d000      	beq.n	404ef2 <_sbrk_r+0x16>
  404ef0:	bd38      	pop	{r3, r4, r5, pc}
  404ef2:	6823      	ldr	r3, [r4, #0]
  404ef4:	2b00      	cmp	r3, #0
  404ef6:	d0fb      	beq.n	404ef0 <_sbrk_r+0x14>
  404ef8:	602b      	str	r3, [r5, #0]
  404efa:	bd38      	pop	{r3, r4, r5, pc}
  404efc:	20400f00 	.word	0x20400f00

00404f00 <setbuf>:
  404f00:	2900      	cmp	r1, #0
  404f02:	bf0c      	ite	eq
  404f04:	2202      	moveq	r2, #2
  404f06:	2200      	movne	r2, #0
  404f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404f0c:	f000 b800 	b.w	404f10 <setvbuf>

00404f10 <setvbuf>:
  404f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404f14:	4c61      	ldr	r4, [pc, #388]	; (40509c <setvbuf+0x18c>)
  404f16:	6825      	ldr	r5, [r4, #0]
  404f18:	b083      	sub	sp, #12
  404f1a:	4604      	mov	r4, r0
  404f1c:	460f      	mov	r7, r1
  404f1e:	4690      	mov	r8, r2
  404f20:	461e      	mov	r6, r3
  404f22:	b115      	cbz	r5, 404f2a <setvbuf+0x1a>
  404f24:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404f26:	2b00      	cmp	r3, #0
  404f28:	d064      	beq.n	404ff4 <setvbuf+0xe4>
  404f2a:	f1b8 0f02 	cmp.w	r8, #2
  404f2e:	d006      	beq.n	404f3e <setvbuf+0x2e>
  404f30:	f1b8 0f01 	cmp.w	r8, #1
  404f34:	f200 809f 	bhi.w	405076 <setvbuf+0x166>
  404f38:	2e00      	cmp	r6, #0
  404f3a:	f2c0 809c 	blt.w	405076 <setvbuf+0x166>
  404f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404f40:	07d8      	lsls	r0, r3, #31
  404f42:	d534      	bpl.n	404fae <setvbuf+0x9e>
  404f44:	4621      	mov	r1, r4
  404f46:	4628      	mov	r0, r5
  404f48:	f001 f906 	bl	406158 <_fflush_r>
  404f4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404f4e:	b141      	cbz	r1, 404f62 <setvbuf+0x52>
  404f50:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404f54:	4299      	cmp	r1, r3
  404f56:	d002      	beq.n	404f5e <setvbuf+0x4e>
  404f58:	4628      	mov	r0, r5
  404f5a:	f001 fa7b 	bl	406454 <_free_r>
  404f5e:	2300      	movs	r3, #0
  404f60:	6323      	str	r3, [r4, #48]	; 0x30
  404f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f66:	2200      	movs	r2, #0
  404f68:	61a2      	str	r2, [r4, #24]
  404f6a:	6062      	str	r2, [r4, #4]
  404f6c:	061a      	lsls	r2, r3, #24
  404f6e:	d43a      	bmi.n	404fe6 <setvbuf+0xd6>
  404f70:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404f74:	f023 0303 	bic.w	r3, r3, #3
  404f78:	f1b8 0f02 	cmp.w	r8, #2
  404f7c:	81a3      	strh	r3, [r4, #12]
  404f7e:	d01d      	beq.n	404fbc <setvbuf+0xac>
  404f80:	ab01      	add	r3, sp, #4
  404f82:	466a      	mov	r2, sp
  404f84:	4621      	mov	r1, r4
  404f86:	4628      	mov	r0, r5
  404f88:	f001 fd02 	bl	406990 <__swhatbuf_r>
  404f8c:	89a3      	ldrh	r3, [r4, #12]
  404f8e:	4318      	orrs	r0, r3
  404f90:	81a0      	strh	r0, [r4, #12]
  404f92:	2e00      	cmp	r6, #0
  404f94:	d132      	bne.n	404ffc <setvbuf+0xec>
  404f96:	9e00      	ldr	r6, [sp, #0]
  404f98:	4630      	mov	r0, r6
  404f9a:	f7ff fbeb 	bl	404774 <malloc>
  404f9e:	4607      	mov	r7, r0
  404fa0:	2800      	cmp	r0, #0
  404fa2:	d06b      	beq.n	40507c <setvbuf+0x16c>
  404fa4:	89a3      	ldrh	r3, [r4, #12]
  404fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404faa:	81a3      	strh	r3, [r4, #12]
  404fac:	e028      	b.n	405000 <setvbuf+0xf0>
  404fae:	89a3      	ldrh	r3, [r4, #12]
  404fb0:	0599      	lsls	r1, r3, #22
  404fb2:	d4c7      	bmi.n	404f44 <setvbuf+0x34>
  404fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404fb6:	f001 fce7 	bl	406988 <__retarget_lock_acquire_recursive>
  404fba:	e7c3      	b.n	404f44 <setvbuf+0x34>
  404fbc:	2500      	movs	r5, #0
  404fbe:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404fc0:	2600      	movs	r6, #0
  404fc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404fc6:	f043 0302 	orr.w	r3, r3, #2
  404fca:	2001      	movs	r0, #1
  404fcc:	60a6      	str	r6, [r4, #8]
  404fce:	07ce      	lsls	r6, r1, #31
  404fd0:	81a3      	strh	r3, [r4, #12]
  404fd2:	6022      	str	r2, [r4, #0]
  404fd4:	6122      	str	r2, [r4, #16]
  404fd6:	6160      	str	r0, [r4, #20]
  404fd8:	d401      	bmi.n	404fde <setvbuf+0xce>
  404fda:	0598      	lsls	r0, r3, #22
  404fdc:	d53e      	bpl.n	40505c <setvbuf+0x14c>
  404fde:	4628      	mov	r0, r5
  404fe0:	b003      	add	sp, #12
  404fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404fe6:	6921      	ldr	r1, [r4, #16]
  404fe8:	4628      	mov	r0, r5
  404fea:	f001 fa33 	bl	406454 <_free_r>
  404fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404ff2:	e7bd      	b.n	404f70 <setvbuf+0x60>
  404ff4:	4628      	mov	r0, r5
  404ff6:	f001 f907 	bl	406208 <__sinit>
  404ffa:	e796      	b.n	404f2a <setvbuf+0x1a>
  404ffc:	2f00      	cmp	r7, #0
  404ffe:	d0cb      	beq.n	404f98 <setvbuf+0x88>
  405000:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405002:	2b00      	cmp	r3, #0
  405004:	d033      	beq.n	40506e <setvbuf+0x15e>
  405006:	9b00      	ldr	r3, [sp, #0]
  405008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40500c:	6027      	str	r7, [r4, #0]
  40500e:	429e      	cmp	r6, r3
  405010:	bf1c      	itt	ne
  405012:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  405016:	81a2      	strhne	r2, [r4, #12]
  405018:	f1b8 0f01 	cmp.w	r8, #1
  40501c:	bf04      	itt	eq
  40501e:	f042 0201 	orreq.w	r2, r2, #1
  405022:	81a2      	strheq	r2, [r4, #12]
  405024:	b292      	uxth	r2, r2
  405026:	f012 0308 	ands.w	r3, r2, #8
  40502a:	6127      	str	r7, [r4, #16]
  40502c:	6166      	str	r6, [r4, #20]
  40502e:	d00e      	beq.n	40504e <setvbuf+0x13e>
  405030:	07d1      	lsls	r1, r2, #31
  405032:	d51a      	bpl.n	40506a <setvbuf+0x15a>
  405034:	6e65      	ldr	r5, [r4, #100]	; 0x64
  405036:	4276      	negs	r6, r6
  405038:	2300      	movs	r3, #0
  40503a:	f015 0501 	ands.w	r5, r5, #1
  40503e:	61a6      	str	r6, [r4, #24]
  405040:	60a3      	str	r3, [r4, #8]
  405042:	d009      	beq.n	405058 <setvbuf+0x148>
  405044:	2500      	movs	r5, #0
  405046:	4628      	mov	r0, r5
  405048:	b003      	add	sp, #12
  40504a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40504e:	60a3      	str	r3, [r4, #8]
  405050:	6e65      	ldr	r5, [r4, #100]	; 0x64
  405052:	f015 0501 	ands.w	r5, r5, #1
  405056:	d1f5      	bne.n	405044 <setvbuf+0x134>
  405058:	0593      	lsls	r3, r2, #22
  40505a:	d4c0      	bmi.n	404fde <setvbuf+0xce>
  40505c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40505e:	f001 fc95 	bl	40698c <__retarget_lock_release_recursive>
  405062:	4628      	mov	r0, r5
  405064:	b003      	add	sp, #12
  405066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40506a:	60a6      	str	r6, [r4, #8]
  40506c:	e7f0      	b.n	405050 <setvbuf+0x140>
  40506e:	4628      	mov	r0, r5
  405070:	f001 f8ca 	bl	406208 <__sinit>
  405074:	e7c7      	b.n	405006 <setvbuf+0xf6>
  405076:	f04f 35ff 	mov.w	r5, #4294967295
  40507a:	e7b0      	b.n	404fde <setvbuf+0xce>
  40507c:	f8dd 9000 	ldr.w	r9, [sp]
  405080:	45b1      	cmp	r9, r6
  405082:	d004      	beq.n	40508e <setvbuf+0x17e>
  405084:	4648      	mov	r0, r9
  405086:	f7ff fb75 	bl	404774 <malloc>
  40508a:	4607      	mov	r7, r0
  40508c:	b920      	cbnz	r0, 405098 <setvbuf+0x188>
  40508e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405092:	f04f 35ff 	mov.w	r5, #4294967295
  405096:	e792      	b.n	404fbe <setvbuf+0xae>
  405098:	464e      	mov	r6, r9
  40509a:	e783      	b.n	404fa4 <setvbuf+0x94>
  40509c:	20400024 	.word	0x20400024
	...

004050c0 <strlen>:
  4050c0:	f890 f000 	pld	[r0]
  4050c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4050c8:	f020 0107 	bic.w	r1, r0, #7
  4050cc:	f06f 0c00 	mvn.w	ip, #0
  4050d0:	f010 0407 	ands.w	r4, r0, #7
  4050d4:	f891 f020 	pld	[r1, #32]
  4050d8:	f040 8049 	bne.w	40516e <strlen+0xae>
  4050dc:	f04f 0400 	mov.w	r4, #0
  4050e0:	f06f 0007 	mvn.w	r0, #7
  4050e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4050e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4050ec:	f100 0008 	add.w	r0, r0, #8
  4050f0:	fa82 f24c 	uadd8	r2, r2, ip
  4050f4:	faa4 f28c 	sel	r2, r4, ip
  4050f8:	fa83 f34c 	uadd8	r3, r3, ip
  4050fc:	faa2 f38c 	sel	r3, r2, ip
  405100:	bb4b      	cbnz	r3, 405156 <strlen+0x96>
  405102:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405106:	fa82 f24c 	uadd8	r2, r2, ip
  40510a:	f100 0008 	add.w	r0, r0, #8
  40510e:	faa4 f28c 	sel	r2, r4, ip
  405112:	fa83 f34c 	uadd8	r3, r3, ip
  405116:	faa2 f38c 	sel	r3, r2, ip
  40511a:	b9e3      	cbnz	r3, 405156 <strlen+0x96>
  40511c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405120:	fa82 f24c 	uadd8	r2, r2, ip
  405124:	f100 0008 	add.w	r0, r0, #8
  405128:	faa4 f28c 	sel	r2, r4, ip
  40512c:	fa83 f34c 	uadd8	r3, r3, ip
  405130:	faa2 f38c 	sel	r3, r2, ip
  405134:	b97b      	cbnz	r3, 405156 <strlen+0x96>
  405136:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40513a:	f101 0120 	add.w	r1, r1, #32
  40513e:	fa82 f24c 	uadd8	r2, r2, ip
  405142:	f100 0008 	add.w	r0, r0, #8
  405146:	faa4 f28c 	sel	r2, r4, ip
  40514a:	fa83 f34c 	uadd8	r3, r3, ip
  40514e:	faa2 f38c 	sel	r3, r2, ip
  405152:	2b00      	cmp	r3, #0
  405154:	d0c6      	beq.n	4050e4 <strlen+0x24>
  405156:	2a00      	cmp	r2, #0
  405158:	bf04      	itt	eq
  40515a:	3004      	addeq	r0, #4
  40515c:	461a      	moveq	r2, r3
  40515e:	ba12      	rev	r2, r2
  405160:	fab2 f282 	clz	r2, r2
  405164:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405168:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40516c:	4770      	bx	lr
  40516e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405172:	f004 0503 	and.w	r5, r4, #3
  405176:	f1c4 0000 	rsb	r0, r4, #0
  40517a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40517e:	f014 0f04 	tst.w	r4, #4
  405182:	f891 f040 	pld	[r1, #64]	; 0x40
  405186:	fa0c f505 	lsl.w	r5, ip, r5
  40518a:	ea62 0205 	orn	r2, r2, r5
  40518e:	bf1c      	itt	ne
  405190:	ea63 0305 	ornne	r3, r3, r5
  405194:	4662      	movne	r2, ip
  405196:	f04f 0400 	mov.w	r4, #0
  40519a:	e7a9      	b.n	4050f0 <strlen+0x30>

0040519c <__sprint_r.part.0>:
  40519c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4051a2:	049c      	lsls	r4, r3, #18
  4051a4:	4693      	mov	fp, r2
  4051a6:	d52f      	bpl.n	405208 <__sprint_r.part.0+0x6c>
  4051a8:	6893      	ldr	r3, [r2, #8]
  4051aa:	6812      	ldr	r2, [r2, #0]
  4051ac:	b353      	cbz	r3, 405204 <__sprint_r.part.0+0x68>
  4051ae:	460e      	mov	r6, r1
  4051b0:	4607      	mov	r7, r0
  4051b2:	f102 0908 	add.w	r9, r2, #8
  4051b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4051ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4051be:	d017      	beq.n	4051f0 <__sprint_r.part.0+0x54>
  4051c0:	3d04      	subs	r5, #4
  4051c2:	2400      	movs	r4, #0
  4051c4:	e001      	b.n	4051ca <__sprint_r.part.0+0x2e>
  4051c6:	45a0      	cmp	r8, r4
  4051c8:	d010      	beq.n	4051ec <__sprint_r.part.0+0x50>
  4051ca:	4632      	mov	r2, r6
  4051cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4051d0:	4638      	mov	r0, r7
  4051d2:	f001 f8bb 	bl	40634c <_fputwc_r>
  4051d6:	1c43      	adds	r3, r0, #1
  4051d8:	f104 0401 	add.w	r4, r4, #1
  4051dc:	d1f3      	bne.n	4051c6 <__sprint_r.part.0+0x2a>
  4051de:	2300      	movs	r3, #0
  4051e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4051e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4051e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4051f0:	f02a 0a03 	bic.w	sl, sl, #3
  4051f4:	eba3 030a 	sub.w	r3, r3, sl
  4051f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4051fc:	f109 0908 	add.w	r9, r9, #8
  405200:	2b00      	cmp	r3, #0
  405202:	d1d8      	bne.n	4051b6 <__sprint_r.part.0+0x1a>
  405204:	2000      	movs	r0, #0
  405206:	e7ea      	b.n	4051de <__sprint_r.part.0+0x42>
  405208:	f001 fa0a 	bl	406620 <__sfvwrite_r>
  40520c:	2300      	movs	r3, #0
  40520e:	f8cb 3008 	str.w	r3, [fp, #8]
  405212:	f8cb 3004 	str.w	r3, [fp, #4]
  405216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40521a:	bf00      	nop

0040521c <_vfiprintf_r>:
  40521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405220:	b0ad      	sub	sp, #180	; 0xb4
  405222:	461d      	mov	r5, r3
  405224:	468b      	mov	fp, r1
  405226:	4690      	mov	r8, r2
  405228:	9307      	str	r3, [sp, #28]
  40522a:	9006      	str	r0, [sp, #24]
  40522c:	b118      	cbz	r0, 405236 <_vfiprintf_r+0x1a>
  40522e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405230:	2b00      	cmp	r3, #0
  405232:	f000 80f3 	beq.w	40541c <_vfiprintf_r+0x200>
  405236:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40523a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40523e:	07df      	lsls	r7, r3, #31
  405240:	b281      	uxth	r1, r0
  405242:	d402      	bmi.n	40524a <_vfiprintf_r+0x2e>
  405244:	058e      	lsls	r6, r1, #22
  405246:	f140 80fc 	bpl.w	405442 <_vfiprintf_r+0x226>
  40524a:	048c      	lsls	r4, r1, #18
  40524c:	d40a      	bmi.n	405264 <_vfiprintf_r+0x48>
  40524e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405252:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40525a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40525e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  405262:	b289      	uxth	r1, r1
  405264:	0708      	lsls	r0, r1, #28
  405266:	f140 80b3 	bpl.w	4053d0 <_vfiprintf_r+0x1b4>
  40526a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40526e:	2b00      	cmp	r3, #0
  405270:	f000 80ae 	beq.w	4053d0 <_vfiprintf_r+0x1b4>
  405274:	f001 031a 	and.w	r3, r1, #26
  405278:	2b0a      	cmp	r3, #10
  40527a:	f000 80b5 	beq.w	4053e8 <_vfiprintf_r+0x1cc>
  40527e:	2300      	movs	r3, #0
  405280:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405284:	930b      	str	r3, [sp, #44]	; 0x2c
  405286:	9311      	str	r3, [sp, #68]	; 0x44
  405288:	9310      	str	r3, [sp, #64]	; 0x40
  40528a:	9303      	str	r3, [sp, #12]
  40528c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405290:	46ca      	mov	sl, r9
  405292:	f8cd b010 	str.w	fp, [sp, #16]
  405296:	f898 3000 	ldrb.w	r3, [r8]
  40529a:	4644      	mov	r4, r8
  40529c:	b1fb      	cbz	r3, 4052de <_vfiprintf_r+0xc2>
  40529e:	2b25      	cmp	r3, #37	; 0x25
  4052a0:	d102      	bne.n	4052a8 <_vfiprintf_r+0x8c>
  4052a2:	e01c      	b.n	4052de <_vfiprintf_r+0xc2>
  4052a4:	2b25      	cmp	r3, #37	; 0x25
  4052a6:	d003      	beq.n	4052b0 <_vfiprintf_r+0x94>
  4052a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4052ac:	2b00      	cmp	r3, #0
  4052ae:	d1f9      	bne.n	4052a4 <_vfiprintf_r+0x88>
  4052b0:	eba4 0508 	sub.w	r5, r4, r8
  4052b4:	b19d      	cbz	r5, 4052de <_vfiprintf_r+0xc2>
  4052b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4052b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052ba:	f8ca 8000 	str.w	r8, [sl]
  4052be:	3301      	adds	r3, #1
  4052c0:	442a      	add	r2, r5
  4052c2:	2b07      	cmp	r3, #7
  4052c4:	f8ca 5004 	str.w	r5, [sl, #4]
  4052c8:	9211      	str	r2, [sp, #68]	; 0x44
  4052ca:	9310      	str	r3, [sp, #64]	; 0x40
  4052cc:	dd7a      	ble.n	4053c4 <_vfiprintf_r+0x1a8>
  4052ce:	2a00      	cmp	r2, #0
  4052d0:	f040 84b0 	bne.w	405c34 <_vfiprintf_r+0xa18>
  4052d4:	9b03      	ldr	r3, [sp, #12]
  4052d6:	9210      	str	r2, [sp, #64]	; 0x40
  4052d8:	442b      	add	r3, r5
  4052da:	46ca      	mov	sl, r9
  4052dc:	9303      	str	r3, [sp, #12]
  4052de:	7823      	ldrb	r3, [r4, #0]
  4052e0:	2b00      	cmp	r3, #0
  4052e2:	f000 83e0 	beq.w	405aa6 <_vfiprintf_r+0x88a>
  4052e6:	2000      	movs	r0, #0
  4052e8:	f04f 0300 	mov.w	r3, #0
  4052ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4052f0:	f104 0801 	add.w	r8, r4, #1
  4052f4:	7862      	ldrb	r2, [r4, #1]
  4052f6:	4605      	mov	r5, r0
  4052f8:	4606      	mov	r6, r0
  4052fa:	4603      	mov	r3, r0
  4052fc:	f04f 34ff 	mov.w	r4, #4294967295
  405300:	f108 0801 	add.w	r8, r8, #1
  405304:	f1a2 0120 	sub.w	r1, r2, #32
  405308:	2958      	cmp	r1, #88	; 0x58
  40530a:	f200 82de 	bhi.w	4058ca <_vfiprintf_r+0x6ae>
  40530e:	e8df f011 	tbh	[pc, r1, lsl #1]
  405312:	0221      	.short	0x0221
  405314:	02dc02dc 	.word	0x02dc02dc
  405318:	02dc0229 	.word	0x02dc0229
  40531c:	02dc02dc 	.word	0x02dc02dc
  405320:	02dc02dc 	.word	0x02dc02dc
  405324:	028902dc 	.word	0x028902dc
  405328:	02dc0295 	.word	0x02dc0295
  40532c:	02bd00a2 	.word	0x02bd00a2
  405330:	019f02dc 	.word	0x019f02dc
  405334:	01a401a4 	.word	0x01a401a4
  405338:	01a401a4 	.word	0x01a401a4
  40533c:	01a401a4 	.word	0x01a401a4
  405340:	01a401a4 	.word	0x01a401a4
  405344:	02dc01a4 	.word	0x02dc01a4
  405348:	02dc02dc 	.word	0x02dc02dc
  40534c:	02dc02dc 	.word	0x02dc02dc
  405350:	02dc02dc 	.word	0x02dc02dc
  405354:	02dc02dc 	.word	0x02dc02dc
  405358:	01b202dc 	.word	0x01b202dc
  40535c:	02dc02dc 	.word	0x02dc02dc
  405360:	02dc02dc 	.word	0x02dc02dc
  405364:	02dc02dc 	.word	0x02dc02dc
  405368:	02dc02dc 	.word	0x02dc02dc
  40536c:	02dc02dc 	.word	0x02dc02dc
  405370:	02dc0197 	.word	0x02dc0197
  405374:	02dc02dc 	.word	0x02dc02dc
  405378:	02dc02dc 	.word	0x02dc02dc
  40537c:	02dc019b 	.word	0x02dc019b
  405380:	025302dc 	.word	0x025302dc
  405384:	02dc02dc 	.word	0x02dc02dc
  405388:	02dc02dc 	.word	0x02dc02dc
  40538c:	02dc02dc 	.word	0x02dc02dc
  405390:	02dc02dc 	.word	0x02dc02dc
  405394:	02dc02dc 	.word	0x02dc02dc
  405398:	021b025a 	.word	0x021b025a
  40539c:	02dc02dc 	.word	0x02dc02dc
  4053a0:	026e02dc 	.word	0x026e02dc
  4053a4:	02dc021b 	.word	0x02dc021b
  4053a8:	027302dc 	.word	0x027302dc
  4053ac:	01f502dc 	.word	0x01f502dc
  4053b0:	02090182 	.word	0x02090182
  4053b4:	02dc02d7 	.word	0x02dc02d7
  4053b8:	02dc029a 	.word	0x02dc029a
  4053bc:	02dc00a7 	.word	0x02dc00a7
  4053c0:	022e02dc 	.word	0x022e02dc
  4053c4:	f10a 0a08 	add.w	sl, sl, #8
  4053c8:	9b03      	ldr	r3, [sp, #12]
  4053ca:	442b      	add	r3, r5
  4053cc:	9303      	str	r3, [sp, #12]
  4053ce:	e786      	b.n	4052de <_vfiprintf_r+0xc2>
  4053d0:	4659      	mov	r1, fp
  4053d2:	9806      	ldr	r0, [sp, #24]
  4053d4:	f000 fdac 	bl	405f30 <__swsetup_r>
  4053d8:	bb18      	cbnz	r0, 405422 <_vfiprintf_r+0x206>
  4053da:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4053de:	f001 031a 	and.w	r3, r1, #26
  4053e2:	2b0a      	cmp	r3, #10
  4053e4:	f47f af4b 	bne.w	40527e <_vfiprintf_r+0x62>
  4053e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4053ec:	2b00      	cmp	r3, #0
  4053ee:	f6ff af46 	blt.w	40527e <_vfiprintf_r+0x62>
  4053f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4053f6:	07db      	lsls	r3, r3, #31
  4053f8:	d405      	bmi.n	405406 <_vfiprintf_r+0x1ea>
  4053fa:	058f      	lsls	r7, r1, #22
  4053fc:	d403      	bmi.n	405406 <_vfiprintf_r+0x1ea>
  4053fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405402:	f001 fac3 	bl	40698c <__retarget_lock_release_recursive>
  405406:	462b      	mov	r3, r5
  405408:	4642      	mov	r2, r8
  40540a:	4659      	mov	r1, fp
  40540c:	9806      	ldr	r0, [sp, #24]
  40540e:	f000 fd4d 	bl	405eac <__sbprintf>
  405412:	9003      	str	r0, [sp, #12]
  405414:	9803      	ldr	r0, [sp, #12]
  405416:	b02d      	add	sp, #180	; 0xb4
  405418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40541c:	f000 fef4 	bl	406208 <__sinit>
  405420:	e709      	b.n	405236 <_vfiprintf_r+0x1a>
  405422:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405426:	07d9      	lsls	r1, r3, #31
  405428:	d404      	bmi.n	405434 <_vfiprintf_r+0x218>
  40542a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40542e:	059a      	lsls	r2, r3, #22
  405430:	f140 84aa 	bpl.w	405d88 <_vfiprintf_r+0xb6c>
  405434:	f04f 33ff 	mov.w	r3, #4294967295
  405438:	9303      	str	r3, [sp, #12]
  40543a:	9803      	ldr	r0, [sp, #12]
  40543c:	b02d      	add	sp, #180	; 0xb4
  40543e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405442:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405446:	f001 fa9f 	bl	406988 <__retarget_lock_acquire_recursive>
  40544a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40544e:	b281      	uxth	r1, r0
  405450:	e6fb      	b.n	40524a <_vfiprintf_r+0x2e>
  405452:	4276      	negs	r6, r6
  405454:	9207      	str	r2, [sp, #28]
  405456:	f043 0304 	orr.w	r3, r3, #4
  40545a:	f898 2000 	ldrb.w	r2, [r8]
  40545e:	e74f      	b.n	405300 <_vfiprintf_r+0xe4>
  405460:	9608      	str	r6, [sp, #32]
  405462:	069e      	lsls	r6, r3, #26
  405464:	f100 8450 	bmi.w	405d08 <_vfiprintf_r+0xaec>
  405468:	9907      	ldr	r1, [sp, #28]
  40546a:	06dd      	lsls	r5, r3, #27
  40546c:	460a      	mov	r2, r1
  40546e:	f100 83ef 	bmi.w	405c50 <_vfiprintf_r+0xa34>
  405472:	0658      	lsls	r0, r3, #25
  405474:	f140 83ec 	bpl.w	405c50 <_vfiprintf_r+0xa34>
  405478:	880e      	ldrh	r6, [r1, #0]
  40547a:	3104      	adds	r1, #4
  40547c:	2700      	movs	r7, #0
  40547e:	2201      	movs	r2, #1
  405480:	9107      	str	r1, [sp, #28]
  405482:	f04f 0100 	mov.w	r1, #0
  405486:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40548a:	2500      	movs	r5, #0
  40548c:	1c61      	adds	r1, r4, #1
  40548e:	f000 8116 	beq.w	4056be <_vfiprintf_r+0x4a2>
  405492:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405496:	9102      	str	r1, [sp, #8]
  405498:	ea56 0107 	orrs.w	r1, r6, r7
  40549c:	f040 8114 	bne.w	4056c8 <_vfiprintf_r+0x4ac>
  4054a0:	2c00      	cmp	r4, #0
  4054a2:	f040 835c 	bne.w	405b5e <_vfiprintf_r+0x942>
  4054a6:	2a00      	cmp	r2, #0
  4054a8:	f040 83b7 	bne.w	405c1a <_vfiprintf_r+0x9fe>
  4054ac:	f013 0301 	ands.w	r3, r3, #1
  4054b0:	9305      	str	r3, [sp, #20]
  4054b2:	f000 8457 	beq.w	405d64 <_vfiprintf_r+0xb48>
  4054b6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4054ba:	2330      	movs	r3, #48	; 0x30
  4054bc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4054c0:	9b05      	ldr	r3, [sp, #20]
  4054c2:	42a3      	cmp	r3, r4
  4054c4:	bfb8      	it	lt
  4054c6:	4623      	movlt	r3, r4
  4054c8:	9301      	str	r3, [sp, #4]
  4054ca:	b10d      	cbz	r5, 4054d0 <_vfiprintf_r+0x2b4>
  4054cc:	3301      	adds	r3, #1
  4054ce:	9301      	str	r3, [sp, #4]
  4054d0:	9b02      	ldr	r3, [sp, #8]
  4054d2:	f013 0302 	ands.w	r3, r3, #2
  4054d6:	9309      	str	r3, [sp, #36]	; 0x24
  4054d8:	d002      	beq.n	4054e0 <_vfiprintf_r+0x2c4>
  4054da:	9b01      	ldr	r3, [sp, #4]
  4054dc:	3302      	adds	r3, #2
  4054de:	9301      	str	r3, [sp, #4]
  4054e0:	9b02      	ldr	r3, [sp, #8]
  4054e2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4054e6:	930a      	str	r3, [sp, #40]	; 0x28
  4054e8:	f040 8217 	bne.w	40591a <_vfiprintf_r+0x6fe>
  4054ec:	9b08      	ldr	r3, [sp, #32]
  4054ee:	9a01      	ldr	r2, [sp, #4]
  4054f0:	1a9d      	subs	r5, r3, r2
  4054f2:	2d00      	cmp	r5, #0
  4054f4:	f340 8211 	ble.w	40591a <_vfiprintf_r+0x6fe>
  4054f8:	2d10      	cmp	r5, #16
  4054fa:	f340 8490 	ble.w	405e1e <_vfiprintf_r+0xc02>
  4054fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405500:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405502:	4ec4      	ldr	r6, [pc, #784]	; (405814 <_vfiprintf_r+0x5f8>)
  405504:	46d6      	mov	lr, sl
  405506:	2710      	movs	r7, #16
  405508:	46a2      	mov	sl, r4
  40550a:	4619      	mov	r1, r3
  40550c:	9c06      	ldr	r4, [sp, #24]
  40550e:	e007      	b.n	405520 <_vfiprintf_r+0x304>
  405510:	f101 0c02 	add.w	ip, r1, #2
  405514:	f10e 0e08 	add.w	lr, lr, #8
  405518:	4601      	mov	r1, r0
  40551a:	3d10      	subs	r5, #16
  40551c:	2d10      	cmp	r5, #16
  40551e:	dd11      	ble.n	405544 <_vfiprintf_r+0x328>
  405520:	1c48      	adds	r0, r1, #1
  405522:	3210      	adds	r2, #16
  405524:	2807      	cmp	r0, #7
  405526:	9211      	str	r2, [sp, #68]	; 0x44
  405528:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40552c:	9010      	str	r0, [sp, #64]	; 0x40
  40552e:	ddef      	ble.n	405510 <_vfiprintf_r+0x2f4>
  405530:	2a00      	cmp	r2, #0
  405532:	f040 81e4 	bne.w	4058fe <_vfiprintf_r+0x6e2>
  405536:	3d10      	subs	r5, #16
  405538:	2d10      	cmp	r5, #16
  40553a:	4611      	mov	r1, r2
  40553c:	f04f 0c01 	mov.w	ip, #1
  405540:	46ce      	mov	lr, r9
  405542:	dced      	bgt.n	405520 <_vfiprintf_r+0x304>
  405544:	4654      	mov	r4, sl
  405546:	4661      	mov	r1, ip
  405548:	46f2      	mov	sl, lr
  40554a:	442a      	add	r2, r5
  40554c:	2907      	cmp	r1, #7
  40554e:	9211      	str	r2, [sp, #68]	; 0x44
  405550:	f8ca 6000 	str.w	r6, [sl]
  405554:	f8ca 5004 	str.w	r5, [sl, #4]
  405558:	9110      	str	r1, [sp, #64]	; 0x40
  40555a:	f300 82ec 	bgt.w	405b36 <_vfiprintf_r+0x91a>
  40555e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405562:	f10a 0a08 	add.w	sl, sl, #8
  405566:	1c48      	adds	r0, r1, #1
  405568:	2d00      	cmp	r5, #0
  40556a:	f040 81de 	bne.w	40592a <_vfiprintf_r+0x70e>
  40556e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405570:	2b00      	cmp	r3, #0
  405572:	f000 81f8 	beq.w	405966 <_vfiprintf_r+0x74a>
  405576:	3202      	adds	r2, #2
  405578:	a90e      	add	r1, sp, #56	; 0x38
  40557a:	2302      	movs	r3, #2
  40557c:	2807      	cmp	r0, #7
  40557e:	9211      	str	r2, [sp, #68]	; 0x44
  405580:	9010      	str	r0, [sp, #64]	; 0x40
  405582:	e88a 000a 	stmia.w	sl, {r1, r3}
  405586:	f340 81ea 	ble.w	40595e <_vfiprintf_r+0x742>
  40558a:	2a00      	cmp	r2, #0
  40558c:	f040 838c 	bne.w	405ca8 <_vfiprintf_r+0xa8c>
  405590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405592:	2b80      	cmp	r3, #128	; 0x80
  405594:	f04f 0001 	mov.w	r0, #1
  405598:	4611      	mov	r1, r2
  40559a:	46ca      	mov	sl, r9
  40559c:	f040 81e7 	bne.w	40596e <_vfiprintf_r+0x752>
  4055a0:	9b08      	ldr	r3, [sp, #32]
  4055a2:	9d01      	ldr	r5, [sp, #4]
  4055a4:	1b5e      	subs	r6, r3, r5
  4055a6:	2e00      	cmp	r6, #0
  4055a8:	f340 81e1 	ble.w	40596e <_vfiprintf_r+0x752>
  4055ac:	2e10      	cmp	r6, #16
  4055ae:	4d9a      	ldr	r5, [pc, #616]	; (405818 <_vfiprintf_r+0x5fc>)
  4055b0:	f340 8450 	ble.w	405e54 <_vfiprintf_r+0xc38>
  4055b4:	46d4      	mov	ip, sl
  4055b6:	2710      	movs	r7, #16
  4055b8:	46a2      	mov	sl, r4
  4055ba:	9c06      	ldr	r4, [sp, #24]
  4055bc:	e007      	b.n	4055ce <_vfiprintf_r+0x3b2>
  4055be:	f101 0e02 	add.w	lr, r1, #2
  4055c2:	f10c 0c08 	add.w	ip, ip, #8
  4055c6:	4601      	mov	r1, r0
  4055c8:	3e10      	subs	r6, #16
  4055ca:	2e10      	cmp	r6, #16
  4055cc:	dd11      	ble.n	4055f2 <_vfiprintf_r+0x3d6>
  4055ce:	1c48      	adds	r0, r1, #1
  4055d0:	3210      	adds	r2, #16
  4055d2:	2807      	cmp	r0, #7
  4055d4:	9211      	str	r2, [sp, #68]	; 0x44
  4055d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4055da:	9010      	str	r0, [sp, #64]	; 0x40
  4055dc:	ddef      	ble.n	4055be <_vfiprintf_r+0x3a2>
  4055de:	2a00      	cmp	r2, #0
  4055e0:	f040 829d 	bne.w	405b1e <_vfiprintf_r+0x902>
  4055e4:	3e10      	subs	r6, #16
  4055e6:	2e10      	cmp	r6, #16
  4055e8:	f04f 0e01 	mov.w	lr, #1
  4055ec:	4611      	mov	r1, r2
  4055ee:	46cc      	mov	ip, r9
  4055f0:	dced      	bgt.n	4055ce <_vfiprintf_r+0x3b2>
  4055f2:	4654      	mov	r4, sl
  4055f4:	46e2      	mov	sl, ip
  4055f6:	4432      	add	r2, r6
  4055f8:	f1be 0f07 	cmp.w	lr, #7
  4055fc:	9211      	str	r2, [sp, #68]	; 0x44
  4055fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  405602:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405606:	f300 8369 	bgt.w	405cdc <_vfiprintf_r+0xac0>
  40560a:	f10a 0a08 	add.w	sl, sl, #8
  40560e:	f10e 0001 	add.w	r0, lr, #1
  405612:	4671      	mov	r1, lr
  405614:	e1ab      	b.n	40596e <_vfiprintf_r+0x752>
  405616:	9608      	str	r6, [sp, #32]
  405618:	f013 0220 	ands.w	r2, r3, #32
  40561c:	f040 838c 	bne.w	405d38 <_vfiprintf_r+0xb1c>
  405620:	f013 0110 	ands.w	r1, r3, #16
  405624:	f040 831a 	bne.w	405c5c <_vfiprintf_r+0xa40>
  405628:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40562c:	f000 8316 	beq.w	405c5c <_vfiprintf_r+0xa40>
  405630:	9807      	ldr	r0, [sp, #28]
  405632:	460a      	mov	r2, r1
  405634:	4601      	mov	r1, r0
  405636:	3104      	adds	r1, #4
  405638:	8806      	ldrh	r6, [r0, #0]
  40563a:	9107      	str	r1, [sp, #28]
  40563c:	2700      	movs	r7, #0
  40563e:	e720      	b.n	405482 <_vfiprintf_r+0x266>
  405640:	9608      	str	r6, [sp, #32]
  405642:	f043 0310 	orr.w	r3, r3, #16
  405646:	e7e7      	b.n	405618 <_vfiprintf_r+0x3fc>
  405648:	9608      	str	r6, [sp, #32]
  40564a:	f043 0310 	orr.w	r3, r3, #16
  40564e:	e708      	b.n	405462 <_vfiprintf_r+0x246>
  405650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405654:	f898 2000 	ldrb.w	r2, [r8]
  405658:	e652      	b.n	405300 <_vfiprintf_r+0xe4>
  40565a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40565e:	2600      	movs	r6, #0
  405660:	f818 2b01 	ldrb.w	r2, [r8], #1
  405664:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405668:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40566c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405670:	2909      	cmp	r1, #9
  405672:	d9f5      	bls.n	405660 <_vfiprintf_r+0x444>
  405674:	e646      	b.n	405304 <_vfiprintf_r+0xe8>
  405676:	9608      	str	r6, [sp, #32]
  405678:	2800      	cmp	r0, #0
  40567a:	f040 8408 	bne.w	405e8e <_vfiprintf_r+0xc72>
  40567e:	f043 0310 	orr.w	r3, r3, #16
  405682:	069e      	lsls	r6, r3, #26
  405684:	f100 834c 	bmi.w	405d20 <_vfiprintf_r+0xb04>
  405688:	06dd      	lsls	r5, r3, #27
  40568a:	f100 82f3 	bmi.w	405c74 <_vfiprintf_r+0xa58>
  40568e:	0658      	lsls	r0, r3, #25
  405690:	f140 82f0 	bpl.w	405c74 <_vfiprintf_r+0xa58>
  405694:	9d07      	ldr	r5, [sp, #28]
  405696:	f9b5 6000 	ldrsh.w	r6, [r5]
  40569a:	462a      	mov	r2, r5
  40569c:	17f7      	asrs	r7, r6, #31
  40569e:	3204      	adds	r2, #4
  4056a0:	4630      	mov	r0, r6
  4056a2:	4639      	mov	r1, r7
  4056a4:	9207      	str	r2, [sp, #28]
  4056a6:	2800      	cmp	r0, #0
  4056a8:	f171 0200 	sbcs.w	r2, r1, #0
  4056ac:	f2c0 835d 	blt.w	405d6a <_vfiprintf_r+0xb4e>
  4056b0:	1c61      	adds	r1, r4, #1
  4056b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4056b6:	f04f 0201 	mov.w	r2, #1
  4056ba:	f47f aeea 	bne.w	405492 <_vfiprintf_r+0x276>
  4056be:	ea56 0107 	orrs.w	r1, r6, r7
  4056c2:	f000 824d 	beq.w	405b60 <_vfiprintf_r+0x944>
  4056c6:	9302      	str	r3, [sp, #8]
  4056c8:	2a01      	cmp	r2, #1
  4056ca:	f000 828c 	beq.w	405be6 <_vfiprintf_r+0x9ca>
  4056ce:	2a02      	cmp	r2, #2
  4056d0:	f040 825c 	bne.w	405b8c <_vfiprintf_r+0x970>
  4056d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4056d6:	46cb      	mov	fp, r9
  4056d8:	0933      	lsrs	r3, r6, #4
  4056da:	f006 010f 	and.w	r1, r6, #15
  4056de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4056e2:	093a      	lsrs	r2, r7, #4
  4056e4:	461e      	mov	r6, r3
  4056e6:	4617      	mov	r7, r2
  4056e8:	5c43      	ldrb	r3, [r0, r1]
  4056ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4056ee:	ea56 0307 	orrs.w	r3, r6, r7
  4056f2:	d1f1      	bne.n	4056d8 <_vfiprintf_r+0x4bc>
  4056f4:	eba9 030b 	sub.w	r3, r9, fp
  4056f8:	9305      	str	r3, [sp, #20]
  4056fa:	e6e1      	b.n	4054c0 <_vfiprintf_r+0x2a4>
  4056fc:	2800      	cmp	r0, #0
  4056fe:	f040 83c0 	bne.w	405e82 <_vfiprintf_r+0xc66>
  405702:	0699      	lsls	r1, r3, #26
  405704:	f100 8367 	bmi.w	405dd6 <_vfiprintf_r+0xbba>
  405708:	06da      	lsls	r2, r3, #27
  40570a:	f100 80f1 	bmi.w	4058f0 <_vfiprintf_r+0x6d4>
  40570e:	065b      	lsls	r3, r3, #25
  405710:	f140 80ee 	bpl.w	4058f0 <_vfiprintf_r+0x6d4>
  405714:	9a07      	ldr	r2, [sp, #28]
  405716:	6813      	ldr	r3, [r2, #0]
  405718:	3204      	adds	r2, #4
  40571a:	9207      	str	r2, [sp, #28]
  40571c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405720:	801a      	strh	r2, [r3, #0]
  405722:	e5b8      	b.n	405296 <_vfiprintf_r+0x7a>
  405724:	9807      	ldr	r0, [sp, #28]
  405726:	4a3d      	ldr	r2, [pc, #244]	; (40581c <_vfiprintf_r+0x600>)
  405728:	9608      	str	r6, [sp, #32]
  40572a:	920b      	str	r2, [sp, #44]	; 0x2c
  40572c:	6806      	ldr	r6, [r0, #0]
  40572e:	2278      	movs	r2, #120	; 0x78
  405730:	2130      	movs	r1, #48	; 0x30
  405732:	3004      	adds	r0, #4
  405734:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405738:	f043 0302 	orr.w	r3, r3, #2
  40573c:	9007      	str	r0, [sp, #28]
  40573e:	2700      	movs	r7, #0
  405740:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405744:	2202      	movs	r2, #2
  405746:	e69c      	b.n	405482 <_vfiprintf_r+0x266>
  405748:	9608      	str	r6, [sp, #32]
  40574a:	2800      	cmp	r0, #0
  40574c:	d099      	beq.n	405682 <_vfiprintf_r+0x466>
  40574e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405752:	e796      	b.n	405682 <_vfiprintf_r+0x466>
  405754:	f898 2000 	ldrb.w	r2, [r8]
  405758:	2d00      	cmp	r5, #0
  40575a:	f47f add1 	bne.w	405300 <_vfiprintf_r+0xe4>
  40575e:	2001      	movs	r0, #1
  405760:	2520      	movs	r5, #32
  405762:	e5cd      	b.n	405300 <_vfiprintf_r+0xe4>
  405764:	f043 0301 	orr.w	r3, r3, #1
  405768:	f898 2000 	ldrb.w	r2, [r8]
  40576c:	e5c8      	b.n	405300 <_vfiprintf_r+0xe4>
  40576e:	9608      	str	r6, [sp, #32]
  405770:	2800      	cmp	r0, #0
  405772:	f040 8393 	bne.w	405e9c <_vfiprintf_r+0xc80>
  405776:	4929      	ldr	r1, [pc, #164]	; (40581c <_vfiprintf_r+0x600>)
  405778:	910b      	str	r1, [sp, #44]	; 0x2c
  40577a:	069f      	lsls	r7, r3, #26
  40577c:	f100 82e8 	bmi.w	405d50 <_vfiprintf_r+0xb34>
  405780:	9807      	ldr	r0, [sp, #28]
  405782:	06de      	lsls	r6, r3, #27
  405784:	4601      	mov	r1, r0
  405786:	f100 8270 	bmi.w	405c6a <_vfiprintf_r+0xa4e>
  40578a:	065d      	lsls	r5, r3, #25
  40578c:	f140 826d 	bpl.w	405c6a <_vfiprintf_r+0xa4e>
  405790:	3104      	adds	r1, #4
  405792:	8806      	ldrh	r6, [r0, #0]
  405794:	9107      	str	r1, [sp, #28]
  405796:	2700      	movs	r7, #0
  405798:	07d8      	lsls	r0, r3, #31
  40579a:	f140 8222 	bpl.w	405be2 <_vfiprintf_r+0x9c6>
  40579e:	ea56 0107 	orrs.w	r1, r6, r7
  4057a2:	f000 821e 	beq.w	405be2 <_vfiprintf_r+0x9c6>
  4057a6:	2130      	movs	r1, #48	; 0x30
  4057a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4057ac:	f043 0302 	orr.w	r3, r3, #2
  4057b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4057b4:	2202      	movs	r2, #2
  4057b6:	e664      	b.n	405482 <_vfiprintf_r+0x266>
  4057b8:	9608      	str	r6, [sp, #32]
  4057ba:	2800      	cmp	r0, #0
  4057bc:	f040 836b 	bne.w	405e96 <_vfiprintf_r+0xc7a>
  4057c0:	4917      	ldr	r1, [pc, #92]	; (405820 <_vfiprintf_r+0x604>)
  4057c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4057c4:	e7d9      	b.n	40577a <_vfiprintf_r+0x55e>
  4057c6:	9907      	ldr	r1, [sp, #28]
  4057c8:	9608      	str	r6, [sp, #32]
  4057ca:	680a      	ldr	r2, [r1, #0]
  4057cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4057d0:	f04f 0000 	mov.w	r0, #0
  4057d4:	460a      	mov	r2, r1
  4057d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4057da:	3204      	adds	r2, #4
  4057dc:	2001      	movs	r0, #1
  4057de:	9001      	str	r0, [sp, #4]
  4057e0:	9207      	str	r2, [sp, #28]
  4057e2:	9005      	str	r0, [sp, #20]
  4057e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4057e8:	9302      	str	r3, [sp, #8]
  4057ea:	2400      	movs	r4, #0
  4057ec:	e670      	b.n	4054d0 <_vfiprintf_r+0x2b4>
  4057ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4057f2:	f898 2000 	ldrb.w	r2, [r8]
  4057f6:	e583      	b.n	405300 <_vfiprintf_r+0xe4>
  4057f8:	f898 2000 	ldrb.w	r2, [r8]
  4057fc:	2a6c      	cmp	r2, #108	; 0x6c
  4057fe:	bf03      	ittte	eq
  405800:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405804:	f043 0320 	orreq.w	r3, r3, #32
  405808:	f108 0801 	addeq.w	r8, r8, #1
  40580c:	f043 0310 	orrne.w	r3, r3, #16
  405810:	e576      	b.n	405300 <_vfiprintf_r+0xe4>
  405812:	bf00      	nop
  405814:	004077cc 	.word	0x004077cc
  405818:	004077dc 	.word	0x004077dc
  40581c:	004077b0 	.word	0x004077b0
  405820:	0040779c 	.word	0x0040779c
  405824:	9907      	ldr	r1, [sp, #28]
  405826:	680e      	ldr	r6, [r1, #0]
  405828:	460a      	mov	r2, r1
  40582a:	2e00      	cmp	r6, #0
  40582c:	f102 0204 	add.w	r2, r2, #4
  405830:	f6ff ae0f 	blt.w	405452 <_vfiprintf_r+0x236>
  405834:	9207      	str	r2, [sp, #28]
  405836:	f898 2000 	ldrb.w	r2, [r8]
  40583a:	e561      	b.n	405300 <_vfiprintf_r+0xe4>
  40583c:	f898 2000 	ldrb.w	r2, [r8]
  405840:	2001      	movs	r0, #1
  405842:	252b      	movs	r5, #43	; 0x2b
  405844:	e55c      	b.n	405300 <_vfiprintf_r+0xe4>
  405846:	9907      	ldr	r1, [sp, #28]
  405848:	9608      	str	r6, [sp, #32]
  40584a:	f8d1 b000 	ldr.w	fp, [r1]
  40584e:	f04f 0200 	mov.w	r2, #0
  405852:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405856:	1d0e      	adds	r6, r1, #4
  405858:	f1bb 0f00 	cmp.w	fp, #0
  40585c:	f000 82e5 	beq.w	405e2a <_vfiprintf_r+0xc0e>
  405860:	1c67      	adds	r7, r4, #1
  405862:	f000 82c4 	beq.w	405dee <_vfiprintf_r+0xbd2>
  405866:	4622      	mov	r2, r4
  405868:	2100      	movs	r1, #0
  40586a:	4658      	mov	r0, fp
  40586c:	9301      	str	r3, [sp, #4]
  40586e:	f001 f91f 	bl	406ab0 <memchr>
  405872:	9b01      	ldr	r3, [sp, #4]
  405874:	2800      	cmp	r0, #0
  405876:	f000 82e5 	beq.w	405e44 <_vfiprintf_r+0xc28>
  40587a:	eba0 020b 	sub.w	r2, r0, fp
  40587e:	9205      	str	r2, [sp, #20]
  405880:	9607      	str	r6, [sp, #28]
  405882:	9302      	str	r3, [sp, #8]
  405884:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405888:	2400      	movs	r4, #0
  40588a:	e619      	b.n	4054c0 <_vfiprintf_r+0x2a4>
  40588c:	f898 2000 	ldrb.w	r2, [r8]
  405890:	2a2a      	cmp	r2, #42	; 0x2a
  405892:	f108 0701 	add.w	r7, r8, #1
  405896:	f000 82e9 	beq.w	405e6c <_vfiprintf_r+0xc50>
  40589a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40589e:	2909      	cmp	r1, #9
  4058a0:	46b8      	mov	r8, r7
  4058a2:	f04f 0400 	mov.w	r4, #0
  4058a6:	f63f ad2d 	bhi.w	405304 <_vfiprintf_r+0xe8>
  4058aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4058ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4058b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4058b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4058ba:	2909      	cmp	r1, #9
  4058bc:	d9f5      	bls.n	4058aa <_vfiprintf_r+0x68e>
  4058be:	e521      	b.n	405304 <_vfiprintf_r+0xe8>
  4058c0:	f043 0320 	orr.w	r3, r3, #32
  4058c4:	f898 2000 	ldrb.w	r2, [r8]
  4058c8:	e51a      	b.n	405300 <_vfiprintf_r+0xe4>
  4058ca:	9608      	str	r6, [sp, #32]
  4058cc:	2800      	cmp	r0, #0
  4058ce:	f040 82db 	bne.w	405e88 <_vfiprintf_r+0xc6c>
  4058d2:	2a00      	cmp	r2, #0
  4058d4:	f000 80e7 	beq.w	405aa6 <_vfiprintf_r+0x88a>
  4058d8:	2101      	movs	r1, #1
  4058da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4058de:	f04f 0200 	mov.w	r2, #0
  4058e2:	9101      	str	r1, [sp, #4]
  4058e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4058e8:	9105      	str	r1, [sp, #20]
  4058ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4058ee:	e77b      	b.n	4057e8 <_vfiprintf_r+0x5cc>
  4058f0:	9a07      	ldr	r2, [sp, #28]
  4058f2:	6813      	ldr	r3, [r2, #0]
  4058f4:	3204      	adds	r2, #4
  4058f6:	9207      	str	r2, [sp, #28]
  4058f8:	9a03      	ldr	r2, [sp, #12]
  4058fa:	601a      	str	r2, [r3, #0]
  4058fc:	e4cb      	b.n	405296 <_vfiprintf_r+0x7a>
  4058fe:	aa0f      	add	r2, sp, #60	; 0x3c
  405900:	9904      	ldr	r1, [sp, #16]
  405902:	4620      	mov	r0, r4
  405904:	f7ff fc4a 	bl	40519c <__sprint_r.part.0>
  405908:	2800      	cmp	r0, #0
  40590a:	f040 8139 	bne.w	405b80 <_vfiprintf_r+0x964>
  40590e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405910:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405912:	f101 0c01 	add.w	ip, r1, #1
  405916:	46ce      	mov	lr, r9
  405918:	e5ff      	b.n	40551a <_vfiprintf_r+0x2fe>
  40591a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40591c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40591e:	1c48      	adds	r0, r1, #1
  405920:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405924:	2d00      	cmp	r5, #0
  405926:	f43f ae22 	beq.w	40556e <_vfiprintf_r+0x352>
  40592a:	3201      	adds	r2, #1
  40592c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405930:	2101      	movs	r1, #1
  405932:	2807      	cmp	r0, #7
  405934:	9211      	str	r2, [sp, #68]	; 0x44
  405936:	9010      	str	r0, [sp, #64]	; 0x40
  405938:	f8ca 5000 	str.w	r5, [sl]
  40593c:	f8ca 1004 	str.w	r1, [sl, #4]
  405940:	f340 8108 	ble.w	405b54 <_vfiprintf_r+0x938>
  405944:	2a00      	cmp	r2, #0
  405946:	f040 81bc 	bne.w	405cc2 <_vfiprintf_r+0xaa6>
  40594a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40594c:	2b00      	cmp	r3, #0
  40594e:	f43f ae1f 	beq.w	405590 <_vfiprintf_r+0x374>
  405952:	ab0e      	add	r3, sp, #56	; 0x38
  405954:	2202      	movs	r2, #2
  405956:	4608      	mov	r0, r1
  405958:	931c      	str	r3, [sp, #112]	; 0x70
  40595a:	921d      	str	r2, [sp, #116]	; 0x74
  40595c:	46ca      	mov	sl, r9
  40595e:	4601      	mov	r1, r0
  405960:	f10a 0a08 	add.w	sl, sl, #8
  405964:	3001      	adds	r0, #1
  405966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405968:	2b80      	cmp	r3, #128	; 0x80
  40596a:	f43f ae19 	beq.w	4055a0 <_vfiprintf_r+0x384>
  40596e:	9b05      	ldr	r3, [sp, #20]
  405970:	1ae4      	subs	r4, r4, r3
  405972:	2c00      	cmp	r4, #0
  405974:	dd2e      	ble.n	4059d4 <_vfiprintf_r+0x7b8>
  405976:	2c10      	cmp	r4, #16
  405978:	4db3      	ldr	r5, [pc, #716]	; (405c48 <_vfiprintf_r+0xa2c>)
  40597a:	dd1e      	ble.n	4059ba <_vfiprintf_r+0x79e>
  40597c:	46d6      	mov	lr, sl
  40597e:	2610      	movs	r6, #16
  405980:	9f06      	ldr	r7, [sp, #24]
  405982:	f8dd a010 	ldr.w	sl, [sp, #16]
  405986:	e006      	b.n	405996 <_vfiprintf_r+0x77a>
  405988:	1c88      	adds	r0, r1, #2
  40598a:	f10e 0e08 	add.w	lr, lr, #8
  40598e:	4619      	mov	r1, r3
  405990:	3c10      	subs	r4, #16
  405992:	2c10      	cmp	r4, #16
  405994:	dd10      	ble.n	4059b8 <_vfiprintf_r+0x79c>
  405996:	1c4b      	adds	r3, r1, #1
  405998:	3210      	adds	r2, #16
  40599a:	2b07      	cmp	r3, #7
  40599c:	9211      	str	r2, [sp, #68]	; 0x44
  40599e:	e88e 0060 	stmia.w	lr, {r5, r6}
  4059a2:	9310      	str	r3, [sp, #64]	; 0x40
  4059a4:	ddf0      	ble.n	405988 <_vfiprintf_r+0x76c>
  4059a6:	2a00      	cmp	r2, #0
  4059a8:	d165      	bne.n	405a76 <_vfiprintf_r+0x85a>
  4059aa:	3c10      	subs	r4, #16
  4059ac:	2c10      	cmp	r4, #16
  4059ae:	f04f 0001 	mov.w	r0, #1
  4059b2:	4611      	mov	r1, r2
  4059b4:	46ce      	mov	lr, r9
  4059b6:	dcee      	bgt.n	405996 <_vfiprintf_r+0x77a>
  4059b8:	46f2      	mov	sl, lr
  4059ba:	4422      	add	r2, r4
  4059bc:	2807      	cmp	r0, #7
  4059be:	9211      	str	r2, [sp, #68]	; 0x44
  4059c0:	f8ca 5000 	str.w	r5, [sl]
  4059c4:	f8ca 4004 	str.w	r4, [sl, #4]
  4059c8:	9010      	str	r0, [sp, #64]	; 0x40
  4059ca:	f300 8085 	bgt.w	405ad8 <_vfiprintf_r+0x8bc>
  4059ce:	f10a 0a08 	add.w	sl, sl, #8
  4059d2:	3001      	adds	r0, #1
  4059d4:	9905      	ldr	r1, [sp, #20]
  4059d6:	f8ca b000 	str.w	fp, [sl]
  4059da:	440a      	add	r2, r1
  4059dc:	2807      	cmp	r0, #7
  4059de:	9211      	str	r2, [sp, #68]	; 0x44
  4059e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4059e4:	9010      	str	r0, [sp, #64]	; 0x40
  4059e6:	f340 8082 	ble.w	405aee <_vfiprintf_r+0x8d2>
  4059ea:	2a00      	cmp	r2, #0
  4059ec:	f040 8118 	bne.w	405c20 <_vfiprintf_r+0xa04>
  4059f0:	9b02      	ldr	r3, [sp, #8]
  4059f2:	9210      	str	r2, [sp, #64]	; 0x40
  4059f4:	0758      	lsls	r0, r3, #29
  4059f6:	d535      	bpl.n	405a64 <_vfiprintf_r+0x848>
  4059f8:	9b08      	ldr	r3, [sp, #32]
  4059fa:	9901      	ldr	r1, [sp, #4]
  4059fc:	1a5c      	subs	r4, r3, r1
  4059fe:	2c00      	cmp	r4, #0
  405a00:	f340 80e7 	ble.w	405bd2 <_vfiprintf_r+0x9b6>
  405a04:	46ca      	mov	sl, r9
  405a06:	2c10      	cmp	r4, #16
  405a08:	f340 8218 	ble.w	405e3c <_vfiprintf_r+0xc20>
  405a0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a0e:	4e8f      	ldr	r6, [pc, #572]	; (405c4c <_vfiprintf_r+0xa30>)
  405a10:	9f06      	ldr	r7, [sp, #24]
  405a12:	f8dd b010 	ldr.w	fp, [sp, #16]
  405a16:	2510      	movs	r5, #16
  405a18:	e006      	b.n	405a28 <_vfiprintf_r+0x80c>
  405a1a:	1c88      	adds	r0, r1, #2
  405a1c:	f10a 0a08 	add.w	sl, sl, #8
  405a20:	4619      	mov	r1, r3
  405a22:	3c10      	subs	r4, #16
  405a24:	2c10      	cmp	r4, #16
  405a26:	dd11      	ble.n	405a4c <_vfiprintf_r+0x830>
  405a28:	1c4b      	adds	r3, r1, #1
  405a2a:	3210      	adds	r2, #16
  405a2c:	2b07      	cmp	r3, #7
  405a2e:	9211      	str	r2, [sp, #68]	; 0x44
  405a30:	f8ca 6000 	str.w	r6, [sl]
  405a34:	f8ca 5004 	str.w	r5, [sl, #4]
  405a38:	9310      	str	r3, [sp, #64]	; 0x40
  405a3a:	ddee      	ble.n	405a1a <_vfiprintf_r+0x7fe>
  405a3c:	bb42      	cbnz	r2, 405a90 <_vfiprintf_r+0x874>
  405a3e:	3c10      	subs	r4, #16
  405a40:	2c10      	cmp	r4, #16
  405a42:	f04f 0001 	mov.w	r0, #1
  405a46:	4611      	mov	r1, r2
  405a48:	46ca      	mov	sl, r9
  405a4a:	dced      	bgt.n	405a28 <_vfiprintf_r+0x80c>
  405a4c:	4422      	add	r2, r4
  405a4e:	2807      	cmp	r0, #7
  405a50:	9211      	str	r2, [sp, #68]	; 0x44
  405a52:	f8ca 6000 	str.w	r6, [sl]
  405a56:	f8ca 4004 	str.w	r4, [sl, #4]
  405a5a:	9010      	str	r0, [sp, #64]	; 0x40
  405a5c:	dd51      	ble.n	405b02 <_vfiprintf_r+0x8e6>
  405a5e:	2a00      	cmp	r2, #0
  405a60:	f040 819b 	bne.w	405d9a <_vfiprintf_r+0xb7e>
  405a64:	9b03      	ldr	r3, [sp, #12]
  405a66:	9a08      	ldr	r2, [sp, #32]
  405a68:	9901      	ldr	r1, [sp, #4]
  405a6a:	428a      	cmp	r2, r1
  405a6c:	bfac      	ite	ge
  405a6e:	189b      	addge	r3, r3, r2
  405a70:	185b      	addlt	r3, r3, r1
  405a72:	9303      	str	r3, [sp, #12]
  405a74:	e04e      	b.n	405b14 <_vfiprintf_r+0x8f8>
  405a76:	aa0f      	add	r2, sp, #60	; 0x3c
  405a78:	4651      	mov	r1, sl
  405a7a:	4638      	mov	r0, r7
  405a7c:	f7ff fb8e 	bl	40519c <__sprint_r.part.0>
  405a80:	2800      	cmp	r0, #0
  405a82:	f040 813f 	bne.w	405d04 <_vfiprintf_r+0xae8>
  405a86:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a8a:	1c48      	adds	r0, r1, #1
  405a8c:	46ce      	mov	lr, r9
  405a8e:	e77f      	b.n	405990 <_vfiprintf_r+0x774>
  405a90:	aa0f      	add	r2, sp, #60	; 0x3c
  405a92:	4659      	mov	r1, fp
  405a94:	4638      	mov	r0, r7
  405a96:	f7ff fb81 	bl	40519c <__sprint_r.part.0>
  405a9a:	b960      	cbnz	r0, 405ab6 <_vfiprintf_r+0x89a>
  405a9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405aa0:	1c48      	adds	r0, r1, #1
  405aa2:	46ca      	mov	sl, r9
  405aa4:	e7bd      	b.n	405a22 <_vfiprintf_r+0x806>
  405aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405aa8:	f8dd b010 	ldr.w	fp, [sp, #16]
  405aac:	2b00      	cmp	r3, #0
  405aae:	f040 81d4 	bne.w	405e5a <_vfiprintf_r+0xc3e>
  405ab2:	2300      	movs	r3, #0
  405ab4:	9310      	str	r3, [sp, #64]	; 0x40
  405ab6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405aba:	f013 0f01 	tst.w	r3, #1
  405abe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405ac2:	d102      	bne.n	405aca <_vfiprintf_r+0x8ae>
  405ac4:	059a      	lsls	r2, r3, #22
  405ac6:	f140 80de 	bpl.w	405c86 <_vfiprintf_r+0xa6a>
  405aca:	065b      	lsls	r3, r3, #25
  405acc:	f53f acb2 	bmi.w	405434 <_vfiprintf_r+0x218>
  405ad0:	9803      	ldr	r0, [sp, #12]
  405ad2:	b02d      	add	sp, #180	; 0xb4
  405ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ad8:	2a00      	cmp	r2, #0
  405ada:	f040 8106 	bne.w	405cea <_vfiprintf_r+0xace>
  405ade:	9a05      	ldr	r2, [sp, #20]
  405ae0:	921d      	str	r2, [sp, #116]	; 0x74
  405ae2:	2301      	movs	r3, #1
  405ae4:	9211      	str	r2, [sp, #68]	; 0x44
  405ae6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  405aea:	9310      	str	r3, [sp, #64]	; 0x40
  405aec:	46ca      	mov	sl, r9
  405aee:	f10a 0a08 	add.w	sl, sl, #8
  405af2:	9b02      	ldr	r3, [sp, #8]
  405af4:	0759      	lsls	r1, r3, #29
  405af6:	d504      	bpl.n	405b02 <_vfiprintf_r+0x8e6>
  405af8:	9b08      	ldr	r3, [sp, #32]
  405afa:	9901      	ldr	r1, [sp, #4]
  405afc:	1a5c      	subs	r4, r3, r1
  405afe:	2c00      	cmp	r4, #0
  405b00:	dc81      	bgt.n	405a06 <_vfiprintf_r+0x7ea>
  405b02:	9b03      	ldr	r3, [sp, #12]
  405b04:	9908      	ldr	r1, [sp, #32]
  405b06:	9801      	ldr	r0, [sp, #4]
  405b08:	4281      	cmp	r1, r0
  405b0a:	bfac      	ite	ge
  405b0c:	185b      	addge	r3, r3, r1
  405b0e:	181b      	addlt	r3, r3, r0
  405b10:	9303      	str	r3, [sp, #12]
  405b12:	bb72      	cbnz	r2, 405b72 <_vfiprintf_r+0x956>
  405b14:	2300      	movs	r3, #0
  405b16:	9310      	str	r3, [sp, #64]	; 0x40
  405b18:	46ca      	mov	sl, r9
  405b1a:	f7ff bbbc 	b.w	405296 <_vfiprintf_r+0x7a>
  405b1e:	aa0f      	add	r2, sp, #60	; 0x3c
  405b20:	9904      	ldr	r1, [sp, #16]
  405b22:	4620      	mov	r0, r4
  405b24:	f7ff fb3a 	bl	40519c <__sprint_r.part.0>
  405b28:	bb50      	cbnz	r0, 405b80 <_vfiprintf_r+0x964>
  405b2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  405b2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405b2e:	f101 0e01 	add.w	lr, r1, #1
  405b32:	46cc      	mov	ip, r9
  405b34:	e548      	b.n	4055c8 <_vfiprintf_r+0x3ac>
  405b36:	2a00      	cmp	r2, #0
  405b38:	f040 8140 	bne.w	405dbc <_vfiprintf_r+0xba0>
  405b3c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405b40:	2900      	cmp	r1, #0
  405b42:	f000 811b 	beq.w	405d7c <_vfiprintf_r+0xb60>
  405b46:	2201      	movs	r2, #1
  405b48:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405b4c:	4610      	mov	r0, r2
  405b4e:	921d      	str	r2, [sp, #116]	; 0x74
  405b50:	911c      	str	r1, [sp, #112]	; 0x70
  405b52:	46ca      	mov	sl, r9
  405b54:	4601      	mov	r1, r0
  405b56:	f10a 0a08 	add.w	sl, sl, #8
  405b5a:	3001      	adds	r0, #1
  405b5c:	e507      	b.n	40556e <_vfiprintf_r+0x352>
  405b5e:	9b02      	ldr	r3, [sp, #8]
  405b60:	2a01      	cmp	r2, #1
  405b62:	f000 8098 	beq.w	405c96 <_vfiprintf_r+0xa7a>
  405b66:	2a02      	cmp	r2, #2
  405b68:	d10d      	bne.n	405b86 <_vfiprintf_r+0x96a>
  405b6a:	9302      	str	r3, [sp, #8]
  405b6c:	2600      	movs	r6, #0
  405b6e:	2700      	movs	r7, #0
  405b70:	e5b0      	b.n	4056d4 <_vfiprintf_r+0x4b8>
  405b72:	aa0f      	add	r2, sp, #60	; 0x3c
  405b74:	9904      	ldr	r1, [sp, #16]
  405b76:	9806      	ldr	r0, [sp, #24]
  405b78:	f7ff fb10 	bl	40519c <__sprint_r.part.0>
  405b7c:	2800      	cmp	r0, #0
  405b7e:	d0c9      	beq.n	405b14 <_vfiprintf_r+0x8f8>
  405b80:	f8dd b010 	ldr.w	fp, [sp, #16]
  405b84:	e797      	b.n	405ab6 <_vfiprintf_r+0x89a>
  405b86:	9302      	str	r3, [sp, #8]
  405b88:	2600      	movs	r6, #0
  405b8a:	2700      	movs	r7, #0
  405b8c:	4649      	mov	r1, r9
  405b8e:	e000      	b.n	405b92 <_vfiprintf_r+0x976>
  405b90:	4659      	mov	r1, fp
  405b92:	08f2      	lsrs	r2, r6, #3
  405b94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405b98:	08f8      	lsrs	r0, r7, #3
  405b9a:	f006 0307 	and.w	r3, r6, #7
  405b9e:	4607      	mov	r7, r0
  405ba0:	4616      	mov	r6, r2
  405ba2:	3330      	adds	r3, #48	; 0x30
  405ba4:	ea56 0207 	orrs.w	r2, r6, r7
  405ba8:	f801 3c01 	strb.w	r3, [r1, #-1]
  405bac:	f101 3bff 	add.w	fp, r1, #4294967295
  405bb0:	d1ee      	bne.n	405b90 <_vfiprintf_r+0x974>
  405bb2:	9a02      	ldr	r2, [sp, #8]
  405bb4:	07d6      	lsls	r6, r2, #31
  405bb6:	f57f ad9d 	bpl.w	4056f4 <_vfiprintf_r+0x4d8>
  405bba:	2b30      	cmp	r3, #48	; 0x30
  405bbc:	f43f ad9a 	beq.w	4056f4 <_vfiprintf_r+0x4d8>
  405bc0:	3902      	subs	r1, #2
  405bc2:	2330      	movs	r3, #48	; 0x30
  405bc4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405bc8:	eba9 0301 	sub.w	r3, r9, r1
  405bcc:	9305      	str	r3, [sp, #20]
  405bce:	468b      	mov	fp, r1
  405bd0:	e476      	b.n	4054c0 <_vfiprintf_r+0x2a4>
  405bd2:	9b03      	ldr	r3, [sp, #12]
  405bd4:	9a08      	ldr	r2, [sp, #32]
  405bd6:	428a      	cmp	r2, r1
  405bd8:	bfac      	ite	ge
  405bda:	189b      	addge	r3, r3, r2
  405bdc:	185b      	addlt	r3, r3, r1
  405bde:	9303      	str	r3, [sp, #12]
  405be0:	e798      	b.n	405b14 <_vfiprintf_r+0x8f8>
  405be2:	2202      	movs	r2, #2
  405be4:	e44d      	b.n	405482 <_vfiprintf_r+0x266>
  405be6:	2f00      	cmp	r7, #0
  405be8:	bf08      	it	eq
  405bea:	2e0a      	cmpeq	r6, #10
  405bec:	d352      	bcc.n	405c94 <_vfiprintf_r+0xa78>
  405bee:	46cb      	mov	fp, r9
  405bf0:	4630      	mov	r0, r6
  405bf2:	4639      	mov	r1, r7
  405bf4:	220a      	movs	r2, #10
  405bf6:	2300      	movs	r3, #0
  405bf8:	f7fe fbf8 	bl	4043ec <__aeabi_uldivmod>
  405bfc:	3230      	adds	r2, #48	; 0x30
  405bfe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405c02:	4630      	mov	r0, r6
  405c04:	4639      	mov	r1, r7
  405c06:	2300      	movs	r3, #0
  405c08:	220a      	movs	r2, #10
  405c0a:	f7fe fbef 	bl	4043ec <__aeabi_uldivmod>
  405c0e:	4606      	mov	r6, r0
  405c10:	460f      	mov	r7, r1
  405c12:	ea56 0307 	orrs.w	r3, r6, r7
  405c16:	d1eb      	bne.n	405bf0 <_vfiprintf_r+0x9d4>
  405c18:	e56c      	b.n	4056f4 <_vfiprintf_r+0x4d8>
  405c1a:	9405      	str	r4, [sp, #20]
  405c1c:	46cb      	mov	fp, r9
  405c1e:	e44f      	b.n	4054c0 <_vfiprintf_r+0x2a4>
  405c20:	aa0f      	add	r2, sp, #60	; 0x3c
  405c22:	9904      	ldr	r1, [sp, #16]
  405c24:	9806      	ldr	r0, [sp, #24]
  405c26:	f7ff fab9 	bl	40519c <__sprint_r.part.0>
  405c2a:	2800      	cmp	r0, #0
  405c2c:	d1a8      	bne.n	405b80 <_vfiprintf_r+0x964>
  405c2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c30:	46ca      	mov	sl, r9
  405c32:	e75e      	b.n	405af2 <_vfiprintf_r+0x8d6>
  405c34:	aa0f      	add	r2, sp, #60	; 0x3c
  405c36:	9904      	ldr	r1, [sp, #16]
  405c38:	9806      	ldr	r0, [sp, #24]
  405c3a:	f7ff faaf 	bl	40519c <__sprint_r.part.0>
  405c3e:	2800      	cmp	r0, #0
  405c40:	d19e      	bne.n	405b80 <_vfiprintf_r+0x964>
  405c42:	46ca      	mov	sl, r9
  405c44:	f7ff bbc0 	b.w	4053c8 <_vfiprintf_r+0x1ac>
  405c48:	004077dc 	.word	0x004077dc
  405c4c:	004077cc 	.word	0x004077cc
  405c50:	3104      	adds	r1, #4
  405c52:	6816      	ldr	r6, [r2, #0]
  405c54:	9107      	str	r1, [sp, #28]
  405c56:	2201      	movs	r2, #1
  405c58:	2700      	movs	r7, #0
  405c5a:	e412      	b.n	405482 <_vfiprintf_r+0x266>
  405c5c:	9807      	ldr	r0, [sp, #28]
  405c5e:	4601      	mov	r1, r0
  405c60:	3104      	adds	r1, #4
  405c62:	6806      	ldr	r6, [r0, #0]
  405c64:	9107      	str	r1, [sp, #28]
  405c66:	2700      	movs	r7, #0
  405c68:	e40b      	b.n	405482 <_vfiprintf_r+0x266>
  405c6a:	680e      	ldr	r6, [r1, #0]
  405c6c:	3104      	adds	r1, #4
  405c6e:	9107      	str	r1, [sp, #28]
  405c70:	2700      	movs	r7, #0
  405c72:	e591      	b.n	405798 <_vfiprintf_r+0x57c>
  405c74:	9907      	ldr	r1, [sp, #28]
  405c76:	680e      	ldr	r6, [r1, #0]
  405c78:	460a      	mov	r2, r1
  405c7a:	17f7      	asrs	r7, r6, #31
  405c7c:	3204      	adds	r2, #4
  405c7e:	9207      	str	r2, [sp, #28]
  405c80:	4630      	mov	r0, r6
  405c82:	4639      	mov	r1, r7
  405c84:	e50f      	b.n	4056a6 <_vfiprintf_r+0x48a>
  405c86:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405c8a:	f000 fe7f 	bl	40698c <__retarget_lock_release_recursive>
  405c8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405c92:	e71a      	b.n	405aca <_vfiprintf_r+0x8ae>
  405c94:	9b02      	ldr	r3, [sp, #8]
  405c96:	9302      	str	r3, [sp, #8]
  405c98:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405c9c:	3630      	adds	r6, #48	; 0x30
  405c9e:	2301      	movs	r3, #1
  405ca0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405ca4:	9305      	str	r3, [sp, #20]
  405ca6:	e40b      	b.n	4054c0 <_vfiprintf_r+0x2a4>
  405ca8:	aa0f      	add	r2, sp, #60	; 0x3c
  405caa:	9904      	ldr	r1, [sp, #16]
  405cac:	9806      	ldr	r0, [sp, #24]
  405cae:	f7ff fa75 	bl	40519c <__sprint_r.part.0>
  405cb2:	2800      	cmp	r0, #0
  405cb4:	f47f af64 	bne.w	405b80 <_vfiprintf_r+0x964>
  405cb8:	9910      	ldr	r1, [sp, #64]	; 0x40
  405cba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cbc:	1c48      	adds	r0, r1, #1
  405cbe:	46ca      	mov	sl, r9
  405cc0:	e651      	b.n	405966 <_vfiprintf_r+0x74a>
  405cc2:	aa0f      	add	r2, sp, #60	; 0x3c
  405cc4:	9904      	ldr	r1, [sp, #16]
  405cc6:	9806      	ldr	r0, [sp, #24]
  405cc8:	f7ff fa68 	bl	40519c <__sprint_r.part.0>
  405ccc:	2800      	cmp	r0, #0
  405cce:	f47f af57 	bne.w	405b80 <_vfiprintf_r+0x964>
  405cd2:	9910      	ldr	r1, [sp, #64]	; 0x40
  405cd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cd6:	1c48      	adds	r0, r1, #1
  405cd8:	46ca      	mov	sl, r9
  405cda:	e448      	b.n	40556e <_vfiprintf_r+0x352>
  405cdc:	2a00      	cmp	r2, #0
  405cde:	f040 8091 	bne.w	405e04 <_vfiprintf_r+0xbe8>
  405ce2:	2001      	movs	r0, #1
  405ce4:	4611      	mov	r1, r2
  405ce6:	46ca      	mov	sl, r9
  405ce8:	e641      	b.n	40596e <_vfiprintf_r+0x752>
  405cea:	aa0f      	add	r2, sp, #60	; 0x3c
  405cec:	9904      	ldr	r1, [sp, #16]
  405cee:	9806      	ldr	r0, [sp, #24]
  405cf0:	f7ff fa54 	bl	40519c <__sprint_r.part.0>
  405cf4:	2800      	cmp	r0, #0
  405cf6:	f47f af43 	bne.w	405b80 <_vfiprintf_r+0x964>
  405cfa:	9810      	ldr	r0, [sp, #64]	; 0x40
  405cfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405cfe:	3001      	adds	r0, #1
  405d00:	46ca      	mov	sl, r9
  405d02:	e667      	b.n	4059d4 <_vfiprintf_r+0x7b8>
  405d04:	46d3      	mov	fp, sl
  405d06:	e6d6      	b.n	405ab6 <_vfiprintf_r+0x89a>
  405d08:	9e07      	ldr	r6, [sp, #28]
  405d0a:	3607      	adds	r6, #7
  405d0c:	f026 0207 	bic.w	r2, r6, #7
  405d10:	f102 0108 	add.w	r1, r2, #8
  405d14:	e9d2 6700 	ldrd	r6, r7, [r2]
  405d18:	9107      	str	r1, [sp, #28]
  405d1a:	2201      	movs	r2, #1
  405d1c:	f7ff bbb1 	b.w	405482 <_vfiprintf_r+0x266>
  405d20:	9e07      	ldr	r6, [sp, #28]
  405d22:	3607      	adds	r6, #7
  405d24:	f026 0607 	bic.w	r6, r6, #7
  405d28:	e9d6 0100 	ldrd	r0, r1, [r6]
  405d2c:	f106 0208 	add.w	r2, r6, #8
  405d30:	9207      	str	r2, [sp, #28]
  405d32:	4606      	mov	r6, r0
  405d34:	460f      	mov	r7, r1
  405d36:	e4b6      	b.n	4056a6 <_vfiprintf_r+0x48a>
  405d38:	9e07      	ldr	r6, [sp, #28]
  405d3a:	3607      	adds	r6, #7
  405d3c:	f026 0207 	bic.w	r2, r6, #7
  405d40:	f102 0108 	add.w	r1, r2, #8
  405d44:	e9d2 6700 	ldrd	r6, r7, [r2]
  405d48:	9107      	str	r1, [sp, #28]
  405d4a:	2200      	movs	r2, #0
  405d4c:	f7ff bb99 	b.w	405482 <_vfiprintf_r+0x266>
  405d50:	9e07      	ldr	r6, [sp, #28]
  405d52:	3607      	adds	r6, #7
  405d54:	f026 0107 	bic.w	r1, r6, #7
  405d58:	f101 0008 	add.w	r0, r1, #8
  405d5c:	9007      	str	r0, [sp, #28]
  405d5e:	e9d1 6700 	ldrd	r6, r7, [r1]
  405d62:	e519      	b.n	405798 <_vfiprintf_r+0x57c>
  405d64:	46cb      	mov	fp, r9
  405d66:	f7ff bbab 	b.w	4054c0 <_vfiprintf_r+0x2a4>
  405d6a:	252d      	movs	r5, #45	; 0x2d
  405d6c:	4276      	negs	r6, r6
  405d6e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405d72:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d76:	2201      	movs	r2, #1
  405d78:	f7ff bb88 	b.w	40548c <_vfiprintf_r+0x270>
  405d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405d7e:	b9b3      	cbnz	r3, 405dae <_vfiprintf_r+0xb92>
  405d80:	4611      	mov	r1, r2
  405d82:	2001      	movs	r0, #1
  405d84:	46ca      	mov	sl, r9
  405d86:	e5f2      	b.n	40596e <_vfiprintf_r+0x752>
  405d88:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405d8c:	f000 fdfe 	bl	40698c <__retarget_lock_release_recursive>
  405d90:	f04f 33ff 	mov.w	r3, #4294967295
  405d94:	9303      	str	r3, [sp, #12]
  405d96:	f7ff bb50 	b.w	40543a <_vfiprintf_r+0x21e>
  405d9a:	aa0f      	add	r2, sp, #60	; 0x3c
  405d9c:	9904      	ldr	r1, [sp, #16]
  405d9e:	9806      	ldr	r0, [sp, #24]
  405da0:	f7ff f9fc 	bl	40519c <__sprint_r.part.0>
  405da4:	2800      	cmp	r0, #0
  405da6:	f47f aeeb 	bne.w	405b80 <_vfiprintf_r+0x964>
  405daa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405dac:	e6a9      	b.n	405b02 <_vfiprintf_r+0x8e6>
  405dae:	ab0e      	add	r3, sp, #56	; 0x38
  405db0:	2202      	movs	r2, #2
  405db2:	931c      	str	r3, [sp, #112]	; 0x70
  405db4:	921d      	str	r2, [sp, #116]	; 0x74
  405db6:	2001      	movs	r0, #1
  405db8:	46ca      	mov	sl, r9
  405dba:	e5d0      	b.n	40595e <_vfiprintf_r+0x742>
  405dbc:	aa0f      	add	r2, sp, #60	; 0x3c
  405dbe:	9904      	ldr	r1, [sp, #16]
  405dc0:	9806      	ldr	r0, [sp, #24]
  405dc2:	f7ff f9eb 	bl	40519c <__sprint_r.part.0>
  405dc6:	2800      	cmp	r0, #0
  405dc8:	f47f aeda 	bne.w	405b80 <_vfiprintf_r+0x964>
  405dcc:	9910      	ldr	r1, [sp, #64]	; 0x40
  405dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405dd0:	1c48      	adds	r0, r1, #1
  405dd2:	46ca      	mov	sl, r9
  405dd4:	e5a4      	b.n	405920 <_vfiprintf_r+0x704>
  405dd6:	9a07      	ldr	r2, [sp, #28]
  405dd8:	9903      	ldr	r1, [sp, #12]
  405dda:	6813      	ldr	r3, [r2, #0]
  405ddc:	17cd      	asrs	r5, r1, #31
  405dde:	4608      	mov	r0, r1
  405de0:	3204      	adds	r2, #4
  405de2:	4629      	mov	r1, r5
  405de4:	9207      	str	r2, [sp, #28]
  405de6:	e9c3 0100 	strd	r0, r1, [r3]
  405dea:	f7ff ba54 	b.w	405296 <_vfiprintf_r+0x7a>
  405dee:	4658      	mov	r0, fp
  405df0:	9607      	str	r6, [sp, #28]
  405df2:	9302      	str	r3, [sp, #8]
  405df4:	f7ff f964 	bl	4050c0 <strlen>
  405df8:	2400      	movs	r4, #0
  405dfa:	9005      	str	r0, [sp, #20]
  405dfc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405e00:	f7ff bb5e 	b.w	4054c0 <_vfiprintf_r+0x2a4>
  405e04:	aa0f      	add	r2, sp, #60	; 0x3c
  405e06:	9904      	ldr	r1, [sp, #16]
  405e08:	9806      	ldr	r0, [sp, #24]
  405e0a:	f7ff f9c7 	bl	40519c <__sprint_r.part.0>
  405e0e:	2800      	cmp	r0, #0
  405e10:	f47f aeb6 	bne.w	405b80 <_vfiprintf_r+0x964>
  405e14:	9910      	ldr	r1, [sp, #64]	; 0x40
  405e16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e18:	1c48      	adds	r0, r1, #1
  405e1a:	46ca      	mov	sl, r9
  405e1c:	e5a7      	b.n	40596e <_vfiprintf_r+0x752>
  405e1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e22:	4e20      	ldr	r6, [pc, #128]	; (405ea4 <_vfiprintf_r+0xc88>)
  405e24:	3101      	adds	r1, #1
  405e26:	f7ff bb90 	b.w	40554a <_vfiprintf_r+0x32e>
  405e2a:	2c06      	cmp	r4, #6
  405e2c:	bf28      	it	cs
  405e2e:	2406      	movcs	r4, #6
  405e30:	9405      	str	r4, [sp, #20]
  405e32:	9607      	str	r6, [sp, #28]
  405e34:	9401      	str	r4, [sp, #4]
  405e36:	f8df b070 	ldr.w	fp, [pc, #112]	; 405ea8 <_vfiprintf_r+0xc8c>
  405e3a:	e4d5      	b.n	4057e8 <_vfiprintf_r+0x5cc>
  405e3c:	9810      	ldr	r0, [sp, #64]	; 0x40
  405e3e:	4e19      	ldr	r6, [pc, #100]	; (405ea4 <_vfiprintf_r+0xc88>)
  405e40:	3001      	adds	r0, #1
  405e42:	e603      	b.n	405a4c <_vfiprintf_r+0x830>
  405e44:	9405      	str	r4, [sp, #20]
  405e46:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405e4a:	9607      	str	r6, [sp, #28]
  405e4c:	9302      	str	r3, [sp, #8]
  405e4e:	4604      	mov	r4, r0
  405e50:	f7ff bb36 	b.w	4054c0 <_vfiprintf_r+0x2a4>
  405e54:	4686      	mov	lr, r0
  405e56:	f7ff bbce 	b.w	4055f6 <_vfiprintf_r+0x3da>
  405e5a:	9806      	ldr	r0, [sp, #24]
  405e5c:	aa0f      	add	r2, sp, #60	; 0x3c
  405e5e:	4659      	mov	r1, fp
  405e60:	f7ff f99c 	bl	40519c <__sprint_r.part.0>
  405e64:	2800      	cmp	r0, #0
  405e66:	f43f ae24 	beq.w	405ab2 <_vfiprintf_r+0x896>
  405e6a:	e624      	b.n	405ab6 <_vfiprintf_r+0x89a>
  405e6c:	9907      	ldr	r1, [sp, #28]
  405e6e:	f898 2001 	ldrb.w	r2, [r8, #1]
  405e72:	680c      	ldr	r4, [r1, #0]
  405e74:	3104      	adds	r1, #4
  405e76:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405e7a:	46b8      	mov	r8, r7
  405e7c:	9107      	str	r1, [sp, #28]
  405e7e:	f7ff ba3f 	b.w	405300 <_vfiprintf_r+0xe4>
  405e82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e86:	e43c      	b.n	405702 <_vfiprintf_r+0x4e6>
  405e88:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e8c:	e521      	b.n	4058d2 <_vfiprintf_r+0x6b6>
  405e8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e92:	f7ff bbf4 	b.w	40567e <_vfiprintf_r+0x462>
  405e96:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405e9a:	e491      	b.n	4057c0 <_vfiprintf_r+0x5a4>
  405e9c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405ea0:	e469      	b.n	405776 <_vfiprintf_r+0x55a>
  405ea2:	bf00      	nop
  405ea4:	004077cc 	.word	0x004077cc
  405ea8:	004077c4 	.word	0x004077c4

00405eac <__sbprintf>:
  405eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405eb0:	460c      	mov	r4, r1
  405eb2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405eb6:	8989      	ldrh	r1, [r1, #12]
  405eb8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405eba:	89e5      	ldrh	r5, [r4, #14]
  405ebc:	9619      	str	r6, [sp, #100]	; 0x64
  405ebe:	f021 0102 	bic.w	r1, r1, #2
  405ec2:	4606      	mov	r6, r0
  405ec4:	69e0      	ldr	r0, [r4, #28]
  405ec6:	f8ad 100c 	strh.w	r1, [sp, #12]
  405eca:	4617      	mov	r7, r2
  405ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405ed0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405ed2:	f8ad 500e 	strh.w	r5, [sp, #14]
  405ed6:	4698      	mov	r8, r3
  405ed8:	ad1a      	add	r5, sp, #104	; 0x68
  405eda:	2300      	movs	r3, #0
  405edc:	9007      	str	r0, [sp, #28]
  405ede:	a816      	add	r0, sp, #88	; 0x58
  405ee0:	9209      	str	r2, [sp, #36]	; 0x24
  405ee2:	9306      	str	r3, [sp, #24]
  405ee4:	9500      	str	r5, [sp, #0]
  405ee6:	9504      	str	r5, [sp, #16]
  405ee8:	9102      	str	r1, [sp, #8]
  405eea:	9105      	str	r1, [sp, #20]
  405eec:	f000 fd48 	bl	406980 <__retarget_lock_init_recursive>
  405ef0:	4643      	mov	r3, r8
  405ef2:	463a      	mov	r2, r7
  405ef4:	4669      	mov	r1, sp
  405ef6:	4630      	mov	r0, r6
  405ef8:	f7ff f990 	bl	40521c <_vfiprintf_r>
  405efc:	1e05      	subs	r5, r0, #0
  405efe:	db07      	blt.n	405f10 <__sbprintf+0x64>
  405f00:	4630      	mov	r0, r6
  405f02:	4669      	mov	r1, sp
  405f04:	f000 f928 	bl	406158 <_fflush_r>
  405f08:	2800      	cmp	r0, #0
  405f0a:	bf18      	it	ne
  405f0c:	f04f 35ff 	movne.w	r5, #4294967295
  405f10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405f14:	065b      	lsls	r3, r3, #25
  405f16:	d503      	bpl.n	405f20 <__sbprintf+0x74>
  405f18:	89a3      	ldrh	r3, [r4, #12]
  405f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405f1e:	81a3      	strh	r3, [r4, #12]
  405f20:	9816      	ldr	r0, [sp, #88]	; 0x58
  405f22:	f000 fd2f 	bl	406984 <__retarget_lock_close_recursive>
  405f26:	4628      	mov	r0, r5
  405f28:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405f30 <__swsetup_r>:
  405f30:	b538      	push	{r3, r4, r5, lr}
  405f32:	4b30      	ldr	r3, [pc, #192]	; (405ff4 <__swsetup_r+0xc4>)
  405f34:	681b      	ldr	r3, [r3, #0]
  405f36:	4605      	mov	r5, r0
  405f38:	460c      	mov	r4, r1
  405f3a:	b113      	cbz	r3, 405f42 <__swsetup_r+0x12>
  405f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405f3e:	2a00      	cmp	r2, #0
  405f40:	d038      	beq.n	405fb4 <__swsetup_r+0x84>
  405f42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405f46:	b293      	uxth	r3, r2
  405f48:	0718      	lsls	r0, r3, #28
  405f4a:	d50c      	bpl.n	405f66 <__swsetup_r+0x36>
  405f4c:	6920      	ldr	r0, [r4, #16]
  405f4e:	b1a8      	cbz	r0, 405f7c <__swsetup_r+0x4c>
  405f50:	f013 0201 	ands.w	r2, r3, #1
  405f54:	d01e      	beq.n	405f94 <__swsetup_r+0x64>
  405f56:	6963      	ldr	r3, [r4, #20]
  405f58:	2200      	movs	r2, #0
  405f5a:	425b      	negs	r3, r3
  405f5c:	61a3      	str	r3, [r4, #24]
  405f5e:	60a2      	str	r2, [r4, #8]
  405f60:	b1f0      	cbz	r0, 405fa0 <__swsetup_r+0x70>
  405f62:	2000      	movs	r0, #0
  405f64:	bd38      	pop	{r3, r4, r5, pc}
  405f66:	06d9      	lsls	r1, r3, #27
  405f68:	d53c      	bpl.n	405fe4 <__swsetup_r+0xb4>
  405f6a:	0758      	lsls	r0, r3, #29
  405f6c:	d426      	bmi.n	405fbc <__swsetup_r+0x8c>
  405f6e:	6920      	ldr	r0, [r4, #16]
  405f70:	f042 0308 	orr.w	r3, r2, #8
  405f74:	81a3      	strh	r3, [r4, #12]
  405f76:	b29b      	uxth	r3, r3
  405f78:	2800      	cmp	r0, #0
  405f7a:	d1e9      	bne.n	405f50 <__swsetup_r+0x20>
  405f7c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405f80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405f84:	d0e4      	beq.n	405f50 <__swsetup_r+0x20>
  405f86:	4628      	mov	r0, r5
  405f88:	4621      	mov	r1, r4
  405f8a:	f000 fd2f 	bl	4069ec <__smakebuf_r>
  405f8e:	89a3      	ldrh	r3, [r4, #12]
  405f90:	6920      	ldr	r0, [r4, #16]
  405f92:	e7dd      	b.n	405f50 <__swsetup_r+0x20>
  405f94:	0799      	lsls	r1, r3, #30
  405f96:	bf58      	it	pl
  405f98:	6962      	ldrpl	r2, [r4, #20]
  405f9a:	60a2      	str	r2, [r4, #8]
  405f9c:	2800      	cmp	r0, #0
  405f9e:	d1e0      	bne.n	405f62 <__swsetup_r+0x32>
  405fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405fa4:	061a      	lsls	r2, r3, #24
  405fa6:	d5dd      	bpl.n	405f64 <__swsetup_r+0x34>
  405fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405fac:	81a3      	strh	r3, [r4, #12]
  405fae:	f04f 30ff 	mov.w	r0, #4294967295
  405fb2:	bd38      	pop	{r3, r4, r5, pc}
  405fb4:	4618      	mov	r0, r3
  405fb6:	f000 f927 	bl	406208 <__sinit>
  405fba:	e7c2      	b.n	405f42 <__swsetup_r+0x12>
  405fbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405fbe:	b151      	cbz	r1, 405fd6 <__swsetup_r+0xa6>
  405fc0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405fc4:	4299      	cmp	r1, r3
  405fc6:	d004      	beq.n	405fd2 <__swsetup_r+0xa2>
  405fc8:	4628      	mov	r0, r5
  405fca:	f000 fa43 	bl	406454 <_free_r>
  405fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405fd2:	2300      	movs	r3, #0
  405fd4:	6323      	str	r3, [r4, #48]	; 0x30
  405fd6:	2300      	movs	r3, #0
  405fd8:	6920      	ldr	r0, [r4, #16]
  405fda:	6063      	str	r3, [r4, #4]
  405fdc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405fe0:	6020      	str	r0, [r4, #0]
  405fe2:	e7c5      	b.n	405f70 <__swsetup_r+0x40>
  405fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405fe8:	2309      	movs	r3, #9
  405fea:	602b      	str	r3, [r5, #0]
  405fec:	f04f 30ff 	mov.w	r0, #4294967295
  405ff0:	81a2      	strh	r2, [r4, #12]
  405ff2:	bd38      	pop	{r3, r4, r5, pc}
  405ff4:	20400024 	.word	0x20400024

00405ff8 <register_fini>:
  405ff8:	4b02      	ldr	r3, [pc, #8]	; (406004 <register_fini+0xc>)
  405ffa:	b113      	cbz	r3, 406002 <register_fini+0xa>
  405ffc:	4802      	ldr	r0, [pc, #8]	; (406008 <register_fini+0x10>)
  405ffe:	f000 b805 	b.w	40600c <atexit>
  406002:	4770      	bx	lr
  406004:	00000000 	.word	0x00000000
  406008:	00406279 	.word	0x00406279

0040600c <atexit>:
  40600c:	2300      	movs	r3, #0
  40600e:	4601      	mov	r1, r0
  406010:	461a      	mov	r2, r3
  406012:	4618      	mov	r0, r3
  406014:	f001 b890 	b.w	407138 <__register_exitproc>

00406018 <__sflush_r>:
  406018:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40601c:	b29a      	uxth	r2, r3
  40601e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406022:	460d      	mov	r5, r1
  406024:	0711      	lsls	r1, r2, #28
  406026:	4680      	mov	r8, r0
  406028:	d43a      	bmi.n	4060a0 <__sflush_r+0x88>
  40602a:	686a      	ldr	r2, [r5, #4]
  40602c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406030:	2a00      	cmp	r2, #0
  406032:	81ab      	strh	r3, [r5, #12]
  406034:	dd6f      	ble.n	406116 <__sflush_r+0xfe>
  406036:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406038:	2c00      	cmp	r4, #0
  40603a:	d049      	beq.n	4060d0 <__sflush_r+0xb8>
  40603c:	2200      	movs	r2, #0
  40603e:	b29b      	uxth	r3, r3
  406040:	f8d8 6000 	ldr.w	r6, [r8]
  406044:	f8c8 2000 	str.w	r2, [r8]
  406048:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40604c:	d067      	beq.n	40611e <__sflush_r+0x106>
  40604e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406050:	075f      	lsls	r7, r3, #29
  406052:	d505      	bpl.n	406060 <__sflush_r+0x48>
  406054:	6869      	ldr	r1, [r5, #4]
  406056:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406058:	1a52      	subs	r2, r2, r1
  40605a:	b10b      	cbz	r3, 406060 <__sflush_r+0x48>
  40605c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40605e:	1ad2      	subs	r2, r2, r3
  406060:	2300      	movs	r3, #0
  406062:	69e9      	ldr	r1, [r5, #28]
  406064:	4640      	mov	r0, r8
  406066:	47a0      	blx	r4
  406068:	1c44      	adds	r4, r0, #1
  40606a:	d03c      	beq.n	4060e6 <__sflush_r+0xce>
  40606c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406070:	692a      	ldr	r2, [r5, #16]
  406072:	602a      	str	r2, [r5, #0]
  406074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406078:	2200      	movs	r2, #0
  40607a:	81ab      	strh	r3, [r5, #12]
  40607c:	04db      	lsls	r3, r3, #19
  40607e:	606a      	str	r2, [r5, #4]
  406080:	d447      	bmi.n	406112 <__sflush_r+0xfa>
  406082:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406084:	f8c8 6000 	str.w	r6, [r8]
  406088:	b311      	cbz	r1, 4060d0 <__sflush_r+0xb8>
  40608a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40608e:	4299      	cmp	r1, r3
  406090:	d002      	beq.n	406098 <__sflush_r+0x80>
  406092:	4640      	mov	r0, r8
  406094:	f000 f9de 	bl	406454 <_free_r>
  406098:	2000      	movs	r0, #0
  40609a:	6328      	str	r0, [r5, #48]	; 0x30
  40609c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4060a0:	692e      	ldr	r6, [r5, #16]
  4060a2:	b1ae      	cbz	r6, 4060d0 <__sflush_r+0xb8>
  4060a4:	682c      	ldr	r4, [r5, #0]
  4060a6:	602e      	str	r6, [r5, #0]
  4060a8:	0791      	lsls	r1, r2, #30
  4060aa:	bf0c      	ite	eq
  4060ac:	696b      	ldreq	r3, [r5, #20]
  4060ae:	2300      	movne	r3, #0
  4060b0:	1ba4      	subs	r4, r4, r6
  4060b2:	60ab      	str	r3, [r5, #8]
  4060b4:	e00a      	b.n	4060cc <__sflush_r+0xb4>
  4060b6:	4623      	mov	r3, r4
  4060b8:	4632      	mov	r2, r6
  4060ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4060bc:	69e9      	ldr	r1, [r5, #28]
  4060be:	4640      	mov	r0, r8
  4060c0:	47b8      	blx	r7
  4060c2:	2800      	cmp	r0, #0
  4060c4:	eba4 0400 	sub.w	r4, r4, r0
  4060c8:	4406      	add	r6, r0
  4060ca:	dd04      	ble.n	4060d6 <__sflush_r+0xbe>
  4060cc:	2c00      	cmp	r4, #0
  4060ce:	dcf2      	bgt.n	4060b6 <__sflush_r+0x9e>
  4060d0:	2000      	movs	r0, #0
  4060d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4060d6:	89ab      	ldrh	r3, [r5, #12]
  4060d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4060dc:	81ab      	strh	r3, [r5, #12]
  4060de:	f04f 30ff 	mov.w	r0, #4294967295
  4060e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4060e6:	f8d8 4000 	ldr.w	r4, [r8]
  4060ea:	2c1d      	cmp	r4, #29
  4060ec:	d8f3      	bhi.n	4060d6 <__sflush_r+0xbe>
  4060ee:	4b19      	ldr	r3, [pc, #100]	; (406154 <__sflush_r+0x13c>)
  4060f0:	40e3      	lsrs	r3, r4
  4060f2:	43db      	mvns	r3, r3
  4060f4:	f013 0301 	ands.w	r3, r3, #1
  4060f8:	d1ed      	bne.n	4060d6 <__sflush_r+0xbe>
  4060fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4060fe:	606b      	str	r3, [r5, #4]
  406100:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406104:	6929      	ldr	r1, [r5, #16]
  406106:	81ab      	strh	r3, [r5, #12]
  406108:	04da      	lsls	r2, r3, #19
  40610a:	6029      	str	r1, [r5, #0]
  40610c:	d5b9      	bpl.n	406082 <__sflush_r+0x6a>
  40610e:	2c00      	cmp	r4, #0
  406110:	d1b7      	bne.n	406082 <__sflush_r+0x6a>
  406112:	6528      	str	r0, [r5, #80]	; 0x50
  406114:	e7b5      	b.n	406082 <__sflush_r+0x6a>
  406116:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406118:	2a00      	cmp	r2, #0
  40611a:	dc8c      	bgt.n	406036 <__sflush_r+0x1e>
  40611c:	e7d8      	b.n	4060d0 <__sflush_r+0xb8>
  40611e:	2301      	movs	r3, #1
  406120:	69e9      	ldr	r1, [r5, #28]
  406122:	4640      	mov	r0, r8
  406124:	47a0      	blx	r4
  406126:	1c43      	adds	r3, r0, #1
  406128:	4602      	mov	r2, r0
  40612a:	d002      	beq.n	406132 <__sflush_r+0x11a>
  40612c:	89ab      	ldrh	r3, [r5, #12]
  40612e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406130:	e78e      	b.n	406050 <__sflush_r+0x38>
  406132:	f8d8 3000 	ldr.w	r3, [r8]
  406136:	2b00      	cmp	r3, #0
  406138:	d0f8      	beq.n	40612c <__sflush_r+0x114>
  40613a:	2b1d      	cmp	r3, #29
  40613c:	d001      	beq.n	406142 <__sflush_r+0x12a>
  40613e:	2b16      	cmp	r3, #22
  406140:	d102      	bne.n	406148 <__sflush_r+0x130>
  406142:	f8c8 6000 	str.w	r6, [r8]
  406146:	e7c3      	b.n	4060d0 <__sflush_r+0xb8>
  406148:	89ab      	ldrh	r3, [r5, #12]
  40614a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40614e:	81ab      	strh	r3, [r5, #12]
  406150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406154:	20400001 	.word	0x20400001

00406158 <_fflush_r>:
  406158:	b538      	push	{r3, r4, r5, lr}
  40615a:	460d      	mov	r5, r1
  40615c:	4604      	mov	r4, r0
  40615e:	b108      	cbz	r0, 406164 <_fflush_r+0xc>
  406160:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406162:	b1bb      	cbz	r3, 406194 <_fflush_r+0x3c>
  406164:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  406168:	b188      	cbz	r0, 40618e <_fflush_r+0x36>
  40616a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40616c:	07db      	lsls	r3, r3, #31
  40616e:	d401      	bmi.n	406174 <_fflush_r+0x1c>
  406170:	0581      	lsls	r1, r0, #22
  406172:	d517      	bpl.n	4061a4 <_fflush_r+0x4c>
  406174:	4620      	mov	r0, r4
  406176:	4629      	mov	r1, r5
  406178:	f7ff ff4e 	bl	406018 <__sflush_r>
  40617c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40617e:	07da      	lsls	r2, r3, #31
  406180:	4604      	mov	r4, r0
  406182:	d402      	bmi.n	40618a <_fflush_r+0x32>
  406184:	89ab      	ldrh	r3, [r5, #12]
  406186:	059b      	lsls	r3, r3, #22
  406188:	d507      	bpl.n	40619a <_fflush_r+0x42>
  40618a:	4620      	mov	r0, r4
  40618c:	bd38      	pop	{r3, r4, r5, pc}
  40618e:	4604      	mov	r4, r0
  406190:	4620      	mov	r0, r4
  406192:	bd38      	pop	{r3, r4, r5, pc}
  406194:	f000 f838 	bl	406208 <__sinit>
  406198:	e7e4      	b.n	406164 <_fflush_r+0xc>
  40619a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40619c:	f000 fbf6 	bl	40698c <__retarget_lock_release_recursive>
  4061a0:	4620      	mov	r0, r4
  4061a2:	bd38      	pop	{r3, r4, r5, pc}
  4061a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4061a6:	f000 fbef 	bl	406988 <__retarget_lock_acquire_recursive>
  4061aa:	e7e3      	b.n	406174 <_fflush_r+0x1c>

004061ac <_cleanup_r>:
  4061ac:	4901      	ldr	r1, [pc, #4]	; (4061b4 <_cleanup_r+0x8>)
  4061ae:	f000 bbaf 	b.w	406910 <_fwalk_reent>
  4061b2:	bf00      	nop
  4061b4:	00407221 	.word	0x00407221

004061b8 <std.isra.0>:
  4061b8:	b510      	push	{r4, lr}
  4061ba:	2300      	movs	r3, #0
  4061bc:	4604      	mov	r4, r0
  4061be:	8181      	strh	r1, [r0, #12]
  4061c0:	81c2      	strh	r2, [r0, #14]
  4061c2:	6003      	str	r3, [r0, #0]
  4061c4:	6043      	str	r3, [r0, #4]
  4061c6:	6083      	str	r3, [r0, #8]
  4061c8:	6643      	str	r3, [r0, #100]	; 0x64
  4061ca:	6103      	str	r3, [r0, #16]
  4061cc:	6143      	str	r3, [r0, #20]
  4061ce:	6183      	str	r3, [r0, #24]
  4061d0:	4619      	mov	r1, r3
  4061d2:	2208      	movs	r2, #8
  4061d4:	305c      	adds	r0, #92	; 0x5c
  4061d6:	f7fe fe27 	bl	404e28 <memset>
  4061da:	4807      	ldr	r0, [pc, #28]	; (4061f8 <std.isra.0+0x40>)
  4061dc:	4907      	ldr	r1, [pc, #28]	; (4061fc <std.isra.0+0x44>)
  4061de:	4a08      	ldr	r2, [pc, #32]	; (406200 <std.isra.0+0x48>)
  4061e0:	4b08      	ldr	r3, [pc, #32]	; (406204 <std.isra.0+0x4c>)
  4061e2:	6220      	str	r0, [r4, #32]
  4061e4:	61e4      	str	r4, [r4, #28]
  4061e6:	6261      	str	r1, [r4, #36]	; 0x24
  4061e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4061ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4061ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4061f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4061f4:	f000 bbc4 	b.w	406980 <__retarget_lock_init_recursive>
  4061f8:	00406f65 	.word	0x00406f65
  4061fc:	00406f89 	.word	0x00406f89
  406200:	00406fc5 	.word	0x00406fc5
  406204:	00406fe5 	.word	0x00406fe5

00406208 <__sinit>:
  406208:	b510      	push	{r4, lr}
  40620a:	4604      	mov	r4, r0
  40620c:	4812      	ldr	r0, [pc, #72]	; (406258 <__sinit+0x50>)
  40620e:	f000 fbbb 	bl	406988 <__retarget_lock_acquire_recursive>
  406212:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406214:	b9d2      	cbnz	r2, 40624c <__sinit+0x44>
  406216:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40621a:	4810      	ldr	r0, [pc, #64]	; (40625c <__sinit+0x54>)
  40621c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406220:	2103      	movs	r1, #3
  406222:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406226:	63e0      	str	r0, [r4, #60]	; 0x3c
  406228:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40622c:	6860      	ldr	r0, [r4, #4]
  40622e:	2104      	movs	r1, #4
  406230:	f7ff ffc2 	bl	4061b8 <std.isra.0>
  406234:	2201      	movs	r2, #1
  406236:	2109      	movs	r1, #9
  406238:	68a0      	ldr	r0, [r4, #8]
  40623a:	f7ff ffbd 	bl	4061b8 <std.isra.0>
  40623e:	2202      	movs	r2, #2
  406240:	2112      	movs	r1, #18
  406242:	68e0      	ldr	r0, [r4, #12]
  406244:	f7ff ffb8 	bl	4061b8 <std.isra.0>
  406248:	2301      	movs	r3, #1
  40624a:	63a3      	str	r3, [r4, #56]	; 0x38
  40624c:	4802      	ldr	r0, [pc, #8]	; (406258 <__sinit+0x50>)
  40624e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406252:	f000 bb9b 	b.w	40698c <__retarget_lock_release_recursive>
  406256:	bf00      	nop
  406258:	20400ee8 	.word	0x20400ee8
  40625c:	004061ad 	.word	0x004061ad

00406260 <__sfp_lock_acquire>:
  406260:	4801      	ldr	r0, [pc, #4]	; (406268 <__sfp_lock_acquire+0x8>)
  406262:	f000 bb91 	b.w	406988 <__retarget_lock_acquire_recursive>
  406266:	bf00      	nop
  406268:	20400efc 	.word	0x20400efc

0040626c <__sfp_lock_release>:
  40626c:	4801      	ldr	r0, [pc, #4]	; (406274 <__sfp_lock_release+0x8>)
  40626e:	f000 bb8d 	b.w	40698c <__retarget_lock_release_recursive>
  406272:	bf00      	nop
  406274:	20400efc 	.word	0x20400efc

00406278 <__libc_fini_array>:
  406278:	b538      	push	{r3, r4, r5, lr}
  40627a:	4c0a      	ldr	r4, [pc, #40]	; (4062a4 <__libc_fini_array+0x2c>)
  40627c:	4d0a      	ldr	r5, [pc, #40]	; (4062a8 <__libc_fini_array+0x30>)
  40627e:	1b64      	subs	r4, r4, r5
  406280:	10a4      	asrs	r4, r4, #2
  406282:	d00a      	beq.n	40629a <__libc_fini_array+0x22>
  406284:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406288:	3b01      	subs	r3, #1
  40628a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40628e:	3c01      	subs	r4, #1
  406290:	f855 3904 	ldr.w	r3, [r5], #-4
  406294:	4798      	blx	r3
  406296:	2c00      	cmp	r4, #0
  406298:	d1f9      	bne.n	40628e <__libc_fini_array+0x16>
  40629a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40629e:	f001 bb39 	b.w	407914 <_fini>
  4062a2:	bf00      	nop
  4062a4:	00407924 	.word	0x00407924
  4062a8:	00407920 	.word	0x00407920

004062ac <__fputwc>:
  4062ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4062b0:	b082      	sub	sp, #8
  4062b2:	4680      	mov	r8, r0
  4062b4:	4689      	mov	r9, r1
  4062b6:	4614      	mov	r4, r2
  4062b8:	f000 fb54 	bl	406964 <__locale_mb_cur_max>
  4062bc:	2801      	cmp	r0, #1
  4062be:	d036      	beq.n	40632e <__fputwc+0x82>
  4062c0:	464a      	mov	r2, r9
  4062c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4062c6:	a901      	add	r1, sp, #4
  4062c8:	4640      	mov	r0, r8
  4062ca:	f000 fee7 	bl	40709c <_wcrtomb_r>
  4062ce:	1c42      	adds	r2, r0, #1
  4062d0:	4606      	mov	r6, r0
  4062d2:	d025      	beq.n	406320 <__fputwc+0x74>
  4062d4:	b3a8      	cbz	r0, 406342 <__fputwc+0x96>
  4062d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4062da:	2500      	movs	r5, #0
  4062dc:	f10d 0a04 	add.w	sl, sp, #4
  4062e0:	e009      	b.n	4062f6 <__fputwc+0x4a>
  4062e2:	6823      	ldr	r3, [r4, #0]
  4062e4:	1c5a      	adds	r2, r3, #1
  4062e6:	6022      	str	r2, [r4, #0]
  4062e8:	f883 e000 	strb.w	lr, [r3]
  4062ec:	3501      	adds	r5, #1
  4062ee:	42b5      	cmp	r5, r6
  4062f0:	d227      	bcs.n	406342 <__fputwc+0x96>
  4062f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4062f6:	68a3      	ldr	r3, [r4, #8]
  4062f8:	3b01      	subs	r3, #1
  4062fa:	2b00      	cmp	r3, #0
  4062fc:	60a3      	str	r3, [r4, #8]
  4062fe:	daf0      	bge.n	4062e2 <__fputwc+0x36>
  406300:	69a7      	ldr	r7, [r4, #24]
  406302:	42bb      	cmp	r3, r7
  406304:	4671      	mov	r1, lr
  406306:	4622      	mov	r2, r4
  406308:	4640      	mov	r0, r8
  40630a:	db02      	blt.n	406312 <__fputwc+0x66>
  40630c:	f1be 0f0a 	cmp.w	lr, #10
  406310:	d1e7      	bne.n	4062e2 <__fputwc+0x36>
  406312:	f000 fe6b 	bl	406fec <__swbuf_r>
  406316:	1c43      	adds	r3, r0, #1
  406318:	d1e8      	bne.n	4062ec <__fputwc+0x40>
  40631a:	b002      	add	sp, #8
  40631c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406320:	89a3      	ldrh	r3, [r4, #12]
  406322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406326:	81a3      	strh	r3, [r4, #12]
  406328:	b002      	add	sp, #8
  40632a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40632e:	f109 33ff 	add.w	r3, r9, #4294967295
  406332:	2bfe      	cmp	r3, #254	; 0xfe
  406334:	d8c4      	bhi.n	4062c0 <__fputwc+0x14>
  406336:	fa5f fe89 	uxtb.w	lr, r9
  40633a:	4606      	mov	r6, r0
  40633c:	f88d e004 	strb.w	lr, [sp, #4]
  406340:	e7cb      	b.n	4062da <__fputwc+0x2e>
  406342:	4648      	mov	r0, r9
  406344:	b002      	add	sp, #8
  406346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40634a:	bf00      	nop

0040634c <_fputwc_r>:
  40634c:	b530      	push	{r4, r5, lr}
  40634e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406350:	f013 0f01 	tst.w	r3, #1
  406354:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406358:	4614      	mov	r4, r2
  40635a:	b083      	sub	sp, #12
  40635c:	4605      	mov	r5, r0
  40635e:	b29a      	uxth	r2, r3
  406360:	d101      	bne.n	406366 <_fputwc_r+0x1a>
  406362:	0590      	lsls	r0, r2, #22
  406364:	d51c      	bpl.n	4063a0 <_fputwc_r+0x54>
  406366:	0490      	lsls	r0, r2, #18
  406368:	d406      	bmi.n	406378 <_fputwc_r+0x2c>
  40636a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40636c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406374:	81a3      	strh	r3, [r4, #12]
  406376:	6662      	str	r2, [r4, #100]	; 0x64
  406378:	4628      	mov	r0, r5
  40637a:	4622      	mov	r2, r4
  40637c:	f7ff ff96 	bl	4062ac <__fputwc>
  406380:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406382:	07da      	lsls	r2, r3, #31
  406384:	4605      	mov	r5, r0
  406386:	d402      	bmi.n	40638e <_fputwc_r+0x42>
  406388:	89a3      	ldrh	r3, [r4, #12]
  40638a:	059b      	lsls	r3, r3, #22
  40638c:	d502      	bpl.n	406394 <_fputwc_r+0x48>
  40638e:	4628      	mov	r0, r5
  406390:	b003      	add	sp, #12
  406392:	bd30      	pop	{r4, r5, pc}
  406394:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406396:	f000 faf9 	bl	40698c <__retarget_lock_release_recursive>
  40639a:	4628      	mov	r0, r5
  40639c:	b003      	add	sp, #12
  40639e:	bd30      	pop	{r4, r5, pc}
  4063a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4063a2:	9101      	str	r1, [sp, #4]
  4063a4:	f000 faf0 	bl	406988 <__retarget_lock_acquire_recursive>
  4063a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063ac:	9901      	ldr	r1, [sp, #4]
  4063ae:	b29a      	uxth	r2, r3
  4063b0:	e7d9      	b.n	406366 <_fputwc_r+0x1a>
  4063b2:	bf00      	nop

004063b4 <_malloc_trim_r>:
  4063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4063b6:	4f24      	ldr	r7, [pc, #144]	; (406448 <_malloc_trim_r+0x94>)
  4063b8:	460c      	mov	r4, r1
  4063ba:	4606      	mov	r6, r0
  4063bc:	f7fe fd82 	bl	404ec4 <__malloc_lock>
  4063c0:	68bb      	ldr	r3, [r7, #8]
  4063c2:	685d      	ldr	r5, [r3, #4]
  4063c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4063c8:	310f      	adds	r1, #15
  4063ca:	f025 0503 	bic.w	r5, r5, #3
  4063ce:	4429      	add	r1, r5
  4063d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4063d4:	f021 010f 	bic.w	r1, r1, #15
  4063d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4063dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4063e0:	db07      	blt.n	4063f2 <_malloc_trim_r+0x3e>
  4063e2:	2100      	movs	r1, #0
  4063e4:	4630      	mov	r0, r6
  4063e6:	f7fe fd79 	bl	404edc <_sbrk_r>
  4063ea:	68bb      	ldr	r3, [r7, #8]
  4063ec:	442b      	add	r3, r5
  4063ee:	4298      	cmp	r0, r3
  4063f0:	d004      	beq.n	4063fc <_malloc_trim_r+0x48>
  4063f2:	4630      	mov	r0, r6
  4063f4:	f7fe fd6c 	bl	404ed0 <__malloc_unlock>
  4063f8:	2000      	movs	r0, #0
  4063fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4063fc:	4261      	negs	r1, r4
  4063fe:	4630      	mov	r0, r6
  406400:	f7fe fd6c 	bl	404edc <_sbrk_r>
  406404:	3001      	adds	r0, #1
  406406:	d00d      	beq.n	406424 <_malloc_trim_r+0x70>
  406408:	4b10      	ldr	r3, [pc, #64]	; (40644c <_malloc_trim_r+0x98>)
  40640a:	68ba      	ldr	r2, [r7, #8]
  40640c:	6819      	ldr	r1, [r3, #0]
  40640e:	1b2d      	subs	r5, r5, r4
  406410:	f045 0501 	orr.w	r5, r5, #1
  406414:	4630      	mov	r0, r6
  406416:	1b09      	subs	r1, r1, r4
  406418:	6055      	str	r5, [r2, #4]
  40641a:	6019      	str	r1, [r3, #0]
  40641c:	f7fe fd58 	bl	404ed0 <__malloc_unlock>
  406420:	2001      	movs	r0, #1
  406422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406424:	2100      	movs	r1, #0
  406426:	4630      	mov	r0, r6
  406428:	f7fe fd58 	bl	404edc <_sbrk_r>
  40642c:	68ba      	ldr	r2, [r7, #8]
  40642e:	1a83      	subs	r3, r0, r2
  406430:	2b0f      	cmp	r3, #15
  406432:	ddde      	ble.n	4063f2 <_malloc_trim_r+0x3e>
  406434:	4c06      	ldr	r4, [pc, #24]	; (406450 <_malloc_trim_r+0x9c>)
  406436:	4905      	ldr	r1, [pc, #20]	; (40644c <_malloc_trim_r+0x98>)
  406438:	6824      	ldr	r4, [r4, #0]
  40643a:	f043 0301 	orr.w	r3, r3, #1
  40643e:	1b00      	subs	r0, r0, r4
  406440:	6053      	str	r3, [r2, #4]
  406442:	6008      	str	r0, [r1, #0]
  406444:	e7d5      	b.n	4063f2 <_malloc_trim_r+0x3e>
  406446:	bf00      	nop
  406448:	20400450 	.word	0x20400450
  40644c:	20400db8 	.word	0x20400db8
  406450:	20400858 	.word	0x20400858

00406454 <_free_r>:
  406454:	2900      	cmp	r1, #0
  406456:	d044      	beq.n	4064e2 <_free_r+0x8e>
  406458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40645c:	460d      	mov	r5, r1
  40645e:	4680      	mov	r8, r0
  406460:	f7fe fd30 	bl	404ec4 <__malloc_lock>
  406464:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406468:	4969      	ldr	r1, [pc, #420]	; (406610 <_free_r+0x1bc>)
  40646a:	f027 0301 	bic.w	r3, r7, #1
  40646e:	f1a5 0408 	sub.w	r4, r5, #8
  406472:	18e2      	adds	r2, r4, r3
  406474:	688e      	ldr	r6, [r1, #8]
  406476:	6850      	ldr	r0, [r2, #4]
  406478:	42b2      	cmp	r2, r6
  40647a:	f020 0003 	bic.w	r0, r0, #3
  40647e:	d05e      	beq.n	40653e <_free_r+0xea>
  406480:	07fe      	lsls	r6, r7, #31
  406482:	6050      	str	r0, [r2, #4]
  406484:	d40b      	bmi.n	40649e <_free_r+0x4a>
  406486:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40648a:	1be4      	subs	r4, r4, r7
  40648c:	f101 0e08 	add.w	lr, r1, #8
  406490:	68a5      	ldr	r5, [r4, #8]
  406492:	4575      	cmp	r5, lr
  406494:	443b      	add	r3, r7
  406496:	d06d      	beq.n	406574 <_free_r+0x120>
  406498:	68e7      	ldr	r7, [r4, #12]
  40649a:	60ef      	str	r7, [r5, #12]
  40649c:	60bd      	str	r5, [r7, #8]
  40649e:	1815      	adds	r5, r2, r0
  4064a0:	686d      	ldr	r5, [r5, #4]
  4064a2:	07ed      	lsls	r5, r5, #31
  4064a4:	d53e      	bpl.n	406524 <_free_r+0xd0>
  4064a6:	f043 0201 	orr.w	r2, r3, #1
  4064aa:	6062      	str	r2, [r4, #4]
  4064ac:	50e3      	str	r3, [r4, r3]
  4064ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4064b2:	d217      	bcs.n	4064e4 <_free_r+0x90>
  4064b4:	08db      	lsrs	r3, r3, #3
  4064b6:	1c58      	adds	r0, r3, #1
  4064b8:	109a      	asrs	r2, r3, #2
  4064ba:	684d      	ldr	r5, [r1, #4]
  4064bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4064c0:	60a7      	str	r7, [r4, #8]
  4064c2:	2301      	movs	r3, #1
  4064c4:	4093      	lsls	r3, r2
  4064c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4064ca:	432b      	orrs	r3, r5
  4064cc:	3a08      	subs	r2, #8
  4064ce:	60e2      	str	r2, [r4, #12]
  4064d0:	604b      	str	r3, [r1, #4]
  4064d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4064d6:	60fc      	str	r4, [r7, #12]
  4064d8:	4640      	mov	r0, r8
  4064da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4064de:	f7fe bcf7 	b.w	404ed0 <__malloc_unlock>
  4064e2:	4770      	bx	lr
  4064e4:	0a5a      	lsrs	r2, r3, #9
  4064e6:	2a04      	cmp	r2, #4
  4064e8:	d852      	bhi.n	406590 <_free_r+0x13c>
  4064ea:	099a      	lsrs	r2, r3, #6
  4064ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4064f0:	00ff      	lsls	r7, r7, #3
  4064f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4064f6:	19c8      	adds	r0, r1, r7
  4064f8:	59ca      	ldr	r2, [r1, r7]
  4064fa:	3808      	subs	r0, #8
  4064fc:	4290      	cmp	r0, r2
  4064fe:	d04f      	beq.n	4065a0 <_free_r+0x14c>
  406500:	6851      	ldr	r1, [r2, #4]
  406502:	f021 0103 	bic.w	r1, r1, #3
  406506:	428b      	cmp	r3, r1
  406508:	d232      	bcs.n	406570 <_free_r+0x11c>
  40650a:	6892      	ldr	r2, [r2, #8]
  40650c:	4290      	cmp	r0, r2
  40650e:	d1f7      	bne.n	406500 <_free_r+0xac>
  406510:	68c3      	ldr	r3, [r0, #12]
  406512:	60a0      	str	r0, [r4, #8]
  406514:	60e3      	str	r3, [r4, #12]
  406516:	609c      	str	r4, [r3, #8]
  406518:	60c4      	str	r4, [r0, #12]
  40651a:	4640      	mov	r0, r8
  40651c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406520:	f7fe bcd6 	b.w	404ed0 <__malloc_unlock>
  406524:	6895      	ldr	r5, [r2, #8]
  406526:	4f3b      	ldr	r7, [pc, #236]	; (406614 <_free_r+0x1c0>)
  406528:	42bd      	cmp	r5, r7
  40652a:	4403      	add	r3, r0
  40652c:	d040      	beq.n	4065b0 <_free_r+0x15c>
  40652e:	68d0      	ldr	r0, [r2, #12]
  406530:	60e8      	str	r0, [r5, #12]
  406532:	f043 0201 	orr.w	r2, r3, #1
  406536:	6085      	str	r5, [r0, #8]
  406538:	6062      	str	r2, [r4, #4]
  40653a:	50e3      	str	r3, [r4, r3]
  40653c:	e7b7      	b.n	4064ae <_free_r+0x5a>
  40653e:	07ff      	lsls	r7, r7, #31
  406540:	4403      	add	r3, r0
  406542:	d407      	bmi.n	406554 <_free_r+0x100>
  406544:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406548:	1aa4      	subs	r4, r4, r2
  40654a:	4413      	add	r3, r2
  40654c:	68a0      	ldr	r0, [r4, #8]
  40654e:	68e2      	ldr	r2, [r4, #12]
  406550:	60c2      	str	r2, [r0, #12]
  406552:	6090      	str	r0, [r2, #8]
  406554:	4a30      	ldr	r2, [pc, #192]	; (406618 <_free_r+0x1c4>)
  406556:	6812      	ldr	r2, [r2, #0]
  406558:	f043 0001 	orr.w	r0, r3, #1
  40655c:	4293      	cmp	r3, r2
  40655e:	6060      	str	r0, [r4, #4]
  406560:	608c      	str	r4, [r1, #8]
  406562:	d3b9      	bcc.n	4064d8 <_free_r+0x84>
  406564:	4b2d      	ldr	r3, [pc, #180]	; (40661c <_free_r+0x1c8>)
  406566:	4640      	mov	r0, r8
  406568:	6819      	ldr	r1, [r3, #0]
  40656a:	f7ff ff23 	bl	4063b4 <_malloc_trim_r>
  40656e:	e7b3      	b.n	4064d8 <_free_r+0x84>
  406570:	4610      	mov	r0, r2
  406572:	e7cd      	b.n	406510 <_free_r+0xbc>
  406574:	1811      	adds	r1, r2, r0
  406576:	6849      	ldr	r1, [r1, #4]
  406578:	07c9      	lsls	r1, r1, #31
  40657a:	d444      	bmi.n	406606 <_free_r+0x1b2>
  40657c:	6891      	ldr	r1, [r2, #8]
  40657e:	68d2      	ldr	r2, [r2, #12]
  406580:	60ca      	str	r2, [r1, #12]
  406582:	4403      	add	r3, r0
  406584:	f043 0001 	orr.w	r0, r3, #1
  406588:	6091      	str	r1, [r2, #8]
  40658a:	6060      	str	r0, [r4, #4]
  40658c:	50e3      	str	r3, [r4, r3]
  40658e:	e7a3      	b.n	4064d8 <_free_r+0x84>
  406590:	2a14      	cmp	r2, #20
  406592:	d816      	bhi.n	4065c2 <_free_r+0x16e>
  406594:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406598:	00ff      	lsls	r7, r7, #3
  40659a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40659e:	e7aa      	b.n	4064f6 <_free_r+0xa2>
  4065a0:	10aa      	asrs	r2, r5, #2
  4065a2:	2301      	movs	r3, #1
  4065a4:	684d      	ldr	r5, [r1, #4]
  4065a6:	4093      	lsls	r3, r2
  4065a8:	432b      	orrs	r3, r5
  4065aa:	604b      	str	r3, [r1, #4]
  4065ac:	4603      	mov	r3, r0
  4065ae:	e7b0      	b.n	406512 <_free_r+0xbe>
  4065b0:	f043 0201 	orr.w	r2, r3, #1
  4065b4:	614c      	str	r4, [r1, #20]
  4065b6:	610c      	str	r4, [r1, #16]
  4065b8:	60e5      	str	r5, [r4, #12]
  4065ba:	60a5      	str	r5, [r4, #8]
  4065bc:	6062      	str	r2, [r4, #4]
  4065be:	50e3      	str	r3, [r4, r3]
  4065c0:	e78a      	b.n	4064d8 <_free_r+0x84>
  4065c2:	2a54      	cmp	r2, #84	; 0x54
  4065c4:	d806      	bhi.n	4065d4 <_free_r+0x180>
  4065c6:	0b1a      	lsrs	r2, r3, #12
  4065c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4065cc:	00ff      	lsls	r7, r7, #3
  4065ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4065d2:	e790      	b.n	4064f6 <_free_r+0xa2>
  4065d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4065d8:	d806      	bhi.n	4065e8 <_free_r+0x194>
  4065da:	0bda      	lsrs	r2, r3, #15
  4065dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4065e0:	00ff      	lsls	r7, r7, #3
  4065e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4065e6:	e786      	b.n	4064f6 <_free_r+0xa2>
  4065e8:	f240 5054 	movw	r0, #1364	; 0x554
  4065ec:	4282      	cmp	r2, r0
  4065ee:	d806      	bhi.n	4065fe <_free_r+0x1aa>
  4065f0:	0c9a      	lsrs	r2, r3, #18
  4065f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4065f6:	00ff      	lsls	r7, r7, #3
  4065f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4065fc:	e77b      	b.n	4064f6 <_free_r+0xa2>
  4065fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406602:	257e      	movs	r5, #126	; 0x7e
  406604:	e777      	b.n	4064f6 <_free_r+0xa2>
  406606:	f043 0101 	orr.w	r1, r3, #1
  40660a:	6061      	str	r1, [r4, #4]
  40660c:	6013      	str	r3, [r2, #0]
  40660e:	e763      	b.n	4064d8 <_free_r+0x84>
  406610:	20400450 	.word	0x20400450
  406614:	20400458 	.word	0x20400458
  406618:	2040085c 	.word	0x2040085c
  40661c:	20400de8 	.word	0x20400de8

00406620 <__sfvwrite_r>:
  406620:	6893      	ldr	r3, [r2, #8]
  406622:	2b00      	cmp	r3, #0
  406624:	d073      	beq.n	40670e <__sfvwrite_r+0xee>
  406626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40662a:	898b      	ldrh	r3, [r1, #12]
  40662c:	b083      	sub	sp, #12
  40662e:	460c      	mov	r4, r1
  406630:	0719      	lsls	r1, r3, #28
  406632:	9000      	str	r0, [sp, #0]
  406634:	4616      	mov	r6, r2
  406636:	d526      	bpl.n	406686 <__sfvwrite_r+0x66>
  406638:	6922      	ldr	r2, [r4, #16]
  40663a:	b322      	cbz	r2, 406686 <__sfvwrite_r+0x66>
  40663c:	f013 0002 	ands.w	r0, r3, #2
  406640:	6835      	ldr	r5, [r6, #0]
  406642:	d02c      	beq.n	40669e <__sfvwrite_r+0x7e>
  406644:	f04f 0900 	mov.w	r9, #0
  406648:	4fb0      	ldr	r7, [pc, #704]	; (40690c <__sfvwrite_r+0x2ec>)
  40664a:	46c8      	mov	r8, r9
  40664c:	46b2      	mov	sl, r6
  40664e:	45b8      	cmp	r8, r7
  406650:	4643      	mov	r3, r8
  406652:	464a      	mov	r2, r9
  406654:	bf28      	it	cs
  406656:	463b      	movcs	r3, r7
  406658:	9800      	ldr	r0, [sp, #0]
  40665a:	f1b8 0f00 	cmp.w	r8, #0
  40665e:	d050      	beq.n	406702 <__sfvwrite_r+0xe2>
  406660:	69e1      	ldr	r1, [r4, #28]
  406662:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406664:	47b0      	blx	r6
  406666:	2800      	cmp	r0, #0
  406668:	dd58      	ble.n	40671c <__sfvwrite_r+0xfc>
  40666a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40666e:	1a1b      	subs	r3, r3, r0
  406670:	4481      	add	r9, r0
  406672:	eba8 0800 	sub.w	r8, r8, r0
  406676:	f8ca 3008 	str.w	r3, [sl, #8]
  40667a:	2b00      	cmp	r3, #0
  40667c:	d1e7      	bne.n	40664e <__sfvwrite_r+0x2e>
  40667e:	2000      	movs	r0, #0
  406680:	b003      	add	sp, #12
  406682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406686:	4621      	mov	r1, r4
  406688:	9800      	ldr	r0, [sp, #0]
  40668a:	f7ff fc51 	bl	405f30 <__swsetup_r>
  40668e:	2800      	cmp	r0, #0
  406690:	f040 8133 	bne.w	4068fa <__sfvwrite_r+0x2da>
  406694:	89a3      	ldrh	r3, [r4, #12]
  406696:	6835      	ldr	r5, [r6, #0]
  406698:	f013 0002 	ands.w	r0, r3, #2
  40669c:	d1d2      	bne.n	406644 <__sfvwrite_r+0x24>
  40669e:	f013 0901 	ands.w	r9, r3, #1
  4066a2:	d145      	bne.n	406730 <__sfvwrite_r+0x110>
  4066a4:	464f      	mov	r7, r9
  4066a6:	9601      	str	r6, [sp, #4]
  4066a8:	b337      	cbz	r7, 4066f8 <__sfvwrite_r+0xd8>
  4066aa:	059a      	lsls	r2, r3, #22
  4066ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4066b0:	f140 8083 	bpl.w	4067ba <__sfvwrite_r+0x19a>
  4066b4:	4547      	cmp	r7, r8
  4066b6:	46c3      	mov	fp, r8
  4066b8:	f0c0 80ab 	bcc.w	406812 <__sfvwrite_r+0x1f2>
  4066bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4066c0:	f040 80ac 	bne.w	40681c <__sfvwrite_r+0x1fc>
  4066c4:	6820      	ldr	r0, [r4, #0]
  4066c6:	46ba      	mov	sl, r7
  4066c8:	465a      	mov	r2, fp
  4066ca:	4649      	mov	r1, r9
  4066cc:	f000 fa40 	bl	406b50 <memmove>
  4066d0:	68a2      	ldr	r2, [r4, #8]
  4066d2:	6823      	ldr	r3, [r4, #0]
  4066d4:	eba2 0208 	sub.w	r2, r2, r8
  4066d8:	445b      	add	r3, fp
  4066da:	60a2      	str	r2, [r4, #8]
  4066dc:	6023      	str	r3, [r4, #0]
  4066de:	9a01      	ldr	r2, [sp, #4]
  4066e0:	6893      	ldr	r3, [r2, #8]
  4066e2:	eba3 030a 	sub.w	r3, r3, sl
  4066e6:	44d1      	add	r9, sl
  4066e8:	eba7 070a 	sub.w	r7, r7, sl
  4066ec:	6093      	str	r3, [r2, #8]
  4066ee:	2b00      	cmp	r3, #0
  4066f0:	d0c5      	beq.n	40667e <__sfvwrite_r+0x5e>
  4066f2:	89a3      	ldrh	r3, [r4, #12]
  4066f4:	2f00      	cmp	r7, #0
  4066f6:	d1d8      	bne.n	4066aa <__sfvwrite_r+0x8a>
  4066f8:	f8d5 9000 	ldr.w	r9, [r5]
  4066fc:	686f      	ldr	r7, [r5, #4]
  4066fe:	3508      	adds	r5, #8
  406700:	e7d2      	b.n	4066a8 <__sfvwrite_r+0x88>
  406702:	f8d5 9000 	ldr.w	r9, [r5]
  406706:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40670a:	3508      	adds	r5, #8
  40670c:	e79f      	b.n	40664e <__sfvwrite_r+0x2e>
  40670e:	2000      	movs	r0, #0
  406710:	4770      	bx	lr
  406712:	4621      	mov	r1, r4
  406714:	9800      	ldr	r0, [sp, #0]
  406716:	f7ff fd1f 	bl	406158 <_fflush_r>
  40671a:	b370      	cbz	r0, 40677a <__sfvwrite_r+0x15a>
  40671c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406724:	f04f 30ff 	mov.w	r0, #4294967295
  406728:	81a3      	strh	r3, [r4, #12]
  40672a:	b003      	add	sp, #12
  40672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406730:	4681      	mov	r9, r0
  406732:	4633      	mov	r3, r6
  406734:	464e      	mov	r6, r9
  406736:	46a8      	mov	r8, r5
  406738:	469a      	mov	sl, r3
  40673a:	464d      	mov	r5, r9
  40673c:	b34e      	cbz	r6, 406792 <__sfvwrite_r+0x172>
  40673e:	b380      	cbz	r0, 4067a2 <__sfvwrite_r+0x182>
  406740:	6820      	ldr	r0, [r4, #0]
  406742:	6923      	ldr	r3, [r4, #16]
  406744:	6962      	ldr	r2, [r4, #20]
  406746:	45b1      	cmp	r9, r6
  406748:	46cb      	mov	fp, r9
  40674a:	bf28      	it	cs
  40674c:	46b3      	movcs	fp, r6
  40674e:	4298      	cmp	r0, r3
  406750:	465f      	mov	r7, fp
  406752:	d904      	bls.n	40675e <__sfvwrite_r+0x13e>
  406754:	68a3      	ldr	r3, [r4, #8]
  406756:	4413      	add	r3, r2
  406758:	459b      	cmp	fp, r3
  40675a:	f300 80a6 	bgt.w	4068aa <__sfvwrite_r+0x28a>
  40675e:	4593      	cmp	fp, r2
  406760:	db4b      	blt.n	4067fa <__sfvwrite_r+0x1da>
  406762:	4613      	mov	r3, r2
  406764:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406766:	69e1      	ldr	r1, [r4, #28]
  406768:	9800      	ldr	r0, [sp, #0]
  40676a:	462a      	mov	r2, r5
  40676c:	47b8      	blx	r7
  40676e:	1e07      	subs	r7, r0, #0
  406770:	ddd4      	ble.n	40671c <__sfvwrite_r+0xfc>
  406772:	ebb9 0907 	subs.w	r9, r9, r7
  406776:	d0cc      	beq.n	406712 <__sfvwrite_r+0xf2>
  406778:	2001      	movs	r0, #1
  40677a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40677e:	1bdb      	subs	r3, r3, r7
  406780:	443d      	add	r5, r7
  406782:	1bf6      	subs	r6, r6, r7
  406784:	f8ca 3008 	str.w	r3, [sl, #8]
  406788:	2b00      	cmp	r3, #0
  40678a:	f43f af78 	beq.w	40667e <__sfvwrite_r+0x5e>
  40678e:	2e00      	cmp	r6, #0
  406790:	d1d5      	bne.n	40673e <__sfvwrite_r+0x11e>
  406792:	f108 0308 	add.w	r3, r8, #8
  406796:	e913 0060 	ldmdb	r3, {r5, r6}
  40679a:	4698      	mov	r8, r3
  40679c:	3308      	adds	r3, #8
  40679e:	2e00      	cmp	r6, #0
  4067a0:	d0f9      	beq.n	406796 <__sfvwrite_r+0x176>
  4067a2:	4632      	mov	r2, r6
  4067a4:	210a      	movs	r1, #10
  4067a6:	4628      	mov	r0, r5
  4067a8:	f000 f982 	bl	406ab0 <memchr>
  4067ac:	2800      	cmp	r0, #0
  4067ae:	f000 80a1 	beq.w	4068f4 <__sfvwrite_r+0x2d4>
  4067b2:	3001      	adds	r0, #1
  4067b4:	eba0 0905 	sub.w	r9, r0, r5
  4067b8:	e7c2      	b.n	406740 <__sfvwrite_r+0x120>
  4067ba:	6820      	ldr	r0, [r4, #0]
  4067bc:	6923      	ldr	r3, [r4, #16]
  4067be:	4298      	cmp	r0, r3
  4067c0:	d802      	bhi.n	4067c8 <__sfvwrite_r+0x1a8>
  4067c2:	6963      	ldr	r3, [r4, #20]
  4067c4:	429f      	cmp	r7, r3
  4067c6:	d25d      	bcs.n	406884 <__sfvwrite_r+0x264>
  4067c8:	45b8      	cmp	r8, r7
  4067ca:	bf28      	it	cs
  4067cc:	46b8      	movcs	r8, r7
  4067ce:	4642      	mov	r2, r8
  4067d0:	4649      	mov	r1, r9
  4067d2:	f000 f9bd 	bl	406b50 <memmove>
  4067d6:	68a3      	ldr	r3, [r4, #8]
  4067d8:	6822      	ldr	r2, [r4, #0]
  4067da:	eba3 0308 	sub.w	r3, r3, r8
  4067de:	4442      	add	r2, r8
  4067e0:	60a3      	str	r3, [r4, #8]
  4067e2:	6022      	str	r2, [r4, #0]
  4067e4:	b10b      	cbz	r3, 4067ea <__sfvwrite_r+0x1ca>
  4067e6:	46c2      	mov	sl, r8
  4067e8:	e779      	b.n	4066de <__sfvwrite_r+0xbe>
  4067ea:	4621      	mov	r1, r4
  4067ec:	9800      	ldr	r0, [sp, #0]
  4067ee:	f7ff fcb3 	bl	406158 <_fflush_r>
  4067f2:	2800      	cmp	r0, #0
  4067f4:	d192      	bne.n	40671c <__sfvwrite_r+0xfc>
  4067f6:	46c2      	mov	sl, r8
  4067f8:	e771      	b.n	4066de <__sfvwrite_r+0xbe>
  4067fa:	465a      	mov	r2, fp
  4067fc:	4629      	mov	r1, r5
  4067fe:	f000 f9a7 	bl	406b50 <memmove>
  406802:	68a2      	ldr	r2, [r4, #8]
  406804:	6823      	ldr	r3, [r4, #0]
  406806:	eba2 020b 	sub.w	r2, r2, fp
  40680a:	445b      	add	r3, fp
  40680c:	60a2      	str	r2, [r4, #8]
  40680e:	6023      	str	r3, [r4, #0]
  406810:	e7af      	b.n	406772 <__sfvwrite_r+0x152>
  406812:	6820      	ldr	r0, [r4, #0]
  406814:	46b8      	mov	r8, r7
  406816:	46ba      	mov	sl, r7
  406818:	46bb      	mov	fp, r7
  40681a:	e755      	b.n	4066c8 <__sfvwrite_r+0xa8>
  40681c:	6962      	ldr	r2, [r4, #20]
  40681e:	6820      	ldr	r0, [r4, #0]
  406820:	6921      	ldr	r1, [r4, #16]
  406822:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406826:	eba0 0a01 	sub.w	sl, r0, r1
  40682a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40682e:	f10a 0001 	add.w	r0, sl, #1
  406832:	ea4f 0868 	mov.w	r8, r8, asr #1
  406836:	4438      	add	r0, r7
  406838:	4540      	cmp	r0, r8
  40683a:	4642      	mov	r2, r8
  40683c:	bf84      	itt	hi
  40683e:	4680      	movhi	r8, r0
  406840:	4642      	movhi	r2, r8
  406842:	055b      	lsls	r3, r3, #21
  406844:	d544      	bpl.n	4068d0 <__sfvwrite_r+0x2b0>
  406846:	4611      	mov	r1, r2
  406848:	9800      	ldr	r0, [sp, #0]
  40684a:	f7fd ffa3 	bl	404794 <_malloc_r>
  40684e:	4683      	mov	fp, r0
  406850:	2800      	cmp	r0, #0
  406852:	d055      	beq.n	406900 <__sfvwrite_r+0x2e0>
  406854:	4652      	mov	r2, sl
  406856:	6921      	ldr	r1, [r4, #16]
  406858:	f7fe fa4c 	bl	404cf4 <memcpy>
  40685c:	89a3      	ldrh	r3, [r4, #12]
  40685e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406866:	81a3      	strh	r3, [r4, #12]
  406868:	eb0b 000a 	add.w	r0, fp, sl
  40686c:	eba8 030a 	sub.w	r3, r8, sl
  406870:	f8c4 b010 	str.w	fp, [r4, #16]
  406874:	f8c4 8014 	str.w	r8, [r4, #20]
  406878:	6020      	str	r0, [r4, #0]
  40687a:	60a3      	str	r3, [r4, #8]
  40687c:	46b8      	mov	r8, r7
  40687e:	46ba      	mov	sl, r7
  406880:	46bb      	mov	fp, r7
  406882:	e721      	b.n	4066c8 <__sfvwrite_r+0xa8>
  406884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406888:	42b9      	cmp	r1, r7
  40688a:	bf28      	it	cs
  40688c:	4639      	movcs	r1, r7
  40688e:	464a      	mov	r2, r9
  406890:	fb91 f1f3 	sdiv	r1, r1, r3
  406894:	9800      	ldr	r0, [sp, #0]
  406896:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406898:	fb03 f301 	mul.w	r3, r3, r1
  40689c:	69e1      	ldr	r1, [r4, #28]
  40689e:	47b0      	blx	r6
  4068a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4068a4:	f73f af1b 	bgt.w	4066de <__sfvwrite_r+0xbe>
  4068a8:	e738      	b.n	40671c <__sfvwrite_r+0xfc>
  4068aa:	461a      	mov	r2, r3
  4068ac:	4629      	mov	r1, r5
  4068ae:	9301      	str	r3, [sp, #4]
  4068b0:	f000 f94e 	bl	406b50 <memmove>
  4068b4:	6822      	ldr	r2, [r4, #0]
  4068b6:	9b01      	ldr	r3, [sp, #4]
  4068b8:	9800      	ldr	r0, [sp, #0]
  4068ba:	441a      	add	r2, r3
  4068bc:	6022      	str	r2, [r4, #0]
  4068be:	4621      	mov	r1, r4
  4068c0:	f7ff fc4a 	bl	406158 <_fflush_r>
  4068c4:	9b01      	ldr	r3, [sp, #4]
  4068c6:	2800      	cmp	r0, #0
  4068c8:	f47f af28 	bne.w	40671c <__sfvwrite_r+0xfc>
  4068cc:	461f      	mov	r7, r3
  4068ce:	e750      	b.n	406772 <__sfvwrite_r+0x152>
  4068d0:	9800      	ldr	r0, [sp, #0]
  4068d2:	f000 f9a1 	bl	406c18 <_realloc_r>
  4068d6:	4683      	mov	fp, r0
  4068d8:	2800      	cmp	r0, #0
  4068da:	d1c5      	bne.n	406868 <__sfvwrite_r+0x248>
  4068dc:	9d00      	ldr	r5, [sp, #0]
  4068de:	6921      	ldr	r1, [r4, #16]
  4068e0:	4628      	mov	r0, r5
  4068e2:	f7ff fdb7 	bl	406454 <_free_r>
  4068e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4068ea:	220c      	movs	r2, #12
  4068ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4068f0:	602a      	str	r2, [r5, #0]
  4068f2:	e715      	b.n	406720 <__sfvwrite_r+0x100>
  4068f4:	f106 0901 	add.w	r9, r6, #1
  4068f8:	e722      	b.n	406740 <__sfvwrite_r+0x120>
  4068fa:	f04f 30ff 	mov.w	r0, #4294967295
  4068fe:	e6bf      	b.n	406680 <__sfvwrite_r+0x60>
  406900:	9a00      	ldr	r2, [sp, #0]
  406902:	230c      	movs	r3, #12
  406904:	6013      	str	r3, [r2, #0]
  406906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40690a:	e709      	b.n	406720 <__sfvwrite_r+0x100>
  40690c:	7ffffc00 	.word	0x7ffffc00

00406910 <_fwalk_reent>:
  406910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406914:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406918:	d01f      	beq.n	40695a <_fwalk_reent+0x4a>
  40691a:	4688      	mov	r8, r1
  40691c:	4606      	mov	r6, r0
  40691e:	f04f 0900 	mov.w	r9, #0
  406922:	687d      	ldr	r5, [r7, #4]
  406924:	68bc      	ldr	r4, [r7, #8]
  406926:	3d01      	subs	r5, #1
  406928:	d411      	bmi.n	40694e <_fwalk_reent+0x3e>
  40692a:	89a3      	ldrh	r3, [r4, #12]
  40692c:	2b01      	cmp	r3, #1
  40692e:	f105 35ff 	add.w	r5, r5, #4294967295
  406932:	d908      	bls.n	406946 <_fwalk_reent+0x36>
  406934:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406938:	3301      	adds	r3, #1
  40693a:	4621      	mov	r1, r4
  40693c:	4630      	mov	r0, r6
  40693e:	d002      	beq.n	406946 <_fwalk_reent+0x36>
  406940:	47c0      	blx	r8
  406942:	ea49 0900 	orr.w	r9, r9, r0
  406946:	1c6b      	adds	r3, r5, #1
  406948:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40694c:	d1ed      	bne.n	40692a <_fwalk_reent+0x1a>
  40694e:	683f      	ldr	r7, [r7, #0]
  406950:	2f00      	cmp	r7, #0
  406952:	d1e6      	bne.n	406922 <_fwalk_reent+0x12>
  406954:	4648      	mov	r0, r9
  406956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40695a:	46b9      	mov	r9, r7
  40695c:	4648      	mov	r0, r9
  40695e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406962:	bf00      	nop

00406964 <__locale_mb_cur_max>:
  406964:	4b04      	ldr	r3, [pc, #16]	; (406978 <__locale_mb_cur_max+0x14>)
  406966:	4a05      	ldr	r2, [pc, #20]	; (40697c <__locale_mb_cur_max+0x18>)
  406968:	681b      	ldr	r3, [r3, #0]
  40696a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40696c:	2b00      	cmp	r3, #0
  40696e:	bf08      	it	eq
  406970:	4613      	moveq	r3, r2
  406972:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406976:	4770      	bx	lr
  406978:	20400024 	.word	0x20400024
  40697c:	20400864 	.word	0x20400864

00406980 <__retarget_lock_init_recursive>:
  406980:	4770      	bx	lr
  406982:	bf00      	nop

00406984 <__retarget_lock_close_recursive>:
  406984:	4770      	bx	lr
  406986:	bf00      	nop

00406988 <__retarget_lock_acquire_recursive>:
  406988:	4770      	bx	lr
  40698a:	bf00      	nop

0040698c <__retarget_lock_release_recursive>:
  40698c:	4770      	bx	lr
  40698e:	bf00      	nop

00406990 <__swhatbuf_r>:
  406990:	b570      	push	{r4, r5, r6, lr}
  406992:	460c      	mov	r4, r1
  406994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406998:	2900      	cmp	r1, #0
  40699a:	b090      	sub	sp, #64	; 0x40
  40699c:	4615      	mov	r5, r2
  40699e:	461e      	mov	r6, r3
  4069a0:	db14      	blt.n	4069cc <__swhatbuf_r+0x3c>
  4069a2:	aa01      	add	r2, sp, #4
  4069a4:	f000 fc9e 	bl	4072e4 <_fstat_r>
  4069a8:	2800      	cmp	r0, #0
  4069aa:	db0f      	blt.n	4069cc <__swhatbuf_r+0x3c>
  4069ac:	9a02      	ldr	r2, [sp, #8]
  4069ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4069b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4069b6:	fab2 f282 	clz	r2, r2
  4069ba:	0952      	lsrs	r2, r2, #5
  4069bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4069c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4069c4:	6032      	str	r2, [r6, #0]
  4069c6:	602b      	str	r3, [r5, #0]
  4069c8:	b010      	add	sp, #64	; 0x40
  4069ca:	bd70      	pop	{r4, r5, r6, pc}
  4069cc:	89a2      	ldrh	r2, [r4, #12]
  4069ce:	2300      	movs	r3, #0
  4069d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4069d4:	6033      	str	r3, [r6, #0]
  4069d6:	d004      	beq.n	4069e2 <__swhatbuf_r+0x52>
  4069d8:	2240      	movs	r2, #64	; 0x40
  4069da:	4618      	mov	r0, r3
  4069dc:	602a      	str	r2, [r5, #0]
  4069de:	b010      	add	sp, #64	; 0x40
  4069e0:	bd70      	pop	{r4, r5, r6, pc}
  4069e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4069e6:	602b      	str	r3, [r5, #0]
  4069e8:	b010      	add	sp, #64	; 0x40
  4069ea:	bd70      	pop	{r4, r5, r6, pc}

004069ec <__smakebuf_r>:
  4069ec:	898a      	ldrh	r2, [r1, #12]
  4069ee:	0792      	lsls	r2, r2, #30
  4069f0:	460b      	mov	r3, r1
  4069f2:	d506      	bpl.n	406a02 <__smakebuf_r+0x16>
  4069f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4069f8:	2101      	movs	r1, #1
  4069fa:	601a      	str	r2, [r3, #0]
  4069fc:	611a      	str	r2, [r3, #16]
  4069fe:	6159      	str	r1, [r3, #20]
  406a00:	4770      	bx	lr
  406a02:	b5f0      	push	{r4, r5, r6, r7, lr}
  406a04:	b083      	sub	sp, #12
  406a06:	ab01      	add	r3, sp, #4
  406a08:	466a      	mov	r2, sp
  406a0a:	460c      	mov	r4, r1
  406a0c:	4606      	mov	r6, r0
  406a0e:	f7ff ffbf 	bl	406990 <__swhatbuf_r>
  406a12:	9900      	ldr	r1, [sp, #0]
  406a14:	4605      	mov	r5, r0
  406a16:	4630      	mov	r0, r6
  406a18:	f7fd febc 	bl	404794 <_malloc_r>
  406a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a20:	b1d8      	cbz	r0, 406a5a <__smakebuf_r+0x6e>
  406a22:	9a01      	ldr	r2, [sp, #4]
  406a24:	4f15      	ldr	r7, [pc, #84]	; (406a7c <__smakebuf_r+0x90>)
  406a26:	9900      	ldr	r1, [sp, #0]
  406a28:	63f7      	str	r7, [r6, #60]	; 0x3c
  406a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406a2e:	81a3      	strh	r3, [r4, #12]
  406a30:	6020      	str	r0, [r4, #0]
  406a32:	6120      	str	r0, [r4, #16]
  406a34:	6161      	str	r1, [r4, #20]
  406a36:	b91a      	cbnz	r2, 406a40 <__smakebuf_r+0x54>
  406a38:	432b      	orrs	r3, r5
  406a3a:	81a3      	strh	r3, [r4, #12]
  406a3c:	b003      	add	sp, #12
  406a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406a40:	4630      	mov	r0, r6
  406a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406a46:	f000 fc61 	bl	40730c <_isatty_r>
  406a4a:	b1a0      	cbz	r0, 406a76 <__smakebuf_r+0x8a>
  406a4c:	89a3      	ldrh	r3, [r4, #12]
  406a4e:	f023 0303 	bic.w	r3, r3, #3
  406a52:	f043 0301 	orr.w	r3, r3, #1
  406a56:	b21b      	sxth	r3, r3
  406a58:	e7ee      	b.n	406a38 <__smakebuf_r+0x4c>
  406a5a:	059a      	lsls	r2, r3, #22
  406a5c:	d4ee      	bmi.n	406a3c <__smakebuf_r+0x50>
  406a5e:	f023 0303 	bic.w	r3, r3, #3
  406a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406a66:	f043 0302 	orr.w	r3, r3, #2
  406a6a:	2101      	movs	r1, #1
  406a6c:	81a3      	strh	r3, [r4, #12]
  406a6e:	6022      	str	r2, [r4, #0]
  406a70:	6122      	str	r2, [r4, #16]
  406a72:	6161      	str	r1, [r4, #20]
  406a74:	e7e2      	b.n	406a3c <__smakebuf_r+0x50>
  406a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a7a:	e7dd      	b.n	406a38 <__smakebuf_r+0x4c>
  406a7c:	004061ad 	.word	0x004061ad

00406a80 <__ascii_mbtowc>:
  406a80:	b082      	sub	sp, #8
  406a82:	b149      	cbz	r1, 406a98 <__ascii_mbtowc+0x18>
  406a84:	b15a      	cbz	r2, 406a9e <__ascii_mbtowc+0x1e>
  406a86:	b16b      	cbz	r3, 406aa4 <__ascii_mbtowc+0x24>
  406a88:	7813      	ldrb	r3, [r2, #0]
  406a8a:	600b      	str	r3, [r1, #0]
  406a8c:	7812      	ldrb	r2, [r2, #0]
  406a8e:	1c10      	adds	r0, r2, #0
  406a90:	bf18      	it	ne
  406a92:	2001      	movne	r0, #1
  406a94:	b002      	add	sp, #8
  406a96:	4770      	bx	lr
  406a98:	a901      	add	r1, sp, #4
  406a9a:	2a00      	cmp	r2, #0
  406a9c:	d1f3      	bne.n	406a86 <__ascii_mbtowc+0x6>
  406a9e:	4610      	mov	r0, r2
  406aa0:	b002      	add	sp, #8
  406aa2:	4770      	bx	lr
  406aa4:	f06f 0001 	mvn.w	r0, #1
  406aa8:	e7f4      	b.n	406a94 <__ascii_mbtowc+0x14>
  406aaa:	bf00      	nop
  406aac:	0000      	movs	r0, r0
	...

00406ab0 <memchr>:
  406ab0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406ab4:	2a10      	cmp	r2, #16
  406ab6:	db2b      	blt.n	406b10 <memchr+0x60>
  406ab8:	f010 0f07 	tst.w	r0, #7
  406abc:	d008      	beq.n	406ad0 <memchr+0x20>
  406abe:	f810 3b01 	ldrb.w	r3, [r0], #1
  406ac2:	3a01      	subs	r2, #1
  406ac4:	428b      	cmp	r3, r1
  406ac6:	d02d      	beq.n	406b24 <memchr+0x74>
  406ac8:	f010 0f07 	tst.w	r0, #7
  406acc:	b342      	cbz	r2, 406b20 <memchr+0x70>
  406ace:	d1f6      	bne.n	406abe <memchr+0xe>
  406ad0:	b4f0      	push	{r4, r5, r6, r7}
  406ad2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406ad6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406ada:	f022 0407 	bic.w	r4, r2, #7
  406ade:	f07f 0700 	mvns.w	r7, #0
  406ae2:	2300      	movs	r3, #0
  406ae4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406ae8:	3c08      	subs	r4, #8
  406aea:	ea85 0501 	eor.w	r5, r5, r1
  406aee:	ea86 0601 	eor.w	r6, r6, r1
  406af2:	fa85 f547 	uadd8	r5, r5, r7
  406af6:	faa3 f587 	sel	r5, r3, r7
  406afa:	fa86 f647 	uadd8	r6, r6, r7
  406afe:	faa5 f687 	sel	r6, r5, r7
  406b02:	b98e      	cbnz	r6, 406b28 <memchr+0x78>
  406b04:	d1ee      	bne.n	406ae4 <memchr+0x34>
  406b06:	bcf0      	pop	{r4, r5, r6, r7}
  406b08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406b0c:	f002 0207 	and.w	r2, r2, #7
  406b10:	b132      	cbz	r2, 406b20 <memchr+0x70>
  406b12:	f810 3b01 	ldrb.w	r3, [r0], #1
  406b16:	3a01      	subs	r2, #1
  406b18:	ea83 0301 	eor.w	r3, r3, r1
  406b1c:	b113      	cbz	r3, 406b24 <memchr+0x74>
  406b1e:	d1f8      	bne.n	406b12 <memchr+0x62>
  406b20:	2000      	movs	r0, #0
  406b22:	4770      	bx	lr
  406b24:	3801      	subs	r0, #1
  406b26:	4770      	bx	lr
  406b28:	2d00      	cmp	r5, #0
  406b2a:	bf06      	itte	eq
  406b2c:	4635      	moveq	r5, r6
  406b2e:	3803      	subeq	r0, #3
  406b30:	3807      	subne	r0, #7
  406b32:	f015 0f01 	tst.w	r5, #1
  406b36:	d107      	bne.n	406b48 <memchr+0x98>
  406b38:	3001      	adds	r0, #1
  406b3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406b3e:	bf02      	ittt	eq
  406b40:	3001      	addeq	r0, #1
  406b42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406b46:	3001      	addeq	r0, #1
  406b48:	bcf0      	pop	{r4, r5, r6, r7}
  406b4a:	3801      	subs	r0, #1
  406b4c:	4770      	bx	lr
  406b4e:	bf00      	nop

00406b50 <memmove>:
  406b50:	4288      	cmp	r0, r1
  406b52:	b5f0      	push	{r4, r5, r6, r7, lr}
  406b54:	d90d      	bls.n	406b72 <memmove+0x22>
  406b56:	188b      	adds	r3, r1, r2
  406b58:	4298      	cmp	r0, r3
  406b5a:	d20a      	bcs.n	406b72 <memmove+0x22>
  406b5c:	1884      	adds	r4, r0, r2
  406b5e:	2a00      	cmp	r2, #0
  406b60:	d051      	beq.n	406c06 <memmove+0xb6>
  406b62:	4622      	mov	r2, r4
  406b64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406b68:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406b6c:	4299      	cmp	r1, r3
  406b6e:	d1f9      	bne.n	406b64 <memmove+0x14>
  406b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b72:	2a0f      	cmp	r2, #15
  406b74:	d948      	bls.n	406c08 <memmove+0xb8>
  406b76:	ea41 0300 	orr.w	r3, r1, r0
  406b7a:	079b      	lsls	r3, r3, #30
  406b7c:	d146      	bne.n	406c0c <memmove+0xbc>
  406b7e:	f100 0410 	add.w	r4, r0, #16
  406b82:	f101 0310 	add.w	r3, r1, #16
  406b86:	4615      	mov	r5, r2
  406b88:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406b8c:	f844 6c10 	str.w	r6, [r4, #-16]
  406b90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406b94:	f844 6c0c 	str.w	r6, [r4, #-12]
  406b98:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406b9c:	f844 6c08 	str.w	r6, [r4, #-8]
  406ba0:	3d10      	subs	r5, #16
  406ba2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406ba6:	f844 6c04 	str.w	r6, [r4, #-4]
  406baa:	2d0f      	cmp	r5, #15
  406bac:	f103 0310 	add.w	r3, r3, #16
  406bb0:	f104 0410 	add.w	r4, r4, #16
  406bb4:	d8e8      	bhi.n	406b88 <memmove+0x38>
  406bb6:	f1a2 0310 	sub.w	r3, r2, #16
  406bba:	f023 030f 	bic.w	r3, r3, #15
  406bbe:	f002 0e0f 	and.w	lr, r2, #15
  406bc2:	3310      	adds	r3, #16
  406bc4:	f1be 0f03 	cmp.w	lr, #3
  406bc8:	4419      	add	r1, r3
  406bca:	4403      	add	r3, r0
  406bcc:	d921      	bls.n	406c12 <memmove+0xc2>
  406bce:	1f1e      	subs	r6, r3, #4
  406bd0:	460d      	mov	r5, r1
  406bd2:	4674      	mov	r4, lr
  406bd4:	3c04      	subs	r4, #4
  406bd6:	f855 7b04 	ldr.w	r7, [r5], #4
  406bda:	f846 7f04 	str.w	r7, [r6, #4]!
  406bde:	2c03      	cmp	r4, #3
  406be0:	d8f8      	bhi.n	406bd4 <memmove+0x84>
  406be2:	f1ae 0404 	sub.w	r4, lr, #4
  406be6:	f024 0403 	bic.w	r4, r4, #3
  406bea:	3404      	adds	r4, #4
  406bec:	4421      	add	r1, r4
  406bee:	4423      	add	r3, r4
  406bf0:	f002 0203 	and.w	r2, r2, #3
  406bf4:	b162      	cbz	r2, 406c10 <memmove+0xc0>
  406bf6:	3b01      	subs	r3, #1
  406bf8:	440a      	add	r2, r1
  406bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
  406bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
  406c02:	428a      	cmp	r2, r1
  406c04:	d1f9      	bne.n	406bfa <memmove+0xaa>
  406c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c08:	4603      	mov	r3, r0
  406c0a:	e7f3      	b.n	406bf4 <memmove+0xa4>
  406c0c:	4603      	mov	r3, r0
  406c0e:	e7f2      	b.n	406bf6 <memmove+0xa6>
  406c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c12:	4672      	mov	r2, lr
  406c14:	e7ee      	b.n	406bf4 <memmove+0xa4>
  406c16:	bf00      	nop

00406c18 <_realloc_r>:
  406c18:	2900      	cmp	r1, #0
  406c1a:	f000 8095 	beq.w	406d48 <_realloc_r+0x130>
  406c1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c22:	460d      	mov	r5, r1
  406c24:	4616      	mov	r6, r2
  406c26:	b083      	sub	sp, #12
  406c28:	4680      	mov	r8, r0
  406c2a:	f106 070b 	add.w	r7, r6, #11
  406c2e:	f7fe f949 	bl	404ec4 <__malloc_lock>
  406c32:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406c36:	2f16      	cmp	r7, #22
  406c38:	f02e 0403 	bic.w	r4, lr, #3
  406c3c:	f1a5 0908 	sub.w	r9, r5, #8
  406c40:	d83c      	bhi.n	406cbc <_realloc_r+0xa4>
  406c42:	2210      	movs	r2, #16
  406c44:	4617      	mov	r7, r2
  406c46:	42be      	cmp	r6, r7
  406c48:	d83d      	bhi.n	406cc6 <_realloc_r+0xae>
  406c4a:	4294      	cmp	r4, r2
  406c4c:	da43      	bge.n	406cd6 <_realloc_r+0xbe>
  406c4e:	4bc4      	ldr	r3, [pc, #784]	; (406f60 <_realloc_r+0x348>)
  406c50:	6899      	ldr	r1, [r3, #8]
  406c52:	eb09 0004 	add.w	r0, r9, r4
  406c56:	4288      	cmp	r0, r1
  406c58:	f000 80b4 	beq.w	406dc4 <_realloc_r+0x1ac>
  406c5c:	6843      	ldr	r3, [r0, #4]
  406c5e:	f023 0101 	bic.w	r1, r3, #1
  406c62:	4401      	add	r1, r0
  406c64:	6849      	ldr	r1, [r1, #4]
  406c66:	07c9      	lsls	r1, r1, #31
  406c68:	d54c      	bpl.n	406d04 <_realloc_r+0xec>
  406c6a:	f01e 0f01 	tst.w	lr, #1
  406c6e:	f000 809b 	beq.w	406da8 <_realloc_r+0x190>
  406c72:	4631      	mov	r1, r6
  406c74:	4640      	mov	r0, r8
  406c76:	f7fd fd8d 	bl	404794 <_malloc_r>
  406c7a:	4606      	mov	r6, r0
  406c7c:	2800      	cmp	r0, #0
  406c7e:	d03a      	beq.n	406cf6 <_realloc_r+0xde>
  406c80:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406c84:	f023 0301 	bic.w	r3, r3, #1
  406c88:	444b      	add	r3, r9
  406c8a:	f1a0 0208 	sub.w	r2, r0, #8
  406c8e:	429a      	cmp	r2, r3
  406c90:	f000 8121 	beq.w	406ed6 <_realloc_r+0x2be>
  406c94:	1f22      	subs	r2, r4, #4
  406c96:	2a24      	cmp	r2, #36	; 0x24
  406c98:	f200 8107 	bhi.w	406eaa <_realloc_r+0x292>
  406c9c:	2a13      	cmp	r2, #19
  406c9e:	f200 80db 	bhi.w	406e58 <_realloc_r+0x240>
  406ca2:	4603      	mov	r3, r0
  406ca4:	462a      	mov	r2, r5
  406ca6:	6811      	ldr	r1, [r2, #0]
  406ca8:	6019      	str	r1, [r3, #0]
  406caa:	6851      	ldr	r1, [r2, #4]
  406cac:	6059      	str	r1, [r3, #4]
  406cae:	6892      	ldr	r2, [r2, #8]
  406cb0:	609a      	str	r2, [r3, #8]
  406cb2:	4629      	mov	r1, r5
  406cb4:	4640      	mov	r0, r8
  406cb6:	f7ff fbcd 	bl	406454 <_free_r>
  406cba:	e01c      	b.n	406cf6 <_realloc_r+0xde>
  406cbc:	f027 0707 	bic.w	r7, r7, #7
  406cc0:	2f00      	cmp	r7, #0
  406cc2:	463a      	mov	r2, r7
  406cc4:	dabf      	bge.n	406c46 <_realloc_r+0x2e>
  406cc6:	2600      	movs	r6, #0
  406cc8:	230c      	movs	r3, #12
  406cca:	4630      	mov	r0, r6
  406ccc:	f8c8 3000 	str.w	r3, [r8]
  406cd0:	b003      	add	sp, #12
  406cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406cd6:	462e      	mov	r6, r5
  406cd8:	1be3      	subs	r3, r4, r7
  406cda:	2b0f      	cmp	r3, #15
  406cdc:	d81e      	bhi.n	406d1c <_realloc_r+0x104>
  406cde:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406ce2:	f003 0301 	and.w	r3, r3, #1
  406ce6:	4323      	orrs	r3, r4
  406ce8:	444c      	add	r4, r9
  406cea:	f8c9 3004 	str.w	r3, [r9, #4]
  406cee:	6863      	ldr	r3, [r4, #4]
  406cf0:	f043 0301 	orr.w	r3, r3, #1
  406cf4:	6063      	str	r3, [r4, #4]
  406cf6:	4640      	mov	r0, r8
  406cf8:	f7fe f8ea 	bl	404ed0 <__malloc_unlock>
  406cfc:	4630      	mov	r0, r6
  406cfe:	b003      	add	sp, #12
  406d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d04:	f023 0303 	bic.w	r3, r3, #3
  406d08:	18e1      	adds	r1, r4, r3
  406d0a:	4291      	cmp	r1, r2
  406d0c:	db1f      	blt.n	406d4e <_realloc_r+0x136>
  406d0e:	68c3      	ldr	r3, [r0, #12]
  406d10:	6882      	ldr	r2, [r0, #8]
  406d12:	462e      	mov	r6, r5
  406d14:	60d3      	str	r3, [r2, #12]
  406d16:	460c      	mov	r4, r1
  406d18:	609a      	str	r2, [r3, #8]
  406d1a:	e7dd      	b.n	406cd8 <_realloc_r+0xc0>
  406d1c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406d20:	eb09 0107 	add.w	r1, r9, r7
  406d24:	f002 0201 	and.w	r2, r2, #1
  406d28:	444c      	add	r4, r9
  406d2a:	f043 0301 	orr.w	r3, r3, #1
  406d2e:	4317      	orrs	r7, r2
  406d30:	f8c9 7004 	str.w	r7, [r9, #4]
  406d34:	604b      	str	r3, [r1, #4]
  406d36:	6863      	ldr	r3, [r4, #4]
  406d38:	f043 0301 	orr.w	r3, r3, #1
  406d3c:	3108      	adds	r1, #8
  406d3e:	6063      	str	r3, [r4, #4]
  406d40:	4640      	mov	r0, r8
  406d42:	f7ff fb87 	bl	406454 <_free_r>
  406d46:	e7d6      	b.n	406cf6 <_realloc_r+0xde>
  406d48:	4611      	mov	r1, r2
  406d4a:	f7fd bd23 	b.w	404794 <_malloc_r>
  406d4e:	f01e 0f01 	tst.w	lr, #1
  406d52:	d18e      	bne.n	406c72 <_realloc_r+0x5a>
  406d54:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406d58:	eba9 0a01 	sub.w	sl, r9, r1
  406d5c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406d60:	f021 0103 	bic.w	r1, r1, #3
  406d64:	440b      	add	r3, r1
  406d66:	4423      	add	r3, r4
  406d68:	4293      	cmp	r3, r2
  406d6a:	db25      	blt.n	406db8 <_realloc_r+0x1a0>
  406d6c:	68c2      	ldr	r2, [r0, #12]
  406d6e:	6881      	ldr	r1, [r0, #8]
  406d70:	4656      	mov	r6, sl
  406d72:	60ca      	str	r2, [r1, #12]
  406d74:	6091      	str	r1, [r2, #8]
  406d76:	f8da 100c 	ldr.w	r1, [sl, #12]
  406d7a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406d7e:	1f22      	subs	r2, r4, #4
  406d80:	2a24      	cmp	r2, #36	; 0x24
  406d82:	60c1      	str	r1, [r0, #12]
  406d84:	6088      	str	r0, [r1, #8]
  406d86:	f200 8094 	bhi.w	406eb2 <_realloc_r+0x29a>
  406d8a:	2a13      	cmp	r2, #19
  406d8c:	d96f      	bls.n	406e6e <_realloc_r+0x256>
  406d8e:	6829      	ldr	r1, [r5, #0]
  406d90:	f8ca 1008 	str.w	r1, [sl, #8]
  406d94:	6869      	ldr	r1, [r5, #4]
  406d96:	f8ca 100c 	str.w	r1, [sl, #12]
  406d9a:	2a1b      	cmp	r2, #27
  406d9c:	f200 80a2 	bhi.w	406ee4 <_realloc_r+0x2cc>
  406da0:	3508      	adds	r5, #8
  406da2:	f10a 0210 	add.w	r2, sl, #16
  406da6:	e063      	b.n	406e70 <_realloc_r+0x258>
  406da8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406dac:	eba9 0a03 	sub.w	sl, r9, r3
  406db0:	f8da 1004 	ldr.w	r1, [sl, #4]
  406db4:	f021 0103 	bic.w	r1, r1, #3
  406db8:	1863      	adds	r3, r4, r1
  406dba:	4293      	cmp	r3, r2
  406dbc:	f6ff af59 	blt.w	406c72 <_realloc_r+0x5a>
  406dc0:	4656      	mov	r6, sl
  406dc2:	e7d8      	b.n	406d76 <_realloc_r+0x15e>
  406dc4:	6841      	ldr	r1, [r0, #4]
  406dc6:	f021 0b03 	bic.w	fp, r1, #3
  406dca:	44a3      	add	fp, r4
  406dcc:	f107 0010 	add.w	r0, r7, #16
  406dd0:	4583      	cmp	fp, r0
  406dd2:	da56      	bge.n	406e82 <_realloc_r+0x26a>
  406dd4:	f01e 0f01 	tst.w	lr, #1
  406dd8:	f47f af4b 	bne.w	406c72 <_realloc_r+0x5a>
  406ddc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406de0:	eba9 0a01 	sub.w	sl, r9, r1
  406de4:	f8da 1004 	ldr.w	r1, [sl, #4]
  406de8:	f021 0103 	bic.w	r1, r1, #3
  406dec:	448b      	add	fp, r1
  406dee:	4558      	cmp	r0, fp
  406df0:	dce2      	bgt.n	406db8 <_realloc_r+0x1a0>
  406df2:	4656      	mov	r6, sl
  406df4:	f8da 100c 	ldr.w	r1, [sl, #12]
  406df8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406dfc:	1f22      	subs	r2, r4, #4
  406dfe:	2a24      	cmp	r2, #36	; 0x24
  406e00:	60c1      	str	r1, [r0, #12]
  406e02:	6088      	str	r0, [r1, #8]
  406e04:	f200 808f 	bhi.w	406f26 <_realloc_r+0x30e>
  406e08:	2a13      	cmp	r2, #19
  406e0a:	f240 808a 	bls.w	406f22 <_realloc_r+0x30a>
  406e0e:	6829      	ldr	r1, [r5, #0]
  406e10:	f8ca 1008 	str.w	r1, [sl, #8]
  406e14:	6869      	ldr	r1, [r5, #4]
  406e16:	f8ca 100c 	str.w	r1, [sl, #12]
  406e1a:	2a1b      	cmp	r2, #27
  406e1c:	f200 808a 	bhi.w	406f34 <_realloc_r+0x31c>
  406e20:	3508      	adds	r5, #8
  406e22:	f10a 0210 	add.w	r2, sl, #16
  406e26:	6829      	ldr	r1, [r5, #0]
  406e28:	6011      	str	r1, [r2, #0]
  406e2a:	6869      	ldr	r1, [r5, #4]
  406e2c:	6051      	str	r1, [r2, #4]
  406e2e:	68a9      	ldr	r1, [r5, #8]
  406e30:	6091      	str	r1, [r2, #8]
  406e32:	eb0a 0107 	add.w	r1, sl, r7
  406e36:	ebab 0207 	sub.w	r2, fp, r7
  406e3a:	f042 0201 	orr.w	r2, r2, #1
  406e3e:	6099      	str	r1, [r3, #8]
  406e40:	604a      	str	r2, [r1, #4]
  406e42:	f8da 3004 	ldr.w	r3, [sl, #4]
  406e46:	f003 0301 	and.w	r3, r3, #1
  406e4a:	431f      	orrs	r7, r3
  406e4c:	4640      	mov	r0, r8
  406e4e:	f8ca 7004 	str.w	r7, [sl, #4]
  406e52:	f7fe f83d 	bl	404ed0 <__malloc_unlock>
  406e56:	e751      	b.n	406cfc <_realloc_r+0xe4>
  406e58:	682b      	ldr	r3, [r5, #0]
  406e5a:	6003      	str	r3, [r0, #0]
  406e5c:	686b      	ldr	r3, [r5, #4]
  406e5e:	6043      	str	r3, [r0, #4]
  406e60:	2a1b      	cmp	r2, #27
  406e62:	d82d      	bhi.n	406ec0 <_realloc_r+0x2a8>
  406e64:	f100 0308 	add.w	r3, r0, #8
  406e68:	f105 0208 	add.w	r2, r5, #8
  406e6c:	e71b      	b.n	406ca6 <_realloc_r+0x8e>
  406e6e:	4632      	mov	r2, r6
  406e70:	6829      	ldr	r1, [r5, #0]
  406e72:	6011      	str	r1, [r2, #0]
  406e74:	6869      	ldr	r1, [r5, #4]
  406e76:	6051      	str	r1, [r2, #4]
  406e78:	68a9      	ldr	r1, [r5, #8]
  406e7a:	6091      	str	r1, [r2, #8]
  406e7c:	461c      	mov	r4, r3
  406e7e:	46d1      	mov	r9, sl
  406e80:	e72a      	b.n	406cd8 <_realloc_r+0xc0>
  406e82:	eb09 0107 	add.w	r1, r9, r7
  406e86:	ebab 0b07 	sub.w	fp, fp, r7
  406e8a:	f04b 0201 	orr.w	r2, fp, #1
  406e8e:	6099      	str	r1, [r3, #8]
  406e90:	604a      	str	r2, [r1, #4]
  406e92:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406e96:	f003 0301 	and.w	r3, r3, #1
  406e9a:	431f      	orrs	r7, r3
  406e9c:	4640      	mov	r0, r8
  406e9e:	f845 7c04 	str.w	r7, [r5, #-4]
  406ea2:	f7fe f815 	bl	404ed0 <__malloc_unlock>
  406ea6:	462e      	mov	r6, r5
  406ea8:	e728      	b.n	406cfc <_realloc_r+0xe4>
  406eaa:	4629      	mov	r1, r5
  406eac:	f7ff fe50 	bl	406b50 <memmove>
  406eb0:	e6ff      	b.n	406cb2 <_realloc_r+0x9a>
  406eb2:	4629      	mov	r1, r5
  406eb4:	4630      	mov	r0, r6
  406eb6:	461c      	mov	r4, r3
  406eb8:	46d1      	mov	r9, sl
  406eba:	f7ff fe49 	bl	406b50 <memmove>
  406ebe:	e70b      	b.n	406cd8 <_realloc_r+0xc0>
  406ec0:	68ab      	ldr	r3, [r5, #8]
  406ec2:	6083      	str	r3, [r0, #8]
  406ec4:	68eb      	ldr	r3, [r5, #12]
  406ec6:	60c3      	str	r3, [r0, #12]
  406ec8:	2a24      	cmp	r2, #36	; 0x24
  406eca:	d017      	beq.n	406efc <_realloc_r+0x2e4>
  406ecc:	f100 0310 	add.w	r3, r0, #16
  406ed0:	f105 0210 	add.w	r2, r5, #16
  406ed4:	e6e7      	b.n	406ca6 <_realloc_r+0x8e>
  406ed6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406eda:	f023 0303 	bic.w	r3, r3, #3
  406ede:	441c      	add	r4, r3
  406ee0:	462e      	mov	r6, r5
  406ee2:	e6f9      	b.n	406cd8 <_realloc_r+0xc0>
  406ee4:	68a9      	ldr	r1, [r5, #8]
  406ee6:	f8ca 1010 	str.w	r1, [sl, #16]
  406eea:	68e9      	ldr	r1, [r5, #12]
  406eec:	f8ca 1014 	str.w	r1, [sl, #20]
  406ef0:	2a24      	cmp	r2, #36	; 0x24
  406ef2:	d00c      	beq.n	406f0e <_realloc_r+0x2f6>
  406ef4:	3510      	adds	r5, #16
  406ef6:	f10a 0218 	add.w	r2, sl, #24
  406efa:	e7b9      	b.n	406e70 <_realloc_r+0x258>
  406efc:	692b      	ldr	r3, [r5, #16]
  406efe:	6103      	str	r3, [r0, #16]
  406f00:	696b      	ldr	r3, [r5, #20]
  406f02:	6143      	str	r3, [r0, #20]
  406f04:	f105 0218 	add.w	r2, r5, #24
  406f08:	f100 0318 	add.w	r3, r0, #24
  406f0c:	e6cb      	b.n	406ca6 <_realloc_r+0x8e>
  406f0e:	692a      	ldr	r2, [r5, #16]
  406f10:	f8ca 2018 	str.w	r2, [sl, #24]
  406f14:	696a      	ldr	r2, [r5, #20]
  406f16:	f8ca 201c 	str.w	r2, [sl, #28]
  406f1a:	3518      	adds	r5, #24
  406f1c:	f10a 0220 	add.w	r2, sl, #32
  406f20:	e7a6      	b.n	406e70 <_realloc_r+0x258>
  406f22:	4632      	mov	r2, r6
  406f24:	e77f      	b.n	406e26 <_realloc_r+0x20e>
  406f26:	4629      	mov	r1, r5
  406f28:	4630      	mov	r0, r6
  406f2a:	9301      	str	r3, [sp, #4]
  406f2c:	f7ff fe10 	bl	406b50 <memmove>
  406f30:	9b01      	ldr	r3, [sp, #4]
  406f32:	e77e      	b.n	406e32 <_realloc_r+0x21a>
  406f34:	68a9      	ldr	r1, [r5, #8]
  406f36:	f8ca 1010 	str.w	r1, [sl, #16]
  406f3a:	68e9      	ldr	r1, [r5, #12]
  406f3c:	f8ca 1014 	str.w	r1, [sl, #20]
  406f40:	2a24      	cmp	r2, #36	; 0x24
  406f42:	d003      	beq.n	406f4c <_realloc_r+0x334>
  406f44:	3510      	adds	r5, #16
  406f46:	f10a 0218 	add.w	r2, sl, #24
  406f4a:	e76c      	b.n	406e26 <_realloc_r+0x20e>
  406f4c:	692a      	ldr	r2, [r5, #16]
  406f4e:	f8ca 2018 	str.w	r2, [sl, #24]
  406f52:	696a      	ldr	r2, [r5, #20]
  406f54:	f8ca 201c 	str.w	r2, [sl, #28]
  406f58:	3518      	adds	r5, #24
  406f5a:	f10a 0220 	add.w	r2, sl, #32
  406f5e:	e762      	b.n	406e26 <_realloc_r+0x20e>
  406f60:	20400450 	.word	0x20400450

00406f64 <__sread>:
  406f64:	b510      	push	{r4, lr}
  406f66:	460c      	mov	r4, r1
  406f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406f6c:	f000 f9f6 	bl	40735c <_read_r>
  406f70:	2800      	cmp	r0, #0
  406f72:	db03      	blt.n	406f7c <__sread+0x18>
  406f74:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406f76:	4403      	add	r3, r0
  406f78:	6523      	str	r3, [r4, #80]	; 0x50
  406f7a:	bd10      	pop	{r4, pc}
  406f7c:	89a3      	ldrh	r3, [r4, #12]
  406f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406f82:	81a3      	strh	r3, [r4, #12]
  406f84:	bd10      	pop	{r4, pc}
  406f86:	bf00      	nop

00406f88 <__swrite>:
  406f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406f8c:	4616      	mov	r6, r2
  406f8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406f92:	461f      	mov	r7, r3
  406f94:	05d3      	lsls	r3, r2, #23
  406f96:	460c      	mov	r4, r1
  406f98:	4605      	mov	r5, r0
  406f9a:	d507      	bpl.n	406fac <__swrite+0x24>
  406f9c:	2200      	movs	r2, #0
  406f9e:	2302      	movs	r3, #2
  406fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406fa4:	f000 f9c4 	bl	407330 <_lseek_r>
  406fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406fac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406fb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406fb4:	81a2      	strh	r2, [r4, #12]
  406fb6:	463b      	mov	r3, r7
  406fb8:	4632      	mov	r2, r6
  406fba:	4628      	mov	r0, r5
  406fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406fc0:	f000 b8a4 	b.w	40710c <_write_r>

00406fc4 <__sseek>:
  406fc4:	b510      	push	{r4, lr}
  406fc6:	460c      	mov	r4, r1
  406fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406fcc:	f000 f9b0 	bl	407330 <_lseek_r>
  406fd0:	89a3      	ldrh	r3, [r4, #12]
  406fd2:	1c42      	adds	r2, r0, #1
  406fd4:	bf0e      	itee	eq
  406fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406fde:	6520      	strne	r0, [r4, #80]	; 0x50
  406fe0:	81a3      	strh	r3, [r4, #12]
  406fe2:	bd10      	pop	{r4, pc}

00406fe4 <__sclose>:
  406fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406fe8:	f000 b908 	b.w	4071fc <_close_r>

00406fec <__swbuf_r>:
  406fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406fee:	460d      	mov	r5, r1
  406ff0:	4614      	mov	r4, r2
  406ff2:	4606      	mov	r6, r0
  406ff4:	b110      	cbz	r0, 406ffc <__swbuf_r+0x10>
  406ff6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406ff8:	2b00      	cmp	r3, #0
  406ffa:	d04b      	beq.n	407094 <__swbuf_r+0xa8>
  406ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407000:	69a3      	ldr	r3, [r4, #24]
  407002:	60a3      	str	r3, [r4, #8]
  407004:	b291      	uxth	r1, r2
  407006:	0708      	lsls	r0, r1, #28
  407008:	d539      	bpl.n	40707e <__swbuf_r+0x92>
  40700a:	6923      	ldr	r3, [r4, #16]
  40700c:	2b00      	cmp	r3, #0
  40700e:	d036      	beq.n	40707e <__swbuf_r+0x92>
  407010:	b2ed      	uxtb	r5, r5
  407012:	0489      	lsls	r1, r1, #18
  407014:	462f      	mov	r7, r5
  407016:	d515      	bpl.n	407044 <__swbuf_r+0x58>
  407018:	6822      	ldr	r2, [r4, #0]
  40701a:	6961      	ldr	r1, [r4, #20]
  40701c:	1ad3      	subs	r3, r2, r3
  40701e:	428b      	cmp	r3, r1
  407020:	da1c      	bge.n	40705c <__swbuf_r+0x70>
  407022:	3301      	adds	r3, #1
  407024:	68a1      	ldr	r1, [r4, #8]
  407026:	1c50      	adds	r0, r2, #1
  407028:	3901      	subs	r1, #1
  40702a:	60a1      	str	r1, [r4, #8]
  40702c:	6020      	str	r0, [r4, #0]
  40702e:	7015      	strb	r5, [r2, #0]
  407030:	6962      	ldr	r2, [r4, #20]
  407032:	429a      	cmp	r2, r3
  407034:	d01a      	beq.n	40706c <__swbuf_r+0x80>
  407036:	89a3      	ldrh	r3, [r4, #12]
  407038:	07db      	lsls	r3, r3, #31
  40703a:	d501      	bpl.n	407040 <__swbuf_r+0x54>
  40703c:	2d0a      	cmp	r5, #10
  40703e:	d015      	beq.n	40706c <__swbuf_r+0x80>
  407040:	4638      	mov	r0, r7
  407042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407044:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407046:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40704a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40704e:	81a2      	strh	r2, [r4, #12]
  407050:	6822      	ldr	r2, [r4, #0]
  407052:	6661      	str	r1, [r4, #100]	; 0x64
  407054:	6961      	ldr	r1, [r4, #20]
  407056:	1ad3      	subs	r3, r2, r3
  407058:	428b      	cmp	r3, r1
  40705a:	dbe2      	blt.n	407022 <__swbuf_r+0x36>
  40705c:	4621      	mov	r1, r4
  40705e:	4630      	mov	r0, r6
  407060:	f7ff f87a 	bl	406158 <_fflush_r>
  407064:	b940      	cbnz	r0, 407078 <__swbuf_r+0x8c>
  407066:	6822      	ldr	r2, [r4, #0]
  407068:	2301      	movs	r3, #1
  40706a:	e7db      	b.n	407024 <__swbuf_r+0x38>
  40706c:	4621      	mov	r1, r4
  40706e:	4630      	mov	r0, r6
  407070:	f7ff f872 	bl	406158 <_fflush_r>
  407074:	2800      	cmp	r0, #0
  407076:	d0e3      	beq.n	407040 <__swbuf_r+0x54>
  407078:	f04f 37ff 	mov.w	r7, #4294967295
  40707c:	e7e0      	b.n	407040 <__swbuf_r+0x54>
  40707e:	4621      	mov	r1, r4
  407080:	4630      	mov	r0, r6
  407082:	f7fe ff55 	bl	405f30 <__swsetup_r>
  407086:	2800      	cmp	r0, #0
  407088:	d1f6      	bne.n	407078 <__swbuf_r+0x8c>
  40708a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40708e:	6923      	ldr	r3, [r4, #16]
  407090:	b291      	uxth	r1, r2
  407092:	e7bd      	b.n	407010 <__swbuf_r+0x24>
  407094:	f7ff f8b8 	bl	406208 <__sinit>
  407098:	e7b0      	b.n	406ffc <__swbuf_r+0x10>
  40709a:	bf00      	nop

0040709c <_wcrtomb_r>:
  40709c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40709e:	4606      	mov	r6, r0
  4070a0:	b085      	sub	sp, #20
  4070a2:	461f      	mov	r7, r3
  4070a4:	b189      	cbz	r1, 4070ca <_wcrtomb_r+0x2e>
  4070a6:	4c10      	ldr	r4, [pc, #64]	; (4070e8 <_wcrtomb_r+0x4c>)
  4070a8:	4d10      	ldr	r5, [pc, #64]	; (4070ec <_wcrtomb_r+0x50>)
  4070aa:	6824      	ldr	r4, [r4, #0]
  4070ac:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4070ae:	2c00      	cmp	r4, #0
  4070b0:	bf08      	it	eq
  4070b2:	462c      	moveq	r4, r5
  4070b4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4070b8:	47a0      	blx	r4
  4070ba:	1c43      	adds	r3, r0, #1
  4070bc:	d103      	bne.n	4070c6 <_wcrtomb_r+0x2a>
  4070be:	2200      	movs	r2, #0
  4070c0:	238a      	movs	r3, #138	; 0x8a
  4070c2:	603a      	str	r2, [r7, #0]
  4070c4:	6033      	str	r3, [r6, #0]
  4070c6:	b005      	add	sp, #20
  4070c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4070ca:	460c      	mov	r4, r1
  4070cc:	4906      	ldr	r1, [pc, #24]	; (4070e8 <_wcrtomb_r+0x4c>)
  4070ce:	4a07      	ldr	r2, [pc, #28]	; (4070ec <_wcrtomb_r+0x50>)
  4070d0:	6809      	ldr	r1, [r1, #0]
  4070d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4070d4:	2900      	cmp	r1, #0
  4070d6:	bf08      	it	eq
  4070d8:	4611      	moveq	r1, r2
  4070da:	4622      	mov	r2, r4
  4070dc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4070e0:	a901      	add	r1, sp, #4
  4070e2:	47a0      	blx	r4
  4070e4:	e7e9      	b.n	4070ba <_wcrtomb_r+0x1e>
  4070e6:	bf00      	nop
  4070e8:	20400024 	.word	0x20400024
  4070ec:	20400864 	.word	0x20400864

004070f0 <__ascii_wctomb>:
  4070f0:	b121      	cbz	r1, 4070fc <__ascii_wctomb+0xc>
  4070f2:	2aff      	cmp	r2, #255	; 0xff
  4070f4:	d804      	bhi.n	407100 <__ascii_wctomb+0x10>
  4070f6:	700a      	strb	r2, [r1, #0]
  4070f8:	2001      	movs	r0, #1
  4070fa:	4770      	bx	lr
  4070fc:	4608      	mov	r0, r1
  4070fe:	4770      	bx	lr
  407100:	238a      	movs	r3, #138	; 0x8a
  407102:	6003      	str	r3, [r0, #0]
  407104:	f04f 30ff 	mov.w	r0, #4294967295
  407108:	4770      	bx	lr
  40710a:	bf00      	nop

0040710c <_write_r>:
  40710c:	b570      	push	{r4, r5, r6, lr}
  40710e:	460d      	mov	r5, r1
  407110:	4c08      	ldr	r4, [pc, #32]	; (407134 <_write_r+0x28>)
  407112:	4611      	mov	r1, r2
  407114:	4606      	mov	r6, r0
  407116:	461a      	mov	r2, r3
  407118:	4628      	mov	r0, r5
  40711a:	2300      	movs	r3, #0
  40711c:	6023      	str	r3, [r4, #0]
  40711e:	f7fa fd11 	bl	401b44 <_write>
  407122:	1c43      	adds	r3, r0, #1
  407124:	d000      	beq.n	407128 <_write_r+0x1c>
  407126:	bd70      	pop	{r4, r5, r6, pc}
  407128:	6823      	ldr	r3, [r4, #0]
  40712a:	2b00      	cmp	r3, #0
  40712c:	d0fb      	beq.n	407126 <_write_r+0x1a>
  40712e:	6033      	str	r3, [r6, #0]
  407130:	bd70      	pop	{r4, r5, r6, pc}
  407132:	bf00      	nop
  407134:	20400f00 	.word	0x20400f00

00407138 <__register_exitproc>:
  407138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40713c:	4d2c      	ldr	r5, [pc, #176]	; (4071f0 <__register_exitproc+0xb8>)
  40713e:	4606      	mov	r6, r0
  407140:	6828      	ldr	r0, [r5, #0]
  407142:	4698      	mov	r8, r3
  407144:	460f      	mov	r7, r1
  407146:	4691      	mov	r9, r2
  407148:	f7ff fc1e 	bl	406988 <__retarget_lock_acquire_recursive>
  40714c:	4b29      	ldr	r3, [pc, #164]	; (4071f4 <__register_exitproc+0xbc>)
  40714e:	681c      	ldr	r4, [r3, #0]
  407150:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407154:	2b00      	cmp	r3, #0
  407156:	d03e      	beq.n	4071d6 <__register_exitproc+0x9e>
  407158:	685a      	ldr	r2, [r3, #4]
  40715a:	2a1f      	cmp	r2, #31
  40715c:	dc1c      	bgt.n	407198 <__register_exitproc+0x60>
  40715e:	f102 0e01 	add.w	lr, r2, #1
  407162:	b176      	cbz	r6, 407182 <__register_exitproc+0x4a>
  407164:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407168:	2401      	movs	r4, #1
  40716a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40716e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407172:	4094      	lsls	r4, r2
  407174:	4320      	orrs	r0, r4
  407176:	2e02      	cmp	r6, #2
  407178:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40717c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407180:	d023      	beq.n	4071ca <__register_exitproc+0x92>
  407182:	3202      	adds	r2, #2
  407184:	f8c3 e004 	str.w	lr, [r3, #4]
  407188:	6828      	ldr	r0, [r5, #0]
  40718a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40718e:	f7ff fbfd 	bl	40698c <__retarget_lock_release_recursive>
  407192:	2000      	movs	r0, #0
  407194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407198:	4b17      	ldr	r3, [pc, #92]	; (4071f8 <__register_exitproc+0xc0>)
  40719a:	b30b      	cbz	r3, 4071e0 <__register_exitproc+0xa8>
  40719c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4071a0:	f7fd fae8 	bl	404774 <malloc>
  4071a4:	4603      	mov	r3, r0
  4071a6:	b1d8      	cbz	r0, 4071e0 <__register_exitproc+0xa8>
  4071a8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4071ac:	6002      	str	r2, [r0, #0]
  4071ae:	2100      	movs	r1, #0
  4071b0:	6041      	str	r1, [r0, #4]
  4071b2:	460a      	mov	r2, r1
  4071b4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4071b8:	f04f 0e01 	mov.w	lr, #1
  4071bc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4071c0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4071c4:	2e00      	cmp	r6, #0
  4071c6:	d0dc      	beq.n	407182 <__register_exitproc+0x4a>
  4071c8:	e7cc      	b.n	407164 <__register_exitproc+0x2c>
  4071ca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4071ce:	430c      	orrs	r4, r1
  4071d0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4071d4:	e7d5      	b.n	407182 <__register_exitproc+0x4a>
  4071d6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4071da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4071de:	e7bb      	b.n	407158 <__register_exitproc+0x20>
  4071e0:	6828      	ldr	r0, [r5, #0]
  4071e2:	f7ff fbd3 	bl	40698c <__retarget_lock_release_recursive>
  4071e6:	f04f 30ff 	mov.w	r0, #4294967295
  4071ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4071ee:	bf00      	nop
  4071f0:	20400860 	.word	0x20400860
  4071f4:	00407798 	.word	0x00407798
  4071f8:	00404775 	.word	0x00404775

004071fc <_close_r>:
  4071fc:	b538      	push	{r3, r4, r5, lr}
  4071fe:	4c07      	ldr	r4, [pc, #28]	; (40721c <_close_r+0x20>)
  407200:	2300      	movs	r3, #0
  407202:	4605      	mov	r5, r0
  407204:	4608      	mov	r0, r1
  407206:	6023      	str	r3, [r4, #0]
  407208:	f7fb f9c4 	bl	402594 <_close>
  40720c:	1c43      	adds	r3, r0, #1
  40720e:	d000      	beq.n	407212 <_close_r+0x16>
  407210:	bd38      	pop	{r3, r4, r5, pc}
  407212:	6823      	ldr	r3, [r4, #0]
  407214:	2b00      	cmp	r3, #0
  407216:	d0fb      	beq.n	407210 <_close_r+0x14>
  407218:	602b      	str	r3, [r5, #0]
  40721a:	bd38      	pop	{r3, r4, r5, pc}
  40721c:	20400f00 	.word	0x20400f00

00407220 <_fclose_r>:
  407220:	b570      	push	{r4, r5, r6, lr}
  407222:	b159      	cbz	r1, 40723c <_fclose_r+0x1c>
  407224:	4605      	mov	r5, r0
  407226:	460c      	mov	r4, r1
  407228:	b110      	cbz	r0, 407230 <_fclose_r+0x10>
  40722a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40722c:	2b00      	cmp	r3, #0
  40722e:	d03c      	beq.n	4072aa <_fclose_r+0x8a>
  407230:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407232:	07d8      	lsls	r0, r3, #31
  407234:	d505      	bpl.n	407242 <_fclose_r+0x22>
  407236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40723a:	b92b      	cbnz	r3, 407248 <_fclose_r+0x28>
  40723c:	2600      	movs	r6, #0
  40723e:	4630      	mov	r0, r6
  407240:	bd70      	pop	{r4, r5, r6, pc}
  407242:	89a3      	ldrh	r3, [r4, #12]
  407244:	0599      	lsls	r1, r3, #22
  407246:	d53c      	bpl.n	4072c2 <_fclose_r+0xa2>
  407248:	4621      	mov	r1, r4
  40724a:	4628      	mov	r0, r5
  40724c:	f7fe fee4 	bl	406018 <__sflush_r>
  407250:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407252:	4606      	mov	r6, r0
  407254:	b133      	cbz	r3, 407264 <_fclose_r+0x44>
  407256:	69e1      	ldr	r1, [r4, #28]
  407258:	4628      	mov	r0, r5
  40725a:	4798      	blx	r3
  40725c:	2800      	cmp	r0, #0
  40725e:	bfb8      	it	lt
  407260:	f04f 36ff 	movlt.w	r6, #4294967295
  407264:	89a3      	ldrh	r3, [r4, #12]
  407266:	061a      	lsls	r2, r3, #24
  407268:	d422      	bmi.n	4072b0 <_fclose_r+0x90>
  40726a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40726c:	b141      	cbz	r1, 407280 <_fclose_r+0x60>
  40726e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407272:	4299      	cmp	r1, r3
  407274:	d002      	beq.n	40727c <_fclose_r+0x5c>
  407276:	4628      	mov	r0, r5
  407278:	f7ff f8ec 	bl	406454 <_free_r>
  40727c:	2300      	movs	r3, #0
  40727e:	6323      	str	r3, [r4, #48]	; 0x30
  407280:	6c61      	ldr	r1, [r4, #68]	; 0x44
  407282:	b121      	cbz	r1, 40728e <_fclose_r+0x6e>
  407284:	4628      	mov	r0, r5
  407286:	f7ff f8e5 	bl	406454 <_free_r>
  40728a:	2300      	movs	r3, #0
  40728c:	6463      	str	r3, [r4, #68]	; 0x44
  40728e:	f7fe ffe7 	bl	406260 <__sfp_lock_acquire>
  407292:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407294:	2200      	movs	r2, #0
  407296:	07db      	lsls	r3, r3, #31
  407298:	81a2      	strh	r2, [r4, #12]
  40729a:	d50e      	bpl.n	4072ba <_fclose_r+0x9a>
  40729c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40729e:	f7ff fb71 	bl	406984 <__retarget_lock_close_recursive>
  4072a2:	f7fe ffe3 	bl	40626c <__sfp_lock_release>
  4072a6:	4630      	mov	r0, r6
  4072a8:	bd70      	pop	{r4, r5, r6, pc}
  4072aa:	f7fe ffad 	bl	406208 <__sinit>
  4072ae:	e7bf      	b.n	407230 <_fclose_r+0x10>
  4072b0:	6921      	ldr	r1, [r4, #16]
  4072b2:	4628      	mov	r0, r5
  4072b4:	f7ff f8ce 	bl	406454 <_free_r>
  4072b8:	e7d7      	b.n	40726a <_fclose_r+0x4a>
  4072ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4072bc:	f7ff fb66 	bl	40698c <__retarget_lock_release_recursive>
  4072c0:	e7ec      	b.n	40729c <_fclose_r+0x7c>
  4072c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4072c4:	f7ff fb60 	bl	406988 <__retarget_lock_acquire_recursive>
  4072c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4072cc:	2b00      	cmp	r3, #0
  4072ce:	d1bb      	bne.n	407248 <_fclose_r+0x28>
  4072d0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4072d2:	f016 0601 	ands.w	r6, r6, #1
  4072d6:	d1b1      	bne.n	40723c <_fclose_r+0x1c>
  4072d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4072da:	f7ff fb57 	bl	40698c <__retarget_lock_release_recursive>
  4072de:	4630      	mov	r0, r6
  4072e0:	bd70      	pop	{r4, r5, r6, pc}
  4072e2:	bf00      	nop

004072e4 <_fstat_r>:
  4072e4:	b538      	push	{r3, r4, r5, lr}
  4072e6:	460b      	mov	r3, r1
  4072e8:	4c07      	ldr	r4, [pc, #28]	; (407308 <_fstat_r+0x24>)
  4072ea:	4605      	mov	r5, r0
  4072ec:	4611      	mov	r1, r2
  4072ee:	4618      	mov	r0, r3
  4072f0:	2300      	movs	r3, #0
  4072f2:	6023      	str	r3, [r4, #0]
  4072f4:	f7fb f951 	bl	40259a <_fstat>
  4072f8:	1c43      	adds	r3, r0, #1
  4072fa:	d000      	beq.n	4072fe <_fstat_r+0x1a>
  4072fc:	bd38      	pop	{r3, r4, r5, pc}
  4072fe:	6823      	ldr	r3, [r4, #0]
  407300:	2b00      	cmp	r3, #0
  407302:	d0fb      	beq.n	4072fc <_fstat_r+0x18>
  407304:	602b      	str	r3, [r5, #0]
  407306:	bd38      	pop	{r3, r4, r5, pc}
  407308:	20400f00 	.word	0x20400f00

0040730c <_isatty_r>:
  40730c:	b538      	push	{r3, r4, r5, lr}
  40730e:	4c07      	ldr	r4, [pc, #28]	; (40732c <_isatty_r+0x20>)
  407310:	2300      	movs	r3, #0
  407312:	4605      	mov	r5, r0
  407314:	4608      	mov	r0, r1
  407316:	6023      	str	r3, [r4, #0]
  407318:	f7fb f944 	bl	4025a4 <_isatty>
  40731c:	1c43      	adds	r3, r0, #1
  40731e:	d000      	beq.n	407322 <_isatty_r+0x16>
  407320:	bd38      	pop	{r3, r4, r5, pc}
  407322:	6823      	ldr	r3, [r4, #0]
  407324:	2b00      	cmp	r3, #0
  407326:	d0fb      	beq.n	407320 <_isatty_r+0x14>
  407328:	602b      	str	r3, [r5, #0]
  40732a:	bd38      	pop	{r3, r4, r5, pc}
  40732c:	20400f00 	.word	0x20400f00

00407330 <_lseek_r>:
  407330:	b570      	push	{r4, r5, r6, lr}
  407332:	460d      	mov	r5, r1
  407334:	4c08      	ldr	r4, [pc, #32]	; (407358 <_lseek_r+0x28>)
  407336:	4611      	mov	r1, r2
  407338:	4606      	mov	r6, r0
  40733a:	461a      	mov	r2, r3
  40733c:	4628      	mov	r0, r5
  40733e:	2300      	movs	r3, #0
  407340:	6023      	str	r3, [r4, #0]
  407342:	f7fb f931 	bl	4025a8 <_lseek>
  407346:	1c43      	adds	r3, r0, #1
  407348:	d000      	beq.n	40734c <_lseek_r+0x1c>
  40734a:	bd70      	pop	{r4, r5, r6, pc}
  40734c:	6823      	ldr	r3, [r4, #0]
  40734e:	2b00      	cmp	r3, #0
  407350:	d0fb      	beq.n	40734a <_lseek_r+0x1a>
  407352:	6033      	str	r3, [r6, #0]
  407354:	bd70      	pop	{r4, r5, r6, pc}
  407356:	bf00      	nop
  407358:	20400f00 	.word	0x20400f00

0040735c <_read_r>:
  40735c:	b570      	push	{r4, r5, r6, lr}
  40735e:	460d      	mov	r5, r1
  407360:	4c08      	ldr	r4, [pc, #32]	; (407384 <_read_r+0x28>)
  407362:	4611      	mov	r1, r2
  407364:	4606      	mov	r6, r0
  407366:	461a      	mov	r2, r3
  407368:	4628      	mov	r0, r5
  40736a:	2300      	movs	r3, #0
  40736c:	6023      	str	r3, [r4, #0]
  40736e:	f7fa fbcb 	bl	401b08 <_read>
  407372:	1c43      	adds	r3, r0, #1
  407374:	d000      	beq.n	407378 <_read_r+0x1c>
  407376:	bd70      	pop	{r4, r5, r6, pc}
  407378:	6823      	ldr	r3, [r4, #0]
  40737a:	2b00      	cmp	r3, #0
  40737c:	d0fb      	beq.n	407376 <_read_r+0x1a>
  40737e:	6033      	str	r3, [r6, #0]
  407380:	bd70      	pop	{r4, r5, r6, pc}
  407382:	bf00      	nop
  407384:	20400f00 	.word	0x20400f00
  407388:	20202020 	.word	0x20202020
  40738c:	20202020 	.word	0x20202020
  407390:	20202020 	.word	0x20202020
  407394:	00000000 	.word	0x00000000
  407398:	00006325 	.word	0x00006325
  40739c:	58000055 	.word	0x58000055
  4073a0:	64656c6f 	.word	0x64656c6f
  4073a4:	00000000 	.word	0x00000000
  4073a8:	6c696146 	.word	0x6c696146
  4073ac:	74206465 	.word	0x74206465
  4073b0:	7263206f 	.word	0x7263206f
  4073b4:	65746165 	.word	0x65746165
  4073b8:	656c6f20 	.word	0x656c6f20
  4073bc:	61742064 	.word	0x61742064
  4073c0:	0a0d6b73 	.word	0x0a0d6b73
  4073c4:	00000000 	.word	0x00000000
  4073c8:	00636461 	.word	0x00636461
  4073cc:	6c696146 	.word	0x6c696146
  4073d0:	74206465 	.word	0x74206465
  4073d4:	7263206f 	.word	0x7263206f
  4073d8:	65746165 	.word	0x65746165
  4073dc:	63646120 	.word	0x63646120
  4073e0:	73617420 	.word	0x73617420
  4073e4:	000a0d6b 	.word	0x000a0d6b
  4073e8:	00545542 	.word	0x00545542
  4073ec:	6c696146 	.word	0x6c696146
  4073f0:	74206465 	.word	0x74206465
  4073f4:	7263206f 	.word	0x7263206f
  4073f8:	65746165 	.word	0x65746165
  4073fc:	54554220 	.word	0x54554220
  407400:	73617420 	.word	0x73617420
  407404:	000a0d6b 	.word	0x000a0d6b
  407408:	65636572 	.word	0x65636572
  40740c:	00657669 	.word	0x00657669
  407410:	6c696146 	.word	0x6c696146
  407414:	74206465 	.word	0x74206465
  407418:	7263206f 	.word	0x7263206f
  40741c:	65746165 	.word	0x65746165
  407420:	63657220 	.word	0x63657220
  407424:	65766965 	.word	0x65766965
  407428:	73617420 	.word	0x73617420
  40742c:	000a0d6b 	.word	0x000a0d6b
  407430:	3a636461 	.word	0x3a636461
  407434:	0a642520 	.word	0x0a642520
  407438:	00000000 	.word	0x00000000
  40743c:	206f614e 	.word	0x206f614e
  407440:	67656863 	.word	0x67656863
  407444:	7520756f 	.word	0x7520756f
  407448:	6f6e206d 	.word	0x6f6e206d
  40744c:	64206f76 	.word	0x64206f76
  407450:	206f6461 	.word	0x206f6461
  407454:	31206d65 	.word	0x31206d65
  407458:	67657320 	.word	0x67657320
  40745c:	6f646e75 	.word	0x6f646e75
  407460:	00000000 	.word	0x00000000
  407464:	25747562 	.word	0x25747562
  407468:	00000a63 	.word	0x00000a63
  40746c:	316e7462 	.word	0x316e7462
  407470:	00000000 	.word	0x00000000
  407474:	326e7462 	.word	0x326e7462
  407478:	00000000 	.word	0x00000000
  40747c:	336e7462 	.word	0x336e7462
  407480:	00000000 	.word	0x00000000
  407484:	6d657845 	.word	0x6d657845
  407488:	206f6c70 	.word	0x206f6c70
  40748c:	534f5452 	.word	0x534f5452
  407490:	00000000 	.word	0x00000000
  407494:	0069696f 	.word	0x0069696f
  407498:	000a6325 	.word	0x000a6325
  40749c:	63617473 	.word	0x63617473
  4074a0:	766f206b 	.word	0x766f206b
  4074a4:	6c667265 	.word	0x6c667265
  4074a8:	2520776f 	.word	0x2520776f
  4074ac:	73252078 	.word	0x73252078
  4074b0:	00000a0d 	.word	0x00000a0d
  4074b4:	4d55505b 	.word	0x4d55505b
  4074b8:	4f205d50 	.word	0x4f205d50
  4074bc:	0a204646 	.word	0x0a204646
  4074c0:	00000000 	.word	0x00000000
  4074c4:	4d55505b 	.word	0x4d55505b
  4074c8:	4f205d50 	.word	0x4f205d50
  4074cc:	000a204e 	.word	0x000a204e
  4074d0:	4145485b 	.word	0x4145485b
  4074d4:	4f205d54 	.word	0x4f205d54
  4074d8:	0a204646 	.word	0x0a204646
  4074dc:	00000000 	.word	0x00000000
  4074e0:	4145485b 	.word	0x4145485b
  4074e4:	4f205d54 	.word	0x4f205d54
  4074e8:	000a204e 	.word	0x000a204e

004074ec <sysfont_glyphs>:
  4074ec:	00000000 20000000 20202020 50502000     .......     . PP
  4074fc:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
  40750c:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
  40751c:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
  40752c:	10101020 50004020 5020f820 20200000      ... @.P . P..  
  40753c:	002020f8 00000000 00402060 00f80000     .  .....` @.....
  40754c:	00000000 60000000 10080060 00804020     .......``... @..
  40755c:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
  40756c:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
  40757c:	f81010f8 0808f080 40307088 8888f080     .........p0@....
  40758c:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
  40759c:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
  4075ac:	40206000 40201008 00081020 f800f800     .` @.. @ .......
  4075bc:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
  4075cc:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
  4075dc:	8888f088 808870f0 70888080 888890e0     .....p.....p....
  4075ec:	f8e09088 80f08080 80f8f880 8080e080     ................
  4075fc:	80887080 70889880 f8888888 70888888     .p.....p.......p
  40760c:	20202020 10387020 90101010 a0908860          p8.....`...
  40761c:	8890a0c0 80808080 88f88080 8888a8d8     ................
  40762c:	88888888 8898a8c8 88887088 70888888     .........p.....p
  40763c:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
  40764c:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
  40765c:	88202020 88888888 88887088 50888888        ......p.....P
  40766c:	88888820 88d8a8a8 20508888 88888850      .........P P...
  40767c:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
  40768c:	38202020 20408000 e0000810 20202020        8..@ ....    
  40769c:	5020e020 00000088 00000000 f8000000      . P............
  4076ac:	00102040 00000000 78087000 80807888     @ .......p.x.x..
  4076bc:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
  4076cc:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
  4076dc:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
  4076ec:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
  4076fc:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
  40770c:	00008888 8888c8b0 70000088 70888888     ...........p...p
  40771c:	88f00000 008080f0 78986800 00000808     .........h.x....
  40772c:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
  40773c:	00304840 88888800 00006898 50888888     @H0......h.....P
  40774c:	88000020 50a8a888 50880000 00885020      ......P...P P..
  40775c:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
  40776c:	10202040 20202020 40202020 20102020     @  .       @  . 
  40777c:	00004020 454c4449 00000000 51726d54      @..IDLE....TmrQ
  40778c:	00000000 20726d54 00637653              ....Tmr Svc.

00407798 <_global_impure_ptr>:
  407798:	20400028 33323130 37363534 42413938     (.@ 0123456789AB
  4077a8:	46454443 00000000 33323130 37363534     CDEF....01234567
  4077b8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4077c8:	0000296c                                l)..

004077cc <blanks.7217>:
  4077cc:	20202020 20202020 20202020 20202020                     

004077dc <zeroes.7218>:
  4077dc:	30303030 30303030 30303030 30303030     0000000000000000
  4077ec:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004077fc <_ctype_>:
  4077fc:	20202000 20202020 28282020 20282828     .         ((((( 
  40780c:	20202020 20202020 20202020 20202020                     
  40781c:	10108820 10101010 10101010 10101010      ...............
  40782c:	04040410 04040404 10040404 10101010     ................
  40783c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40784c:	01010101 01010101 01010101 10101010     ................
  40785c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40786c:	02020202 02020202 02020202 10101010     ................
  40787c:	00000020 00000000 00000000 00000000      ...............
	...

00407900 <_init>:
  407900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407902:	bf00      	nop
  407904:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407906:	bc08      	pop	{r3}
  407908:	469e      	mov	lr, r3
  40790a:	4770      	bx	lr

0040790c <__init_array_start>:
  40790c:	00405ff9 	.word	0x00405ff9

00407910 <__frame_dummy_init_array_entry>:
  407910:	00400165                                e.@.

00407914 <_fini>:
  407914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407916:	bf00      	nop
  407918:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40791a:	bc08      	pop	{r3}
  40791c:	469e      	mov	lr, r3
  40791e:	4770      	bx	lr

00407920 <__fini_array_start>:
  407920:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 74ec 0040 0706 7d20               .....t@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <uxCriticalNesting>:
20400020:	aaaa aaaa                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__malloc_av_>:
	...
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 

20400858 <__malloc_sbrk_base>:
20400858:	ffff ffff                                   ....

2040085c <__malloc_trim_threshold>:
2040085c:	0000 0002                                   ....

20400860 <__atexit_recursive_mutex>:
20400860:	0edc 2040                                   ..@ 

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	70f1 0040 6a81 0040 0000 0000 77fc 0040     .p@..j@......w@.
20400954:	77f8 0040 73c4 0040 73c4 0040 73c4 0040     .w@..s@..s@..s@.
20400964:	73c4 0040 73c4 0040 73c4 0040 73c4 0040     .s@..s@..s@..s@.
20400974:	73c4 0040 73c4 0040 ffff ffff ffff ffff     .s@..s@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
