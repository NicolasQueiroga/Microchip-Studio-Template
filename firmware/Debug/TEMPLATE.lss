
TEMPLATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c98  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406c98  00406c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20400000  00406ca0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bd24  204009c8  00407668  000209c8  2**2
                  ALLOC
  4 .stack        00002004  2040c6ec  0041338c  000209c8  2**0
                  ALLOC
  5 .heap         00000200  2040e6f0  00415390  000209c8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002dc76  00000000  00000000  00020a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000061c3  00000000  00000000  0004e6c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001398  00000000  00000000  00054888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000f18f  00000000  00000000  00055c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ba4b  00000000  00000000  00064daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009a8d8  00000000  00000000  000807fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c092  00000000  00000000  0011b0d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f0  00000000  00000000  00127164  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003ad8  00000000  00000000  00128654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 e6 40 20 c9 36 40 00 c5 36 40 00 c5 36 40 00     ..@ .6@..6@..6@.
  400010:	c5 36 40 00 c5 36 40 00 c5 36 40 00 00 00 00 00     .6@..6@..6@.....
	...
  40002c:	c5 36 40 00 c5 36 40 00 00 00 00 00 c5 36 40 00     .6@..6@......6@.
  40003c:	c5 36 40 00 c5 36 40 00 c5 36 40 00 11 2d 40 00     .6@..6@..6@..-@.
  40004c:	e5 2c 40 00 c5 36 40 00 c5 36 40 00 c5 36 40 00     .,@..6@..6@..6@.
  40005c:	c5 36 40 00 c5 36 40 00 00 00 00 00 ed 34 40 00     .6@..6@......4@.
  40006c:	01 35 40 00 15 35 40 00 c5 36 40 00 c5 36 40 00     .5@..5@..6@..6@.
  40007c:	c5 36 40 00 29 35 40 00 3d 35 40 00 c5 36 40 00     .6@.)5@.=5@..6@.
  40008c:	c5 36 40 00 c5 36 40 00 c5 36 40 00 c5 36 40 00     .6@..6@..6@..6@.
  40009c:	89 2c 40 00 b1 2c 40 00 c5 36 40 00 c5 36 40 00     .,@..,@..6@..6@.
  4000ac:	c5 36 40 00 c5 36 40 00 ad 04 40 00 c5 36 40 00     .6@..6@...@..6@.
  4000bc:	c5 36 40 00 c5 36 40 00 c5 36 40 00 c5 36 40 00     .6@..6@..6@..6@.
  4000cc:	c5 36 40 00 00 00 00 00 c5 36 40 00 00 00 00 00     .6@......6@.....
  4000dc:	c5 36 40 00 c1 04 40 00 c5 36 40 00 c5 36 40 00     .6@...@..6@..6@.
  4000ec:	c5 36 40 00 c5 36 40 00 c5 36 40 00 c5 36 40 00     .6@..6@..6@..6@.
  4000fc:	c5 36 40 00 c5 36 40 00 c5 36 40 00 c5 36 40 00     .6@..6@..6@..6@.
  40010c:	c5 36 40 00 c5 36 40 00 00 00 00 00 00 00 00 00     .6@..6@.........
  40011c:	00 00 00 00 c5 36 40 00 c5 36 40 00 c5 36 40 00     .....6@..6@..6@.
  40012c:	c5 36 40 00 c5 36 40 00 00 00 00 00 c5 36 40 00     .6@..6@......6@.
  40013c:	c5 36 40 00                                         .6@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c8 	.word	0x204009c8
  40015c:	00000000 	.word	0x00000000
  400160:	00406ca0 	.word	0x00406ca0

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00406ca0 	.word	0x00406ca0
  4001a0:	204009cc 	.word	0x204009cc
  4001a4:	00406ca0 	.word	0x00406ca0
  4001a8:	00000000 	.word	0x00000000

004001ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001b0:	b980      	cbnz	r0, 4001d4 <_read+0x28>
  4001b2:	460c      	mov	r4, r1
  4001b4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001b6:	2a00      	cmp	r2, #0
  4001b8:	dd0f      	ble.n	4001da <_read+0x2e>
  4001ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001bc:	4e08      	ldr	r6, [pc, #32]	; (4001e0 <_read+0x34>)
  4001be:	4d09      	ldr	r5, [pc, #36]	; (4001e4 <_read+0x38>)
  4001c0:	6830      	ldr	r0, [r6, #0]
  4001c2:	4621      	mov	r1, r4
  4001c4:	682b      	ldr	r3, [r5, #0]
  4001c6:	4798      	blx	r3
		ptr++;
  4001c8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001ca:	42bc      	cmp	r4, r7
  4001cc:	d1f8      	bne.n	4001c0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001ce:	4640      	mov	r0, r8
  4001d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001d4:	f04f 38ff 	mov.w	r8, #4294967295
  4001d8:	e7f9      	b.n	4001ce <_read+0x22>
	for (; len > 0; --len) {
  4001da:	4680      	mov	r8, r0
  4001dc:	e7f7      	b.n	4001ce <_read+0x22>
  4001de:	bf00      	nop
  4001e0:	2040c5f8 	.word	0x2040c5f8
  4001e4:	2040c5f0 	.word	0x2040c5f0

004001e8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001e8:	3801      	subs	r0, #1
  4001ea:	2802      	cmp	r0, #2
  4001ec:	d815      	bhi.n	40021a <_write+0x32>
{
  4001ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001f2:	460e      	mov	r6, r1
  4001f4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4001f6:	b19a      	cbz	r2, 400220 <_write+0x38>
  4001f8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001fa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400234 <_write+0x4c>
  4001fe:	4f0c      	ldr	r7, [pc, #48]	; (400230 <_write+0x48>)
  400200:	f8d8 0000 	ldr.w	r0, [r8]
  400204:	f815 1b01 	ldrb.w	r1, [r5], #1
  400208:	683b      	ldr	r3, [r7, #0]
  40020a:	4798      	blx	r3
  40020c:	2800      	cmp	r0, #0
  40020e:	db0a      	blt.n	400226 <_write+0x3e>
  400210:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400212:	3c01      	subs	r4, #1
  400214:	d1f4      	bne.n	400200 <_write+0x18>
  400216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40021a:	f04f 30ff 	mov.w	r0, #4294967295
  40021e:	4770      	bx	lr
	for (; len != 0; --len) {
  400220:	4610      	mov	r0, r2
  400222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400226:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40022a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40022e:	bf00      	nop
  400230:	2040c5f4 	.word	0x2040c5f4
  400234:	2040c5f8 	.word	0x2040c5f8

00400238 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400238:	b570      	push	{r4, r5, r6, lr}
  40023a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40023c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40023e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400240:	4013      	ands	r3, r2
  400242:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400244:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400246:	4e1c      	ldr	r6, [pc, #112]	; (4002b8 <afec_process_callback+0x80>)
  400248:	4d1c      	ldr	r5, [pc, #112]	; (4002bc <afec_process_callback+0x84>)
  40024a:	42a8      	cmp	r0, r5
  40024c:	bf14      	ite	ne
  40024e:	2000      	movne	r0, #0
  400250:	2001      	moveq	r0, #1
  400252:	0105      	lsls	r5, r0, #4
  400254:	e00b      	b.n	40026e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400256:	2c0e      	cmp	r4, #14
  400258:	d81e      	bhi.n	400298 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40025a:	9a01      	ldr	r2, [sp, #4]
  40025c:	f104 010c 	add.w	r1, r4, #12
  400260:	2301      	movs	r3, #1
  400262:	408b      	lsls	r3, r1
  400264:	4213      	tst	r3, r2
  400266:	d110      	bne.n	40028a <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400268:	3401      	adds	r4, #1
  40026a:	2c10      	cmp	r4, #16
  40026c:	d022      	beq.n	4002b4 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40026e:	2c0b      	cmp	r4, #11
  400270:	d8f1      	bhi.n	400256 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400272:	9a01      	ldr	r2, [sp, #4]
  400274:	2301      	movs	r3, #1
  400276:	40a3      	lsls	r3, r4
  400278:	4213      	tst	r3, r2
  40027a:	d0f5      	beq.n	400268 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40027c:	192b      	adds	r3, r5, r4
  40027e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400282:	2b00      	cmp	r3, #0
  400284:	d0f0      	beq.n	400268 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400286:	4798      	blx	r3
  400288:	e7ee      	b.n	400268 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40028a:	192b      	adds	r3, r5, r4
  40028c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400290:	2b00      	cmp	r3, #0
  400292:	d0e9      	beq.n	400268 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400294:	4798      	blx	r3
  400296:	e7e7      	b.n	400268 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400298:	9a01      	ldr	r2, [sp, #4]
  40029a:	f104 010f 	add.w	r1, r4, #15
  40029e:	2301      	movs	r3, #1
  4002a0:	408b      	lsls	r3, r1
  4002a2:	4213      	tst	r3, r2
  4002a4:	d0e0      	beq.n	400268 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4002a6:	192b      	adds	r3, r5, r4
  4002a8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	d0db      	beq.n	400268 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4002b0:	4798      	blx	r3
  4002b2:	e7d9      	b.n	400268 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4002b4:	b002      	add	sp, #8
  4002b6:	bd70      	pop	{r4, r5, r6, pc}
  4002b8:	2040c5fc 	.word	0x2040c5fc
  4002bc:	40064000 	.word	0x40064000

004002c0 <afec_ch_set_config>:
{
  4002c0:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4002c2:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4002c4:	2301      	movs	r3, #1
  4002c6:	408b      	lsls	r3, r1
  4002c8:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4002cc:	7815      	ldrb	r5, [r2, #0]
  4002ce:	2d00      	cmp	r5, #0
  4002d0:	bf08      	it	eq
  4002d2:	2300      	moveq	r3, #0
  4002d4:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4002d6:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4002d8:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4002da:	004b      	lsls	r3, r1, #1
  4002dc:	2103      	movs	r1, #3
  4002de:	4099      	lsls	r1, r3
  4002e0:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4002e4:	7851      	ldrb	r1, [r2, #1]
  4002e6:	4099      	lsls	r1, r3
  4002e8:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4002ea:	6541      	str	r1, [r0, #84]	; 0x54
}
  4002ec:	bc30      	pop	{r4, r5}
  4002ee:	4770      	bx	lr

004002f0 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4002f0:	784b      	ldrb	r3, [r1, #1]
  4002f2:	780a      	ldrb	r2, [r1, #0]
  4002f4:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4002f6:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  4002f8:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4002fa:	884b      	ldrh	r3, [r1, #2]
  4002fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400300:	6743      	str	r3, [r0, #116]	; 0x74
  400302:	4770      	bx	lr

00400304 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400304:	2200      	movs	r2, #0
  400306:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400308:	4b08      	ldr	r3, [pc, #32]	; (40032c <afec_get_config_defaults+0x28>)
  40030a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40030c:	4b08      	ldr	r3, [pc, #32]	; (400330 <afec_get_config_defaults+0x2c>)
  40030e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400310:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400314:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  400316:	2302      	movs	r3, #2
  400318:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40031a:	2301      	movs	r3, #1
  40031c:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  40031e:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400320:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400322:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400324:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400326:	7583      	strb	r3, [r0, #22]
  400328:	4770      	bx	lr
  40032a:	bf00      	nop
  40032c:	11e1a300 	.word	0x11e1a300
  400330:	005b8d80 	.word	0x005b8d80

00400334 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400334:	2300      	movs	r3, #0
  400336:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400338:	2301      	movs	r3, #1
  40033a:	7043      	strb	r3, [r0, #1]
  40033c:	4770      	bx	lr

0040033e <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  40033e:	2300      	movs	r3, #0
  400340:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400342:	2320      	movs	r3, #32
  400344:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400346:	23ff      	movs	r3, #255	; 0xff
  400348:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  40034a:	f640 73ff 	movw	r3, #4095	; 0xfff
  40034e:	8083      	strh	r3, [r0, #4]
  400350:	4770      	bx	lr
	...

00400354 <afec_init>:
	return afec->AFEC_ISR;
  400354:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400356:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  40035a:	d001      	beq.n	400360 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  40035c:	2019      	movs	r0, #25
  40035e:	4770      	bx	lr
{
  400360:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400362:	2301      	movs	r3, #1
  400364:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400366:	7ccb      	ldrb	r3, [r1, #19]
  400368:	2b00      	cmp	r3, #0
  40036a:	bf18      	it	ne
  40036c:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400370:	684b      	ldr	r3, [r1, #4]
  400372:	688c      	ldr	r4, [r1, #8]
  400374:	fbb3 f3f4 	udiv	r3, r3, r4
  400378:	3b01      	subs	r3, #1
  40037a:	021b      	lsls	r3, r3, #8
  40037c:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40037e:	68cc      	ldr	r4, [r1, #12]
  400380:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400384:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400386:	7c0c      	ldrb	r4, [r1, #16]
  400388:	0624      	lsls	r4, r4, #24
  40038a:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40038e:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400390:	7c4c      	ldrb	r4, [r1, #17]
  400392:	0724      	lsls	r4, r4, #28
  400394:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400398:	4323      	orrs	r3, r4
  40039a:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  40039c:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40039e:	7d0b      	ldrb	r3, [r1, #20]
  4003a0:	2b00      	cmp	r3, #0
  4003a2:	bf14      	ite	ne
  4003a4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4003a8:	2300      	moveq	r3, #0
  4003aa:	680a      	ldr	r2, [r1, #0]
  4003ac:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4003ae:	7d4a      	ldrb	r2, [r1, #21]
  4003b0:	2a00      	cmp	r2, #0
  4003b2:	bf14      	ite	ne
  4003b4:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4003b8:	2200      	moveq	r2, #0
			(config->resolution) |
  4003ba:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4003bc:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4003be:	7d8b      	ldrb	r3, [r1, #22]
  4003c0:	021b      	lsls	r3, r3, #8
  4003c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4003c6:	f043 030c 	orr.w	r3, r3, #12
  4003ca:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4003ce:	4b0f      	ldr	r3, [pc, #60]	; (40040c <afec_init+0xb8>)
  4003d0:	4298      	cmp	r0, r3
  4003d2:	d006      	beq.n	4003e2 <afec_init+0x8e>
	if(afec == AFEC1) {
  4003d4:	4b0e      	ldr	r3, [pc, #56]	; (400410 <afec_init+0xbc>)
  4003d6:	4298      	cmp	r0, r3
  4003d8:	d00d      	beq.n	4003f6 <afec_init+0xa2>
	return STATUS_OK;
  4003da:	2000      	movs	r0, #0
}
  4003dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003e0:	4770      	bx	lr
  4003e2:	4b0c      	ldr	r3, [pc, #48]	; (400414 <afec_init+0xc0>)
  4003e4:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  4003e8:	2200      	movs	r2, #0
  4003ea:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4003ee:	428b      	cmp	r3, r1
  4003f0:	d1fb      	bne.n	4003ea <afec_init+0x96>
	return STATUS_OK;
  4003f2:	2000      	movs	r0, #0
  4003f4:	e7f2      	b.n	4003dc <afec_init+0x88>
  4003f6:	4b08      	ldr	r3, [pc, #32]	; (400418 <afec_init+0xc4>)
  4003f8:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  4003fc:	2200      	movs	r2, #0
  4003fe:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400402:	428b      	cmp	r3, r1
  400404:	d1fb      	bne.n	4003fe <afec_init+0xaa>
	return STATUS_OK;
  400406:	2000      	movs	r0, #0
  400408:	e7e8      	b.n	4003dc <afec_init+0x88>
  40040a:	bf00      	nop
  40040c:	4003c000 	.word	0x4003c000
  400410:	40064000 	.word	0x40064000
  400414:	2040c5f8 	.word	0x2040c5f8
  400418:	2040c63c 	.word	0x2040c63c

0040041c <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  40041c:	4b0c      	ldr	r3, [pc, #48]	; (400450 <afec_enable_interrupt+0x34>)
  40041e:	4299      	cmp	r1, r3
  400420:	d007      	beq.n	400432 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400422:	290b      	cmp	r1, #11
  400424:	d80b      	bhi.n	40043e <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400426:	d006      	beq.n	400436 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400428:	2301      	movs	r3, #1
  40042a:	fa03 f101 	lsl.w	r1, r3, r1
  40042e:	6241      	str	r1, [r0, #36]	; 0x24
  400430:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400432:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400434:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400436:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40043a:	6243      	str	r3, [r0, #36]	; 0x24
  40043c:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40043e:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400440:	bf94      	ite	ls
  400442:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400444:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400446:	2301      	movs	r3, #1
  400448:	fa03 f101 	lsl.w	r1, r3, r1
  40044c:	6241      	str	r1, [r0, #36]	; 0x24
  40044e:	4770      	bx	lr
  400450:	47000fff 	.word	0x47000fff

00400454 <afec_set_callback>:
{
  400454:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  400456:	4c11      	ldr	r4, [pc, #68]	; (40049c <afec_set_callback+0x48>)
  400458:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  40045a:	bf0c      	ite	eq
  40045c:	2410      	moveq	r4, #16
  40045e:	2400      	movne	r4, #0
  400460:	440c      	add	r4, r1
  400462:	4d0f      	ldr	r5, [pc, #60]	; (4004a0 <afec_set_callback+0x4c>)
  400464:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400468:	d10a      	bne.n	400480 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40046a:	4a0e      	ldr	r2, [pc, #56]	; (4004a4 <afec_set_callback+0x50>)
  40046c:	f44f 7480 	mov.w	r4, #256	; 0x100
  400470:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400474:	015b      	lsls	r3, r3, #5
  400476:	b2db      	uxtb	r3, r3
  400478:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40047c:	6054      	str	r4, [r2, #4]
  40047e:	e009      	b.n	400494 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400480:	4a08      	ldr	r2, [pc, #32]	; (4004a4 <afec_set_callback+0x50>)
  400482:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400486:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40048a:	015b      	lsls	r3, r3, #5
  40048c:	b2db      	uxtb	r3, r3
  40048e:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400492:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400494:	4b04      	ldr	r3, [pc, #16]	; (4004a8 <afec_set_callback+0x54>)
  400496:	4798      	blx	r3
  400498:	bd38      	pop	{r3, r4, r5, pc}
  40049a:	bf00      	nop
  40049c:	40064000 	.word	0x40064000
  4004a0:	2040c5fc 	.word	0x2040c5fc
  4004a4:	e000e100 	.word	0xe000e100
  4004a8:	0040041d 	.word	0x0040041d

004004ac <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4004ac:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4004ae:	4802      	ldr	r0, [pc, #8]	; (4004b8 <AFEC0_Handler+0xc>)
  4004b0:	4b02      	ldr	r3, [pc, #8]	; (4004bc <AFEC0_Handler+0x10>)
  4004b2:	4798      	blx	r3
  4004b4:	bd08      	pop	{r3, pc}
  4004b6:	bf00      	nop
  4004b8:	4003c000 	.word	0x4003c000
  4004bc:	00400239 	.word	0x00400239

004004c0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4004c0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4004c2:	4802      	ldr	r0, [pc, #8]	; (4004cc <AFEC1_Handler+0xc>)
  4004c4:	4b02      	ldr	r3, [pc, #8]	; (4004d0 <AFEC1_Handler+0x10>)
  4004c6:	4798      	blx	r3
  4004c8:	bd08      	pop	{r3, pc}
  4004ca:	bf00      	nop
  4004cc:	40064000 	.word	0x40064000
  4004d0:	00400239 	.word	0x00400239

004004d4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4004d4:	b500      	push	{lr}
  4004d6:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4004d8:	4b13      	ldr	r3, [pc, #76]	; (400528 <afec_enable+0x54>)
  4004da:	4298      	cmp	r0, r3
  4004dc:	bf0c      	ite	eq
  4004de:	2028      	moveq	r0, #40	; 0x28
  4004e0:	201d      	movne	r0, #29
  4004e2:	4b12      	ldr	r3, [pc, #72]	; (40052c <afec_enable+0x58>)
  4004e4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4004e6:	4b12      	ldr	r3, [pc, #72]	; (400530 <afec_enable+0x5c>)
  4004e8:	789b      	ldrb	r3, [r3, #2]
  4004ea:	2bff      	cmp	r3, #255	; 0xff
  4004ec:	d01a      	beq.n	400524 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4004ee:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4004f2:	fab3 f383 	clz	r3, r3
  4004f6:	095b      	lsrs	r3, r3, #5
  4004f8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4004fa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4004fc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400500:	2200      	movs	r2, #0
  400502:	4b0c      	ldr	r3, [pc, #48]	; (400534 <afec_enable+0x60>)
  400504:	701a      	strb	r2, [r3, #0]
	return flags;
  400506:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400508:	4a09      	ldr	r2, [pc, #36]	; (400530 <afec_enable+0x5c>)
  40050a:	7893      	ldrb	r3, [r2, #2]
  40050c:	3301      	adds	r3, #1
  40050e:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400510:	b129      	cbz	r1, 40051e <afec_enable+0x4a>
		cpu_irq_enable();
  400512:	2201      	movs	r2, #1
  400514:	4b07      	ldr	r3, [pc, #28]	; (400534 <afec_enable+0x60>)
  400516:	701a      	strb	r2, [r3, #0]
  400518:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40051c:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  40051e:	b003      	add	sp, #12
  400520:	f85d fb04 	ldr.w	pc, [sp], #4
  400524:	e7fe      	b.n	400524 <afec_enable+0x50>
  400526:	bf00      	nop
  400528:	40064000 	.word	0x40064000
  40052c:	00403671 	.word	0x00403671
  400530:	2040c5e8 	.word	0x2040c5e8
  400534:	20400010 	.word	0x20400010

00400538 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  400538:	b921      	cbnz	r1, 400544 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40053a:	6843      	ldr	r3, [r0, #4]
  40053c:	f023 0301 	bic.w	r3, r3, #1
  400540:	6043      	str	r3, [r0, #4]
  400542:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  400544:	6843      	ldr	r3, [r0, #4]
  400546:	f043 0301 	orr.w	r3, r3, #1
  40054a:	6043      	str	r3, [r0, #4]
  40054c:	4770      	bx	lr

0040054e <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  40054e:	6201      	str	r1, [r0, #32]
  400550:	4770      	bx	lr

00400552 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400552:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400554:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400556:	6884      	ldr	r4, [r0, #8]
  400558:	42a5      	cmp	r5, r4
  40055a:	d003      	beq.n	400564 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  40055c:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40055e:	6884      	ldr	r4, [r0, #8]
  400560:	42ac      	cmp	r4, r5
  400562:	d1fb      	bne.n	40055c <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  400564:	b161      	cbz	r1, 400580 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400566:	f3c4 5001 	ubfx	r0, r4, #20, #2
  40056a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40056e:	f3c4 4003 	ubfx	r0, r4, #16, #4
  400572:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  400576:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  40057a:	bf18      	it	ne
  40057c:	300c      	addne	r0, #12
  40057e:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  400580:	b142      	cbz	r2, 400594 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  400582:	f3c4 3102 	ubfx	r1, r4, #12, #3
  400586:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40058a:	f3c4 2003 	ubfx	r0, r4, #8, #4
  40058e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400592:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400594:	b143      	cbz	r3, 4005a8 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400596:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40059a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40059e:	f004 040f 	and.w	r4, r4, #15
  4005a2:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  4005a6:	601c      	str	r4, [r3, #0]
	}
}
  4005a8:	bc30      	pop	{r4, r5}
  4005aa:	4770      	bx	lr

004005ac <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4005ac:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4005ae:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  4005b0:	f014 0f01 	tst.w	r4, #1
  4005b4:	d005      	beq.n	4005c2 <rtc_set_time+0x16>
  4005b6:	290c      	cmp	r1, #12
  4005b8:	d903      	bls.n	4005c2 <rtc_set_time+0x16>
			ul_hour -= 12;
  4005ba:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  4005bc:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4005c0:	e000      	b.n	4005c4 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4005c2:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4005c4:	4c1c      	ldr	r4, [pc, #112]	; (400638 <rtc_set_time+0x8c>)
  4005c6:	fba4 5603 	umull	r5, r6, r4, r3
  4005ca:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4005cc:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4005d0:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4005d4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4005d8:	fba4 6502 	umull	r6, r5, r4, r2
  4005dc:	08ed      	lsrs	r5, r5, #3
  4005de:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4005e2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4005e6:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  4005ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  4005ee:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4005f0:	fba4 4201 	umull	r4, r2, r4, r1
  4005f4:	08d2      	lsrs	r2, r2, #3
  4005f6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4005fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4005fe:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400602:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400606:	6983      	ldr	r3, [r0, #24]
  400608:	f013 0f04 	tst.w	r3, #4
  40060c:	d0fb      	beq.n	400606 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40060e:	6803      	ldr	r3, [r0, #0]
  400610:	f043 0301 	orr.w	r3, r3, #1
  400614:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400616:	6983      	ldr	r3, [r0, #24]
  400618:	f013 0f01 	tst.w	r3, #1
  40061c:	d0fb      	beq.n	400616 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40061e:	2301      	movs	r3, #1
  400620:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400622:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400624:	6803      	ldr	r3, [r0, #0]
  400626:	f023 0301 	bic.w	r3, r3, #1
  40062a:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  40062c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40062e:	f000 0001 	and.w	r0, r0, #1
  400632:	bcf0      	pop	{r4, r5, r6, r7}
  400634:	4770      	bx	lr
  400636:	bf00      	nop
  400638:	cccccccd 	.word	0xcccccccd

0040063c <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  40063c:	b4f0      	push	{r4, r5, r6, r7}
  40063e:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  400640:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400642:	68c4      	ldr	r4, [r0, #12]
  400644:	42a5      	cmp	r5, r4
  400646:	d003      	beq.n	400650 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  400648:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40064a:	68c4      	ldr	r4, [r0, #12]
  40064c:	42ac      	cmp	r4, r5
  40064e:	d1fb      	bne.n	400648 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  400650:	b199      	cbz	r1, 40067a <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400652:	f3c4 3003 	ubfx	r0, r4, #12, #4
  400656:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40065a:	f3c4 2703 	ubfx	r7, r4, #8, #4
  40065e:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400662:	f3c4 1002 	ubfx	r0, r4, #4, #3
  400666:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40066a:	f004 000f 	and.w	r0, r4, #15
  40066e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400672:	2564      	movs	r5, #100	; 0x64
  400674:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400678:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  40067a:	b142      	cbz	r2, 40068e <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40067c:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400680:	0081      	lsls	r1, r0, #2
  400682:	4408      	add	r0, r1
  400684:	f3c4 4103 	ubfx	r1, r4, #16, #4
  400688:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  40068c:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  40068e:	b143      	cbz	r3, 4006a2 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400690:	f3c4 7201 	ubfx	r2, r4, #28, #2
  400694:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400698:	f3c4 6103 	ubfx	r1, r4, #24, #4
  40069c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4006a0:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4006a2:	b116      	cbz	r6, 4006aa <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4006a4:	f3c4 5442 	ubfx	r4, r4, #21, #3
  4006a8:	6034      	str	r4, [r6, #0]
	}
}
  4006aa:	bcf0      	pop	{r4, r5, r6, r7}
  4006ac:	4770      	bx	lr
	...

004006b0 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4006b0:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006b2:	4d2a      	ldr	r5, [pc, #168]	; (40075c <rtc_set_date+0xac>)
  4006b4:	fba5 4603 	umull	r4, r6, r5, r3
  4006b8:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4006ba:	9c03      	ldr	r4, [sp, #12]
  4006bc:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006be:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4006c2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4006c6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006ca:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4006ce:	fba5 6402 	umull	r6, r4, r5, r2
  4006d2:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4006d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4006dc:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4006e4:	4b1e      	ldr	r3, [pc, #120]	; (400760 <rtc_set_date+0xb0>)
  4006e6:	fba3 4301 	umull	r4, r3, r3, r1
  4006ea:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006ec:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4006f0:	4b1c      	ldr	r3, [pc, #112]	; (400764 <rtc_set_date+0xb4>)
  4006f2:	fba3 4301 	umull	r4, r3, r3, r1
  4006f6:	095b      	lsrs	r3, r3, #5
  4006f8:	fba5 6403 	umull	r6, r4, r5, r3
  4006fc:	08e4      	lsrs	r4, r4, #3
  4006fe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400702:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400706:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400708:	fba5 4301 	umull	r4, r3, r5, r1
  40070c:	08db      	lsrs	r3, r3, #3
  40070e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  400712:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400716:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40071a:	fba5 1503 	umull	r1, r5, r5, r3
  40071e:	08ed      	lsrs	r5, r5, #3
  400720:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400724:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400728:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40072c:	6983      	ldr	r3, [r0, #24]
  40072e:	f013 0f04 	tst.w	r3, #4
  400732:	d0fb      	beq.n	40072c <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400734:	6803      	ldr	r3, [r0, #0]
  400736:	f043 0302 	orr.w	r3, r3, #2
  40073a:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40073c:	6983      	ldr	r3, [r0, #24]
  40073e:	f013 0f01 	tst.w	r3, #1
  400742:	d0fb      	beq.n	40073c <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400744:	2301      	movs	r3, #1
  400746:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400748:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40074a:	6803      	ldr	r3, [r0, #0]
  40074c:	f023 0302 	bic.w	r3, r3, #2
  400750:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400752:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400754:	f000 0002 	and.w	r0, r0, #2
  400758:	bc70      	pop	{r4, r5, r6}
  40075a:	4770      	bx	lr
  40075c:	cccccccd 	.word	0xcccccccd
  400760:	10624dd3 	.word	0x10624dd3
  400764:	51eb851f 	.word	0x51eb851f

00400768 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400768:	6980      	ldr	r0, [r0, #24]
}
  40076a:	4770      	bx	lr

0040076c <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  40076c:	61c1      	str	r1, [r0, #28]
  40076e:	4770      	bx	lr

00400770 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400770:	68c0      	ldr	r0, [r0, #12]
}
  400772:	4770      	bx	lr

00400774 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400774:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400776:	4b07      	ldr	r3, [pc, #28]	; (400794 <spi_enable_clock+0x20>)
  400778:	4298      	cmp	r0, r3
  40077a:	d003      	beq.n	400784 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40077c:	4b06      	ldr	r3, [pc, #24]	; (400798 <spi_enable_clock+0x24>)
  40077e:	4298      	cmp	r0, r3
  400780:	d004      	beq.n	40078c <spi_enable_clock+0x18>
  400782:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400784:	2015      	movs	r0, #21
  400786:	4b05      	ldr	r3, [pc, #20]	; (40079c <spi_enable_clock+0x28>)
  400788:	4798      	blx	r3
  40078a:	bd08      	pop	{r3, pc}
  40078c:	202a      	movs	r0, #42	; 0x2a
  40078e:	4b03      	ldr	r3, [pc, #12]	; (40079c <spi_enable_clock+0x28>)
  400790:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400792:	e7f6      	b.n	400782 <spi_enable_clock+0xe>
  400794:	40008000 	.word	0x40008000
  400798:	40058000 	.word	0x40058000
  40079c:	00403671 	.word	0x00403671

004007a0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4007a0:	6843      	ldr	r3, [r0, #4]
  4007a2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4007a6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4007a8:	6843      	ldr	r3, [r0, #4]
  4007aa:	0409      	lsls	r1, r1, #16
  4007ac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4007b0:	4319      	orrs	r1, r3
  4007b2:	6041      	str	r1, [r0, #4]
  4007b4:	4770      	bx	lr

004007b6 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4007b6:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4007b8:	f643 2499 	movw	r4, #15001	; 0x3a99
  4007bc:	6905      	ldr	r5, [r0, #16]
  4007be:	f015 0f02 	tst.w	r5, #2
  4007c2:	d103      	bne.n	4007cc <spi_write+0x16>
		if (!timeout--) {
  4007c4:	3c01      	subs	r4, #1
  4007c6:	d1f9      	bne.n	4007bc <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4007c8:	2001      	movs	r0, #1
  4007ca:	e00c      	b.n	4007e6 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4007cc:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4007ce:	f014 0f02 	tst.w	r4, #2
  4007d2:	d006      	beq.n	4007e2 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4007d4:	0412      	lsls	r2, r2, #16
  4007d6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4007da:	4311      	orrs	r1, r2
		if (uc_last) {
  4007dc:	b10b      	cbz	r3, 4007e2 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4007de:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4007e2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4007e4:	2000      	movs	r0, #0
}
  4007e6:	bc30      	pop	{r4, r5}
  4007e8:	4770      	bx	lr

004007ea <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4007ea:	b932      	cbnz	r2, 4007fa <spi_set_clock_polarity+0x10>
  4007ec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4007f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4007f2:	f023 0301 	bic.w	r3, r3, #1
  4007f6:	6303      	str	r3, [r0, #48]	; 0x30
  4007f8:	4770      	bx	lr
  4007fa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4007fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400800:	f043 0301 	orr.w	r3, r3, #1
  400804:	6303      	str	r3, [r0, #48]	; 0x30
  400806:	4770      	bx	lr

00400808 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400808:	b932      	cbnz	r2, 400818 <spi_set_clock_phase+0x10>
  40080a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40080e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400810:	f023 0302 	bic.w	r3, r3, #2
  400814:	6303      	str	r3, [r0, #48]	; 0x30
  400816:	4770      	bx	lr
  400818:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40081c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40081e:	f043 0302 	orr.w	r3, r3, #2
  400822:	6303      	str	r3, [r0, #48]	; 0x30
  400824:	4770      	bx	lr

00400826 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400826:	2a04      	cmp	r2, #4
  400828:	d003      	beq.n	400832 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40082a:	b16a      	cbz	r2, 400848 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  40082c:	2a08      	cmp	r2, #8
  40082e:	d016      	beq.n	40085e <spi_configure_cs_behavior+0x38>
  400830:	4770      	bx	lr
  400832:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400836:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400838:	f023 0308 	bic.w	r3, r3, #8
  40083c:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40083e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400840:	f043 0304 	orr.w	r3, r3, #4
  400844:	6303      	str	r3, [r0, #48]	; 0x30
  400846:	4770      	bx	lr
  400848:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40084c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40084e:	f023 0308 	bic.w	r3, r3, #8
  400852:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400854:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400856:	f023 0304 	bic.w	r3, r3, #4
  40085a:	6303      	str	r3, [r0, #48]	; 0x30
  40085c:	4770      	bx	lr
  40085e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400862:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400864:	f043 0308 	orr.w	r3, r3, #8
  400868:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40086a:	e7e1      	b.n	400830 <spi_configure_cs_behavior+0xa>

0040086c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40086c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400870:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400876:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400878:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40087a:	431a      	orrs	r2, r3
  40087c:	630a      	str	r2, [r1, #48]	; 0x30
  40087e:	4770      	bx	lr

00400880 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400880:	1e43      	subs	r3, r0, #1
  400882:	4419      	add	r1, r3
  400884:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400888:	1e43      	subs	r3, r0, #1
  40088a:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40088c:	bf94      	ite	ls
  40088e:	b200      	sxthls	r0, r0
		return -1;
  400890:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400894:	4770      	bx	lr

00400896 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400896:	b17a      	cbz	r2, 4008b8 <spi_set_baudrate_div+0x22>
{
  400898:	b410      	push	{r4}
  40089a:	4614      	mov	r4, r2
  40089c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4008a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4008a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4008a6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4008a8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4008aa:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4008ae:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4008b0:	2000      	movs	r0, #0
}
  4008b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008b6:	4770      	bx	lr
        return -1;
  4008b8:	f04f 30ff 	mov.w	r0, #4294967295
  4008bc:	4770      	bx	lr

004008be <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4008be:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4008c0:	0189      	lsls	r1, r1, #6
  4008c2:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4008c4:	2402      	movs	r4, #2
  4008c6:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4008c8:	f04f 31ff 	mov.w	r1, #4294967295
  4008cc:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4008ce:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4008d0:	605a      	str	r2, [r3, #4]
}
  4008d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008d6:	4770      	bx	lr

004008d8 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4008d8:	0189      	lsls	r1, r1, #6
  4008da:	2305      	movs	r3, #5
  4008dc:	5043      	str	r3, [r0, r1]
  4008de:	4770      	bx	lr

004008e0 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4008e0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4008e4:	61ca      	str	r2, [r1, #28]
  4008e6:	4770      	bx	lr

004008e8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4008e8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4008ec:	624a      	str	r2, [r1, #36]	; 0x24
  4008ee:	4770      	bx	lr

004008f0 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4008f0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4008f4:	6a08      	ldr	r0, [r1, #32]
}
  4008f6:	4770      	bx	lr

004008f8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4008f8:	b4f0      	push	{r4, r5, r6, r7}
  4008fa:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4008fc:	2402      	movs	r4, #2
  4008fe:	9401      	str	r4, [sp, #4]
  400900:	2408      	movs	r4, #8
  400902:	9402      	str	r4, [sp, #8]
  400904:	2420      	movs	r4, #32
  400906:	9403      	str	r4, [sp, #12]
  400908:	2480      	movs	r4, #128	; 0x80
  40090a:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40090c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40090e:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400910:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400912:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400916:	d814      	bhi.n	400942 <tc_find_mck_divisor+0x4a>
  400918:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  40091a:	42a0      	cmp	r0, r4
  40091c:	d217      	bcs.n	40094e <tc_find_mck_divisor+0x56>
  40091e:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400920:	af01      	add	r7, sp, #4
  400922:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400926:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  40092a:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  40092c:	4284      	cmp	r4, r0
  40092e:	d30a      	bcc.n	400946 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400930:	4286      	cmp	r6, r0
  400932:	d90d      	bls.n	400950 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400934:	3501      	adds	r5, #1
	for (ul_index = 0;
  400936:	2d05      	cmp	r5, #5
  400938:	d1f3      	bne.n	400922 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  40093a:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  40093c:	b006      	add	sp, #24
  40093e:	bcf0      	pop	{r4, r5, r6, r7}
  400940:	4770      	bx	lr
			return 0;
  400942:	2000      	movs	r0, #0
  400944:	e7fa      	b.n	40093c <tc_find_mck_divisor+0x44>
  400946:	2000      	movs	r0, #0
  400948:	e7f8      	b.n	40093c <tc_find_mck_divisor+0x44>
	return 1;
  40094a:	2001      	movs	r0, #1
  40094c:	e7f6      	b.n	40093c <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40094e:	2500      	movs	r5, #0
	if (p_uldiv) {
  400950:	b12a      	cbz	r2, 40095e <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400952:	a906      	add	r1, sp, #24
  400954:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400958:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40095c:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40095e:	2b00      	cmp	r3, #0
  400960:	d0f3      	beq.n	40094a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400962:	601d      	str	r5, [r3, #0]
	return 1;
  400964:	2001      	movs	r0, #1
  400966:	e7e9      	b.n	40093c <tc_find_mck_divisor+0x44>

00400968 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400968:	6943      	ldr	r3, [r0, #20]
  40096a:	f013 0f02 	tst.w	r3, #2
  40096e:	d002      	beq.n	400976 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400970:	61c1      	str	r1, [r0, #28]
	return 0;
  400972:	2000      	movs	r0, #0
  400974:	4770      	bx	lr
		return 1;
  400976:	2001      	movs	r0, #1
}
  400978:	4770      	bx	lr

0040097a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40097a:	6943      	ldr	r3, [r0, #20]
  40097c:	f013 0f01 	tst.w	r3, #1
  400980:	d003      	beq.n	40098a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400982:	6983      	ldr	r3, [r0, #24]
  400984:	700b      	strb	r3, [r1, #0]
	return 0;
  400986:	2000      	movs	r0, #0
  400988:	4770      	bx	lr
		return 1;
  40098a:	2001      	movs	r0, #1
}
  40098c:	4770      	bx	lr

0040098e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40098e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400990:	010b      	lsls	r3, r1, #4
  400992:	4293      	cmp	r3, r2
  400994:	d914      	bls.n	4009c0 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400996:	00c9      	lsls	r1, r1, #3
  400998:	084b      	lsrs	r3, r1, #1
  40099a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40099e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4009a2:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4009a4:	1e5c      	subs	r4, r3, #1
  4009a6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4009aa:	428c      	cmp	r4, r1
  4009ac:	d901      	bls.n	4009b2 <usart_set_async_baudrate+0x24>
		return 1;
  4009ae:	2001      	movs	r0, #1
  4009b0:	e017      	b.n	4009e2 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4009b2:	6841      	ldr	r1, [r0, #4]
  4009b4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4009b8:	6041      	str	r1, [r0, #4]
  4009ba:	e00c      	b.n	4009d6 <usart_set_async_baudrate+0x48>
		return 1;
  4009bc:	2001      	movs	r0, #1
  4009be:	e010      	b.n	4009e2 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4009c0:	0859      	lsrs	r1, r3, #1
  4009c2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4009c6:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4009ca:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4009cc:	1e5c      	subs	r4, r3, #1
  4009ce:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4009d2:	428c      	cmp	r4, r1
  4009d4:	d8f2      	bhi.n	4009bc <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4009d6:	0412      	lsls	r2, r2, #16
  4009d8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4009dc:	431a      	orrs	r2, r3
  4009de:	6202      	str	r2, [r0, #32]

	return 0;
  4009e0:	2000      	movs	r0, #0
}
  4009e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009e6:	4770      	bx	lr

004009e8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4009e8:	4b08      	ldr	r3, [pc, #32]	; (400a0c <usart_reset+0x24>)
  4009ea:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4009ee:	2300      	movs	r3, #0
  4009f0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4009f2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4009f4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4009f6:	2388      	movs	r3, #136	; 0x88
  4009f8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4009fa:	2324      	movs	r3, #36	; 0x24
  4009fc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4009fe:	f44f 7380 	mov.w	r3, #256	; 0x100
  400a02:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400a04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400a08:	6003      	str	r3, [r0, #0]
  400a0a:	4770      	bx	lr
  400a0c:	55534100 	.word	0x55534100

00400a10 <usart_init_rs232>:
{
  400a10:	b570      	push	{r4, r5, r6, lr}
  400a12:	4605      	mov	r5, r0
  400a14:	460c      	mov	r4, r1
  400a16:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400a18:	4b0f      	ldr	r3, [pc, #60]	; (400a58 <usart_init_rs232+0x48>)
  400a1a:	4798      	blx	r3
	ul_reg_val = 0;
  400a1c:	2200      	movs	r2, #0
  400a1e:	4b0f      	ldr	r3, [pc, #60]	; (400a5c <usart_init_rs232+0x4c>)
  400a20:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400a22:	b1a4      	cbz	r4, 400a4e <usart_init_rs232+0x3e>
  400a24:	4632      	mov	r2, r6
  400a26:	6821      	ldr	r1, [r4, #0]
  400a28:	4628      	mov	r0, r5
  400a2a:	4b0d      	ldr	r3, [pc, #52]	; (400a60 <usart_init_rs232+0x50>)
  400a2c:	4798      	blx	r3
  400a2e:	4602      	mov	r2, r0
  400a30:	b978      	cbnz	r0, 400a52 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a32:	6863      	ldr	r3, [r4, #4]
  400a34:	68a1      	ldr	r1, [r4, #8]
  400a36:	430b      	orrs	r3, r1
  400a38:	6921      	ldr	r1, [r4, #16]
  400a3a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400a3c:	68e1      	ldr	r1, [r4, #12]
  400a3e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a40:	4906      	ldr	r1, [pc, #24]	; (400a5c <usart_init_rs232+0x4c>)
  400a42:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400a44:	6869      	ldr	r1, [r5, #4]
  400a46:	430b      	orrs	r3, r1
  400a48:	606b      	str	r3, [r5, #4]
}
  400a4a:	4610      	mov	r0, r2
  400a4c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400a4e:	2201      	movs	r2, #1
  400a50:	e7fb      	b.n	400a4a <usart_init_rs232+0x3a>
  400a52:	2201      	movs	r2, #1
  400a54:	e7f9      	b.n	400a4a <usart_init_rs232+0x3a>
  400a56:	bf00      	nop
  400a58:	004009e9 	.word	0x004009e9
  400a5c:	204009e4 	.word	0x204009e4
  400a60:	0040098f 	.word	0x0040098f

00400a64 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400a64:	2340      	movs	r3, #64	; 0x40
  400a66:	6003      	str	r3, [r0, #0]
  400a68:	4770      	bx	lr

00400a6a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400a6a:	2310      	movs	r3, #16
  400a6c:	6003      	str	r3, [r0, #0]
  400a6e:	4770      	bx	lr

00400a70 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a70:	6943      	ldr	r3, [r0, #20]
  400a72:	f013 0f02 	tst.w	r3, #2
  400a76:	d004      	beq.n	400a82 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400a78:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400a7c:	61c1      	str	r1, [r0, #28]
	return 0;
  400a7e:	2000      	movs	r0, #0
  400a80:	4770      	bx	lr
		return 1;
  400a82:	2001      	movs	r0, #1
}
  400a84:	4770      	bx	lr

00400a86 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a86:	6943      	ldr	r3, [r0, #20]
  400a88:	f013 0f01 	tst.w	r3, #1
  400a8c:	d005      	beq.n	400a9a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a8e:	6983      	ldr	r3, [r0, #24]
  400a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a94:	600b      	str	r3, [r1, #0]
	return 0;
  400a96:	2000      	movs	r0, #0
  400a98:	4770      	bx	lr
		return 1;
  400a9a:	2001      	movs	r0, #1
}
  400a9c:	4770      	bx	lr

00400a9e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400a9e:	f100 0308 	add.w	r3, r0, #8
  400aa2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400aa4:	f04f 32ff 	mov.w	r2, #4294967295
  400aa8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400aaa:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400aac:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400aae:	2300      	movs	r3, #0
  400ab0:	6003      	str	r3, [r0, #0]
  400ab2:	4770      	bx	lr

00400ab4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400ab4:	2300      	movs	r3, #0
  400ab6:	6103      	str	r3, [r0, #16]
  400ab8:	4770      	bx	lr

00400aba <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400aba:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400abc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400abe:	689a      	ldr	r2, [r3, #8]
  400ac0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400ac2:	689a      	ldr	r2, [r3, #8]
  400ac4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400ac6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400ac8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400aca:	6803      	ldr	r3, [r0, #0]
  400acc:	3301      	adds	r3, #1
  400ace:	6003      	str	r3, [r0, #0]
  400ad0:	4770      	bx	lr

00400ad2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400ad2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400ad4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400ad6:	f1b5 3fff 	cmp.w	r5, #4294967295
  400ada:	d002      	beq.n	400ae2 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400adc:	f100 0208 	add.w	r2, r0, #8
  400ae0:	e002      	b.n	400ae8 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400ae2:	6902      	ldr	r2, [r0, #16]
  400ae4:	e004      	b.n	400af0 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ae6:	461a      	mov	r2, r3
  400ae8:	6853      	ldr	r3, [r2, #4]
  400aea:	681c      	ldr	r4, [r3, #0]
  400aec:	42a5      	cmp	r5, r4
  400aee:	d2fa      	bcs.n	400ae6 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400af0:	6853      	ldr	r3, [r2, #4]
  400af2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400af4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400af6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400af8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400afa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400afc:	6803      	ldr	r3, [r0, #0]
  400afe:	3301      	adds	r3, #1
  400b00:	6003      	str	r3, [r0, #0]
}
  400b02:	bc30      	pop	{r4, r5}
  400b04:	4770      	bx	lr

00400b06 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400b06:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400b08:	6842      	ldr	r2, [r0, #4]
  400b0a:	6881      	ldr	r1, [r0, #8]
  400b0c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400b0e:	6882      	ldr	r2, [r0, #8]
  400b10:	6841      	ldr	r1, [r0, #4]
  400b12:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400b14:	685a      	ldr	r2, [r3, #4]
  400b16:	4290      	cmp	r0, r2
  400b18:	d005      	beq.n	400b26 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400b1a:	2200      	movs	r2, #0
  400b1c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400b1e:	6818      	ldr	r0, [r3, #0]
  400b20:	3801      	subs	r0, #1
  400b22:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400b24:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400b26:	6882      	ldr	r2, [r0, #8]
  400b28:	605a      	str	r2, [r3, #4]
  400b2a:	e7f6      	b.n	400b1a <uxListRemove+0x14>

00400b2c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400b2c:	4b0d      	ldr	r3, [pc, #52]	; (400b64 <prvTaskExitError+0x38>)
  400b2e:	681b      	ldr	r3, [r3, #0]
  400b30:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b34:	d00a      	beq.n	400b4c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400b36:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b3a:	b672      	cpsid	i
  400b3c:	f383 8811 	msr	BASEPRI, r3
  400b40:	f3bf 8f6f 	isb	sy
  400b44:	f3bf 8f4f 	dsb	sy
  400b48:	b662      	cpsie	i
  400b4a:	e7fe      	b.n	400b4a <prvTaskExitError+0x1e>
  400b4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b50:	b672      	cpsid	i
  400b52:	f383 8811 	msr	BASEPRI, r3
  400b56:	f3bf 8f6f 	isb	sy
  400b5a:	f3bf 8f4f 	dsb	sy
  400b5e:	b662      	cpsie	i
  400b60:	e7fe      	b.n	400b60 <prvTaskExitError+0x34>
  400b62:	bf00      	nop
  400b64:	2040000c 	.word	0x2040000c

00400b68 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400b68:	4806      	ldr	r0, [pc, #24]	; (400b84 <prvPortStartFirstTask+0x1c>)
  400b6a:	6800      	ldr	r0, [r0, #0]
  400b6c:	6800      	ldr	r0, [r0, #0]
  400b6e:	f380 8808 	msr	MSP, r0
  400b72:	b662      	cpsie	i
  400b74:	b661      	cpsie	f
  400b76:	f3bf 8f4f 	dsb	sy
  400b7a:	f3bf 8f6f 	isb	sy
  400b7e:	df00      	svc	0
  400b80:	bf00      	nop
  400b82:	0000      	.short	0x0000
  400b84:	e000ed08 	.word	0xe000ed08

00400b88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400b88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400b98 <vPortEnableVFP+0x10>
  400b8c:	6801      	ldr	r1, [r0, #0]
  400b8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400b92:	6001      	str	r1, [r0, #0]
  400b94:	4770      	bx	lr
  400b96:	0000      	.short	0x0000
  400b98:	e000ed88 	.word	0xe000ed88

00400b9c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400ba0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400ba4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400ba8:	4b05      	ldr	r3, [pc, #20]	; (400bc0 <pxPortInitialiseStack+0x24>)
  400baa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400bae:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400bb2:	f06f 0302 	mvn.w	r3, #2
  400bb6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400bba:	3844      	subs	r0, #68	; 0x44
  400bbc:	4770      	bx	lr
  400bbe:	bf00      	nop
  400bc0:	00400b2d 	.word	0x00400b2d

00400bc4 <vPortEnterCritical>:
  400bc4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bc8:	b672      	cpsid	i
  400bca:	f383 8811 	msr	BASEPRI, r3
  400bce:	f3bf 8f6f 	isb	sy
  400bd2:	f3bf 8f4f 	dsb	sy
  400bd6:	b662      	cpsie	i
	uxCriticalNesting++;
  400bd8:	4a0b      	ldr	r2, [pc, #44]	; (400c08 <vPortEnterCritical+0x44>)
  400bda:	6813      	ldr	r3, [r2, #0]
  400bdc:	3301      	adds	r3, #1
  400bde:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400be0:	2b01      	cmp	r3, #1
  400be2:	d10f      	bne.n	400c04 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400be4:	4b09      	ldr	r3, [pc, #36]	; (400c0c <vPortEnterCritical+0x48>)
  400be6:	681b      	ldr	r3, [r3, #0]
  400be8:	f013 0fff 	tst.w	r3, #255	; 0xff
  400bec:	d00a      	beq.n	400c04 <vPortEnterCritical+0x40>
  400bee:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bf2:	b672      	cpsid	i
  400bf4:	f383 8811 	msr	BASEPRI, r3
  400bf8:	f3bf 8f6f 	isb	sy
  400bfc:	f3bf 8f4f 	dsb	sy
  400c00:	b662      	cpsie	i
  400c02:	e7fe      	b.n	400c02 <vPortEnterCritical+0x3e>
  400c04:	4770      	bx	lr
  400c06:	bf00      	nop
  400c08:	2040000c 	.word	0x2040000c
  400c0c:	e000ed04 	.word	0xe000ed04

00400c10 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400c10:	4b0a      	ldr	r3, [pc, #40]	; (400c3c <vPortExitCritical+0x2c>)
  400c12:	681b      	ldr	r3, [r3, #0]
  400c14:	b953      	cbnz	r3, 400c2c <vPortExitCritical+0x1c>
  400c16:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c1a:	b672      	cpsid	i
  400c1c:	f383 8811 	msr	BASEPRI, r3
  400c20:	f3bf 8f6f 	isb	sy
  400c24:	f3bf 8f4f 	dsb	sy
  400c28:	b662      	cpsie	i
  400c2a:	e7fe      	b.n	400c2a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400c2c:	3b01      	subs	r3, #1
  400c2e:	4a03      	ldr	r2, [pc, #12]	; (400c3c <vPortExitCritical+0x2c>)
  400c30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400c32:	b90b      	cbnz	r3, 400c38 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400c34:	f383 8811 	msr	BASEPRI, r3
  400c38:	4770      	bx	lr
  400c3a:	bf00      	nop
  400c3c:	2040000c 	.word	0x2040000c

00400c40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400c40:	4a03      	ldr	r2, [pc, #12]	; (400c50 <vPortSetupTimerInterrupt+0x10>)
  400c42:	4b04      	ldr	r3, [pc, #16]	; (400c54 <vPortSetupTimerInterrupt+0x14>)
  400c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400c46:	2207      	movs	r2, #7
  400c48:	3b04      	subs	r3, #4
  400c4a:	601a      	str	r2, [r3, #0]
  400c4c:	4770      	bx	lr
  400c4e:	bf00      	nop
  400c50:	000927bf 	.word	0x000927bf
  400c54:	e000e014 	.word	0xe000e014

00400c58 <xPortStartScheduler>:
{
  400c58:	b500      	push	{lr}
  400c5a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400c5c:	4b25      	ldr	r3, [pc, #148]	; (400cf4 <xPortStartScheduler+0x9c>)
  400c5e:	781a      	ldrb	r2, [r3, #0]
  400c60:	b2d2      	uxtb	r2, r2
  400c62:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400c64:	22ff      	movs	r2, #255	; 0xff
  400c66:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400c68:	781b      	ldrb	r3, [r3, #0]
  400c6a:	b2db      	uxtb	r3, r3
  400c6c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400c70:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400c78:	4a1f      	ldr	r2, [pc, #124]	; (400cf8 <xPortStartScheduler+0xa0>)
  400c7a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400c7c:	2207      	movs	r2, #7
  400c7e:	4b1f      	ldr	r3, [pc, #124]	; (400cfc <xPortStartScheduler+0xa4>)
  400c80:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400c82:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400c86:	f013 0f80 	tst.w	r3, #128	; 0x80
  400c8a:	d010      	beq.n	400cae <xPortStartScheduler+0x56>
  400c8c:	2206      	movs	r2, #6
  400c8e:	e000      	b.n	400c92 <xPortStartScheduler+0x3a>
  400c90:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400c92:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400c96:	005b      	lsls	r3, r3, #1
  400c98:	b2db      	uxtb	r3, r3
  400c9a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400c9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400ca2:	1e51      	subs	r1, r2, #1
  400ca4:	f013 0f80 	tst.w	r3, #128	; 0x80
  400ca8:	d1f2      	bne.n	400c90 <xPortStartScheduler+0x38>
  400caa:	4b14      	ldr	r3, [pc, #80]	; (400cfc <xPortStartScheduler+0xa4>)
  400cac:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400cae:	4a13      	ldr	r2, [pc, #76]	; (400cfc <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400cb0:	6813      	ldr	r3, [r2, #0]
  400cb2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400cb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400cb8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400cba:	9b01      	ldr	r3, [sp, #4]
  400cbc:	b2db      	uxtb	r3, r3
  400cbe:	4a0d      	ldr	r2, [pc, #52]	; (400cf4 <xPortStartScheduler+0x9c>)
  400cc0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400cc2:	4b0f      	ldr	r3, [pc, #60]	; (400d00 <xPortStartScheduler+0xa8>)
  400cc4:	681a      	ldr	r2, [r3, #0]
  400cc6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400cca:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400ccc:	681a      	ldr	r2, [r3, #0]
  400cce:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400cd2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400cd4:	4b0b      	ldr	r3, [pc, #44]	; (400d04 <xPortStartScheduler+0xac>)
  400cd6:	4798      	blx	r3
	uxCriticalNesting = 0;
  400cd8:	2200      	movs	r2, #0
  400cda:	4b0b      	ldr	r3, [pc, #44]	; (400d08 <xPortStartScheduler+0xb0>)
  400cdc:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  400cde:	4b0b      	ldr	r3, [pc, #44]	; (400d0c <xPortStartScheduler+0xb4>)
  400ce0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400ce2:	4a0b      	ldr	r2, [pc, #44]	; (400d10 <xPortStartScheduler+0xb8>)
  400ce4:	6813      	ldr	r3, [r2, #0]
  400ce6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400cea:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400cec:	4b09      	ldr	r3, [pc, #36]	; (400d14 <xPortStartScheduler+0xbc>)
  400cee:	4798      	blx	r3
	prvTaskExitError();
  400cf0:	4b09      	ldr	r3, [pc, #36]	; (400d18 <xPortStartScheduler+0xc0>)
  400cf2:	4798      	blx	r3
  400cf4:	e000e400 	.word	0xe000e400
  400cf8:	204009e8 	.word	0x204009e8
  400cfc:	204009ec 	.word	0x204009ec
  400d00:	e000ed20 	.word	0xe000ed20
  400d04:	00400c41 	.word	0x00400c41
  400d08:	2040000c 	.word	0x2040000c
  400d0c:	00400b89 	.word	0x00400b89
  400d10:	e000ef34 	.word	0xe000ef34
  400d14:	00400b69 	.word	0x00400b69
  400d18:	00400b2d 	.word	0x00400b2d

00400d1c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400d1c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400d20:	2b0f      	cmp	r3, #15
  400d22:	d911      	bls.n	400d48 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400d24:	4a12      	ldr	r2, [pc, #72]	; (400d70 <vPortValidateInterruptPriority+0x54>)
  400d26:	5c9b      	ldrb	r3, [r3, r2]
  400d28:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400d2a:	4a12      	ldr	r2, [pc, #72]	; (400d74 <vPortValidateInterruptPriority+0x58>)
  400d2c:	7812      	ldrb	r2, [r2, #0]
  400d2e:	429a      	cmp	r2, r3
  400d30:	d90a      	bls.n	400d48 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  400d32:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d36:	b672      	cpsid	i
  400d38:	f383 8811 	msr	BASEPRI, r3
  400d3c:	f3bf 8f6f 	isb	sy
  400d40:	f3bf 8f4f 	dsb	sy
  400d44:	b662      	cpsie	i
  400d46:	e7fe      	b.n	400d46 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400d48:	4b0b      	ldr	r3, [pc, #44]	; (400d78 <vPortValidateInterruptPriority+0x5c>)
  400d4a:	681b      	ldr	r3, [r3, #0]
  400d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400d50:	4a0a      	ldr	r2, [pc, #40]	; (400d7c <vPortValidateInterruptPriority+0x60>)
  400d52:	6812      	ldr	r2, [r2, #0]
  400d54:	4293      	cmp	r3, r2
  400d56:	d90a      	bls.n	400d6e <vPortValidateInterruptPriority+0x52>
  400d58:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d5c:	b672      	cpsid	i
  400d5e:	f383 8811 	msr	BASEPRI, r3
  400d62:	f3bf 8f6f 	isb	sy
  400d66:	f3bf 8f4f 	dsb	sy
  400d6a:	b662      	cpsie	i
  400d6c:	e7fe      	b.n	400d6c <vPortValidateInterruptPriority+0x50>
  400d6e:	4770      	bx	lr
  400d70:	e000e3f0 	.word	0xe000e3f0
  400d74:	204009e8 	.word	0x204009e8
  400d78:	e000ed0c 	.word	0xe000ed0c
  400d7c:	204009ec 	.word	0x204009ec

00400d80 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400d80:	b538      	push	{r3, r4, r5, lr}
  400d82:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400d84:	f010 0f07 	tst.w	r0, #7
  400d88:	d002      	beq.n	400d90 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400d8a:	f020 0407 	bic.w	r4, r0, #7
  400d8e:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400d90:	4b11      	ldr	r3, [pc, #68]	; (400dd8 <pvPortMalloc+0x58>)
  400d92:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400d94:	4b11      	ldr	r3, [pc, #68]	; (400ddc <pvPortMalloc+0x5c>)
  400d96:	681b      	ldr	r3, [r3, #0]
  400d98:	b193      	cbz	r3, 400dc0 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400d9a:	4b11      	ldr	r3, [pc, #68]	; (400de0 <pvPortMalloc+0x60>)
  400d9c:	681b      	ldr	r3, [r3, #0]
  400d9e:	441c      	add	r4, r3
  400da0:	42a3      	cmp	r3, r4
  400da2:	d213      	bcs.n	400dcc <pvPortMalloc+0x4c>
  400da4:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400da8:	4294      	cmp	r4, r2
  400daa:	d80f      	bhi.n	400dcc <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400dac:	4a0b      	ldr	r2, [pc, #44]	; (400ddc <pvPortMalloc+0x5c>)
  400dae:	6815      	ldr	r5, [r2, #0]
  400db0:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400db2:	4b0b      	ldr	r3, [pc, #44]	; (400de0 <pvPortMalloc+0x60>)
  400db4:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400db6:	4b0b      	ldr	r3, [pc, #44]	; (400de4 <pvPortMalloc+0x64>)
  400db8:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400dba:	b14d      	cbz	r5, 400dd0 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  400dbc:	4628      	mov	r0, r5
  400dbe:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400dc0:	4b09      	ldr	r3, [pc, #36]	; (400de8 <pvPortMalloc+0x68>)
  400dc2:	f023 0307 	bic.w	r3, r3, #7
  400dc6:	4a05      	ldr	r2, [pc, #20]	; (400ddc <pvPortMalloc+0x5c>)
  400dc8:	6013      	str	r3, [r2, #0]
  400dca:	e7e6      	b.n	400d9a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  400dcc:	4b05      	ldr	r3, [pc, #20]	; (400de4 <pvPortMalloc+0x64>)
  400dce:	4798      	blx	r3
			vApplicationMallocFailedHook();
  400dd0:	4b06      	ldr	r3, [pc, #24]	; (400dec <pvPortMalloc+0x6c>)
  400dd2:	4798      	blx	r3
  400dd4:	2500      	movs	r5, #0
	return pvReturn;
  400dd6:	e7f1      	b.n	400dbc <pvPortMalloc+0x3c>
  400dd8:	0040197d 	.word	0x0040197d
  400ddc:	204009f0 	.word	0x204009f0
  400de0:	2040c1f4 	.word	0x2040c1f4
  400de4:	00401ae5 	.word	0x00401ae5
  400de8:	204009fc 	.word	0x204009fc
  400dec:	00402a4f 	.word	0x00402a4f

00400df0 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400df0:	b150      	cbz	r0, 400e08 <vPortFree+0x18>
  400df2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400df6:	b672      	cpsid	i
  400df8:	f383 8811 	msr	BASEPRI, r3
  400dfc:	f3bf 8f6f 	isb	sy
  400e00:	f3bf 8f4f 	dsb	sy
  400e04:	b662      	cpsie	i
  400e06:	e7fe      	b.n	400e06 <vPortFree+0x16>
  400e08:	4770      	bx	lr
	...

00400e0c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400e0c:	b538      	push	{r3, r4, r5, lr}
  400e0e:	4604      	mov	r4, r0
  400e10:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400e12:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400e14:	b95a      	cbnz	r2, 400e2e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400e16:	6803      	ldr	r3, [r0, #0]
  400e18:	2b00      	cmp	r3, #0
  400e1a:	d12e      	bne.n	400e7a <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400e1c:	6840      	ldr	r0, [r0, #4]
  400e1e:	4b1b      	ldr	r3, [pc, #108]	; (400e8c <prvCopyDataToQueue+0x80>)
  400e20:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400e22:	2300      	movs	r3, #0
  400e24:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400e26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400e28:	3301      	adds	r3, #1
  400e2a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400e2c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  400e2e:	b96d      	cbnz	r5, 400e4c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400e30:	6880      	ldr	r0, [r0, #8]
  400e32:	4b17      	ldr	r3, [pc, #92]	; (400e90 <prvCopyDataToQueue+0x84>)
  400e34:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400e36:	68a3      	ldr	r3, [r4, #8]
  400e38:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400e3a:	4413      	add	r3, r2
  400e3c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400e3e:	6862      	ldr	r2, [r4, #4]
  400e40:	4293      	cmp	r3, r2
  400e42:	d31c      	bcc.n	400e7e <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400e44:	6823      	ldr	r3, [r4, #0]
  400e46:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  400e48:	2000      	movs	r0, #0
  400e4a:	e7ec      	b.n	400e26 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400e4c:	68c0      	ldr	r0, [r0, #12]
  400e4e:	4b10      	ldr	r3, [pc, #64]	; (400e90 <prvCopyDataToQueue+0x84>)
  400e50:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400e52:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400e54:	425b      	negs	r3, r3
  400e56:	68e2      	ldr	r2, [r4, #12]
  400e58:	441a      	add	r2, r3
  400e5a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400e5c:	6821      	ldr	r1, [r4, #0]
  400e5e:	428a      	cmp	r2, r1
  400e60:	d202      	bcs.n	400e68 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400e62:	6862      	ldr	r2, [r4, #4]
  400e64:	4413      	add	r3, r2
  400e66:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400e68:	2d02      	cmp	r5, #2
  400e6a:	d10a      	bne.n	400e82 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400e6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400e6e:	b153      	cbz	r3, 400e86 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  400e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400e72:	3b01      	subs	r3, #1
  400e74:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  400e76:	2000      	movs	r0, #0
  400e78:	e7d5      	b.n	400e26 <prvCopyDataToQueue+0x1a>
  400e7a:	2000      	movs	r0, #0
  400e7c:	e7d3      	b.n	400e26 <prvCopyDataToQueue+0x1a>
  400e7e:	2000      	movs	r0, #0
  400e80:	e7d1      	b.n	400e26 <prvCopyDataToQueue+0x1a>
  400e82:	2000      	movs	r0, #0
  400e84:	e7cf      	b.n	400e26 <prvCopyDataToQueue+0x1a>
  400e86:	2000      	movs	r0, #0
  400e88:	e7cd      	b.n	400e26 <prvCopyDataToQueue+0x1a>
  400e8a:	bf00      	nop
  400e8c:	00401fcd 	.word	0x00401fcd
  400e90:	00403e31 	.word	0x00403e31

00400e94 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400e94:	b530      	push	{r4, r5, lr}
  400e96:	b083      	sub	sp, #12
  400e98:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400e9a:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400e9c:	b174      	cbz	r4, 400ebc <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400e9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400ea0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400ea2:	429a      	cmp	r2, r3
  400ea4:	d315      	bcc.n	400ed2 <prvNotifyQueueSetContainer+0x3e>
  400ea6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400eaa:	b672      	cpsid	i
  400eac:	f383 8811 	msr	BASEPRI, r3
  400eb0:	f3bf 8f6f 	isb	sy
  400eb4:	f3bf 8f4f 	dsb	sy
  400eb8:	b662      	cpsie	i
  400eba:	e7fe      	b.n	400eba <prvNotifyQueueSetContainer+0x26>
  400ebc:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ec0:	b672      	cpsid	i
  400ec2:	f383 8811 	msr	BASEPRI, r3
  400ec6:	f3bf 8f6f 	isb	sy
  400eca:	f3bf 8f4f 	dsb	sy
  400ece:	b662      	cpsie	i
  400ed0:	e7fe      	b.n	400ed0 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400ed2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400ed4:	4293      	cmp	r3, r2
  400ed6:	d803      	bhi.n	400ee0 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  400ed8:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400eda:	4628      	mov	r0, r5
  400edc:	b003      	add	sp, #12
  400ede:	bd30      	pop	{r4, r5, pc}
  400ee0:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400ee2:	a901      	add	r1, sp, #4
  400ee4:	4620      	mov	r0, r4
  400ee6:	4b0b      	ldr	r3, [pc, #44]	; (400f14 <prvNotifyQueueSetContainer+0x80>)
  400ee8:	4798      	blx	r3
  400eea:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400eec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400eee:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ef2:	d10a      	bne.n	400f0a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ef6:	2b00      	cmp	r3, #0
  400ef8:	d0ef      	beq.n	400eda <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400efa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400efe:	4b06      	ldr	r3, [pc, #24]	; (400f18 <prvNotifyQueueSetContainer+0x84>)
  400f00:	4798      	blx	r3
  400f02:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  400f04:	bf18      	it	ne
  400f06:	2501      	movne	r5, #1
  400f08:	e7e7      	b.n	400eda <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  400f0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f0c:	3301      	adds	r3, #1
  400f0e:	64a3      	str	r3, [r4, #72]	; 0x48
  400f10:	e7e3      	b.n	400eda <prvNotifyQueueSetContainer+0x46>
  400f12:	bf00      	nop
  400f14:	00400e0d 	.word	0x00400e0d
  400f18:	00401da1 	.word	0x00401da1

00400f1c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400f1c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400f1e:	b172      	cbz	r2, 400f3e <prvCopyDataFromQueue+0x22>
{
  400f20:	b510      	push	{r4, lr}
  400f22:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400f24:	68c4      	ldr	r4, [r0, #12]
  400f26:	4414      	add	r4, r2
  400f28:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400f2a:	6840      	ldr	r0, [r0, #4]
  400f2c:	4284      	cmp	r4, r0
  400f2e:	d301      	bcc.n	400f34 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400f30:	6818      	ldr	r0, [r3, #0]
  400f32:	60d8      	str	r0, [r3, #12]
  400f34:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400f36:	68d9      	ldr	r1, [r3, #12]
  400f38:	4b01      	ldr	r3, [pc, #4]	; (400f40 <prvCopyDataFromQueue+0x24>)
  400f3a:	4798      	blx	r3
  400f3c:	bd10      	pop	{r4, pc}
  400f3e:	4770      	bx	lr
  400f40:	00403e31 	.word	0x00403e31

00400f44 <prvUnlockQueue>:
{
  400f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f46:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400f48:	4b22      	ldr	r3, [pc, #136]	; (400fd4 <prvUnlockQueue+0x90>)
  400f4a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400f4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f4e:	2b00      	cmp	r3, #0
  400f50:	dd1b      	ble.n	400f8a <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400f52:	4d21      	ldr	r5, [pc, #132]	; (400fd8 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  400f54:	4f21      	ldr	r7, [pc, #132]	; (400fdc <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400f56:	4e22      	ldr	r6, [pc, #136]	; (400fe0 <prvUnlockQueue+0x9c>)
  400f58:	e00b      	b.n	400f72 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f5c:	b1ab      	cbz	r3, 400f8a <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400f5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f62:	47b0      	blx	r6
  400f64:	b978      	cbnz	r0, 400f86 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  400f66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f68:	3b01      	subs	r3, #1
  400f6a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400f6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f6e:	2b00      	cmp	r3, #0
  400f70:	dd0b      	ble.n	400f8a <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  400f72:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400f74:	2b00      	cmp	r3, #0
  400f76:	d0f0      	beq.n	400f5a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400f78:	2100      	movs	r1, #0
  400f7a:	4620      	mov	r0, r4
  400f7c:	47a8      	blx	r5
  400f7e:	2801      	cmp	r0, #1
  400f80:	d1f1      	bne.n	400f66 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  400f82:	47b8      	blx	r7
  400f84:	e7ef      	b.n	400f66 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  400f86:	47b8      	blx	r7
  400f88:	e7ed      	b.n	400f66 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  400f8a:	f04f 33ff 	mov.w	r3, #4294967295
  400f8e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  400f90:	4b14      	ldr	r3, [pc, #80]	; (400fe4 <prvUnlockQueue+0xa0>)
  400f92:	4798      	blx	r3
	taskENTER_CRITICAL();
  400f94:	4b0f      	ldr	r3, [pc, #60]	; (400fd4 <prvUnlockQueue+0x90>)
  400f96:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400f98:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400f9a:	2b00      	cmp	r3, #0
  400f9c:	dd14      	ble.n	400fc8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400f9e:	6923      	ldr	r3, [r4, #16]
  400fa0:	b193      	cbz	r3, 400fc8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400fa2:	f104 0610 	add.w	r6, r4, #16
  400fa6:	4d0e      	ldr	r5, [pc, #56]	; (400fe0 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400fa8:	4f0c      	ldr	r7, [pc, #48]	; (400fdc <prvUnlockQueue+0x98>)
  400faa:	e007      	b.n	400fbc <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400fac:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400fae:	3b01      	subs	r3, #1
  400fb0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400fb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400fb4:	2b00      	cmp	r3, #0
  400fb6:	dd07      	ble.n	400fc8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400fb8:	6923      	ldr	r3, [r4, #16]
  400fba:	b12b      	cbz	r3, 400fc8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400fbc:	4630      	mov	r0, r6
  400fbe:	47a8      	blx	r5
  400fc0:	2800      	cmp	r0, #0
  400fc2:	d0f3      	beq.n	400fac <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400fc4:	47b8      	blx	r7
  400fc6:	e7f1      	b.n	400fac <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400fc8:	f04f 33ff 	mov.w	r3, #4294967295
  400fcc:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  400fce:	4b05      	ldr	r3, [pc, #20]	; (400fe4 <prvUnlockQueue+0xa0>)
  400fd0:	4798      	blx	r3
  400fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400fd4:	00400bc5 	.word	0x00400bc5
  400fd8:	00400e95 	.word	0x00400e95
  400fdc:	00401efd 	.word	0x00401efd
  400fe0:	00401da1 	.word	0x00401da1
  400fe4:	00400c11 	.word	0x00400c11

00400fe8 <xQueueGenericReset>:
{
  400fe8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  400fea:	b308      	cbz	r0, 401030 <xQueueGenericReset+0x48>
  400fec:	4604      	mov	r4, r0
  400fee:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  400ff0:	4b1d      	ldr	r3, [pc, #116]	; (401068 <xQueueGenericReset+0x80>)
  400ff2:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400ff4:	6822      	ldr	r2, [r4, #0]
  400ff6:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400ff8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400ffa:	fb03 f301 	mul.w	r3, r3, r1
  400ffe:	18d0      	adds	r0, r2, r3
  401000:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401002:	2000      	movs	r0, #0
  401004:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401006:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401008:	1a5b      	subs	r3, r3, r1
  40100a:	4413      	add	r3, r2
  40100c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40100e:	f04f 33ff 	mov.w	r3, #4294967295
  401012:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401014:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401016:	b9fd      	cbnz	r5, 401058 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401018:	6923      	ldr	r3, [r4, #16]
  40101a:	b12b      	cbz	r3, 401028 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40101c:	f104 0010 	add.w	r0, r4, #16
  401020:	4b12      	ldr	r3, [pc, #72]	; (40106c <xQueueGenericReset+0x84>)
  401022:	4798      	blx	r3
  401024:	2801      	cmp	r0, #1
  401026:	d00e      	beq.n	401046 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401028:	4b11      	ldr	r3, [pc, #68]	; (401070 <xQueueGenericReset+0x88>)
  40102a:	4798      	blx	r3
}
  40102c:	2001      	movs	r0, #1
  40102e:	bd38      	pop	{r3, r4, r5, pc}
  401030:	f04f 0380 	mov.w	r3, #128	; 0x80
  401034:	b672      	cpsid	i
  401036:	f383 8811 	msr	BASEPRI, r3
  40103a:	f3bf 8f6f 	isb	sy
  40103e:	f3bf 8f4f 	dsb	sy
  401042:	b662      	cpsie	i
  401044:	e7fe      	b.n	401044 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40104a:	4b0a      	ldr	r3, [pc, #40]	; (401074 <xQueueGenericReset+0x8c>)
  40104c:	601a      	str	r2, [r3, #0]
  40104e:	f3bf 8f4f 	dsb	sy
  401052:	f3bf 8f6f 	isb	sy
  401056:	e7e7      	b.n	401028 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401058:	f104 0010 	add.w	r0, r4, #16
  40105c:	4d06      	ldr	r5, [pc, #24]	; (401078 <xQueueGenericReset+0x90>)
  40105e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401060:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401064:	47a8      	blx	r5
  401066:	e7df      	b.n	401028 <xQueueGenericReset+0x40>
  401068:	00400bc5 	.word	0x00400bc5
  40106c:	00401da1 	.word	0x00401da1
  401070:	00400c11 	.word	0x00400c11
  401074:	e000ed04 	.word	0xe000ed04
  401078:	00400a9f 	.word	0x00400a9f

0040107c <xQueueGenericCreate>:
{
  40107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40107e:	b950      	cbnz	r0, 401096 <xQueueGenericCreate+0x1a>
  401080:	f04f 0380 	mov.w	r3, #128	; 0x80
  401084:	b672      	cpsid	i
  401086:	f383 8811 	msr	BASEPRI, r3
  40108a:	f3bf 8f6f 	isb	sy
  40108e:	f3bf 8f4f 	dsb	sy
  401092:	b662      	cpsie	i
  401094:	e7fe      	b.n	401094 <xQueueGenericCreate+0x18>
  401096:	4606      	mov	r6, r0
  401098:	4617      	mov	r7, r2
  40109a:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  40109c:	b189      	cbz	r1, 4010c2 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40109e:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4010a2:	3059      	adds	r0, #89	; 0x59
  4010a4:	4b12      	ldr	r3, [pc, #72]	; (4010f0 <xQueueGenericCreate+0x74>)
  4010a6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4010a8:	4604      	mov	r4, r0
  4010aa:	b9e8      	cbnz	r0, 4010e8 <xQueueGenericCreate+0x6c>
  4010ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010b0:	b672      	cpsid	i
  4010b2:	f383 8811 	msr	BASEPRI, r3
  4010b6:	f3bf 8f6f 	isb	sy
  4010ba:	f3bf 8f4f 	dsb	sy
  4010be:	b662      	cpsie	i
  4010c0:	e7fe      	b.n	4010c0 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4010c2:	2058      	movs	r0, #88	; 0x58
  4010c4:	4b0a      	ldr	r3, [pc, #40]	; (4010f0 <xQueueGenericCreate+0x74>)
  4010c6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4010c8:	4604      	mov	r4, r0
  4010ca:	2800      	cmp	r0, #0
  4010cc:	d0ee      	beq.n	4010ac <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4010ce:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4010d0:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4010d2:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4010d4:	2101      	movs	r1, #1
  4010d6:	4620      	mov	r0, r4
  4010d8:	4b06      	ldr	r3, [pc, #24]	; (4010f4 <xQueueGenericCreate+0x78>)
  4010da:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4010dc:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4010e0:	2300      	movs	r3, #0
  4010e2:	6563      	str	r3, [r4, #84]	; 0x54
}
  4010e4:	4620      	mov	r0, r4
  4010e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4010e8:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4010ec:	6003      	str	r3, [r0, #0]
  4010ee:	e7ef      	b.n	4010d0 <xQueueGenericCreate+0x54>
  4010f0:	00400d81 	.word	0x00400d81
  4010f4:	00400fe9 	.word	0x00400fe9

004010f8 <xQueueGenericSend>:
{
  4010f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010fc:	b085      	sub	sp, #20
  4010fe:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401100:	b1b8      	cbz	r0, 401132 <xQueueGenericSend+0x3a>
  401102:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401104:	b301      	cbz	r1, 401148 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401106:	2b02      	cmp	r3, #2
  401108:	d02c      	beq.n	401164 <xQueueGenericSend+0x6c>
  40110a:	461d      	mov	r5, r3
  40110c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40110e:	4b66      	ldr	r3, [pc, #408]	; (4012a8 <xQueueGenericSend+0x1b0>)
  401110:	4798      	blx	r3
  401112:	2800      	cmp	r0, #0
  401114:	d134      	bne.n	401180 <xQueueGenericSend+0x88>
  401116:	9b01      	ldr	r3, [sp, #4]
  401118:	2b00      	cmp	r3, #0
  40111a:	d038      	beq.n	40118e <xQueueGenericSend+0x96>
  40111c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401120:	b672      	cpsid	i
  401122:	f383 8811 	msr	BASEPRI, r3
  401126:	f3bf 8f6f 	isb	sy
  40112a:	f3bf 8f4f 	dsb	sy
  40112e:	b662      	cpsie	i
  401130:	e7fe      	b.n	401130 <xQueueGenericSend+0x38>
  401132:	f04f 0380 	mov.w	r3, #128	; 0x80
  401136:	b672      	cpsid	i
  401138:	f383 8811 	msr	BASEPRI, r3
  40113c:	f3bf 8f6f 	isb	sy
  401140:	f3bf 8f4f 	dsb	sy
  401144:	b662      	cpsie	i
  401146:	e7fe      	b.n	401146 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401148:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40114a:	2a00      	cmp	r2, #0
  40114c:	d0db      	beq.n	401106 <xQueueGenericSend+0xe>
  40114e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401152:	b672      	cpsid	i
  401154:	f383 8811 	msr	BASEPRI, r3
  401158:	f3bf 8f6f 	isb	sy
  40115c:	f3bf 8f4f 	dsb	sy
  401160:	b662      	cpsie	i
  401162:	e7fe      	b.n	401162 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401164:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401166:	2a01      	cmp	r2, #1
  401168:	d0cf      	beq.n	40110a <xQueueGenericSend+0x12>
  40116a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40116e:	b672      	cpsid	i
  401170:	f383 8811 	msr	BASEPRI, r3
  401174:	f3bf 8f6f 	isb	sy
  401178:	f3bf 8f4f 	dsb	sy
  40117c:	b662      	cpsie	i
  40117e:	e7fe      	b.n	40117e <xQueueGenericSend+0x86>
  401180:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401182:	4e4a      	ldr	r6, [pc, #296]	; (4012ac <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401184:	f8df a150 	ldr.w	sl, [pc, #336]	; 4012d8 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401188:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4012b8 <xQueueGenericSend+0x1c0>
  40118c:	e042      	b.n	401214 <xQueueGenericSend+0x11c>
  40118e:	2700      	movs	r7, #0
  401190:	e7f7      	b.n	401182 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401192:	462a      	mov	r2, r5
  401194:	4641      	mov	r1, r8
  401196:	4620      	mov	r0, r4
  401198:	4b45      	ldr	r3, [pc, #276]	; (4012b0 <xQueueGenericSend+0x1b8>)
  40119a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  40119c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40119e:	b19b      	cbz	r3, 4011c8 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4011a0:	4629      	mov	r1, r5
  4011a2:	4620      	mov	r0, r4
  4011a4:	4b43      	ldr	r3, [pc, #268]	; (4012b4 <xQueueGenericSend+0x1bc>)
  4011a6:	4798      	blx	r3
  4011a8:	2801      	cmp	r0, #1
  4011aa:	d107      	bne.n	4011bc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4011ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011b0:	4b41      	ldr	r3, [pc, #260]	; (4012b8 <xQueueGenericSend+0x1c0>)
  4011b2:	601a      	str	r2, [r3, #0]
  4011b4:	f3bf 8f4f 	dsb	sy
  4011b8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4011bc:	4b3f      	ldr	r3, [pc, #252]	; (4012bc <xQueueGenericSend+0x1c4>)
  4011be:	4798      	blx	r3
				return pdPASS;
  4011c0:	2001      	movs	r0, #1
}
  4011c2:	b005      	add	sp, #20
  4011c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4011c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011ca:	b173      	cbz	r3, 4011ea <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4011cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011d0:	4b3b      	ldr	r3, [pc, #236]	; (4012c0 <xQueueGenericSend+0x1c8>)
  4011d2:	4798      	blx	r3
  4011d4:	2801      	cmp	r0, #1
  4011d6:	d1f1      	bne.n	4011bc <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4011d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011dc:	4b36      	ldr	r3, [pc, #216]	; (4012b8 <xQueueGenericSend+0x1c0>)
  4011de:	601a      	str	r2, [r3, #0]
  4011e0:	f3bf 8f4f 	dsb	sy
  4011e4:	f3bf 8f6f 	isb	sy
  4011e8:	e7e8      	b.n	4011bc <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4011ea:	2800      	cmp	r0, #0
  4011ec:	d0e6      	beq.n	4011bc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4011ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011f2:	4b31      	ldr	r3, [pc, #196]	; (4012b8 <xQueueGenericSend+0x1c0>)
  4011f4:	601a      	str	r2, [r3, #0]
  4011f6:	f3bf 8f4f 	dsb	sy
  4011fa:	f3bf 8f6f 	isb	sy
  4011fe:	e7dd      	b.n	4011bc <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401200:	4b2e      	ldr	r3, [pc, #184]	; (4012bc <xQueueGenericSend+0x1c4>)
  401202:	4798      	blx	r3
					return errQUEUE_FULL;
  401204:	2000      	movs	r0, #0
  401206:	e7dc      	b.n	4011c2 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401208:	4620      	mov	r0, r4
  40120a:	4b2e      	ldr	r3, [pc, #184]	; (4012c4 <xQueueGenericSend+0x1cc>)
  40120c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40120e:	4b2e      	ldr	r3, [pc, #184]	; (4012c8 <xQueueGenericSend+0x1d0>)
  401210:	4798      	blx	r3
  401212:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401214:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401216:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40121a:	429a      	cmp	r2, r3
  40121c:	d3b9      	bcc.n	401192 <xQueueGenericSend+0x9a>
  40121e:	2d02      	cmp	r5, #2
  401220:	d0b7      	beq.n	401192 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401222:	9b01      	ldr	r3, [sp, #4]
  401224:	2b00      	cmp	r3, #0
  401226:	d0eb      	beq.n	401200 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401228:	b90f      	cbnz	r7, 40122e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40122a:	a802      	add	r0, sp, #8
  40122c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40122e:	4b23      	ldr	r3, [pc, #140]	; (4012bc <xQueueGenericSend+0x1c4>)
  401230:	4798      	blx	r3
		vTaskSuspendAll();
  401232:	4b26      	ldr	r3, [pc, #152]	; (4012cc <xQueueGenericSend+0x1d4>)
  401234:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401236:	47b0      	blx	r6
  401238:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40123a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40123e:	d101      	bne.n	401244 <xQueueGenericSend+0x14c>
  401240:	2300      	movs	r3, #0
  401242:	6463      	str	r3, [r4, #68]	; 0x44
  401244:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401246:	f1b3 3fff 	cmp.w	r3, #4294967295
  40124a:	d101      	bne.n	401250 <xQueueGenericSend+0x158>
  40124c:	2300      	movs	r3, #0
  40124e:	64a3      	str	r3, [r4, #72]	; 0x48
  401250:	4b1a      	ldr	r3, [pc, #104]	; (4012bc <xQueueGenericSend+0x1c4>)
  401252:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401254:	a901      	add	r1, sp, #4
  401256:	a802      	add	r0, sp, #8
  401258:	4b1d      	ldr	r3, [pc, #116]	; (4012d0 <xQueueGenericSend+0x1d8>)
  40125a:	4798      	blx	r3
  40125c:	b9e0      	cbnz	r0, 401298 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  40125e:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401260:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401264:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401266:	4b15      	ldr	r3, [pc, #84]	; (4012bc <xQueueGenericSend+0x1c4>)
  401268:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40126a:	45bb      	cmp	fp, r7
  40126c:	d1cc      	bne.n	401208 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40126e:	9901      	ldr	r1, [sp, #4]
  401270:	f104 0010 	add.w	r0, r4, #16
  401274:	4b17      	ldr	r3, [pc, #92]	; (4012d4 <xQueueGenericSend+0x1dc>)
  401276:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401278:	4620      	mov	r0, r4
  40127a:	4b12      	ldr	r3, [pc, #72]	; (4012c4 <xQueueGenericSend+0x1cc>)
  40127c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40127e:	4b12      	ldr	r3, [pc, #72]	; (4012c8 <xQueueGenericSend+0x1d0>)
  401280:	4798      	blx	r3
  401282:	2800      	cmp	r0, #0
  401284:	d1c5      	bne.n	401212 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401286:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40128a:	f8c9 3000 	str.w	r3, [r9]
  40128e:	f3bf 8f4f 	dsb	sy
  401292:	f3bf 8f6f 	isb	sy
  401296:	e7bc      	b.n	401212 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401298:	4620      	mov	r0, r4
  40129a:	4b0a      	ldr	r3, [pc, #40]	; (4012c4 <xQueueGenericSend+0x1cc>)
  40129c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40129e:	4b0a      	ldr	r3, [pc, #40]	; (4012c8 <xQueueGenericSend+0x1d0>)
  4012a0:	4798      	blx	r3
			return errQUEUE_FULL;
  4012a2:	2000      	movs	r0, #0
  4012a4:	e78d      	b.n	4011c2 <xQueueGenericSend+0xca>
  4012a6:	bf00      	nop
  4012a8:	00401f09 	.word	0x00401f09
  4012ac:	00400bc5 	.word	0x00400bc5
  4012b0:	00400e0d 	.word	0x00400e0d
  4012b4:	00400e95 	.word	0x00400e95
  4012b8:	e000ed04 	.word	0xe000ed04
  4012bc:	00400c11 	.word	0x00400c11
  4012c0:	00401da1 	.word	0x00401da1
  4012c4:	00400f45 	.word	0x00400f45
  4012c8:	00401ae5 	.word	0x00401ae5
  4012cc:	0040197d 	.word	0x0040197d
  4012d0:	00401e69 	.word	0x00401e69
  4012d4:	00401c9d 	.word	0x00401c9d
  4012d8:	00401e39 	.word	0x00401e39

004012dc <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4012dc:	2800      	cmp	r0, #0
  4012de:	d036      	beq.n	40134e <xQueueGenericSendFromISR+0x72>
{
  4012e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012e4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4012e6:	2900      	cmp	r1, #0
  4012e8:	d03c      	beq.n	401364 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4012ea:	2b02      	cmp	r3, #2
  4012ec:	d048      	beq.n	401380 <xQueueGenericSendFromISR+0xa4>
  4012ee:	461e      	mov	r6, r3
  4012f0:	4615      	mov	r5, r2
  4012f2:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4012f4:	4b35      	ldr	r3, [pc, #212]	; (4013cc <xQueueGenericSendFromISR+0xf0>)
  4012f6:	4798      	blx	r3
	__asm volatile
  4012f8:	f3ef 8711 	mrs	r7, BASEPRI
  4012fc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401300:	b672      	cpsid	i
  401302:	f383 8811 	msr	BASEPRI, r3
  401306:	f3bf 8f6f 	isb	sy
  40130a:	f3bf 8f4f 	dsb	sy
  40130e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401310:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401312:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401314:	429a      	cmp	r2, r3
  401316:	d301      	bcc.n	40131c <xQueueGenericSendFromISR+0x40>
  401318:	2e02      	cmp	r6, #2
  40131a:	d14f      	bne.n	4013bc <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40131c:	4632      	mov	r2, r6
  40131e:	4641      	mov	r1, r8
  401320:	4620      	mov	r0, r4
  401322:	4b2b      	ldr	r3, [pc, #172]	; (4013d0 <xQueueGenericSendFromISR+0xf4>)
  401324:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401326:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401328:	f1b3 3fff 	cmp.w	r3, #4294967295
  40132c:	d141      	bne.n	4013b2 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  40132e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401330:	2b00      	cmp	r3, #0
  401332:	d033      	beq.n	40139c <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401334:	4631      	mov	r1, r6
  401336:	4620      	mov	r0, r4
  401338:	4b26      	ldr	r3, [pc, #152]	; (4013d4 <xQueueGenericSendFromISR+0xf8>)
  40133a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  40133c:	2d00      	cmp	r5, #0
  40133e:	d03f      	beq.n	4013c0 <xQueueGenericSendFromISR+0xe4>
  401340:	2801      	cmp	r0, #1
  401342:	d13d      	bne.n	4013c0 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401344:	6028      	str	r0, [r5, #0]
	__asm volatile
  401346:	f387 8811 	msr	BASEPRI, r7
}
  40134a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  40134e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401352:	b672      	cpsid	i
  401354:	f383 8811 	msr	BASEPRI, r3
  401358:	f3bf 8f6f 	isb	sy
  40135c:	f3bf 8f4f 	dsb	sy
  401360:	b662      	cpsie	i
  401362:	e7fe      	b.n	401362 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401364:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401366:	2800      	cmp	r0, #0
  401368:	d0bf      	beq.n	4012ea <xQueueGenericSendFromISR+0xe>
  40136a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40136e:	b672      	cpsid	i
  401370:	f383 8811 	msr	BASEPRI, r3
  401374:	f3bf 8f6f 	isb	sy
  401378:	f3bf 8f4f 	dsb	sy
  40137c:	b662      	cpsie	i
  40137e:	e7fe      	b.n	40137e <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401380:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401382:	2801      	cmp	r0, #1
  401384:	d0b3      	beq.n	4012ee <xQueueGenericSendFromISR+0x12>
  401386:	f04f 0380 	mov.w	r3, #128	; 0x80
  40138a:	b672      	cpsid	i
  40138c:	f383 8811 	msr	BASEPRI, r3
  401390:	f3bf 8f6f 	isb	sy
  401394:	f3bf 8f4f 	dsb	sy
  401398:	b662      	cpsie	i
  40139a:	e7fe      	b.n	40139a <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40139c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40139e:	b18b      	cbz	r3, 4013c4 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4013a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4013a4:	4b0c      	ldr	r3, [pc, #48]	; (4013d8 <xQueueGenericSendFromISR+0xfc>)
  4013a6:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4013a8:	b175      	cbz	r5, 4013c8 <xQueueGenericSendFromISR+0xec>
  4013aa:	b168      	cbz	r0, 4013c8 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4013ac:	2001      	movs	r0, #1
  4013ae:	6028      	str	r0, [r5, #0]
  4013b0:	e7c9      	b.n	401346 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  4013b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4013b4:	3301      	adds	r3, #1
  4013b6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4013b8:	2001      	movs	r0, #1
  4013ba:	e7c4      	b.n	401346 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  4013bc:	2000      	movs	r0, #0
  4013be:	e7c2      	b.n	401346 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  4013c0:	2001      	movs	r0, #1
  4013c2:	e7c0      	b.n	401346 <xQueueGenericSendFromISR+0x6a>
  4013c4:	2001      	movs	r0, #1
  4013c6:	e7be      	b.n	401346 <xQueueGenericSendFromISR+0x6a>
  4013c8:	2001      	movs	r0, #1
  4013ca:	e7bc      	b.n	401346 <xQueueGenericSendFromISR+0x6a>
  4013cc:	00400d1d 	.word	0x00400d1d
  4013d0:	00400e0d 	.word	0x00400e0d
  4013d4:	00400e95 	.word	0x00400e95
  4013d8:	00401da1 	.word	0x00401da1

004013dc <xQueueGenericReceive>:
{
  4013dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4013e0:	b084      	sub	sp, #16
  4013e2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4013e4:	b198      	cbz	r0, 40140e <xQueueGenericReceive+0x32>
  4013e6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4013e8:	b1e1      	cbz	r1, 401424 <xQueueGenericReceive+0x48>
  4013ea:	4698      	mov	r8, r3
  4013ec:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4013ee:	4b61      	ldr	r3, [pc, #388]	; (401574 <xQueueGenericReceive+0x198>)
  4013f0:	4798      	blx	r3
  4013f2:	bb28      	cbnz	r0, 401440 <xQueueGenericReceive+0x64>
  4013f4:	9b01      	ldr	r3, [sp, #4]
  4013f6:	b353      	cbz	r3, 40144e <xQueueGenericReceive+0x72>
  4013f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013fc:	b672      	cpsid	i
  4013fe:	f383 8811 	msr	BASEPRI, r3
  401402:	f3bf 8f6f 	isb	sy
  401406:	f3bf 8f4f 	dsb	sy
  40140a:	b662      	cpsie	i
  40140c:	e7fe      	b.n	40140c <xQueueGenericReceive+0x30>
  40140e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401412:	b672      	cpsid	i
  401414:	f383 8811 	msr	BASEPRI, r3
  401418:	f3bf 8f6f 	isb	sy
  40141c:	f3bf 8f4f 	dsb	sy
  401420:	b662      	cpsie	i
  401422:	e7fe      	b.n	401422 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401424:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401426:	2a00      	cmp	r2, #0
  401428:	d0df      	beq.n	4013ea <xQueueGenericReceive+0xe>
  40142a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40142e:	b672      	cpsid	i
  401430:	f383 8811 	msr	BASEPRI, r3
  401434:	f3bf 8f6f 	isb	sy
  401438:	f3bf 8f4f 	dsb	sy
  40143c:	b662      	cpsie	i
  40143e:	e7fe      	b.n	40143e <xQueueGenericReceive+0x62>
  401440:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401442:	4d4d      	ldr	r5, [pc, #308]	; (401578 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401444:	f8df a160 	ldr.w	sl, [pc, #352]	; 4015a8 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401448:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401588 <xQueueGenericReceive+0x1ac>
  40144c:	e04b      	b.n	4014e6 <xQueueGenericReceive+0x10a>
  40144e:	2600      	movs	r6, #0
  401450:	e7f7      	b.n	401442 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401452:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401454:	4639      	mov	r1, r7
  401456:	4620      	mov	r0, r4
  401458:	4b48      	ldr	r3, [pc, #288]	; (40157c <xQueueGenericReceive+0x1a0>)
  40145a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  40145c:	f1b8 0f00 	cmp.w	r8, #0
  401460:	d11d      	bne.n	40149e <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401462:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401464:	3b01      	subs	r3, #1
  401466:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401468:	6823      	ldr	r3, [r4, #0]
  40146a:	b913      	cbnz	r3, 401472 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  40146c:	4b44      	ldr	r3, [pc, #272]	; (401580 <xQueueGenericReceive+0x1a4>)
  40146e:	4798      	blx	r3
  401470:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401472:	6923      	ldr	r3, [r4, #16]
  401474:	b16b      	cbz	r3, 401492 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401476:	f104 0010 	add.w	r0, r4, #16
  40147a:	4b42      	ldr	r3, [pc, #264]	; (401584 <xQueueGenericReceive+0x1a8>)
  40147c:	4798      	blx	r3
  40147e:	2801      	cmp	r0, #1
  401480:	d107      	bne.n	401492 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401486:	4b40      	ldr	r3, [pc, #256]	; (401588 <xQueueGenericReceive+0x1ac>)
  401488:	601a      	str	r2, [r3, #0]
  40148a:	f3bf 8f4f 	dsb	sy
  40148e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401492:	4b3e      	ldr	r3, [pc, #248]	; (40158c <xQueueGenericReceive+0x1b0>)
  401494:	4798      	blx	r3
				return pdPASS;
  401496:	2001      	movs	r0, #1
}
  401498:	b004      	add	sp, #16
  40149a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40149e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4014a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014a2:	2b00      	cmp	r3, #0
  4014a4:	d0f5      	beq.n	401492 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4014a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014aa:	4b36      	ldr	r3, [pc, #216]	; (401584 <xQueueGenericReceive+0x1a8>)
  4014ac:	4798      	blx	r3
  4014ae:	2800      	cmp	r0, #0
  4014b0:	d0ef      	beq.n	401492 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4014b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4014b6:	4b34      	ldr	r3, [pc, #208]	; (401588 <xQueueGenericReceive+0x1ac>)
  4014b8:	601a      	str	r2, [r3, #0]
  4014ba:	f3bf 8f4f 	dsb	sy
  4014be:	f3bf 8f6f 	isb	sy
  4014c2:	e7e6      	b.n	401492 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  4014c4:	4b31      	ldr	r3, [pc, #196]	; (40158c <xQueueGenericReceive+0x1b0>)
  4014c6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4014c8:	2000      	movs	r0, #0
  4014ca:	e7e5      	b.n	401498 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  4014cc:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4014ce:	6860      	ldr	r0, [r4, #4]
  4014d0:	4b2f      	ldr	r3, [pc, #188]	; (401590 <xQueueGenericReceive+0x1b4>)
  4014d2:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4014d4:	4b2d      	ldr	r3, [pc, #180]	; (40158c <xQueueGenericReceive+0x1b0>)
  4014d6:	4798      	blx	r3
  4014d8:	e030      	b.n	40153c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4014da:	4620      	mov	r0, r4
  4014dc:	4b2d      	ldr	r3, [pc, #180]	; (401594 <xQueueGenericReceive+0x1b8>)
  4014de:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4014e0:	4b2d      	ldr	r3, [pc, #180]	; (401598 <xQueueGenericReceive+0x1bc>)
  4014e2:	4798      	blx	r3
  4014e4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4014e6:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4014e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014ea:	2b00      	cmp	r3, #0
  4014ec:	d1b1      	bne.n	401452 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4014ee:	9b01      	ldr	r3, [sp, #4]
  4014f0:	2b00      	cmp	r3, #0
  4014f2:	d0e7      	beq.n	4014c4 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  4014f4:	b90e      	cbnz	r6, 4014fa <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  4014f6:	a802      	add	r0, sp, #8
  4014f8:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4014fa:	4b24      	ldr	r3, [pc, #144]	; (40158c <xQueueGenericReceive+0x1b0>)
  4014fc:	4798      	blx	r3
		vTaskSuspendAll();
  4014fe:	4b27      	ldr	r3, [pc, #156]	; (40159c <xQueueGenericReceive+0x1c0>)
  401500:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401502:	47a8      	blx	r5
  401504:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401506:	f1b3 3fff 	cmp.w	r3, #4294967295
  40150a:	d101      	bne.n	401510 <xQueueGenericReceive+0x134>
  40150c:	2300      	movs	r3, #0
  40150e:	6463      	str	r3, [r4, #68]	; 0x44
  401510:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401512:	f1b3 3fff 	cmp.w	r3, #4294967295
  401516:	d101      	bne.n	40151c <xQueueGenericReceive+0x140>
  401518:	2300      	movs	r3, #0
  40151a:	64a3      	str	r3, [r4, #72]	; 0x48
  40151c:	4b1b      	ldr	r3, [pc, #108]	; (40158c <xQueueGenericReceive+0x1b0>)
  40151e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401520:	a901      	add	r1, sp, #4
  401522:	a802      	add	r0, sp, #8
  401524:	4b1e      	ldr	r3, [pc, #120]	; (4015a0 <xQueueGenericReceive+0x1c4>)
  401526:	4798      	blx	r3
  401528:	b9e8      	cbnz	r0, 401566 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40152a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40152c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  40152e:	4b17      	ldr	r3, [pc, #92]	; (40158c <xQueueGenericReceive+0x1b0>)
  401530:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401532:	2e00      	cmp	r6, #0
  401534:	d1d1      	bne.n	4014da <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401536:	6823      	ldr	r3, [r4, #0]
  401538:	2b00      	cmp	r3, #0
  40153a:	d0c7      	beq.n	4014cc <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40153c:	9901      	ldr	r1, [sp, #4]
  40153e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401542:	4b18      	ldr	r3, [pc, #96]	; (4015a4 <xQueueGenericReceive+0x1c8>)
  401544:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401546:	4620      	mov	r0, r4
  401548:	4b12      	ldr	r3, [pc, #72]	; (401594 <xQueueGenericReceive+0x1b8>)
  40154a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40154c:	4b12      	ldr	r3, [pc, #72]	; (401598 <xQueueGenericReceive+0x1bc>)
  40154e:	4798      	blx	r3
  401550:	2800      	cmp	r0, #0
  401552:	d1c7      	bne.n	4014e4 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401554:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401558:	f8c9 3000 	str.w	r3, [r9]
  40155c:	f3bf 8f4f 	dsb	sy
  401560:	f3bf 8f6f 	isb	sy
  401564:	e7be      	b.n	4014e4 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401566:	4620      	mov	r0, r4
  401568:	4b0a      	ldr	r3, [pc, #40]	; (401594 <xQueueGenericReceive+0x1b8>)
  40156a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40156c:	4b0a      	ldr	r3, [pc, #40]	; (401598 <xQueueGenericReceive+0x1bc>)
  40156e:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401570:	2000      	movs	r0, #0
  401572:	e791      	b.n	401498 <xQueueGenericReceive+0xbc>
  401574:	00401f09 	.word	0x00401f09
  401578:	00400bc5 	.word	0x00400bc5
  40157c:	00400f1d 	.word	0x00400f1d
  401580:	00402089 	.word	0x00402089
  401584:	00401da1 	.word	0x00401da1
  401588:	e000ed04 	.word	0xe000ed04
  40158c:	00400c11 	.word	0x00400c11
  401590:	00401f29 	.word	0x00401f29
  401594:	00400f45 	.word	0x00400f45
  401598:	00401ae5 	.word	0x00401ae5
  40159c:	0040197d 	.word	0x0040197d
  4015a0:	00401e69 	.word	0x00401e69
  4015a4:	00401c9d 	.word	0x00401c9d
  4015a8:	00401e39 	.word	0x00401e39

004015ac <vQueueAddToRegistry>:
	{
  4015ac:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4015ae:	4b0b      	ldr	r3, [pc, #44]	; (4015dc <vQueueAddToRegistry+0x30>)
  4015b0:	681b      	ldr	r3, [r3, #0]
  4015b2:	b153      	cbz	r3, 4015ca <vQueueAddToRegistry+0x1e>
  4015b4:	2301      	movs	r3, #1
  4015b6:	4c09      	ldr	r4, [pc, #36]	; (4015dc <vQueueAddToRegistry+0x30>)
  4015b8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4015bc:	b132      	cbz	r2, 4015cc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4015be:	3301      	adds	r3, #1
  4015c0:	2b08      	cmp	r3, #8
  4015c2:	d1f9      	bne.n	4015b8 <vQueueAddToRegistry+0xc>
	}
  4015c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4015c8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4015ca:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4015cc:	4a03      	ldr	r2, [pc, #12]	; (4015dc <vQueueAddToRegistry+0x30>)
  4015ce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4015d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4015d6:	6058      	str	r0, [r3, #4]
				break;
  4015d8:	e7f4      	b.n	4015c4 <vQueueAddToRegistry+0x18>
  4015da:	bf00      	nop
  4015dc:	2040c67c 	.word	0x2040c67c

004015e0 <vQueueWaitForMessageRestricted>:
	{
  4015e0:	b570      	push	{r4, r5, r6, lr}
  4015e2:	4604      	mov	r4, r0
  4015e4:	460d      	mov	r5, r1
  4015e6:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4015e8:	4b0f      	ldr	r3, [pc, #60]	; (401628 <vQueueWaitForMessageRestricted+0x48>)
  4015ea:	4798      	blx	r3
  4015ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4015ee:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015f2:	d00b      	beq.n	40160c <vQueueWaitForMessageRestricted+0x2c>
  4015f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015fa:	d00a      	beq.n	401612 <vQueueWaitForMessageRestricted+0x32>
  4015fc:	4b0b      	ldr	r3, [pc, #44]	; (40162c <vQueueWaitForMessageRestricted+0x4c>)
  4015fe:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401600:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401602:	b14b      	cbz	r3, 401618 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401604:	4620      	mov	r0, r4
  401606:	4b0a      	ldr	r3, [pc, #40]	; (401630 <vQueueWaitForMessageRestricted+0x50>)
  401608:	4798      	blx	r3
  40160a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  40160c:	2300      	movs	r3, #0
  40160e:	6463      	str	r3, [r4, #68]	; 0x44
  401610:	e7f0      	b.n	4015f4 <vQueueWaitForMessageRestricted+0x14>
  401612:	2300      	movs	r3, #0
  401614:	64a3      	str	r3, [r4, #72]	; 0x48
  401616:	e7f1      	b.n	4015fc <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401618:	4632      	mov	r2, r6
  40161a:	4629      	mov	r1, r5
  40161c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401620:	4b04      	ldr	r3, [pc, #16]	; (401634 <vQueueWaitForMessageRestricted+0x54>)
  401622:	4798      	blx	r3
  401624:	e7ee      	b.n	401604 <vQueueWaitForMessageRestricted+0x24>
  401626:	bf00      	nop
  401628:	00400bc5 	.word	0x00400bc5
  40162c:	00400c11 	.word	0x00400c11
  401630:	00400f45 	.word	0x00400f45
  401634:	00401d21 	.word	0x00401d21

00401638 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401638:	4b08      	ldr	r3, [pc, #32]	; (40165c <prvResetNextTaskUnblockTime+0x24>)
  40163a:	681b      	ldr	r3, [r3, #0]
  40163c:	681b      	ldr	r3, [r3, #0]
  40163e:	b13b      	cbz	r3, 401650 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401640:	4b06      	ldr	r3, [pc, #24]	; (40165c <prvResetNextTaskUnblockTime+0x24>)
  401642:	681b      	ldr	r3, [r3, #0]
  401644:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401646:	68db      	ldr	r3, [r3, #12]
  401648:	685a      	ldr	r2, [r3, #4]
  40164a:	4b05      	ldr	r3, [pc, #20]	; (401660 <prvResetNextTaskUnblockTime+0x28>)
  40164c:	601a      	str	r2, [r3, #0]
  40164e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401650:	f04f 32ff 	mov.w	r2, #4294967295
  401654:	4b02      	ldr	r3, [pc, #8]	; (401660 <prvResetNextTaskUnblockTime+0x28>)
  401656:	601a      	str	r2, [r3, #0]
  401658:	4770      	bx	lr
  40165a:	bf00      	nop
  40165c:	2040c1fc 	.word	0x2040c1fc
  401660:	2040c2a8 	.word	0x2040c2a8

00401664 <prvAddCurrentTaskToDelayedList>:
{
  401664:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401666:	4b0f      	ldr	r3, [pc, #60]	; (4016a4 <prvAddCurrentTaskToDelayedList+0x40>)
  401668:	681b      	ldr	r3, [r3, #0]
  40166a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  40166c:	4b0e      	ldr	r3, [pc, #56]	; (4016a8 <prvAddCurrentTaskToDelayedList+0x44>)
  40166e:	681b      	ldr	r3, [r3, #0]
  401670:	4298      	cmp	r0, r3
  401672:	d30e      	bcc.n	401692 <prvAddCurrentTaskToDelayedList+0x2e>
  401674:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401676:	4b0d      	ldr	r3, [pc, #52]	; (4016ac <prvAddCurrentTaskToDelayedList+0x48>)
  401678:	6818      	ldr	r0, [r3, #0]
  40167a:	4b0a      	ldr	r3, [pc, #40]	; (4016a4 <prvAddCurrentTaskToDelayedList+0x40>)
  40167c:	6819      	ldr	r1, [r3, #0]
  40167e:	3104      	adds	r1, #4
  401680:	4b0b      	ldr	r3, [pc, #44]	; (4016b0 <prvAddCurrentTaskToDelayedList+0x4c>)
  401682:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401684:	4b0b      	ldr	r3, [pc, #44]	; (4016b4 <prvAddCurrentTaskToDelayedList+0x50>)
  401686:	681b      	ldr	r3, [r3, #0]
  401688:	429c      	cmp	r4, r3
  40168a:	d201      	bcs.n	401690 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  40168c:	4b09      	ldr	r3, [pc, #36]	; (4016b4 <prvAddCurrentTaskToDelayedList+0x50>)
  40168e:	601c      	str	r4, [r3, #0]
  401690:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401692:	4b09      	ldr	r3, [pc, #36]	; (4016b8 <prvAddCurrentTaskToDelayedList+0x54>)
  401694:	6818      	ldr	r0, [r3, #0]
  401696:	4b03      	ldr	r3, [pc, #12]	; (4016a4 <prvAddCurrentTaskToDelayedList+0x40>)
  401698:	6819      	ldr	r1, [r3, #0]
  40169a:	3104      	adds	r1, #4
  40169c:	4b04      	ldr	r3, [pc, #16]	; (4016b0 <prvAddCurrentTaskToDelayedList+0x4c>)
  40169e:	4798      	blx	r3
  4016a0:	bd10      	pop	{r4, pc}
  4016a2:	bf00      	nop
  4016a4:	2040c1f8 	.word	0x2040c1f8
  4016a8:	2040c2f0 	.word	0x2040c2f0
  4016ac:	2040c1fc 	.word	0x2040c1fc
  4016b0:	00400ad3 	.word	0x00400ad3
  4016b4:	2040c2a8 	.word	0x2040c2a8
  4016b8:	2040c200 	.word	0x2040c200

004016bc <xTaskGenericCreate>:
{
  4016bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016c0:	b083      	sub	sp, #12
  4016c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4016c4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4016c8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4016ca:	b160      	cbz	r0, 4016e6 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4016cc:	2d04      	cmp	r5, #4
  4016ce:	d915      	bls.n	4016fc <xTaskGenericCreate+0x40>
  4016d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016d4:	b672      	cpsid	i
  4016d6:	f383 8811 	msr	BASEPRI, r3
  4016da:	f3bf 8f6f 	isb	sy
  4016de:	f3bf 8f4f 	dsb	sy
  4016e2:	b662      	cpsie	i
  4016e4:	e7fe      	b.n	4016e4 <xTaskGenericCreate+0x28>
  4016e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ea:	b672      	cpsid	i
  4016ec:	f383 8811 	msr	BASEPRI, r3
  4016f0:	f3bf 8f6f 	isb	sy
  4016f4:	f3bf 8f4f 	dsb	sy
  4016f8:	b662      	cpsie	i
  4016fa:	e7fe      	b.n	4016fa <xTaskGenericCreate+0x3e>
  4016fc:	9001      	str	r0, [sp, #4]
  4016fe:	4698      	mov	r8, r3
  401700:	4691      	mov	r9, r2
  401702:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401704:	b936      	cbnz	r6, 401714 <xTaskGenericCreate+0x58>
  401706:	0090      	lsls	r0, r2, #2
  401708:	4b62      	ldr	r3, [pc, #392]	; (401894 <xTaskGenericCreate+0x1d8>)
  40170a:	4798      	blx	r3
		if( pxStack != NULL )
  40170c:	4606      	mov	r6, r0
  40170e:	2800      	cmp	r0, #0
  401710:	f000 809e 	beq.w	401850 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401714:	2058      	movs	r0, #88	; 0x58
  401716:	4b5f      	ldr	r3, [pc, #380]	; (401894 <xTaskGenericCreate+0x1d8>)
  401718:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40171a:	4604      	mov	r4, r0
  40171c:	2800      	cmp	r0, #0
  40171e:	f000 8094 	beq.w	40184a <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401722:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401724:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401728:	21a5      	movs	r1, #165	; 0xa5
  40172a:	4630      	mov	r0, r6
  40172c:	4b5a      	ldr	r3, [pc, #360]	; (401898 <xTaskGenericCreate+0x1dc>)
  40172e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401730:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401734:	444e      	add	r6, r9
  401736:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401738:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40173c:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401740:	783b      	ldrb	r3, [r7, #0]
  401742:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401746:	783b      	ldrb	r3, [r7, #0]
  401748:	2b00      	cmp	r3, #0
  40174a:	f040 8084 	bne.w	401856 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40174e:	2700      	movs	r7, #0
  401750:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401754:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401756:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401758:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40175a:	f104 0904 	add.w	r9, r4, #4
  40175e:	4648      	mov	r0, r9
  401760:	f8df b184 	ldr.w	fp, [pc, #388]	; 4018e8 <xTaskGenericCreate+0x22c>
  401764:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401766:	f104 0018 	add.w	r0, r4, #24
  40176a:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40176c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40176e:	f1c5 0305 	rsb	r3, r5, #5
  401772:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401774:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401776:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401778:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40177c:	4642      	mov	r2, r8
  40177e:	9901      	ldr	r1, [sp, #4]
  401780:	4630      	mov	r0, r6
  401782:	4b46      	ldr	r3, [pc, #280]	; (40189c <xTaskGenericCreate+0x1e0>)
  401784:	4798      	blx	r3
  401786:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401788:	f1ba 0f00 	cmp.w	sl, #0
  40178c:	d001      	beq.n	401792 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40178e:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401792:	4b43      	ldr	r3, [pc, #268]	; (4018a0 <xTaskGenericCreate+0x1e4>)
  401794:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401796:	4a43      	ldr	r2, [pc, #268]	; (4018a4 <xTaskGenericCreate+0x1e8>)
  401798:	6813      	ldr	r3, [r2, #0]
  40179a:	3301      	adds	r3, #1
  40179c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40179e:	4b42      	ldr	r3, [pc, #264]	; (4018a8 <xTaskGenericCreate+0x1ec>)
  4017a0:	681b      	ldr	r3, [r3, #0]
  4017a2:	2b00      	cmp	r3, #0
  4017a4:	d166      	bne.n	401874 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4017a6:	4b40      	ldr	r3, [pc, #256]	; (4018a8 <xTaskGenericCreate+0x1ec>)
  4017a8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4017aa:	6813      	ldr	r3, [r2, #0]
  4017ac:	2b01      	cmp	r3, #1
  4017ae:	d121      	bne.n	4017f4 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4017b0:	4f3e      	ldr	r7, [pc, #248]	; (4018ac <xTaskGenericCreate+0x1f0>)
  4017b2:	4638      	mov	r0, r7
  4017b4:	4e3e      	ldr	r6, [pc, #248]	; (4018b0 <xTaskGenericCreate+0x1f4>)
  4017b6:	47b0      	blx	r6
  4017b8:	f107 0014 	add.w	r0, r7, #20
  4017bc:	47b0      	blx	r6
  4017be:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4017c2:	47b0      	blx	r6
  4017c4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4017c8:	47b0      	blx	r6
  4017ca:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4017ce:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4017d0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4018ec <xTaskGenericCreate+0x230>
  4017d4:	4640      	mov	r0, r8
  4017d6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4017d8:	4f36      	ldr	r7, [pc, #216]	; (4018b4 <xTaskGenericCreate+0x1f8>)
  4017da:	4638      	mov	r0, r7
  4017dc:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4017de:	4836      	ldr	r0, [pc, #216]	; (4018b8 <xTaskGenericCreate+0x1fc>)
  4017e0:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4017e2:	4836      	ldr	r0, [pc, #216]	; (4018bc <xTaskGenericCreate+0x200>)
  4017e4:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4017e6:	4836      	ldr	r0, [pc, #216]	; (4018c0 <xTaskGenericCreate+0x204>)
  4017e8:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4017ea:	4b36      	ldr	r3, [pc, #216]	; (4018c4 <xTaskGenericCreate+0x208>)
  4017ec:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4017f0:	4b35      	ldr	r3, [pc, #212]	; (4018c8 <xTaskGenericCreate+0x20c>)
  4017f2:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  4017f4:	4a35      	ldr	r2, [pc, #212]	; (4018cc <xTaskGenericCreate+0x210>)
  4017f6:	6813      	ldr	r3, [r2, #0]
  4017f8:	3301      	adds	r3, #1
  4017fa:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4017fc:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4017fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401800:	4a33      	ldr	r2, [pc, #204]	; (4018d0 <xTaskGenericCreate+0x214>)
  401802:	6811      	ldr	r1, [r2, #0]
  401804:	2301      	movs	r3, #1
  401806:	4083      	lsls	r3, r0
  401808:	430b      	orrs	r3, r1
  40180a:	6013      	str	r3, [r2, #0]
  40180c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401810:	4649      	mov	r1, r9
  401812:	4b26      	ldr	r3, [pc, #152]	; (4018ac <xTaskGenericCreate+0x1f0>)
  401814:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401818:	4b2e      	ldr	r3, [pc, #184]	; (4018d4 <xTaskGenericCreate+0x218>)
  40181a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40181c:	4b2e      	ldr	r3, [pc, #184]	; (4018d8 <xTaskGenericCreate+0x21c>)
  40181e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401820:	4b2e      	ldr	r3, [pc, #184]	; (4018dc <xTaskGenericCreate+0x220>)
  401822:	681b      	ldr	r3, [r3, #0]
  401824:	2b00      	cmp	r3, #0
  401826:	d031      	beq.n	40188c <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401828:	4b1f      	ldr	r3, [pc, #124]	; (4018a8 <xTaskGenericCreate+0x1ec>)
  40182a:	681b      	ldr	r3, [r3, #0]
  40182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40182e:	429d      	cmp	r5, r3
  401830:	d92e      	bls.n	401890 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401836:	4b2a      	ldr	r3, [pc, #168]	; (4018e0 <xTaskGenericCreate+0x224>)
  401838:	601a      	str	r2, [r3, #0]
  40183a:	f3bf 8f4f 	dsb	sy
  40183e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401842:	2001      	movs	r0, #1
}
  401844:	b003      	add	sp, #12
  401846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  40184a:	4630      	mov	r0, r6
  40184c:	4b25      	ldr	r3, [pc, #148]	; (4018e4 <xTaskGenericCreate+0x228>)
  40184e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401850:	f04f 30ff 	mov.w	r0, #4294967295
  401854:	e7f6      	b.n	401844 <xTaskGenericCreate+0x188>
  401856:	463b      	mov	r3, r7
  401858:	f104 0234 	add.w	r2, r4, #52	; 0x34
  40185c:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40185e:	7859      	ldrb	r1, [r3, #1]
  401860:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401864:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401868:	2900      	cmp	r1, #0
  40186a:	f43f af70 	beq.w	40174e <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40186e:	42bb      	cmp	r3, r7
  401870:	d1f5      	bne.n	40185e <xTaskGenericCreate+0x1a2>
  401872:	e76c      	b.n	40174e <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401874:	4b19      	ldr	r3, [pc, #100]	; (4018dc <xTaskGenericCreate+0x220>)
  401876:	681b      	ldr	r3, [r3, #0]
  401878:	2b00      	cmp	r3, #0
  40187a:	d1bb      	bne.n	4017f4 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40187c:	4b0a      	ldr	r3, [pc, #40]	; (4018a8 <xTaskGenericCreate+0x1ec>)
  40187e:	681b      	ldr	r3, [r3, #0]
  401880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401882:	429d      	cmp	r5, r3
  401884:	d3b6      	bcc.n	4017f4 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401886:	4b08      	ldr	r3, [pc, #32]	; (4018a8 <xTaskGenericCreate+0x1ec>)
  401888:	601c      	str	r4, [r3, #0]
  40188a:	e7b3      	b.n	4017f4 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  40188c:	2001      	movs	r0, #1
  40188e:	e7d9      	b.n	401844 <xTaskGenericCreate+0x188>
  401890:	2001      	movs	r0, #1
	return xReturn;
  401892:	e7d7      	b.n	401844 <xTaskGenericCreate+0x188>
  401894:	00400d81 	.word	0x00400d81
  401898:	00403f65 	.word	0x00403f65
  40189c:	00400b9d 	.word	0x00400b9d
  4018a0:	00400bc5 	.word	0x00400bc5
  4018a4:	2040c268 	.word	0x2040c268
  4018a8:	2040c1f8 	.word	0x2040c1f8
  4018ac:	2040c204 	.word	0x2040c204
  4018b0:	00400a9f 	.word	0x00400a9f
  4018b4:	2040c294 	.word	0x2040c294
  4018b8:	2040c2b0 	.word	0x2040c2b0
  4018bc:	2040c2dc 	.word	0x2040c2dc
  4018c0:	2040c2c8 	.word	0x2040c2c8
  4018c4:	2040c1fc 	.word	0x2040c1fc
  4018c8:	2040c200 	.word	0x2040c200
  4018cc:	2040c274 	.word	0x2040c274
  4018d0:	2040c27c 	.word	0x2040c27c
  4018d4:	00400abb 	.word	0x00400abb
  4018d8:	00400c11 	.word	0x00400c11
  4018dc:	2040c2c4 	.word	0x2040c2c4
  4018e0:	e000ed04 	.word	0xe000ed04
  4018e4:	00400df1 	.word	0x00400df1
  4018e8:	00400ab5 	.word	0x00400ab5
  4018ec:	2040c280 	.word	0x2040c280

004018f0 <vTaskStartScheduler>:
{
  4018f0:	b510      	push	{r4, lr}
  4018f2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4018f4:	2300      	movs	r3, #0
  4018f6:	9303      	str	r3, [sp, #12]
  4018f8:	9302      	str	r3, [sp, #8]
  4018fa:	9301      	str	r3, [sp, #4]
  4018fc:	9300      	str	r3, [sp, #0]
  4018fe:	2282      	movs	r2, #130	; 0x82
  401900:	4916      	ldr	r1, [pc, #88]	; (40195c <vTaskStartScheduler+0x6c>)
  401902:	4817      	ldr	r0, [pc, #92]	; (401960 <vTaskStartScheduler+0x70>)
  401904:	4c17      	ldr	r4, [pc, #92]	; (401964 <vTaskStartScheduler+0x74>)
  401906:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401908:	2801      	cmp	r0, #1
  40190a:	d00b      	beq.n	401924 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  40190c:	bb20      	cbnz	r0, 401958 <vTaskStartScheduler+0x68>
  40190e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401912:	b672      	cpsid	i
  401914:	f383 8811 	msr	BASEPRI, r3
  401918:	f3bf 8f6f 	isb	sy
  40191c:	f3bf 8f4f 	dsb	sy
  401920:	b662      	cpsie	i
  401922:	e7fe      	b.n	401922 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  401924:	4b10      	ldr	r3, [pc, #64]	; (401968 <vTaskStartScheduler+0x78>)
  401926:	4798      	blx	r3
	if( xReturn == pdPASS )
  401928:	2801      	cmp	r0, #1
  40192a:	d1ef      	bne.n	40190c <vTaskStartScheduler+0x1c>
  40192c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401930:	b672      	cpsid	i
  401932:	f383 8811 	msr	BASEPRI, r3
  401936:	f3bf 8f6f 	isb	sy
  40193a:	f3bf 8f4f 	dsb	sy
  40193e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401940:	f04f 32ff 	mov.w	r2, #4294967295
  401944:	4b09      	ldr	r3, [pc, #36]	; (40196c <vTaskStartScheduler+0x7c>)
  401946:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401948:	2201      	movs	r2, #1
  40194a:	4b09      	ldr	r3, [pc, #36]	; (401970 <vTaskStartScheduler+0x80>)
  40194c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40194e:	2200      	movs	r2, #0
  401950:	4b08      	ldr	r3, [pc, #32]	; (401974 <vTaskStartScheduler+0x84>)
  401952:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401954:	4b08      	ldr	r3, [pc, #32]	; (401978 <vTaskStartScheduler+0x88>)
  401956:	4798      	blx	r3
}
  401958:	b004      	add	sp, #16
  40195a:	bd10      	pop	{r4, pc}
  40195c:	00406a34 	.word	0x00406a34
  401960:	00401c05 	.word	0x00401c05
  401964:	004016bd 	.word	0x004016bd
  401968:	00402175 	.word	0x00402175
  40196c:	2040c2a8 	.word	0x2040c2a8
  401970:	2040c2c4 	.word	0x2040c2c4
  401974:	2040c2f0 	.word	0x2040c2f0
  401978:	00400c59 	.word	0x00400c59

0040197c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  40197c:	4a02      	ldr	r2, [pc, #8]	; (401988 <vTaskSuspendAll+0xc>)
  40197e:	6813      	ldr	r3, [r2, #0]
  401980:	3301      	adds	r3, #1
  401982:	6013      	str	r3, [r2, #0]
  401984:	4770      	bx	lr
  401986:	bf00      	nop
  401988:	2040c270 	.word	0x2040c270

0040198c <xTaskGetTickCount>:
		xTicks = xTickCount;
  40198c:	4b01      	ldr	r3, [pc, #4]	; (401994 <xTaskGetTickCount+0x8>)
  40198e:	6818      	ldr	r0, [r3, #0]
}
  401990:	4770      	bx	lr
  401992:	bf00      	nop
  401994:	2040c2f0 	.word	0x2040c2f0

00401998 <xTaskIncrementTick>:
{
  401998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40199c:	4b42      	ldr	r3, [pc, #264]	; (401aa8 <xTaskIncrementTick+0x110>)
  40199e:	681b      	ldr	r3, [r3, #0]
  4019a0:	2b00      	cmp	r3, #0
  4019a2:	d178      	bne.n	401a96 <xTaskIncrementTick+0xfe>
		++xTickCount;
  4019a4:	4b41      	ldr	r3, [pc, #260]	; (401aac <xTaskIncrementTick+0x114>)
  4019a6:	681a      	ldr	r2, [r3, #0]
  4019a8:	3201      	adds	r2, #1
  4019aa:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4019ac:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4019ae:	b9d6      	cbnz	r6, 4019e6 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4019b0:	4b3f      	ldr	r3, [pc, #252]	; (401ab0 <xTaskIncrementTick+0x118>)
  4019b2:	681b      	ldr	r3, [r3, #0]
  4019b4:	681b      	ldr	r3, [r3, #0]
  4019b6:	b153      	cbz	r3, 4019ce <xTaskIncrementTick+0x36>
  4019b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019bc:	b672      	cpsid	i
  4019be:	f383 8811 	msr	BASEPRI, r3
  4019c2:	f3bf 8f6f 	isb	sy
  4019c6:	f3bf 8f4f 	dsb	sy
  4019ca:	b662      	cpsie	i
  4019cc:	e7fe      	b.n	4019cc <xTaskIncrementTick+0x34>
  4019ce:	4a38      	ldr	r2, [pc, #224]	; (401ab0 <xTaskIncrementTick+0x118>)
  4019d0:	6811      	ldr	r1, [r2, #0]
  4019d2:	4b38      	ldr	r3, [pc, #224]	; (401ab4 <xTaskIncrementTick+0x11c>)
  4019d4:	6818      	ldr	r0, [r3, #0]
  4019d6:	6010      	str	r0, [r2, #0]
  4019d8:	6019      	str	r1, [r3, #0]
  4019da:	4a37      	ldr	r2, [pc, #220]	; (401ab8 <xTaskIncrementTick+0x120>)
  4019dc:	6813      	ldr	r3, [r2, #0]
  4019de:	3301      	adds	r3, #1
  4019e0:	6013      	str	r3, [r2, #0]
  4019e2:	4b36      	ldr	r3, [pc, #216]	; (401abc <xTaskIncrementTick+0x124>)
  4019e4:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4019e6:	4b36      	ldr	r3, [pc, #216]	; (401ac0 <xTaskIncrementTick+0x128>)
  4019e8:	681b      	ldr	r3, [r3, #0]
  4019ea:	429e      	cmp	r6, r3
  4019ec:	d218      	bcs.n	401a20 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4019ee:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4019f0:	4b34      	ldr	r3, [pc, #208]	; (401ac4 <xTaskIncrementTick+0x12c>)
  4019f2:	681b      	ldr	r3, [r3, #0]
  4019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4019f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4019fa:	4a33      	ldr	r2, [pc, #204]	; (401ac8 <xTaskIncrementTick+0x130>)
  4019fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401a00:	2b02      	cmp	r3, #2
  401a02:	bf28      	it	cs
  401a04:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401a06:	4b31      	ldr	r3, [pc, #196]	; (401acc <xTaskIncrementTick+0x134>)
  401a08:	681b      	ldr	r3, [r3, #0]
  401a0a:	b90b      	cbnz	r3, 401a10 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  401a0c:	4b30      	ldr	r3, [pc, #192]	; (401ad0 <xTaskIncrementTick+0x138>)
  401a0e:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401a10:	4b30      	ldr	r3, [pc, #192]	; (401ad4 <xTaskIncrementTick+0x13c>)
  401a12:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401a14:	2b00      	cmp	r3, #0
}
  401a16:	bf0c      	ite	eq
  401a18:	4620      	moveq	r0, r4
  401a1a:	2001      	movne	r0, #1
  401a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a20:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401a22:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401ab0 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401a26:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401ae0 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  401a2a:	4f2b      	ldr	r7, [pc, #172]	; (401ad8 <xTaskIncrementTick+0x140>)
  401a2c:	e01f      	b.n	401a6e <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  401a2e:	f04f 32ff 	mov.w	r2, #4294967295
  401a32:	4b23      	ldr	r3, [pc, #140]	; (401ac0 <xTaskIncrementTick+0x128>)
  401a34:	601a      	str	r2, [r3, #0]
						break;
  401a36:	e7db      	b.n	4019f0 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  401a38:	4a21      	ldr	r2, [pc, #132]	; (401ac0 <xTaskIncrementTick+0x128>)
  401a3a:	6013      	str	r3, [r2, #0]
							break;
  401a3c:	e7d8      	b.n	4019f0 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401a3e:	f105 0018 	add.w	r0, r5, #24
  401a42:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  401a44:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401a46:	683a      	ldr	r2, [r7, #0]
  401a48:	2301      	movs	r3, #1
  401a4a:	4083      	lsls	r3, r0
  401a4c:	4313      	orrs	r3, r2
  401a4e:	603b      	str	r3, [r7, #0]
  401a50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401a54:	4651      	mov	r1, sl
  401a56:	4b1c      	ldr	r3, [pc, #112]	; (401ac8 <xTaskIncrementTick+0x130>)
  401a58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401a5c:	4b1f      	ldr	r3, [pc, #124]	; (401adc <xTaskIncrementTick+0x144>)
  401a5e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401a60:	4b18      	ldr	r3, [pc, #96]	; (401ac4 <xTaskIncrementTick+0x12c>)
  401a62:	681b      	ldr	r3, [r3, #0]
  401a64:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401a68:	429a      	cmp	r2, r3
  401a6a:	bf28      	it	cs
  401a6c:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401a6e:	f8d9 3000 	ldr.w	r3, [r9]
  401a72:	681b      	ldr	r3, [r3, #0]
  401a74:	2b00      	cmp	r3, #0
  401a76:	d0da      	beq.n	401a2e <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401a78:	f8d9 3000 	ldr.w	r3, [r9]
  401a7c:	68db      	ldr	r3, [r3, #12]
  401a7e:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401a80:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  401a82:	429e      	cmp	r6, r3
  401a84:	d3d8      	bcc.n	401a38 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401a86:	f105 0a04 	add.w	sl, r5, #4
  401a8a:	4650      	mov	r0, sl
  401a8c:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401a8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401a90:	2b00      	cmp	r3, #0
  401a92:	d1d4      	bne.n	401a3e <xTaskIncrementTick+0xa6>
  401a94:	e7d6      	b.n	401a44 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  401a96:	4a0d      	ldr	r2, [pc, #52]	; (401acc <xTaskIncrementTick+0x134>)
  401a98:	6813      	ldr	r3, [r2, #0]
  401a9a:	3301      	adds	r3, #1
  401a9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401a9e:	4b0c      	ldr	r3, [pc, #48]	; (401ad0 <xTaskIncrementTick+0x138>)
  401aa0:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401aa2:	2400      	movs	r4, #0
  401aa4:	e7b4      	b.n	401a10 <xTaskIncrementTick+0x78>
  401aa6:	bf00      	nop
  401aa8:	2040c270 	.word	0x2040c270
  401aac:	2040c2f0 	.word	0x2040c2f0
  401ab0:	2040c1fc 	.word	0x2040c1fc
  401ab4:	2040c200 	.word	0x2040c200
  401ab8:	2040c2ac 	.word	0x2040c2ac
  401abc:	00401639 	.word	0x00401639
  401ac0:	2040c2a8 	.word	0x2040c2a8
  401ac4:	2040c1f8 	.word	0x2040c1f8
  401ac8:	2040c204 	.word	0x2040c204
  401acc:	2040c26c 	.word	0x2040c26c
  401ad0:	00402a4d 	.word	0x00402a4d
  401ad4:	2040c2f4 	.word	0x2040c2f4
  401ad8:	2040c27c 	.word	0x2040c27c
  401adc:	00400abb 	.word	0x00400abb
  401ae0:	00400b07 	.word	0x00400b07

00401ae4 <xTaskResumeAll>:
{
  401ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  401ae8:	4b38      	ldr	r3, [pc, #224]	; (401bcc <xTaskResumeAll+0xe8>)
  401aea:	681b      	ldr	r3, [r3, #0]
  401aec:	b953      	cbnz	r3, 401b04 <xTaskResumeAll+0x20>
  401aee:	f04f 0380 	mov.w	r3, #128	; 0x80
  401af2:	b672      	cpsid	i
  401af4:	f383 8811 	msr	BASEPRI, r3
  401af8:	f3bf 8f6f 	isb	sy
  401afc:	f3bf 8f4f 	dsb	sy
  401b00:	b662      	cpsie	i
  401b02:	e7fe      	b.n	401b02 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  401b04:	4b32      	ldr	r3, [pc, #200]	; (401bd0 <xTaskResumeAll+0xec>)
  401b06:	4798      	blx	r3
		--uxSchedulerSuspended;
  401b08:	4b30      	ldr	r3, [pc, #192]	; (401bcc <xTaskResumeAll+0xe8>)
  401b0a:	681a      	ldr	r2, [r3, #0]
  401b0c:	3a01      	subs	r2, #1
  401b0e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b10:	681b      	ldr	r3, [r3, #0]
  401b12:	2b00      	cmp	r3, #0
  401b14:	d155      	bne.n	401bc2 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401b16:	4b2f      	ldr	r3, [pc, #188]	; (401bd4 <xTaskResumeAll+0xf0>)
  401b18:	681b      	ldr	r3, [r3, #0]
  401b1a:	2b00      	cmp	r3, #0
  401b1c:	d132      	bne.n	401b84 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  401b1e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401b20:	4b2d      	ldr	r3, [pc, #180]	; (401bd8 <xTaskResumeAll+0xf4>)
  401b22:	4798      	blx	r3
}
  401b24:	4620      	mov	r0, r4
  401b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401b2a:	68fb      	ldr	r3, [r7, #12]
  401b2c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401b2e:	f104 0018 	add.w	r0, r4, #24
  401b32:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b34:	f104 0804 	add.w	r8, r4, #4
  401b38:	4640      	mov	r0, r8
  401b3a:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401b3c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401b3e:	682a      	ldr	r2, [r5, #0]
  401b40:	2301      	movs	r3, #1
  401b42:	4083      	lsls	r3, r0
  401b44:	4313      	orrs	r3, r2
  401b46:	602b      	str	r3, [r5, #0]
  401b48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b4c:	4641      	mov	r1, r8
  401b4e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401b52:	4b22      	ldr	r3, [pc, #136]	; (401bdc <xTaskResumeAll+0xf8>)
  401b54:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401b56:	4b22      	ldr	r3, [pc, #136]	; (401be0 <xTaskResumeAll+0xfc>)
  401b58:	681b      	ldr	r3, [r3, #0]
  401b5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b5e:	429a      	cmp	r2, r3
  401b60:	d20c      	bcs.n	401b7c <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401b62:	683b      	ldr	r3, [r7, #0]
  401b64:	2b00      	cmp	r3, #0
  401b66:	d1e0      	bne.n	401b2a <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401b68:	4b1e      	ldr	r3, [pc, #120]	; (401be4 <xTaskResumeAll+0x100>)
  401b6a:	681b      	ldr	r3, [r3, #0]
  401b6c:	b1db      	cbz	r3, 401ba6 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401b6e:	4b1d      	ldr	r3, [pc, #116]	; (401be4 <xTaskResumeAll+0x100>)
  401b70:	681b      	ldr	r3, [r3, #0]
  401b72:	b1c3      	cbz	r3, 401ba6 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401b74:	4e1c      	ldr	r6, [pc, #112]	; (401be8 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  401b76:	4d1d      	ldr	r5, [pc, #116]	; (401bec <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  401b78:	4c1a      	ldr	r4, [pc, #104]	; (401be4 <xTaskResumeAll+0x100>)
  401b7a:	e00e      	b.n	401b9a <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  401b7c:	2201      	movs	r2, #1
  401b7e:	4b1b      	ldr	r3, [pc, #108]	; (401bec <xTaskResumeAll+0x108>)
  401b80:	601a      	str	r2, [r3, #0]
  401b82:	e7ee      	b.n	401b62 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401b84:	4f1a      	ldr	r7, [pc, #104]	; (401bf0 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401b86:	4e1b      	ldr	r6, [pc, #108]	; (401bf4 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  401b88:	4d1b      	ldr	r5, [pc, #108]	; (401bf8 <xTaskResumeAll+0x114>)
  401b8a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 401c00 <xTaskResumeAll+0x11c>
  401b8e:	e7e8      	b.n	401b62 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  401b90:	6823      	ldr	r3, [r4, #0]
  401b92:	3b01      	subs	r3, #1
  401b94:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401b96:	6823      	ldr	r3, [r4, #0]
  401b98:	b12b      	cbz	r3, 401ba6 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401b9a:	47b0      	blx	r6
  401b9c:	2800      	cmp	r0, #0
  401b9e:	d0f7      	beq.n	401b90 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  401ba0:	2301      	movs	r3, #1
  401ba2:	602b      	str	r3, [r5, #0]
  401ba4:	e7f4      	b.n	401b90 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  401ba6:	4b11      	ldr	r3, [pc, #68]	; (401bec <xTaskResumeAll+0x108>)
  401ba8:	681b      	ldr	r3, [r3, #0]
  401baa:	2b01      	cmp	r3, #1
  401bac:	d10b      	bne.n	401bc6 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  401bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401bb2:	4b12      	ldr	r3, [pc, #72]	; (401bfc <xTaskResumeAll+0x118>)
  401bb4:	601a      	str	r2, [r3, #0]
  401bb6:	f3bf 8f4f 	dsb	sy
  401bba:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401bbe:	2401      	movs	r4, #1
  401bc0:	e7ae      	b.n	401b20 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  401bc2:	2400      	movs	r4, #0
  401bc4:	e7ac      	b.n	401b20 <xTaskResumeAll+0x3c>
  401bc6:	2400      	movs	r4, #0
  401bc8:	e7aa      	b.n	401b20 <xTaskResumeAll+0x3c>
  401bca:	bf00      	nop
  401bcc:	2040c270 	.word	0x2040c270
  401bd0:	00400bc5 	.word	0x00400bc5
  401bd4:	2040c268 	.word	0x2040c268
  401bd8:	00400c11 	.word	0x00400c11
  401bdc:	00400abb 	.word	0x00400abb
  401be0:	2040c1f8 	.word	0x2040c1f8
  401be4:	2040c26c 	.word	0x2040c26c
  401be8:	00401999 	.word	0x00401999
  401bec:	2040c2f4 	.word	0x2040c2f4
  401bf0:	2040c2b0 	.word	0x2040c2b0
  401bf4:	00400b07 	.word	0x00400b07
  401bf8:	2040c27c 	.word	0x2040c27c
  401bfc:	e000ed04 	.word	0xe000ed04
  401c00:	2040c204 	.word	0x2040c204

00401c04 <prvIdleTask>:
{
  401c04:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  401c06:	f8df 8088 	ldr.w	r8, [pc, #136]	; 401c90 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401c0a:	4e19      	ldr	r6, [pc, #100]	; (401c70 <prvIdleTask+0x6c>)
				taskYIELD();
  401c0c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 401c94 <prvIdleTask+0x90>
  401c10:	e02a      	b.n	401c68 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401c12:	4b18      	ldr	r3, [pc, #96]	; (401c74 <prvIdleTask+0x70>)
  401c14:	681b      	ldr	r3, [r3, #0]
  401c16:	2b01      	cmp	r3, #1
  401c18:	d81e      	bhi.n	401c58 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401c1a:	682b      	ldr	r3, [r5, #0]
  401c1c:	2b00      	cmp	r3, #0
  401c1e:	d0f8      	beq.n	401c12 <prvIdleTask+0xe>
			vTaskSuspendAll();
  401c20:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401c22:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  401c24:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  401c26:	2c00      	cmp	r4, #0
  401c28:	d0f7      	beq.n	401c1a <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  401c2a:	4b13      	ldr	r3, [pc, #76]	; (401c78 <prvIdleTask+0x74>)
  401c2c:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401c2e:	68f3      	ldr	r3, [r6, #12]
  401c30:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401c32:	1d20      	adds	r0, r4, #4
  401c34:	4b11      	ldr	r3, [pc, #68]	; (401c7c <prvIdleTask+0x78>)
  401c36:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401c38:	4a11      	ldr	r2, [pc, #68]	; (401c80 <prvIdleTask+0x7c>)
  401c3a:	6813      	ldr	r3, [r2, #0]
  401c3c:	3b01      	subs	r3, #1
  401c3e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401c40:	682b      	ldr	r3, [r5, #0]
  401c42:	3b01      	subs	r3, #1
  401c44:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  401c46:	4b0f      	ldr	r3, [pc, #60]	; (401c84 <prvIdleTask+0x80>)
  401c48:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  401c4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401c4c:	f8df a048 	ldr.w	sl, [pc, #72]	; 401c98 <prvIdleTask+0x94>
  401c50:	47d0      	blx	sl
		vPortFree( pxTCB );
  401c52:	4620      	mov	r0, r4
  401c54:	47d0      	blx	sl
  401c56:	e7e0      	b.n	401c1a <prvIdleTask+0x16>
				taskYIELD();
  401c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401c5c:	f8c9 3000 	str.w	r3, [r9]
  401c60:	f3bf 8f4f 	dsb	sy
  401c64:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401c68:	4d07      	ldr	r5, [pc, #28]	; (401c88 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  401c6a:	4f08      	ldr	r7, [pc, #32]	; (401c8c <prvIdleTask+0x88>)
  401c6c:	e7d5      	b.n	401c1a <prvIdleTask+0x16>
  401c6e:	bf00      	nop
  401c70:	2040c2dc 	.word	0x2040c2dc
  401c74:	2040c204 	.word	0x2040c204
  401c78:	00400bc5 	.word	0x00400bc5
  401c7c:	00400b07 	.word	0x00400b07
  401c80:	2040c268 	.word	0x2040c268
  401c84:	00400c11 	.word	0x00400c11
  401c88:	2040c278 	.word	0x2040c278
  401c8c:	00401ae5 	.word	0x00401ae5
  401c90:	0040197d 	.word	0x0040197d
  401c94:	e000ed04 	.word	0xe000ed04
  401c98:	00400df1 	.word	0x00400df1

00401c9c <vTaskPlaceOnEventList>:
{
  401c9c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  401c9e:	b1e0      	cbz	r0, 401cda <vTaskPlaceOnEventList+0x3e>
  401ca0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401ca2:	4d17      	ldr	r5, [pc, #92]	; (401d00 <vTaskPlaceOnEventList+0x64>)
  401ca4:	6829      	ldr	r1, [r5, #0]
  401ca6:	3118      	adds	r1, #24
  401ca8:	4b16      	ldr	r3, [pc, #88]	; (401d04 <vTaskPlaceOnEventList+0x68>)
  401caa:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401cac:	6828      	ldr	r0, [r5, #0]
  401cae:	3004      	adds	r0, #4
  401cb0:	4b15      	ldr	r3, [pc, #84]	; (401d08 <vTaskPlaceOnEventList+0x6c>)
  401cb2:	4798      	blx	r3
  401cb4:	b940      	cbnz	r0, 401cc8 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401cb6:	682a      	ldr	r2, [r5, #0]
  401cb8:	4914      	ldr	r1, [pc, #80]	; (401d0c <vTaskPlaceOnEventList+0x70>)
  401cba:	680b      	ldr	r3, [r1, #0]
  401cbc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401cbe:	2201      	movs	r2, #1
  401cc0:	4082      	lsls	r2, r0
  401cc2:	ea23 0302 	bic.w	r3, r3, r2
  401cc6:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  401cc8:	f1b4 3fff 	cmp.w	r4, #4294967295
  401ccc:	d010      	beq.n	401cf0 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  401cce:	4b10      	ldr	r3, [pc, #64]	; (401d10 <vTaskPlaceOnEventList+0x74>)
  401cd0:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401cd2:	4420      	add	r0, r4
  401cd4:	4b0f      	ldr	r3, [pc, #60]	; (401d14 <vTaskPlaceOnEventList+0x78>)
  401cd6:	4798      	blx	r3
  401cd8:	bd38      	pop	{r3, r4, r5, pc}
  401cda:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cde:	b672      	cpsid	i
  401ce0:	f383 8811 	msr	BASEPRI, r3
  401ce4:	f3bf 8f6f 	isb	sy
  401ce8:	f3bf 8f4f 	dsb	sy
  401cec:	b662      	cpsie	i
  401cee:	e7fe      	b.n	401cee <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401cf0:	4b03      	ldr	r3, [pc, #12]	; (401d00 <vTaskPlaceOnEventList+0x64>)
  401cf2:	6819      	ldr	r1, [r3, #0]
  401cf4:	3104      	adds	r1, #4
  401cf6:	4808      	ldr	r0, [pc, #32]	; (401d18 <vTaskPlaceOnEventList+0x7c>)
  401cf8:	4b08      	ldr	r3, [pc, #32]	; (401d1c <vTaskPlaceOnEventList+0x80>)
  401cfa:	4798      	blx	r3
  401cfc:	bd38      	pop	{r3, r4, r5, pc}
  401cfe:	bf00      	nop
  401d00:	2040c1f8 	.word	0x2040c1f8
  401d04:	00400ad3 	.word	0x00400ad3
  401d08:	00400b07 	.word	0x00400b07
  401d0c:	2040c27c 	.word	0x2040c27c
  401d10:	2040c2f0 	.word	0x2040c2f0
  401d14:	00401665 	.word	0x00401665
  401d18:	2040c2c8 	.word	0x2040c2c8
  401d1c:	00400abb 	.word	0x00400abb

00401d20 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  401d20:	b1e8      	cbz	r0, 401d5e <vTaskPlaceOnEventListRestricted+0x3e>
	{
  401d22:	b570      	push	{r4, r5, r6, lr}
  401d24:	4615      	mov	r5, r2
  401d26:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401d28:	4e16      	ldr	r6, [pc, #88]	; (401d84 <vTaskPlaceOnEventListRestricted+0x64>)
  401d2a:	6831      	ldr	r1, [r6, #0]
  401d2c:	3118      	adds	r1, #24
  401d2e:	4b16      	ldr	r3, [pc, #88]	; (401d88 <vTaskPlaceOnEventListRestricted+0x68>)
  401d30:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d32:	6830      	ldr	r0, [r6, #0]
  401d34:	3004      	adds	r0, #4
  401d36:	4b15      	ldr	r3, [pc, #84]	; (401d8c <vTaskPlaceOnEventListRestricted+0x6c>)
  401d38:	4798      	blx	r3
  401d3a:	b940      	cbnz	r0, 401d4e <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401d3c:	6832      	ldr	r2, [r6, #0]
  401d3e:	4914      	ldr	r1, [pc, #80]	; (401d90 <vTaskPlaceOnEventListRestricted+0x70>)
  401d40:	680b      	ldr	r3, [r1, #0]
  401d42:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401d44:	2201      	movs	r2, #1
  401d46:	4082      	lsls	r2, r0
  401d48:	ea23 0302 	bic.w	r3, r3, r2
  401d4c:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  401d4e:	2d01      	cmp	r5, #1
  401d50:	d010      	beq.n	401d74 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  401d52:	4b10      	ldr	r3, [pc, #64]	; (401d94 <vTaskPlaceOnEventListRestricted+0x74>)
  401d54:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401d56:	4420      	add	r0, r4
  401d58:	4b0f      	ldr	r3, [pc, #60]	; (401d98 <vTaskPlaceOnEventListRestricted+0x78>)
  401d5a:	4798      	blx	r3
  401d5c:	bd70      	pop	{r4, r5, r6, pc}
  401d5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d62:	b672      	cpsid	i
  401d64:	f383 8811 	msr	BASEPRI, r3
  401d68:	f3bf 8f6f 	isb	sy
  401d6c:	f3bf 8f4f 	dsb	sy
  401d70:	b662      	cpsie	i
  401d72:	e7fe      	b.n	401d72 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401d74:	4b03      	ldr	r3, [pc, #12]	; (401d84 <vTaskPlaceOnEventListRestricted+0x64>)
  401d76:	6819      	ldr	r1, [r3, #0]
  401d78:	3104      	adds	r1, #4
  401d7a:	4808      	ldr	r0, [pc, #32]	; (401d9c <vTaskPlaceOnEventListRestricted+0x7c>)
  401d7c:	4b02      	ldr	r3, [pc, #8]	; (401d88 <vTaskPlaceOnEventListRestricted+0x68>)
  401d7e:	4798      	blx	r3
  401d80:	bd70      	pop	{r4, r5, r6, pc}
  401d82:	bf00      	nop
  401d84:	2040c1f8 	.word	0x2040c1f8
  401d88:	00400abb 	.word	0x00400abb
  401d8c:	00400b07 	.word	0x00400b07
  401d90:	2040c27c 	.word	0x2040c27c
  401d94:	2040c2f0 	.word	0x2040c2f0
  401d98:	00401665 	.word	0x00401665
  401d9c:	2040c2c8 	.word	0x2040c2c8

00401da0 <xTaskRemoveFromEventList>:
{
  401da0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401da2:	68c3      	ldr	r3, [r0, #12]
  401da4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401da6:	b324      	cbz	r4, 401df2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401da8:	f104 0518 	add.w	r5, r4, #24
  401dac:	4628      	mov	r0, r5
  401dae:	4b1a      	ldr	r3, [pc, #104]	; (401e18 <xTaskRemoveFromEventList+0x78>)
  401db0:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401db2:	4b1a      	ldr	r3, [pc, #104]	; (401e1c <xTaskRemoveFromEventList+0x7c>)
  401db4:	681b      	ldr	r3, [r3, #0]
  401db6:	bb3b      	cbnz	r3, 401e08 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401db8:	1d25      	adds	r5, r4, #4
  401dba:	4628      	mov	r0, r5
  401dbc:	4b16      	ldr	r3, [pc, #88]	; (401e18 <xTaskRemoveFromEventList+0x78>)
  401dbe:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401dc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401dc2:	4a17      	ldr	r2, [pc, #92]	; (401e20 <xTaskRemoveFromEventList+0x80>)
  401dc4:	6811      	ldr	r1, [r2, #0]
  401dc6:	2301      	movs	r3, #1
  401dc8:	4083      	lsls	r3, r0
  401dca:	430b      	orrs	r3, r1
  401dcc:	6013      	str	r3, [r2, #0]
  401dce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401dd2:	4629      	mov	r1, r5
  401dd4:	4b13      	ldr	r3, [pc, #76]	; (401e24 <xTaskRemoveFromEventList+0x84>)
  401dd6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401dda:	4b13      	ldr	r3, [pc, #76]	; (401e28 <xTaskRemoveFromEventList+0x88>)
  401ddc:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401dde:	4b13      	ldr	r3, [pc, #76]	; (401e2c <xTaskRemoveFromEventList+0x8c>)
  401de0:	681b      	ldr	r3, [r3, #0]
  401de2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401de6:	429a      	cmp	r2, r3
  401de8:	d913      	bls.n	401e12 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  401dea:	2001      	movs	r0, #1
  401dec:	4b10      	ldr	r3, [pc, #64]	; (401e30 <xTaskRemoveFromEventList+0x90>)
  401dee:	6018      	str	r0, [r3, #0]
  401df0:	bd38      	pop	{r3, r4, r5, pc}
  401df2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401df6:	b672      	cpsid	i
  401df8:	f383 8811 	msr	BASEPRI, r3
  401dfc:	f3bf 8f6f 	isb	sy
  401e00:	f3bf 8f4f 	dsb	sy
  401e04:	b662      	cpsie	i
  401e06:	e7fe      	b.n	401e06 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401e08:	4629      	mov	r1, r5
  401e0a:	480a      	ldr	r0, [pc, #40]	; (401e34 <xTaskRemoveFromEventList+0x94>)
  401e0c:	4b06      	ldr	r3, [pc, #24]	; (401e28 <xTaskRemoveFromEventList+0x88>)
  401e0e:	4798      	blx	r3
  401e10:	e7e5      	b.n	401dde <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401e12:	2000      	movs	r0, #0
}
  401e14:	bd38      	pop	{r3, r4, r5, pc}
  401e16:	bf00      	nop
  401e18:	00400b07 	.word	0x00400b07
  401e1c:	2040c270 	.word	0x2040c270
  401e20:	2040c27c 	.word	0x2040c27c
  401e24:	2040c204 	.word	0x2040c204
  401e28:	00400abb 	.word	0x00400abb
  401e2c:	2040c1f8 	.word	0x2040c1f8
  401e30:	2040c2f4 	.word	0x2040c2f4
  401e34:	2040c2b0 	.word	0x2040c2b0

00401e38 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  401e38:	b130      	cbz	r0, 401e48 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401e3a:	4a09      	ldr	r2, [pc, #36]	; (401e60 <vTaskSetTimeOutState+0x28>)
  401e3c:	6812      	ldr	r2, [r2, #0]
  401e3e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401e40:	4a08      	ldr	r2, [pc, #32]	; (401e64 <vTaskSetTimeOutState+0x2c>)
  401e42:	6812      	ldr	r2, [r2, #0]
  401e44:	6042      	str	r2, [r0, #4]
  401e46:	4770      	bx	lr
  401e48:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e4c:	b672      	cpsid	i
  401e4e:	f383 8811 	msr	BASEPRI, r3
  401e52:	f3bf 8f6f 	isb	sy
  401e56:	f3bf 8f4f 	dsb	sy
  401e5a:	b662      	cpsie	i
  401e5c:	e7fe      	b.n	401e5c <vTaskSetTimeOutState+0x24>
  401e5e:	bf00      	nop
  401e60:	2040c2ac 	.word	0x2040c2ac
  401e64:	2040c2f0 	.word	0x2040c2f0

00401e68 <xTaskCheckForTimeOut>:
{
  401e68:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  401e6a:	b1c0      	cbz	r0, 401e9e <xTaskCheckForTimeOut+0x36>
  401e6c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401e6e:	b309      	cbz	r1, 401eb4 <xTaskCheckForTimeOut+0x4c>
  401e70:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401e72:	4b1d      	ldr	r3, [pc, #116]	; (401ee8 <xTaskCheckForTimeOut+0x80>)
  401e74:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401e76:	4b1d      	ldr	r3, [pc, #116]	; (401eec <xTaskCheckForTimeOut+0x84>)
  401e78:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  401e7a:	682b      	ldr	r3, [r5, #0]
  401e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e80:	d02e      	beq.n	401ee0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401e82:	491b      	ldr	r1, [pc, #108]	; (401ef0 <xTaskCheckForTimeOut+0x88>)
  401e84:	6809      	ldr	r1, [r1, #0]
  401e86:	6820      	ldr	r0, [r4, #0]
  401e88:	4288      	cmp	r0, r1
  401e8a:	d002      	beq.n	401e92 <xTaskCheckForTimeOut+0x2a>
  401e8c:	6861      	ldr	r1, [r4, #4]
  401e8e:	428a      	cmp	r2, r1
  401e90:	d228      	bcs.n	401ee4 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401e92:	6861      	ldr	r1, [r4, #4]
  401e94:	1a50      	subs	r0, r2, r1
  401e96:	4283      	cmp	r3, r0
  401e98:	d817      	bhi.n	401eca <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  401e9a:	2401      	movs	r4, #1
  401e9c:	e01c      	b.n	401ed8 <xTaskCheckForTimeOut+0x70>
  401e9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ea2:	b672      	cpsid	i
  401ea4:	f383 8811 	msr	BASEPRI, r3
  401ea8:	f3bf 8f6f 	isb	sy
  401eac:	f3bf 8f4f 	dsb	sy
  401eb0:	b662      	cpsie	i
  401eb2:	e7fe      	b.n	401eb2 <xTaskCheckForTimeOut+0x4a>
  401eb4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eb8:	b672      	cpsid	i
  401eba:	f383 8811 	msr	BASEPRI, r3
  401ebe:	f3bf 8f6f 	isb	sy
  401ec2:	f3bf 8f4f 	dsb	sy
  401ec6:	b662      	cpsie	i
  401ec8:	e7fe      	b.n	401ec8 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401eca:	1a9b      	subs	r3, r3, r2
  401ecc:	440b      	add	r3, r1
  401ece:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401ed0:	4620      	mov	r0, r4
  401ed2:	4b08      	ldr	r3, [pc, #32]	; (401ef4 <xTaskCheckForTimeOut+0x8c>)
  401ed4:	4798      	blx	r3
			xReturn = pdFALSE;
  401ed6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401ed8:	4b07      	ldr	r3, [pc, #28]	; (401ef8 <xTaskCheckForTimeOut+0x90>)
  401eda:	4798      	blx	r3
}
  401edc:	4620      	mov	r0, r4
  401ede:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  401ee0:	2400      	movs	r4, #0
  401ee2:	e7f9      	b.n	401ed8 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  401ee4:	2401      	movs	r4, #1
  401ee6:	e7f7      	b.n	401ed8 <xTaskCheckForTimeOut+0x70>
  401ee8:	00400bc5 	.word	0x00400bc5
  401eec:	2040c2f0 	.word	0x2040c2f0
  401ef0:	2040c2ac 	.word	0x2040c2ac
  401ef4:	00401e39 	.word	0x00401e39
  401ef8:	00400c11 	.word	0x00400c11

00401efc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401efc:	2201      	movs	r2, #1
  401efe:	4b01      	ldr	r3, [pc, #4]	; (401f04 <vTaskMissedYield+0x8>)
  401f00:	601a      	str	r2, [r3, #0]
  401f02:	4770      	bx	lr
  401f04:	2040c2f4 	.word	0x2040c2f4

00401f08 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401f08:	4b05      	ldr	r3, [pc, #20]	; (401f20 <xTaskGetSchedulerState+0x18>)
  401f0a:	681b      	ldr	r3, [r3, #0]
  401f0c:	b133      	cbz	r3, 401f1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401f0e:	4b05      	ldr	r3, [pc, #20]	; (401f24 <xTaskGetSchedulerState+0x1c>)
  401f10:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401f12:	2b00      	cmp	r3, #0
  401f14:	bf0c      	ite	eq
  401f16:	2002      	moveq	r0, #2
  401f18:	2000      	movne	r0, #0
  401f1a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401f1c:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  401f1e:	4770      	bx	lr
  401f20:	2040c2c4 	.word	0x2040c2c4
  401f24:	2040c270 	.word	0x2040c270

00401f28 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401f28:	2800      	cmp	r0, #0
  401f2a:	d044      	beq.n	401fb6 <vTaskPriorityInherit+0x8e>
	{
  401f2c:	b538      	push	{r3, r4, r5, lr}
  401f2e:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401f30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401f32:	4921      	ldr	r1, [pc, #132]	; (401fb8 <vTaskPriorityInherit+0x90>)
  401f34:	6809      	ldr	r1, [r1, #0]
  401f36:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401f38:	428a      	cmp	r2, r1
  401f3a:	d214      	bcs.n	401f66 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401f3c:	6981      	ldr	r1, [r0, #24]
  401f3e:	2900      	cmp	r1, #0
  401f40:	db05      	blt.n	401f4e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401f42:	491d      	ldr	r1, [pc, #116]	; (401fb8 <vTaskPriorityInherit+0x90>)
  401f44:	6809      	ldr	r1, [r1, #0]
  401f46:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401f48:	f1c1 0105 	rsb	r1, r1, #5
  401f4c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401f4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401f52:	491a      	ldr	r1, [pc, #104]	; (401fbc <vTaskPriorityInherit+0x94>)
  401f54:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401f58:	6961      	ldr	r1, [r4, #20]
  401f5a:	4291      	cmp	r1, r2
  401f5c:	d004      	beq.n	401f68 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401f5e:	4a16      	ldr	r2, [pc, #88]	; (401fb8 <vTaskPriorityInherit+0x90>)
  401f60:	6812      	ldr	r2, [r2, #0]
  401f62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401f64:	62e2      	str	r2, [r4, #44]	; 0x2c
  401f66:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f68:	1d25      	adds	r5, r4, #4
  401f6a:	4628      	mov	r0, r5
  401f6c:	4b14      	ldr	r3, [pc, #80]	; (401fc0 <vTaskPriorityInherit+0x98>)
  401f6e:	4798      	blx	r3
  401f70:	b970      	cbnz	r0, 401f90 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401f72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401f74:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401f78:	4a10      	ldr	r2, [pc, #64]	; (401fbc <vTaskPriorityInherit+0x94>)
  401f7a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401f7e:	b93a      	cbnz	r2, 401f90 <vTaskPriorityInherit+0x68>
  401f80:	4810      	ldr	r0, [pc, #64]	; (401fc4 <vTaskPriorityInherit+0x9c>)
  401f82:	6802      	ldr	r2, [r0, #0]
  401f84:	2101      	movs	r1, #1
  401f86:	fa01 f303 	lsl.w	r3, r1, r3
  401f8a:	ea22 0303 	bic.w	r3, r2, r3
  401f8e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401f90:	4b09      	ldr	r3, [pc, #36]	; (401fb8 <vTaskPriorityInherit+0x90>)
  401f92:	681b      	ldr	r3, [r3, #0]
  401f94:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401f96:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401f98:	4a0a      	ldr	r2, [pc, #40]	; (401fc4 <vTaskPriorityInherit+0x9c>)
  401f9a:	6811      	ldr	r1, [r2, #0]
  401f9c:	2301      	movs	r3, #1
  401f9e:	4083      	lsls	r3, r0
  401fa0:	430b      	orrs	r3, r1
  401fa2:	6013      	str	r3, [r2, #0]
  401fa4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401fa8:	4629      	mov	r1, r5
  401faa:	4b04      	ldr	r3, [pc, #16]	; (401fbc <vTaskPriorityInherit+0x94>)
  401fac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401fb0:	4b05      	ldr	r3, [pc, #20]	; (401fc8 <vTaskPriorityInherit+0xa0>)
  401fb2:	4798      	blx	r3
  401fb4:	bd38      	pop	{r3, r4, r5, pc}
  401fb6:	4770      	bx	lr
  401fb8:	2040c1f8 	.word	0x2040c1f8
  401fbc:	2040c204 	.word	0x2040c204
  401fc0:	00400b07 	.word	0x00400b07
  401fc4:	2040c27c 	.word	0x2040c27c
  401fc8:	00400abb 	.word	0x00400abb

00401fcc <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401fcc:	2800      	cmp	r0, #0
  401fce:	d04d      	beq.n	40206c <xTaskPriorityDisinherit+0xa0>
	{
  401fd0:	b538      	push	{r3, r4, r5, lr}
  401fd2:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401fd4:	4a27      	ldr	r2, [pc, #156]	; (402074 <xTaskPriorityDisinherit+0xa8>)
  401fd6:	6812      	ldr	r2, [r2, #0]
  401fd8:	4290      	cmp	r0, r2
  401fda:	d00a      	beq.n	401ff2 <xTaskPriorityDisinherit+0x26>
  401fdc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fe0:	b672      	cpsid	i
  401fe2:	f383 8811 	msr	BASEPRI, r3
  401fe6:	f3bf 8f6f 	isb	sy
  401fea:	f3bf 8f4f 	dsb	sy
  401fee:	b662      	cpsie	i
  401ff0:	e7fe      	b.n	401ff0 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  401ff2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401ff4:	b952      	cbnz	r2, 40200c <xTaskPriorityDisinherit+0x40>
  401ff6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ffa:	b672      	cpsid	i
  401ffc:	f383 8811 	msr	BASEPRI, r3
  402000:	f3bf 8f6f 	isb	sy
  402004:	f3bf 8f4f 	dsb	sy
  402008:	b662      	cpsie	i
  40200a:	e7fe      	b.n	40200a <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  40200c:	3a01      	subs	r2, #1
  40200e:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402010:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402012:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402014:	4288      	cmp	r0, r1
  402016:	d02b      	beq.n	402070 <xTaskPriorityDisinherit+0xa4>
  402018:	bb52      	cbnz	r2, 402070 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40201a:	1d25      	adds	r5, r4, #4
  40201c:	4628      	mov	r0, r5
  40201e:	4b16      	ldr	r3, [pc, #88]	; (402078 <xTaskPriorityDisinherit+0xac>)
  402020:	4798      	blx	r3
  402022:	b968      	cbnz	r0, 402040 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402024:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402026:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40202a:	4b14      	ldr	r3, [pc, #80]	; (40207c <xTaskPriorityDisinherit+0xb0>)
  40202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402030:	b933      	cbnz	r3, 402040 <xTaskPriorityDisinherit+0x74>
  402032:	4813      	ldr	r0, [pc, #76]	; (402080 <xTaskPriorityDisinherit+0xb4>)
  402034:	6803      	ldr	r3, [r0, #0]
  402036:	2201      	movs	r2, #1
  402038:	408a      	lsls	r2, r1
  40203a:	ea23 0302 	bic.w	r3, r3, r2
  40203e:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402040:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402042:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402044:	f1c0 0305 	rsb	r3, r0, #5
  402048:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40204a:	4a0d      	ldr	r2, [pc, #52]	; (402080 <xTaskPriorityDisinherit+0xb4>)
  40204c:	6811      	ldr	r1, [r2, #0]
  40204e:	2401      	movs	r4, #1
  402050:	fa04 f300 	lsl.w	r3, r4, r0
  402054:	430b      	orrs	r3, r1
  402056:	6013      	str	r3, [r2, #0]
  402058:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40205c:	4629      	mov	r1, r5
  40205e:	4b07      	ldr	r3, [pc, #28]	; (40207c <xTaskPriorityDisinherit+0xb0>)
  402060:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402064:	4b07      	ldr	r3, [pc, #28]	; (402084 <xTaskPriorityDisinherit+0xb8>)
  402066:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402068:	4620      	mov	r0, r4
  40206a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  40206c:	2000      	movs	r0, #0
  40206e:	4770      	bx	lr
  402070:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402072:	bd38      	pop	{r3, r4, r5, pc}
  402074:	2040c1f8 	.word	0x2040c1f8
  402078:	00400b07 	.word	0x00400b07
  40207c:	2040c204 	.word	0x2040c204
  402080:	2040c27c 	.word	0x2040c27c
  402084:	00400abb 	.word	0x00400abb

00402088 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402088:	4b05      	ldr	r3, [pc, #20]	; (4020a0 <pvTaskIncrementMutexHeldCount+0x18>)
  40208a:	681b      	ldr	r3, [r3, #0]
  40208c:	b123      	cbz	r3, 402098 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40208e:	4b04      	ldr	r3, [pc, #16]	; (4020a0 <pvTaskIncrementMutexHeldCount+0x18>)
  402090:	681a      	ldr	r2, [r3, #0]
  402092:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402094:	3301      	adds	r3, #1
  402096:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402098:	4b01      	ldr	r3, [pc, #4]	; (4020a0 <pvTaskIncrementMutexHeldCount+0x18>)
  40209a:	6818      	ldr	r0, [r3, #0]
	}
  40209c:	4770      	bx	lr
  40209e:	bf00      	nop
  4020a0:	2040c1f8 	.word	0x2040c1f8

004020a4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4020a4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4020a6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4020a8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4020aa:	4291      	cmp	r1, r2
  4020ac:	d80c      	bhi.n	4020c8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  4020ae:	1ad2      	subs	r2, r2, r3
  4020b0:	6983      	ldr	r3, [r0, #24]
  4020b2:	429a      	cmp	r2, r3
  4020b4:	d301      	bcc.n	4020ba <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4020b6:	2001      	movs	r0, #1
  4020b8:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4020ba:	1d01      	adds	r1, r0, #4
  4020bc:	4b09      	ldr	r3, [pc, #36]	; (4020e4 <prvInsertTimerInActiveList+0x40>)
  4020be:	6818      	ldr	r0, [r3, #0]
  4020c0:	4b09      	ldr	r3, [pc, #36]	; (4020e8 <prvInsertTimerInActiveList+0x44>)
  4020c2:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4020c4:	2000      	movs	r0, #0
  4020c6:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4020c8:	429a      	cmp	r2, r3
  4020ca:	d203      	bcs.n	4020d4 <prvInsertTimerInActiveList+0x30>
  4020cc:	4299      	cmp	r1, r3
  4020ce:	d301      	bcc.n	4020d4 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4020d0:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4020d2:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4020d4:	1d01      	adds	r1, r0, #4
  4020d6:	4b05      	ldr	r3, [pc, #20]	; (4020ec <prvInsertTimerInActiveList+0x48>)
  4020d8:	6818      	ldr	r0, [r3, #0]
  4020da:	4b03      	ldr	r3, [pc, #12]	; (4020e8 <prvInsertTimerInActiveList+0x44>)
  4020dc:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4020de:	2000      	movs	r0, #0
  4020e0:	bd08      	pop	{r3, pc}
  4020e2:	bf00      	nop
  4020e4:	2040c2fc 	.word	0x2040c2fc
  4020e8:	00400ad3 	.word	0x00400ad3
  4020ec:	2040c2f8 	.word	0x2040c2f8

004020f0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4020f0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4020f2:	4b15      	ldr	r3, [pc, #84]	; (402148 <prvCheckForValidListAndQueue+0x58>)
  4020f4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4020f6:	4b15      	ldr	r3, [pc, #84]	; (40214c <prvCheckForValidListAndQueue+0x5c>)
  4020f8:	681b      	ldr	r3, [r3, #0]
  4020fa:	b113      	cbz	r3, 402102 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4020fc:	4b14      	ldr	r3, [pc, #80]	; (402150 <prvCheckForValidListAndQueue+0x60>)
  4020fe:	4798      	blx	r3
  402100:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402102:	4d14      	ldr	r5, [pc, #80]	; (402154 <prvCheckForValidListAndQueue+0x64>)
  402104:	4628      	mov	r0, r5
  402106:	4e14      	ldr	r6, [pc, #80]	; (402158 <prvCheckForValidListAndQueue+0x68>)
  402108:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40210a:	4c14      	ldr	r4, [pc, #80]	; (40215c <prvCheckForValidListAndQueue+0x6c>)
  40210c:	4620      	mov	r0, r4
  40210e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402110:	4b13      	ldr	r3, [pc, #76]	; (402160 <prvCheckForValidListAndQueue+0x70>)
  402112:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402114:	4b13      	ldr	r3, [pc, #76]	; (402164 <prvCheckForValidListAndQueue+0x74>)
  402116:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402118:	2200      	movs	r2, #0
  40211a:	2110      	movs	r1, #16
  40211c:	2005      	movs	r0, #5
  40211e:	4b12      	ldr	r3, [pc, #72]	; (402168 <prvCheckForValidListAndQueue+0x78>)
  402120:	4798      	blx	r3
  402122:	4b0a      	ldr	r3, [pc, #40]	; (40214c <prvCheckForValidListAndQueue+0x5c>)
  402124:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402126:	b118      	cbz	r0, 402130 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402128:	4910      	ldr	r1, [pc, #64]	; (40216c <prvCheckForValidListAndQueue+0x7c>)
  40212a:	4b11      	ldr	r3, [pc, #68]	; (402170 <prvCheckForValidListAndQueue+0x80>)
  40212c:	4798      	blx	r3
  40212e:	e7e5      	b.n	4020fc <prvCheckForValidListAndQueue+0xc>
  402130:	f04f 0380 	mov.w	r3, #128	; 0x80
  402134:	b672      	cpsid	i
  402136:	f383 8811 	msr	BASEPRI, r3
  40213a:	f3bf 8f6f 	isb	sy
  40213e:	f3bf 8f4f 	dsb	sy
  402142:	b662      	cpsie	i
  402144:	e7fe      	b.n	402144 <prvCheckForValidListAndQueue+0x54>
  402146:	bf00      	nop
  402148:	00400bc5 	.word	0x00400bc5
  40214c:	2040c32c 	.word	0x2040c32c
  402150:	00400c11 	.word	0x00400c11
  402154:	2040c300 	.word	0x2040c300
  402158:	00400a9f 	.word	0x00400a9f
  40215c:	2040c314 	.word	0x2040c314
  402160:	2040c2f8 	.word	0x2040c2f8
  402164:	2040c2fc 	.word	0x2040c2fc
  402168:	0040107d 	.word	0x0040107d
  40216c:	00406a3c 	.word	0x00406a3c
  402170:	004015ad 	.word	0x004015ad

00402174 <xTimerCreateTimerTask>:
{
  402174:	b510      	push	{r4, lr}
  402176:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402178:	4b0f      	ldr	r3, [pc, #60]	; (4021b8 <xTimerCreateTimerTask+0x44>)
  40217a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  40217c:	4b0f      	ldr	r3, [pc, #60]	; (4021bc <xTimerCreateTimerTask+0x48>)
  40217e:	681b      	ldr	r3, [r3, #0]
  402180:	b173      	cbz	r3, 4021a0 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402182:	2300      	movs	r3, #0
  402184:	9303      	str	r3, [sp, #12]
  402186:	9302      	str	r3, [sp, #8]
  402188:	9301      	str	r3, [sp, #4]
  40218a:	2204      	movs	r2, #4
  40218c:	9200      	str	r2, [sp, #0]
  40218e:	f44f 7282 	mov.w	r2, #260	; 0x104
  402192:	490b      	ldr	r1, [pc, #44]	; (4021c0 <xTimerCreateTimerTask+0x4c>)
  402194:	480b      	ldr	r0, [pc, #44]	; (4021c4 <xTimerCreateTimerTask+0x50>)
  402196:	4c0c      	ldr	r4, [pc, #48]	; (4021c8 <xTimerCreateTimerTask+0x54>)
  402198:	47a0      	blx	r4
	configASSERT( xReturn );
  40219a:	b108      	cbz	r0, 4021a0 <xTimerCreateTimerTask+0x2c>
}
  40219c:	b004      	add	sp, #16
  40219e:	bd10      	pop	{r4, pc}
  4021a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021a4:	b672      	cpsid	i
  4021a6:	f383 8811 	msr	BASEPRI, r3
  4021aa:	f3bf 8f6f 	isb	sy
  4021ae:	f3bf 8f4f 	dsb	sy
  4021b2:	b662      	cpsie	i
  4021b4:	e7fe      	b.n	4021b4 <xTimerCreateTimerTask+0x40>
  4021b6:	bf00      	nop
  4021b8:	004020f1 	.word	0x004020f1
  4021bc:	2040c32c 	.word	0x2040c32c
  4021c0:	00406a44 	.word	0x00406a44
  4021c4:	004022f5 	.word	0x004022f5
  4021c8:	004016bd 	.word	0x004016bd

004021cc <xTimerGenericCommand>:
	configASSERT( xTimer );
  4021cc:	b1d8      	cbz	r0, 402206 <xTimerGenericCommand+0x3a>
{
  4021ce:	b530      	push	{r4, r5, lr}
  4021d0:	b085      	sub	sp, #20
  4021d2:	4615      	mov	r5, r2
  4021d4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4021d6:	4a15      	ldr	r2, [pc, #84]	; (40222c <xTimerGenericCommand+0x60>)
  4021d8:	6810      	ldr	r0, [r2, #0]
  4021da:	b320      	cbz	r0, 402226 <xTimerGenericCommand+0x5a>
  4021dc:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4021de:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4021e0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4021e2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4021e4:	2905      	cmp	r1, #5
  4021e6:	dc19      	bgt.n	40221c <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4021e8:	4b11      	ldr	r3, [pc, #68]	; (402230 <xTimerGenericCommand+0x64>)
  4021ea:	4798      	blx	r3
  4021ec:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4021ee:	f04f 0300 	mov.w	r3, #0
  4021f2:	bf0c      	ite	eq
  4021f4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4021f6:	461a      	movne	r2, r3
  4021f8:	4669      	mov	r1, sp
  4021fa:	480c      	ldr	r0, [pc, #48]	; (40222c <xTimerGenericCommand+0x60>)
  4021fc:	6800      	ldr	r0, [r0, #0]
  4021fe:	4c0d      	ldr	r4, [pc, #52]	; (402234 <xTimerGenericCommand+0x68>)
  402200:	47a0      	blx	r4
}
  402202:	b005      	add	sp, #20
  402204:	bd30      	pop	{r4, r5, pc}
  402206:	f04f 0380 	mov.w	r3, #128	; 0x80
  40220a:	b672      	cpsid	i
  40220c:	f383 8811 	msr	BASEPRI, r3
  402210:	f3bf 8f6f 	isb	sy
  402214:	f3bf 8f4f 	dsb	sy
  402218:	b662      	cpsie	i
  40221a:	e7fe      	b.n	40221a <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40221c:	2300      	movs	r3, #0
  40221e:	4669      	mov	r1, sp
  402220:	4c05      	ldr	r4, [pc, #20]	; (402238 <xTimerGenericCommand+0x6c>)
  402222:	47a0      	blx	r4
  402224:	e7ed      	b.n	402202 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402226:	2000      	movs	r0, #0
	return xReturn;
  402228:	e7eb      	b.n	402202 <xTimerGenericCommand+0x36>
  40222a:	bf00      	nop
  40222c:	2040c32c 	.word	0x2040c32c
  402230:	00401f09 	.word	0x00401f09
  402234:	004010f9 	.word	0x004010f9
  402238:	004012dd 	.word	0x004012dd

0040223c <prvSampleTimeNow>:
{
  40223c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402240:	b082      	sub	sp, #8
  402242:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402244:	4b24      	ldr	r3, [pc, #144]	; (4022d8 <prvSampleTimeNow+0x9c>)
  402246:	4798      	blx	r3
  402248:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40224a:	4b24      	ldr	r3, [pc, #144]	; (4022dc <prvSampleTimeNow+0xa0>)
  40224c:	681b      	ldr	r3, [r3, #0]
  40224e:	4298      	cmp	r0, r3
  402250:	d31b      	bcc.n	40228a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402252:	2300      	movs	r3, #0
  402254:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402258:	4b20      	ldr	r3, [pc, #128]	; (4022dc <prvSampleTimeNow+0xa0>)
  40225a:	601f      	str	r7, [r3, #0]
}
  40225c:	4638      	mov	r0, r7
  40225e:	b002      	add	sp, #8
  402260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402264:	2100      	movs	r1, #0
  402266:	9100      	str	r1, [sp, #0]
  402268:	460b      	mov	r3, r1
  40226a:	4652      	mov	r2, sl
  40226c:	4620      	mov	r0, r4
  40226e:	4c1c      	ldr	r4, [pc, #112]	; (4022e0 <prvSampleTimeNow+0xa4>)
  402270:	47a0      	blx	r4
				configASSERT( xResult );
  402272:	b960      	cbnz	r0, 40228e <prvSampleTimeNow+0x52>
  402274:	f04f 0380 	mov.w	r3, #128	; 0x80
  402278:	b672      	cpsid	i
  40227a:	f383 8811 	msr	BASEPRI, r3
  40227e:	f3bf 8f6f 	isb	sy
  402282:	f3bf 8f4f 	dsb	sy
  402286:	b662      	cpsie	i
  402288:	e7fe      	b.n	402288 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40228a:	4d16      	ldr	r5, [pc, #88]	; (4022e4 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40228c:	4e16      	ldr	r6, [pc, #88]	; (4022e8 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40228e:	682b      	ldr	r3, [r5, #0]
  402290:	681a      	ldr	r2, [r3, #0]
  402292:	b1c2      	cbz	r2, 4022c6 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402294:	68db      	ldr	r3, [r3, #12]
  402296:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40229a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40229c:	f104 0904 	add.w	r9, r4, #4
  4022a0:	4648      	mov	r0, r9
  4022a2:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4022a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4022a6:	4620      	mov	r0, r4
  4022a8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4022aa:	69e3      	ldr	r3, [r4, #28]
  4022ac:	2b01      	cmp	r3, #1
  4022ae:	d1ee      	bne.n	40228e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4022b0:	69a3      	ldr	r3, [r4, #24]
  4022b2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4022b4:	459a      	cmp	sl, r3
  4022b6:	d2d5      	bcs.n	402264 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4022b8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4022ba:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4022bc:	4649      	mov	r1, r9
  4022be:	6828      	ldr	r0, [r5, #0]
  4022c0:	4b0a      	ldr	r3, [pc, #40]	; (4022ec <prvSampleTimeNow+0xb0>)
  4022c2:	4798      	blx	r3
  4022c4:	e7e3      	b.n	40228e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  4022c6:	4a0a      	ldr	r2, [pc, #40]	; (4022f0 <prvSampleTimeNow+0xb4>)
  4022c8:	6810      	ldr	r0, [r2, #0]
  4022ca:	4906      	ldr	r1, [pc, #24]	; (4022e4 <prvSampleTimeNow+0xa8>)
  4022cc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4022ce:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  4022d0:	2301      	movs	r3, #1
  4022d2:	f8c8 3000 	str.w	r3, [r8]
  4022d6:	e7bf      	b.n	402258 <prvSampleTimeNow+0x1c>
  4022d8:	0040198d 	.word	0x0040198d
  4022dc:	2040c328 	.word	0x2040c328
  4022e0:	004021cd 	.word	0x004021cd
  4022e4:	2040c2f8 	.word	0x2040c2f8
  4022e8:	00400b07 	.word	0x00400b07
  4022ec:	00400ad3 	.word	0x00400ad3
  4022f0:	2040c2fc 	.word	0x2040c2fc

004022f4 <prvTimerTask>:
{
  4022f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4022f8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4022fa:	4e75      	ldr	r6, [pc, #468]	; (4024d0 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4022fc:	4f75      	ldr	r7, [pc, #468]	; (4024d4 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4022fe:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4024fc <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402302:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402500 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402306:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402308:	681a      	ldr	r2, [r3, #0]
  40230a:	2a00      	cmp	r2, #0
  40230c:	f000 80ce 	beq.w	4024ac <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402310:	68db      	ldr	r3, [r3, #12]
  402312:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402314:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402316:	a804      	add	r0, sp, #16
  402318:	4b6f      	ldr	r3, [pc, #444]	; (4024d8 <prvTimerTask+0x1e4>)
  40231a:	4798      	blx	r3
  40231c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40231e:	9b04      	ldr	r3, [sp, #16]
  402320:	2b00      	cmp	r3, #0
  402322:	d144      	bne.n	4023ae <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402324:	42a0      	cmp	r0, r4
  402326:	d212      	bcs.n	40234e <prvTimerTask+0x5a>
  402328:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40232a:	1b61      	subs	r1, r4, r5
  40232c:	4b6b      	ldr	r3, [pc, #428]	; (4024dc <prvTimerTask+0x1e8>)
  40232e:	6818      	ldr	r0, [r3, #0]
  402330:	4b6b      	ldr	r3, [pc, #428]	; (4024e0 <prvTimerTask+0x1ec>)
  402332:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402334:	4b6b      	ldr	r3, [pc, #428]	; (4024e4 <prvTimerTask+0x1f0>)
  402336:	4798      	blx	r3
  402338:	2800      	cmp	r0, #0
  40233a:	d13a      	bne.n	4023b2 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  40233c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402340:	f8c9 3000 	str.w	r3, [r9]
  402344:	f3bf 8f4f 	dsb	sy
  402348:	f3bf 8f6f 	isb	sy
  40234c:	e031      	b.n	4023b2 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  40234e:	4b65      	ldr	r3, [pc, #404]	; (4024e4 <prvTimerTask+0x1f0>)
  402350:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402352:	6833      	ldr	r3, [r6, #0]
  402354:	68db      	ldr	r3, [r3, #12]
  402356:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40235a:	f10a 0004 	add.w	r0, sl, #4
  40235e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402360:	f8da 301c 	ldr.w	r3, [sl, #28]
  402364:	2b01      	cmp	r3, #1
  402366:	d004      	beq.n	402372 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402368:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40236c:	4650      	mov	r0, sl
  40236e:	4798      	blx	r3
  402370:	e01f      	b.n	4023b2 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402372:	f8da 1018 	ldr.w	r1, [sl, #24]
  402376:	4623      	mov	r3, r4
  402378:	462a      	mov	r2, r5
  40237a:	4421      	add	r1, r4
  40237c:	4650      	mov	r0, sl
  40237e:	4d5a      	ldr	r5, [pc, #360]	; (4024e8 <prvTimerTask+0x1f4>)
  402380:	47a8      	blx	r5
  402382:	2801      	cmp	r0, #1
  402384:	d1f0      	bne.n	402368 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402386:	2100      	movs	r1, #0
  402388:	9100      	str	r1, [sp, #0]
  40238a:	460b      	mov	r3, r1
  40238c:	4622      	mov	r2, r4
  40238e:	4650      	mov	r0, sl
  402390:	4c56      	ldr	r4, [pc, #344]	; (4024ec <prvTimerTask+0x1f8>)
  402392:	47a0      	blx	r4
			configASSERT( xResult );
  402394:	2800      	cmp	r0, #0
  402396:	d1e7      	bne.n	402368 <prvTimerTask+0x74>
  402398:	f04f 0380 	mov.w	r3, #128	; 0x80
  40239c:	b672      	cpsid	i
  40239e:	f383 8811 	msr	BASEPRI, r3
  4023a2:	f3bf 8f6f 	isb	sy
  4023a6:	f3bf 8f4f 	dsb	sy
  4023aa:	b662      	cpsie	i
  4023ac:	e7fe      	b.n	4023ac <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  4023ae:	4b4d      	ldr	r3, [pc, #308]	; (4024e4 <prvTimerTask+0x1f0>)
  4023b0:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4023b2:	4d4a      	ldr	r5, [pc, #296]	; (4024dc <prvTimerTask+0x1e8>)
  4023b4:	4c4e      	ldr	r4, [pc, #312]	; (4024f0 <prvTimerTask+0x1fc>)
  4023b6:	e006      	b.n	4023c6 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4023b8:	9907      	ldr	r1, [sp, #28]
  4023ba:	9806      	ldr	r0, [sp, #24]
  4023bc:	9b05      	ldr	r3, [sp, #20]
  4023be:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4023c0:	9b04      	ldr	r3, [sp, #16]
  4023c2:	2b00      	cmp	r3, #0
  4023c4:	da09      	bge.n	4023da <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4023c6:	2300      	movs	r3, #0
  4023c8:	461a      	mov	r2, r3
  4023ca:	a904      	add	r1, sp, #16
  4023cc:	6828      	ldr	r0, [r5, #0]
  4023ce:	47a0      	blx	r4
  4023d0:	2800      	cmp	r0, #0
  4023d2:	d098      	beq.n	402306 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4023d4:	9b04      	ldr	r3, [sp, #16]
  4023d6:	2b00      	cmp	r3, #0
  4023d8:	dbee      	blt.n	4023b8 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4023da:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4023de:	f8da 3014 	ldr.w	r3, [sl, #20]
  4023e2:	b113      	cbz	r3, 4023ea <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4023e4:	f10a 0004 	add.w	r0, sl, #4
  4023e8:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4023ea:	a803      	add	r0, sp, #12
  4023ec:	4b3a      	ldr	r3, [pc, #232]	; (4024d8 <prvTimerTask+0x1e4>)
  4023ee:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4023f0:	9b04      	ldr	r3, [sp, #16]
  4023f2:	2b09      	cmp	r3, #9
  4023f4:	d8e7      	bhi.n	4023c6 <prvTimerTask+0xd2>
  4023f6:	a201      	add	r2, pc, #4	; (adr r2, 4023fc <prvTimerTask+0x108>)
  4023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4023fc:	00402425 	.word	0x00402425
  402400:	00402425 	.word	0x00402425
  402404:	00402425 	.word	0x00402425
  402408:	004023c7 	.word	0x004023c7
  40240c:	00402479 	.word	0x00402479
  402410:	004024a5 	.word	0x004024a5
  402414:	00402425 	.word	0x00402425
  402418:	00402425 	.word	0x00402425
  40241c:	004023c7 	.word	0x004023c7
  402420:	00402479 	.word	0x00402479
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402424:	9c05      	ldr	r4, [sp, #20]
  402426:	f8da 1018 	ldr.w	r1, [sl, #24]
  40242a:	4623      	mov	r3, r4
  40242c:	4602      	mov	r2, r0
  40242e:	4421      	add	r1, r4
  402430:	4650      	mov	r0, sl
  402432:	4c2d      	ldr	r4, [pc, #180]	; (4024e8 <prvTimerTask+0x1f4>)
  402434:	47a0      	blx	r4
  402436:	2801      	cmp	r0, #1
  402438:	d1bc      	bne.n	4023b4 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40243a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40243e:	4650      	mov	r0, sl
  402440:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402442:	f8da 301c 	ldr.w	r3, [sl, #28]
  402446:	2b01      	cmp	r3, #1
  402448:	d1b4      	bne.n	4023b4 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40244a:	f8da 2018 	ldr.w	r2, [sl, #24]
  40244e:	2100      	movs	r1, #0
  402450:	9100      	str	r1, [sp, #0]
  402452:	460b      	mov	r3, r1
  402454:	9805      	ldr	r0, [sp, #20]
  402456:	4402      	add	r2, r0
  402458:	4650      	mov	r0, sl
  40245a:	4c24      	ldr	r4, [pc, #144]	; (4024ec <prvTimerTask+0x1f8>)
  40245c:	47a0      	blx	r4
							configASSERT( xResult );
  40245e:	2800      	cmp	r0, #0
  402460:	d1a8      	bne.n	4023b4 <prvTimerTask+0xc0>
  402462:	f04f 0380 	mov.w	r3, #128	; 0x80
  402466:	b672      	cpsid	i
  402468:	f383 8811 	msr	BASEPRI, r3
  40246c:	f3bf 8f6f 	isb	sy
  402470:	f3bf 8f4f 	dsb	sy
  402474:	b662      	cpsie	i
  402476:	e7fe      	b.n	402476 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402478:	9905      	ldr	r1, [sp, #20]
  40247a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40247e:	b131      	cbz	r1, 40248e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402480:	4603      	mov	r3, r0
  402482:	4602      	mov	r2, r0
  402484:	4401      	add	r1, r0
  402486:	4650      	mov	r0, sl
  402488:	4c17      	ldr	r4, [pc, #92]	; (4024e8 <prvTimerTask+0x1f4>)
  40248a:	47a0      	blx	r4
  40248c:	e792      	b.n	4023b4 <prvTimerTask+0xc0>
  40248e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402492:	b672      	cpsid	i
  402494:	f383 8811 	msr	BASEPRI, r3
  402498:	f3bf 8f6f 	isb	sy
  40249c:	f3bf 8f4f 	dsb	sy
  4024a0:	b662      	cpsie	i
  4024a2:	e7fe      	b.n	4024a2 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  4024a4:	4650      	mov	r0, sl
  4024a6:	4b13      	ldr	r3, [pc, #76]	; (4024f4 <prvTimerTask+0x200>)
  4024a8:	4798      	blx	r3
  4024aa:	e783      	b.n	4023b4 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4024ac:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4024ae:	a804      	add	r0, sp, #16
  4024b0:	4b09      	ldr	r3, [pc, #36]	; (4024d8 <prvTimerTask+0x1e4>)
  4024b2:	4798      	blx	r3
  4024b4:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4024b6:	9b04      	ldr	r3, [sp, #16]
  4024b8:	2b00      	cmp	r3, #0
  4024ba:	f47f af78 	bne.w	4023ae <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4024be:	4b0e      	ldr	r3, [pc, #56]	; (4024f8 <prvTimerTask+0x204>)
  4024c0:	681b      	ldr	r3, [r3, #0]
  4024c2:	681a      	ldr	r2, [r3, #0]
  4024c4:	fab2 f282 	clz	r2, r2
  4024c8:	0952      	lsrs	r2, r2, #5
  4024ca:	2400      	movs	r4, #0
  4024cc:	e72d      	b.n	40232a <prvTimerTask+0x36>
  4024ce:	bf00      	nop
  4024d0:	2040c2f8 	.word	0x2040c2f8
  4024d4:	0040197d 	.word	0x0040197d
  4024d8:	0040223d 	.word	0x0040223d
  4024dc:	2040c32c 	.word	0x2040c32c
  4024e0:	004015e1 	.word	0x004015e1
  4024e4:	00401ae5 	.word	0x00401ae5
  4024e8:	004020a5 	.word	0x004020a5
  4024ec:	004021cd 	.word	0x004021cd
  4024f0:	004013dd 	.word	0x004013dd
  4024f4:	00400df1 	.word	0x00400df1
  4024f8:	2040c2fc 	.word	0x2040c2fc
  4024fc:	e000ed04 	.word	0xe000ed04
  402500:	00400b07 	.word	0x00400b07

00402504 <but1_callback>:
}

// callbacks
void but1_callback(void)
{
	but1_flag = 1;
  402504:	2201      	movs	r2, #1
  402506:	4b01      	ldr	r3, [pc, #4]	; (40250c <but1_callback+0x8>)
  402508:	701a      	strb	r2, [r3, #0]
  40250a:	4770      	bx	lr
  40250c:	2040c330 	.word	0x2040c330

00402510 <but2_callback>:
}
void but2_callback(void)
{
	but2_flag = 1;
  402510:	2201      	movs	r2, #1
  402512:	4b01      	ldr	r3, [pc, #4]	; (402518 <but2_callback+0x8>)
  402514:	701a      	strb	r2, [r3, #0]
  402516:	4770      	bx	lr
  402518:	2040c331 	.word	0x2040c331

0040251c <but3_callback>:
}
void but3_callback(void)
{
	but3_flag = 1;
  40251c:	2201      	movs	r2, #1
  40251e:	4b01      	ldr	r3, [pc, #4]	; (402524 <but3_callback+0x8>)
  402520:	701a      	strb	r2, [r3, #0]
  402522:	4770      	bx	lr
  402524:	2040c332 	.word	0x2040c332

00402528 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402528:	b5f0      	push	{r4, r5, r6, r7, lr}
  40252a:	b083      	sub	sp, #12
  40252c:	4605      	mov	r5, r0
  40252e:	460c      	mov	r4, r1
	uint32_t val = 0;
  402530:	2300      	movs	r3, #0
  402532:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402534:	4b2a      	ldr	r3, [pc, #168]	; (4025e0 <usart_serial_getchar+0xb8>)
  402536:	4298      	cmp	r0, r3
  402538:	d013      	beq.n	402562 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40253a:	4b2a      	ldr	r3, [pc, #168]	; (4025e4 <usart_serial_getchar+0xbc>)
  40253c:	4298      	cmp	r0, r3
  40253e:	d018      	beq.n	402572 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402540:	4b29      	ldr	r3, [pc, #164]	; (4025e8 <usart_serial_getchar+0xc0>)
  402542:	4298      	cmp	r0, r3
  402544:	d01d      	beq.n	402582 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402546:	4b29      	ldr	r3, [pc, #164]	; (4025ec <usart_serial_getchar+0xc4>)
  402548:	429d      	cmp	r5, r3
  40254a:	d022      	beq.n	402592 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40254c:	4b28      	ldr	r3, [pc, #160]	; (4025f0 <usart_serial_getchar+0xc8>)
  40254e:	429d      	cmp	r5, r3
  402550:	d027      	beq.n	4025a2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402552:	4b28      	ldr	r3, [pc, #160]	; (4025f4 <usart_serial_getchar+0xcc>)
  402554:	429d      	cmp	r5, r3
  402556:	d02e      	beq.n	4025b6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402558:	4b27      	ldr	r3, [pc, #156]	; (4025f8 <usart_serial_getchar+0xd0>)
  40255a:	429d      	cmp	r5, r3
  40255c:	d035      	beq.n	4025ca <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40255e:	b003      	add	sp, #12
  402560:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402562:	461f      	mov	r7, r3
  402564:	4e25      	ldr	r6, [pc, #148]	; (4025fc <usart_serial_getchar+0xd4>)
  402566:	4621      	mov	r1, r4
  402568:	4638      	mov	r0, r7
  40256a:	47b0      	blx	r6
  40256c:	2800      	cmp	r0, #0
  40256e:	d1fa      	bne.n	402566 <usart_serial_getchar+0x3e>
  402570:	e7e9      	b.n	402546 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402572:	461f      	mov	r7, r3
  402574:	4e21      	ldr	r6, [pc, #132]	; (4025fc <usart_serial_getchar+0xd4>)
  402576:	4621      	mov	r1, r4
  402578:	4638      	mov	r0, r7
  40257a:	47b0      	blx	r6
  40257c:	2800      	cmp	r0, #0
  40257e:	d1fa      	bne.n	402576 <usart_serial_getchar+0x4e>
  402580:	e7e4      	b.n	40254c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402582:	461f      	mov	r7, r3
  402584:	4e1d      	ldr	r6, [pc, #116]	; (4025fc <usart_serial_getchar+0xd4>)
  402586:	4621      	mov	r1, r4
  402588:	4638      	mov	r0, r7
  40258a:	47b0      	blx	r6
  40258c:	2800      	cmp	r0, #0
  40258e:	d1fa      	bne.n	402586 <usart_serial_getchar+0x5e>
  402590:	e7df      	b.n	402552 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402592:	461f      	mov	r7, r3
  402594:	4e19      	ldr	r6, [pc, #100]	; (4025fc <usart_serial_getchar+0xd4>)
  402596:	4621      	mov	r1, r4
  402598:	4638      	mov	r0, r7
  40259a:	47b0      	blx	r6
  40259c:	2800      	cmp	r0, #0
  40259e:	d1fa      	bne.n	402596 <usart_serial_getchar+0x6e>
  4025a0:	e7da      	b.n	402558 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4025a2:	461e      	mov	r6, r3
  4025a4:	4d16      	ldr	r5, [pc, #88]	; (402600 <usart_serial_getchar+0xd8>)
  4025a6:	a901      	add	r1, sp, #4
  4025a8:	4630      	mov	r0, r6
  4025aa:	47a8      	blx	r5
  4025ac:	2800      	cmp	r0, #0
  4025ae:	d1fa      	bne.n	4025a6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4025b0:	9b01      	ldr	r3, [sp, #4]
  4025b2:	7023      	strb	r3, [r4, #0]
  4025b4:	e7d3      	b.n	40255e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4025b6:	461e      	mov	r6, r3
  4025b8:	4d11      	ldr	r5, [pc, #68]	; (402600 <usart_serial_getchar+0xd8>)
  4025ba:	a901      	add	r1, sp, #4
  4025bc:	4630      	mov	r0, r6
  4025be:	47a8      	blx	r5
  4025c0:	2800      	cmp	r0, #0
  4025c2:	d1fa      	bne.n	4025ba <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4025c4:	9b01      	ldr	r3, [sp, #4]
  4025c6:	7023      	strb	r3, [r4, #0]
  4025c8:	e7c9      	b.n	40255e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4025ca:	461e      	mov	r6, r3
  4025cc:	4d0c      	ldr	r5, [pc, #48]	; (402600 <usart_serial_getchar+0xd8>)
  4025ce:	a901      	add	r1, sp, #4
  4025d0:	4630      	mov	r0, r6
  4025d2:	47a8      	blx	r5
  4025d4:	2800      	cmp	r0, #0
  4025d6:	d1fa      	bne.n	4025ce <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4025d8:	9b01      	ldr	r3, [sp, #4]
  4025da:	7023      	strb	r3, [r4, #0]
}
  4025dc:	e7bf      	b.n	40255e <usart_serial_getchar+0x36>
  4025de:	bf00      	nop
  4025e0:	400e0800 	.word	0x400e0800
  4025e4:	400e0a00 	.word	0x400e0a00
  4025e8:	400e1a00 	.word	0x400e1a00
  4025ec:	400e1c00 	.word	0x400e1c00
  4025f0:	40024000 	.word	0x40024000
  4025f4:	40028000 	.word	0x40028000
  4025f8:	4002c000 	.word	0x4002c000
  4025fc:	0040097b 	.word	0x0040097b
  402600:	00400a87 	.word	0x00400a87

00402604 <usart_serial_putchar>:
{
  402604:	b570      	push	{r4, r5, r6, lr}
  402606:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402608:	4b2a      	ldr	r3, [pc, #168]	; (4026b4 <usart_serial_putchar+0xb0>)
  40260a:	4298      	cmp	r0, r3
  40260c:	d013      	beq.n	402636 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40260e:	4b2a      	ldr	r3, [pc, #168]	; (4026b8 <usart_serial_putchar+0xb4>)
  402610:	4298      	cmp	r0, r3
  402612:	d019      	beq.n	402648 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402614:	4b29      	ldr	r3, [pc, #164]	; (4026bc <usart_serial_putchar+0xb8>)
  402616:	4298      	cmp	r0, r3
  402618:	d01f      	beq.n	40265a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40261a:	4b29      	ldr	r3, [pc, #164]	; (4026c0 <usart_serial_putchar+0xbc>)
  40261c:	4298      	cmp	r0, r3
  40261e:	d025      	beq.n	40266c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402620:	4b28      	ldr	r3, [pc, #160]	; (4026c4 <usart_serial_putchar+0xc0>)
  402622:	4298      	cmp	r0, r3
  402624:	d02b      	beq.n	40267e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402626:	4b28      	ldr	r3, [pc, #160]	; (4026c8 <usart_serial_putchar+0xc4>)
  402628:	4298      	cmp	r0, r3
  40262a:	d031      	beq.n	402690 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  40262c:	4b27      	ldr	r3, [pc, #156]	; (4026cc <usart_serial_putchar+0xc8>)
  40262e:	4298      	cmp	r0, r3
  402630:	d037      	beq.n	4026a2 <usart_serial_putchar+0x9e>
	return 0;
  402632:	2000      	movs	r0, #0
}
  402634:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402636:	461e      	mov	r6, r3
  402638:	4d25      	ldr	r5, [pc, #148]	; (4026d0 <usart_serial_putchar+0xcc>)
  40263a:	4621      	mov	r1, r4
  40263c:	4630      	mov	r0, r6
  40263e:	47a8      	blx	r5
  402640:	2800      	cmp	r0, #0
  402642:	d1fa      	bne.n	40263a <usart_serial_putchar+0x36>
		return 1;
  402644:	2001      	movs	r0, #1
  402646:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402648:	461e      	mov	r6, r3
  40264a:	4d21      	ldr	r5, [pc, #132]	; (4026d0 <usart_serial_putchar+0xcc>)
  40264c:	4621      	mov	r1, r4
  40264e:	4630      	mov	r0, r6
  402650:	47a8      	blx	r5
  402652:	2800      	cmp	r0, #0
  402654:	d1fa      	bne.n	40264c <usart_serial_putchar+0x48>
		return 1;
  402656:	2001      	movs	r0, #1
  402658:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40265a:	461e      	mov	r6, r3
  40265c:	4d1c      	ldr	r5, [pc, #112]	; (4026d0 <usart_serial_putchar+0xcc>)
  40265e:	4621      	mov	r1, r4
  402660:	4630      	mov	r0, r6
  402662:	47a8      	blx	r5
  402664:	2800      	cmp	r0, #0
  402666:	d1fa      	bne.n	40265e <usart_serial_putchar+0x5a>
		return 1;
  402668:	2001      	movs	r0, #1
  40266a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40266c:	461e      	mov	r6, r3
  40266e:	4d18      	ldr	r5, [pc, #96]	; (4026d0 <usart_serial_putchar+0xcc>)
  402670:	4621      	mov	r1, r4
  402672:	4630      	mov	r0, r6
  402674:	47a8      	blx	r5
  402676:	2800      	cmp	r0, #0
  402678:	d1fa      	bne.n	402670 <usart_serial_putchar+0x6c>
		return 1;
  40267a:	2001      	movs	r0, #1
  40267c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40267e:	461e      	mov	r6, r3
  402680:	4d14      	ldr	r5, [pc, #80]	; (4026d4 <usart_serial_putchar+0xd0>)
  402682:	4621      	mov	r1, r4
  402684:	4630      	mov	r0, r6
  402686:	47a8      	blx	r5
  402688:	2800      	cmp	r0, #0
  40268a:	d1fa      	bne.n	402682 <usart_serial_putchar+0x7e>
		return 1;
  40268c:	2001      	movs	r0, #1
  40268e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402690:	461e      	mov	r6, r3
  402692:	4d10      	ldr	r5, [pc, #64]	; (4026d4 <usart_serial_putchar+0xd0>)
  402694:	4621      	mov	r1, r4
  402696:	4630      	mov	r0, r6
  402698:	47a8      	blx	r5
  40269a:	2800      	cmp	r0, #0
  40269c:	d1fa      	bne.n	402694 <usart_serial_putchar+0x90>
		return 1;
  40269e:	2001      	movs	r0, #1
  4026a0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4026a2:	461e      	mov	r6, r3
  4026a4:	4d0b      	ldr	r5, [pc, #44]	; (4026d4 <usart_serial_putchar+0xd0>)
  4026a6:	4621      	mov	r1, r4
  4026a8:	4630      	mov	r0, r6
  4026aa:	47a8      	blx	r5
  4026ac:	2800      	cmp	r0, #0
  4026ae:	d1fa      	bne.n	4026a6 <usart_serial_putchar+0xa2>
		return 1;
  4026b0:	2001      	movs	r0, #1
  4026b2:	bd70      	pop	{r4, r5, r6, pc}
  4026b4:	400e0800 	.word	0x400e0800
  4026b8:	400e0a00 	.word	0x400e0a00
  4026bc:	400e1a00 	.word	0x400e1a00
  4026c0:	400e1c00 	.word	0x400e1c00
  4026c4:	40024000 	.word	0x40024000
  4026c8:	40028000 	.word	0x40028000
  4026cc:	4002c000 	.word	0x4002c000
  4026d0:	00400969 	.word	0x00400969
  4026d4:	00400a71 	.word	0x00400a71

004026d8 <configure_console>:
	but3_flag = val;
}

// configure com
void configure_console(void)
{
  4026d8:	b570      	push	{r4, r5, r6, lr}
  4026da:	b086      	sub	sp, #24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4026dc:	4d18      	ldr	r5, [pc, #96]	; (402740 <configure_console+0x68>)
  4026de:	4b19      	ldr	r3, [pc, #100]	; (402744 <configure_console+0x6c>)
  4026e0:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4026e2:	4a19      	ldr	r2, [pc, #100]	; (402748 <configure_console+0x70>)
  4026e4:	4b19      	ldr	r3, [pc, #100]	; (40274c <configure_console+0x74>)
  4026e6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4026e8:	4a19      	ldr	r2, [pc, #100]	; (402750 <configure_console+0x78>)
  4026ea:	4b1a      	ldr	r3, [pc, #104]	; (402754 <configure_console+0x7c>)
  4026ec:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4026ee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4026f2:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  4026f4:	23c0      	movs	r3, #192	; 0xc0
  4026f6:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  4026f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4026fc:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  4026fe:	2400      	movs	r4, #0
  402700:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402702:	9404      	str	r4, [sp, #16]
  402704:	200e      	movs	r0, #14
  402706:	4b14      	ldr	r3, [pc, #80]	; (402758 <configure_console+0x80>)
  402708:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40270a:	4a14      	ldr	r2, [pc, #80]	; (40275c <configure_console+0x84>)
  40270c:	4669      	mov	r1, sp
  40270e:	4628      	mov	r0, r5
  402710:	4b13      	ldr	r3, [pc, #76]	; (402760 <configure_console+0x88>)
  402712:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402714:	4628      	mov	r0, r5
  402716:	4b13      	ldr	r3, [pc, #76]	; (402764 <configure_console+0x8c>)
  402718:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40271a:	4628      	mov	r0, r5
  40271c:	4b12      	ldr	r3, [pc, #72]	; (402768 <configure_console+0x90>)
  40271e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402720:	4e12      	ldr	r6, [pc, #72]	; (40276c <configure_console+0x94>)
  402722:	6833      	ldr	r3, [r6, #0]
  402724:	4621      	mov	r1, r4
  402726:	6898      	ldr	r0, [r3, #8]
  402728:	4d11      	ldr	r5, [pc, #68]	; (402770 <configure_console+0x98>)
  40272a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  40272c:	6833      	ldr	r3, [r6, #0]
  40272e:	4621      	mov	r1, r4
  402730:	6858      	ldr	r0, [r3, #4]
  402732:	47a8      	blx	r5

	/* Configure console UART. */
	stdio_serial_init(CONF_UART, &uart_serial_options);

	/* Specify that stdout should not be buffered. */
	setbuf(stdout, NULL);
  402734:	6833      	ldr	r3, [r6, #0]
  402736:	4621      	mov	r1, r4
  402738:	6898      	ldr	r0, [r3, #8]
  40273a:	47a8      	blx	r5
}
  40273c:	b006      	add	sp, #24
  40273e:	bd70      	pop	{r4, r5, r6, pc}
  402740:	40028000 	.word	0x40028000
  402744:	2040c5f8 	.word	0x2040c5f8
  402748:	00402605 	.word	0x00402605
  40274c:	2040c5f4 	.word	0x2040c5f4
  402750:	00402529 	.word	0x00402529
  402754:	2040c5f0 	.word	0x2040c5f0
  402758:	00403671 	.word	0x00403671
  40275c:	08f0d180 	.word	0x08f0d180
  402760:	00400a11 	.word	0x00400a11
  402764:	00400a65 	.word	0x00400a65
  402768:	00400a6b 	.word	0x00400a6b
  40276c:	20400018 	.word	0x20400018
  402770:	00404001 	.word	0x00404001

00402774 <init>:
{
  402774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402778:	b083      	sub	sp, #12
	board_init();
  40277a:	4b51      	ldr	r3, [pc, #324]	; (4028c0 <init+0x14c>)
  40277c:	4798      	blx	r3
	sysclk_init();
  40277e:	4b51      	ldr	r3, [pc, #324]	; (4028c4 <init+0x150>)
  402780:	4798      	blx	r3
	configure_console();
  402782:	4b51      	ldr	r3, [pc, #324]	; (4028c8 <init+0x154>)
  402784:	4798      	blx	r3
	gfx_mono_ssd1306_init();
  402786:	4b51      	ldr	r3, [pc, #324]	; (4028cc <init+0x158>)
  402788:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  40278a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40278e:	4b50      	ldr	r3, [pc, #320]	; (4028d0 <init+0x15c>)
  402790:	605a      	str	r2, [r3, #4]
	pmc_enable_periph_clk(ID_PIOA);
  402792:	200a      	movs	r0, #10
  402794:	4c4f      	ldr	r4, [pc, #316]	; (4028d4 <init+0x160>)
  402796:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  402798:	200b      	movs	r0, #11
  40279a:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOC);
  40279c:	200c      	movs	r0, #12
  40279e:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
  4027a0:	2010      	movs	r0, #16
  4027a2:	47a0      	blx	r4
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4027a4:	4c4c      	ldr	r4, [pc, #304]	; (4028d8 <init+0x164>)
  4027a6:	2309      	movs	r3, #9
  4027a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4027ac:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4027b0:	4620      	mov	r0, r4
  4027b2:	4d4a      	ldr	r5, [pc, #296]	; (4028dc <init+0x168>)
  4027b4:	47a8      	blx	r5
	pio_set_debounce_filter(BUT1_PIO, BUT1_PIO_IDX_MASK, 60);
  4027b6:	223c      	movs	r2, #60	; 0x3c
  4027b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4027bc:	4620      	mov	r0, r4
  4027be:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4028fc <init+0x188>
  4027c2:	47d8      	blx	fp
	pio_handler_set(BUT1_PIO,
  4027c4:	4b46      	ldr	r3, [pc, #280]	; (4028e0 <init+0x16c>)
  4027c6:	9300      	str	r3, [sp, #0]
  4027c8:	2350      	movs	r3, #80	; 0x50
  4027ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4027ce:	2110      	movs	r1, #16
  4027d0:	4620      	mov	r0, r4
  4027d2:	f8df a12c 	ldr.w	sl, [pc, #300]	; 402900 <init+0x18c>
  4027d6:	47d0      	blx	sl
	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  4027d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4027dc:	4620      	mov	r0, r4
  4027de:	f8df 9124 	ldr.w	r9, [pc, #292]	; 402904 <init+0x190>
  4027e2:	47c8      	blx	r9
	pio_get_interrupt_status(BUT1_PIO);
  4027e4:	4620      	mov	r0, r4
  4027e6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 402908 <init+0x194>
  4027ea:	47c0      	blx	r8
  4027ec:	4e3d      	ldr	r6, [pc, #244]	; (4028e4 <init+0x170>)
  4027ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  4027f2:	6033      	str	r3, [r6, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4027f4:	2780      	movs	r7, #128	; 0x80
  4027f6:	f886 7310 	strb.w	r7, [r6, #784]	; 0x310
	pio_configure(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4027fa:	2309      	movs	r3, #9
  4027fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402800:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402804:	4838      	ldr	r0, [pc, #224]	; (4028e8 <init+0x174>)
  402806:	47a8      	blx	r5
	pio_set_debounce_filter(BUT2_PIO, BUT2_PIO_IDX_MASK, 60);
  402808:	223c      	movs	r2, #60	; 0x3c
  40280a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40280e:	4836      	ldr	r0, [pc, #216]	; (4028e8 <init+0x174>)
  402810:	47d8      	blx	fp
	pio_handler_set(BUT2_PIO,
  402812:	4b36      	ldr	r3, [pc, #216]	; (4028ec <init+0x178>)
  402814:	9300      	str	r3, [sp, #0]
  402816:	2350      	movs	r3, #80	; 0x50
  402818:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40281c:	210c      	movs	r1, #12
  40281e:	4832      	ldr	r0, [pc, #200]	; (4028e8 <init+0x174>)
  402820:	47d0      	blx	sl
	pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  402822:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402826:	4830      	ldr	r0, [pc, #192]	; (4028e8 <init+0x174>)
  402828:	47c8      	blx	r9
	pio_get_interrupt_status(BUT2_PIO);
  40282a:	482f      	ldr	r0, [pc, #188]	; (4028e8 <init+0x174>)
  40282c:	47c0      	blx	r8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40282e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402832:	6033      	str	r3, [r6, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402834:	f886 730c 	strb.w	r7, [r6, #780]	; 0x30c
	pio_configure(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  402838:	f5a4 64c0 	sub.w	r4, r4, #1536	; 0x600
  40283c:	2309      	movs	r3, #9
  40283e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402842:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402846:	4620      	mov	r0, r4
  402848:	47a8      	blx	r5
	pio_set_debounce_filter(BUT3_PIO, BUT3_PIO_IDX_MASK, 60);
  40284a:	223c      	movs	r2, #60	; 0x3c
  40284c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402850:	4620      	mov	r0, r4
  402852:	47d8      	blx	fp
	pio_handler_set(BUT3_PIO,
  402854:	4b26      	ldr	r3, [pc, #152]	; (4028f0 <init+0x17c>)
  402856:	9300      	str	r3, [sp, #0]
  402858:	2350      	movs	r3, #80	; 0x50
  40285a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40285e:	210a      	movs	r1, #10
  402860:	4620      	mov	r0, r4
  402862:	47d0      	blx	sl
	pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  402864:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402868:	4620      	mov	r0, r4
  40286a:	47c8      	blx	r9
	pio_get_interrupt_status(BUT3_PIO);
  40286c:	4620      	mov	r0, r4
  40286e:	47c0      	blx	r8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402870:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402874:	6033      	str	r3, [r6, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402876:	f886 730a 	strb.w	r7, [r6, #778]	; 0x30a
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_PIO_IDX_MASK, PIO_DEFAULT);
  40287a:	2300      	movs	r3, #0
  40287c:	2201      	movs	r2, #1
  40287e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402882:	4620      	mov	r0, r4
  402884:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  402886:	2300      	movs	r3, #0
  402888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40288c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402890:	4815      	ldr	r0, [pc, #84]	; (4028e8 <init+0x174>)
  402892:	47a8      	blx	r5
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_PIO_IDX_MASK, PIO_DEFAULT);
  402894:	4e17      	ldr	r6, [pc, #92]	; (4028f4 <init+0x180>)
  402896:	2300      	movs	r3, #0
  402898:	2204      	movs	r2, #4
  40289a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40289e:	4630      	mov	r0, r6
  4028a0:	47a8      	blx	r5
	pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  4028a2:	2101      	movs	r1, #1
  4028a4:	4620      	mov	r0, r4
  4028a6:	4c14      	ldr	r4, [pc, #80]	; (4028f8 <init+0x184>)
  4028a8:	47a0      	blx	r4
	pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  4028aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4028ae:	480e      	ldr	r0, [pc, #56]	; (4028e8 <init+0x174>)
  4028b0:	47a0      	blx	r4
	pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  4028b2:	2104      	movs	r1, #4
  4028b4:	4630      	mov	r0, r6
  4028b6:	47a0      	blx	r4
}
  4028b8:	b003      	add	sp, #12
  4028ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4028be:	bf00      	nop
  4028c0:	0040310d 	.word	0x0040310d
  4028c4:	0040309d 	.word	0x0040309d
  4028c8:	004026d9 	.word	0x004026d9
  4028cc:	00402ded 	.word	0x00402ded
  4028d0:	400e1850 	.word	0x400e1850
  4028d4:	00403671 	.word	0x00403671
  4028d8:	400e1400 	.word	0x400e1400
  4028dc:	0040335d 	.word	0x0040335d
  4028e0:	00402505 	.word	0x00402505
  4028e4:	e000e100 	.word	0xe000e100
  4028e8:	400e1200 	.word	0x400e1200
  4028ec:	00402511 	.word	0x00402511
  4028f0:	0040251d 	.word	0x0040251d
  4028f4:	400e1000 	.word	0x400e1000
  4028f8:	00403267 	.word	0x00403267
  4028fc:	0040324d 	.word	0x0040324d
  402900:	0040347d 	.word	0x0040347d
  402904:	0040341f 	.word	0x0040341f
  402908:	00403423 	.word	0x00403423

0040290c <config_AFEC_pot>:

void config_AFEC_pot(Afec *afec, uint32_t afec_id, uint32_t afec_channel, afec_callback_t callback)
{
  40290c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402910:	b08a      	sub	sp, #40	; 0x28
  402912:	4604      	mov	r4, r0
  402914:	460d      	mov	r5, r1
  402916:	4616      	mov	r6, r2
  402918:	4698      	mov	r8, r3
	/*************************************
	 * Ativa e configura AFEC
	 *************************************/
	/* Ativa AFEC - 0 */
	afec_enable(afec);
  40291a:	4b21      	ldr	r3, [pc, #132]	; (4029a0 <config_AFEC_pot+0x94>)
  40291c:	4798      	blx	r3

	/* struct de configuracao do AFEC */
	struct afec_config afec_cfg;

	/* Carrega parametros padrao */
	afec_get_config_defaults(&afec_cfg);
  40291e:	a804      	add	r0, sp, #16
  402920:	4b20      	ldr	r3, [pc, #128]	; (4029a4 <config_AFEC_pot+0x98>)
  402922:	4798      	blx	r3

	/* Configura AFEC */
	afec_init(afec, &afec_cfg);
  402924:	a904      	add	r1, sp, #16
  402926:	4620      	mov	r0, r4
  402928:	4b1f      	ldr	r3, [pc, #124]	; (4029a8 <config_AFEC_pot+0x9c>)
  40292a:	4798      	blx	r3
	reg = afec->AFEC_MR;
  40292c:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40292e:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  402932:	6063      	str	r3, [r4, #4]
	/* Configura trigger por software */
	afec_set_trigger(afec, AFEC_TRIG_SW);

	/*** Configuracao espec�fica do canal AFEC ***/
	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  402934:	a803      	add	r0, sp, #12
  402936:	4b1d      	ldr	r3, [pc, #116]	; (4029ac <config_AFEC_pot+0xa0>)
  402938:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  40293a:	2300      	movs	r3, #0
  40293c:	f88d 300d 	strb.w	r3, [sp, #13]
	afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  402940:	b2b7      	uxth	r7, r6
  402942:	aa03      	add	r2, sp, #12
  402944:	4639      	mov	r1, r7
  402946:	4620      	mov	r0, r4
  402948:	4b19      	ldr	r3, [pc, #100]	; (4029b0 <config_AFEC_pot+0xa4>)
  40294a:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  40294c:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40294e:	f44f 7300 	mov.w	r3, #512	; 0x200
  402952:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_channel_set_analog_offset(afec, afec_channel, 0x200);

	/***  Configura sensor de temperatura ***/
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  402954:	a801      	add	r0, sp, #4
  402956:	4b17      	ldr	r3, [pc, #92]	; (4029b4 <config_AFEC_pot+0xa8>)
  402958:	4798      	blx	r3
	afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  40295a:	a901      	add	r1, sp, #4
  40295c:	4620      	mov	r0, r4
  40295e:	4b16      	ldr	r3, [pc, #88]	; (4029b8 <config_AFEC_pot+0xac>)
  402960:	4798      	blx	r3

	/* configura IRQ */
	afec_set_callback(afec, afec_channel, callback, 1);
  402962:	2301      	movs	r3, #1
  402964:	4642      	mov	r2, r8
  402966:	4631      	mov	r1, r6
  402968:	4620      	mov	r0, r4
  40296a:	4c14      	ldr	r4, [pc, #80]	; (4029bc <config_AFEC_pot+0xb0>)
  40296c:	47a0      	blx	r4
	NVIC_SetPriority(afec_id, 4);
  40296e:	b26b      	sxtb	r3, r5
  if(IRQn < 0) {
  402970:	2b00      	cmp	r3, #0
  402972:	db0e      	blt.n	402992 <config_AFEC_pot+0x86>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402974:	4a12      	ldr	r2, [pc, #72]	; (4029c0 <config_AFEC_pot+0xb4>)
  402976:	2180      	movs	r1, #128	; 0x80
  402978:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40297a:	095b      	lsrs	r3, r3, #5
  40297c:	f005 051f 	and.w	r5, r5, #31
  402980:	2201      	movs	r2, #1
  402982:	fa02 f505 	lsl.w	r5, r2, r5
  402986:	4a0f      	ldr	r2, [pc, #60]	; (4029c4 <config_AFEC_pot+0xb8>)
  402988:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
	NVIC_EnableIRQ(afec_id);
}
  40298c:	b00a      	add	sp, #40	; 0x28
  40298e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402992:	f005 010f 	and.w	r1, r5, #15
  402996:	4a0c      	ldr	r2, [pc, #48]	; (4029c8 <config_AFEC_pot+0xbc>)
  402998:	440a      	add	r2, r1
  40299a:	2180      	movs	r1, #128	; 0x80
  40299c:	7611      	strb	r1, [r2, #24]
  40299e:	e7ec      	b.n	40297a <config_AFEC_pot+0x6e>
  4029a0:	004004d5 	.word	0x004004d5
  4029a4:	00400305 	.word	0x00400305
  4029a8:	00400355 	.word	0x00400355
  4029ac:	00400335 	.word	0x00400335
  4029b0:	004002c1 	.word	0x004002c1
  4029b4:	0040033f 	.word	0x0040033f
  4029b8:	004002f1 	.word	0x004002f1
  4029bc:	00400455 	.word	0x00400455
  4029c0:	e000e400 	.word	0xe000e400
  4029c4:	e000e100 	.word	0xe000e100
  4029c8:	e000ecfc 	.word	0xe000ecfc

004029cc <AFEC_pot_Callback>:

void AFEC_pot_Callback(void)
{
  4029cc:	b510      	push	{r4, lr}
  4029ce:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  4029d0:	4b08      	ldr	r3, [pc, #32]	; (4029f4 <AFEC_pot_Callback+0x28>)
  4029d2:	2206      	movs	r2, #6
  4029d4:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4029d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	adcData adc;
	adc.value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  4029d8:	9301      	str	r3, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  4029da:	ac02      	add	r4, sp, #8
  4029dc:	2301      	movs	r3, #1
  4029de:	f844 3d08 	str.w	r3, [r4, #-8]!
	xQueueSendFromISR(get_proc_queue(), &adc, &xHigherPriorityTaskWoken);
  4029e2:	4b05      	ldr	r3, [pc, #20]	; (4029f8 <AFEC_pot_Callback+0x2c>)
  4029e4:	4798      	blx	r3
  4029e6:	2300      	movs	r3, #0
  4029e8:	4622      	mov	r2, r4
  4029ea:	a901      	add	r1, sp, #4
  4029ec:	4c03      	ldr	r4, [pc, #12]	; (4029fc <AFEC_pot_Callback+0x30>)
  4029ee:	47a0      	blx	r4
  4029f0:	b002      	add	sp, #8
  4029f2:	bd10      	pop	{r4, pc}
  4029f4:	40064000 	.word	0x40064000
  4029f8:	00402a21 	.word	0x00402a21
  4029fc:	004012dd 	.word	0x004012dd

00402a00 <set_adc_queue>:
QueueHandle_t get_adc_queue(void)
{
    return xQueueADC;
}
void set_adc_queue(QueueHandle_t val)
{
  402a00:	b508      	push	{r3, lr}
    xQueueADC = val;
  402a02:	4b04      	ldr	r3, [pc, #16]	; (402a14 <set_adc_queue+0x14>)
  402a04:	6018      	str	r0, [r3, #0]
    if (xQueueADC == NULL)
  402a06:	681b      	ldr	r3, [r3, #0]
  402a08:	b103      	cbz	r3, 402a0c <set_adc_queue+0xc>
  402a0a:	bd08      	pop	{r3, pc}
        printf("falha em criar a queue \n");
  402a0c:	4802      	ldr	r0, [pc, #8]	; (402a18 <set_adc_queue+0x18>)
  402a0e:	4b03      	ldr	r3, [pc, #12]	; (402a1c <set_adc_queue+0x1c>)
  402a10:	4798      	blx	r3
}
  402a12:	e7fa      	b.n	402a0a <set_adc_queue+0xa>
  402a14:	2040c6c0 	.word	0x2040c6c0
  402a18:	00406a4c 	.word	0x00406a4c
  402a1c:	00403e09 	.word	0x00403e09

00402a20 <get_proc_queue>:

QueueHandle_t get_proc_queue(void)
{
    return xQueuePROC;
  402a20:	4b01      	ldr	r3, [pc, #4]	; (402a28 <get_proc_queue+0x8>)
  402a22:	6818      	ldr	r0, [r3, #0]
}
  402a24:	4770      	bx	lr
  402a26:	bf00      	nop
  402a28:	2040c6bc 	.word	0x2040c6bc

00402a2c <set_proc_queue>:
void set_proc_queue(QueueHandle_t val)
{
  402a2c:	b508      	push	{r3, lr}
    xQueuePROC = val;
  402a2e:	4b04      	ldr	r3, [pc, #16]	; (402a40 <set_proc_queue+0x14>)
  402a30:	6018      	str	r0, [r3, #0]
    if (xQueuePROC == NULL)
  402a32:	681b      	ldr	r3, [r3, #0]
  402a34:	b103      	cbz	r3, 402a38 <set_proc_queue+0xc>
  402a36:	bd08      	pop	{r3, pc}
        printf("falha em criar a queue \n");
  402a38:	4802      	ldr	r0, [pc, #8]	; (402a44 <set_proc_queue+0x18>)
  402a3a:	4b03      	ldr	r3, [pc, #12]	; (402a48 <set_proc_queue+0x1c>)
  402a3c:	4798      	blx	r3
}
  402a3e:	e7fa      	b.n	402a36 <set_proc_queue+0xa>
  402a40:	2040c6bc 	.word	0x2040c6bc
  402a44:	00406a4c 	.word	0x00406a4c
  402a48:	00403e09 	.word	0x00403e09

00402a4c <vApplicationTickHook>:
void vApplicationIdleHook(void) { pmc_sleep(SAM_PM_SMODE_SLEEP_WFI); }

/**
 * @brief This function is called by FreeRTOS each tick
 */
void vApplicationTickHook(void) {}
  402a4c:	4770      	bx	lr

00402a4e <vApplicationMallocFailedHook>:
  402a4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a52:	b672      	cpsid	i
  402a54:	f383 8811 	msr	BASEPRI, r3
  402a58:	f3bf 8f6f 	isb	sy
  402a5c:	f3bf 8f4f 	dsb	sy
  402a60:	b662      	cpsie	i
  402a62:	e7fe      	b.n	402a62 <vApplicationMallocFailedHook+0x14>

00402a64 <task_proc>:
    configASSERT((volatile void *)NULL);
}

// tasks
void task_proc(void *pvParameters)
{
  402a64:	b5f0      	push	{r4, r5, r6, r7, lr}
  402a66:	b083      	sub	sp, #12
  config_AFEC_pot(AFEC_POT, AFEC_POT_ID, AFEC_POT_CHANNEL, AFEC_pot_Callback);
  402a68:	4b19      	ldr	r3, [pc, #100]	; (402ad0 <task_proc+0x6c>)
  402a6a:	2206      	movs	r2, #6
  402a6c:	2128      	movs	r1, #40	; 0x28
  402a6e:	4819      	ldr	r0, [pc, #100]	; (402ad4 <task_proc+0x70>)
  402a70:	4c19      	ldr	r4, [pc, #100]	; (402ad8 <task_proc+0x74>)
  402a72:	47a0      	blx	r4
  TC_init(TC0, ID_TC1, 1, 10);
  402a74:	4c19      	ldr	r4, [pc, #100]	; (402adc <task_proc+0x78>)
  402a76:	230a      	movs	r3, #10
  402a78:	2201      	movs	r2, #1
  402a7a:	2118      	movs	r1, #24
  402a7c:	4620      	mov	r0, r4
  402a7e:	4d18      	ldr	r5, [pc, #96]	; (402ae0 <task_proc+0x7c>)
  402a80:	47a8      	blx	r5
  tc_start(TC0, 1);
  402a82:	2101      	movs	r1, #1
  402a84:	4620      	mov	r0, r4
  402a86:	4b17      	ldr	r3, [pc, #92]	; (402ae4 <task_proc+0x80>)
  402a88:	4798      	blx	r3
  int i = -1;
  int mean;

  while (1)
  {
    if (xQueueReceive(xQueuePROC, &(adc), 1000))
  402a8a:	4e17      	ldr	r6, [pc, #92]	; (402ae8 <task_proc+0x84>)
  402a8c:	4d17      	ldr	r5, [pc, #92]	; (402aec <task_proc+0x88>)
  402a8e:	2400      	movs	r4, #0
  402a90:	e011      	b.n	402ab6 <task_proc+0x52>
    {
      int sum = 0;
      while (++i < 10)
        sum += adc.value;
      i = -1;
      mean = sum / 10;
  402a92:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
  402a96:	4413      	add	r3, r2
  402a98:	4a15      	ldr	r2, [pc, #84]	; (402af0 <task_proc+0x8c>)
  402a9a:	fb82 1203 	smull	r1, r2, r2, r3
  402a9e:	17db      	asrs	r3, r3, #31
  402aa0:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  402aa4:	a902      	add	r1, sp, #8
  402aa6:	f841 3d08 	str.w	r3, [r1, #-8]!
      xQueueSend(xQueueADC, (void *)&mean, 10);
  402aaa:	4b12      	ldr	r3, [pc, #72]	; (402af4 <task_proc+0x90>)
  402aac:	6818      	ldr	r0, [r3, #0]
  402aae:	4623      	mov	r3, r4
  402ab0:	220a      	movs	r2, #10
  402ab2:	4f11      	ldr	r7, [pc, #68]	; (402af8 <task_proc+0x94>)
  402ab4:	47b8      	blx	r7
    if (xQueueReceive(xQueuePROC, &(adc), 1000))
  402ab6:	6830      	ldr	r0, [r6, #0]
  402ab8:	4623      	mov	r3, r4
  402aba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402abe:	a901      	add	r1, sp, #4
  402ac0:	47a8      	blx	r5
  402ac2:	2800      	cmp	r0, #0
  402ac4:	d0f7      	beq.n	402ab6 <task_proc+0x52>
        sum += adc.value;
  402ac6:	9a01      	ldr	r2, [sp, #4]
  402ac8:	230a      	movs	r3, #10
      while (++i < 10)
  402aca:	3b01      	subs	r3, #1
  402acc:	d1fd      	bne.n	402aca <task_proc+0x66>
  402ace:	e7e0      	b.n	402a92 <task_proc+0x2e>
  402ad0:	004029cd 	.word	0x004029cd
  402ad4:	40064000 	.word	0x40064000
  402ad8:	0040290d 	.word	0x0040290d
  402adc:	4000c000 	.word	0x4000c000
  402ae0:	00402b3d 	.word	0x00402b3d
  402ae4:	004008d9 	.word	0x004008d9
  402ae8:	2040c6bc 	.word	0x2040c6bc
  402aec:	004013dd 	.word	0x004013dd
  402af0:	66666667 	.word	0x66666667
  402af4:	2040c6c0 	.word	0x2040c6c0
  402af8:	004010f9 	.word	0x004010f9

00402afc <task_adc>:
    }
  }
}

void task_adc(void *pvParameters)
{
  402afc:	b500      	push	{lr}
  402afe:	b083      	sub	sp, #12
  // vari�vel para recever dados da fila
  int mean;

  while (1)
  {
    if (xQueueReceive(xQueueADC, &(mean), 1000))
  402b00:	4d09      	ldr	r5, [pc, #36]	; (402b28 <task_adc+0x2c>)
  402b02:	4c0a      	ldr	r4, [pc, #40]	; (402b2c <task_adc+0x30>)
      printf("mean: %d \n", mean);
    else
      printf("Nao chegou um novo dado em 1 segundo");
  402b04:	4e0a      	ldr	r6, [pc, #40]	; (402b30 <task_adc+0x34>)
  402b06:	e002      	b.n	402b0e <task_adc+0x12>
  402b08:	4630      	mov	r0, r6
  402b0a:	4b0a      	ldr	r3, [pc, #40]	; (402b34 <task_adc+0x38>)
  402b0c:	4798      	blx	r3
    if (xQueueReceive(xQueueADC, &(mean), 1000))
  402b0e:	6828      	ldr	r0, [r5, #0]
  402b10:	2300      	movs	r3, #0
  402b12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402b16:	a901      	add	r1, sp, #4
  402b18:	47a0      	blx	r4
  402b1a:	2800      	cmp	r0, #0
  402b1c:	d0f4      	beq.n	402b08 <task_adc+0xc>
      printf("mean: %d \n", mean);
  402b1e:	9901      	ldr	r1, [sp, #4]
  402b20:	4805      	ldr	r0, [pc, #20]	; (402b38 <task_adc+0x3c>)
  402b22:	4b04      	ldr	r3, [pc, #16]	; (402b34 <task_adc+0x38>)
  402b24:	4798      	blx	r3
  402b26:	e7f2      	b.n	402b0e <task_adc+0x12>
  402b28:	2040c6c0 	.word	0x2040c6c0
  402b2c:	004013dd 	.word	0x004013dd
  402b30:	00406a74 	.word	0x00406a74
  402b34:	00403e09 	.word	0x00403e09
  402b38:	00406a68 	.word	0x00406a68

00402b3c <TC_init>:
    flag_rtc_alarm = val;
}

// inits
void TC_init(Tc *TC, int ID_TC, int TC_CHANNEL, int freq)
{
  402b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402b40:	b085      	sub	sp, #20
  402b42:	4606      	mov	r6, r0
  402b44:	460c      	mov	r4, r1
  402b46:	4617      	mov	r7, r2
  402b48:	4698      	mov	r8, r3
    uint32_t ul_div;
    uint32_t ul_tcclks;
    uint32_t ul_sysclk = sysclk_get_cpu_hz();

    /* Configura o PMC */
    pmc_enable_periph_clk(ID_TC);
  402b4a:	4608      	mov	r0, r1
  402b4c:	4b1c      	ldr	r3, [pc, #112]	; (402bc0 <TC_init+0x84>)
  402b4e:	4798      	blx	r3

    /** Configura o TC para operar em  freq hz e interrupçcão no RC compare */
    tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402b50:	4d1c      	ldr	r5, [pc, #112]	; (402bc4 <TC_init+0x88>)
  402b52:	9500      	str	r5, [sp, #0]
  402b54:	ab02      	add	r3, sp, #8
  402b56:	aa03      	add	r2, sp, #12
  402b58:	4629      	mov	r1, r5
  402b5a:	4640      	mov	r0, r8
  402b5c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 402be0 <TC_init+0xa4>
  402b60:	47c8      	blx	r9
    tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  402b62:	9a02      	ldr	r2, [sp, #8]
  402b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402b68:	4639      	mov	r1, r7
  402b6a:	4630      	mov	r0, r6
  402b6c:	4b16      	ldr	r3, [pc, #88]	; (402bc8 <TC_init+0x8c>)
  402b6e:	4798      	blx	r3
    tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  402b70:	9a03      	ldr	r2, [sp, #12]
  402b72:	fbb5 f2f2 	udiv	r2, r5, r2
  402b76:	fbb2 f2f8 	udiv	r2, r2, r8
  402b7a:	4639      	mov	r1, r7
  402b7c:	4630      	mov	r0, r6
  402b7e:	4b13      	ldr	r3, [pc, #76]	; (402bcc <TC_init+0x90>)
  402b80:	4798      	blx	r3

    /* Configura NVIC*/
    NVIC_SetPriority(ID_TC, 4);
  402b82:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  402b84:	2b00      	cmp	r3, #0
  402b86:	db13      	blt.n	402bb0 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402b88:	4a11      	ldr	r2, [pc, #68]	; (402bd0 <TC_init+0x94>)
  402b8a:	2180      	movs	r1, #128	; 0x80
  402b8c:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402b8e:	095b      	lsrs	r3, r3, #5
  402b90:	f004 041f 	and.w	r4, r4, #31
  402b94:	2201      	movs	r2, #1
  402b96:	fa02 f404 	lsl.w	r4, r2, r4
  402b9a:	4a0e      	ldr	r2, [pc, #56]	; (402bd4 <TC_init+0x98>)
  402b9c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    NVIC_EnableIRQ((IRQn_Type)ID_TC);
    tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  402ba0:	2210      	movs	r2, #16
  402ba2:	4639      	mov	r1, r7
  402ba4:	4630      	mov	r0, r6
  402ba6:	4b0c      	ldr	r3, [pc, #48]	; (402bd8 <TC_init+0x9c>)
  402ba8:	4798      	blx	r3
}
  402baa:	b005      	add	sp, #20
  402bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402bb0:	f004 010f 	and.w	r1, r4, #15
  402bb4:	4a09      	ldr	r2, [pc, #36]	; (402bdc <TC_init+0xa0>)
  402bb6:	440a      	add	r2, r1
  402bb8:	2180      	movs	r1, #128	; 0x80
  402bba:	7611      	strb	r1, [r2, #24]
  402bbc:	e7e7      	b.n	402b8e <TC_init+0x52>
  402bbe:	bf00      	nop
  402bc0:	00403671 	.word	0x00403671
  402bc4:	11e1a300 	.word	0x11e1a300
  402bc8:	004008bf 	.word	0x004008bf
  402bcc:	004008e1 	.word	0x004008e1
  402bd0:	e000e400 	.word	0xe000e400
  402bd4:	e000e100 	.word	0xe000e100
  402bd8:	004008e9 	.word	0x004008e9
  402bdc:	e000ecfc 	.word	0xe000ecfc
  402be0:	004008f9 	.word	0x004008f9

00402be4 <RTC_init>:
    else
        rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
}

void RTC_init(Rtc *rtc, uint32_t id_rtc, Calendar t, uint32_t irq_type)
{
  402be4:	b082      	sub	sp, #8
  402be6:	b570      	push	{r4, r5, r6, lr}
  402be8:	b082      	sub	sp, #8
  402bea:	4605      	mov	r5, r0
  402bec:	460c      	mov	r4, r1
  402bee:	a906      	add	r1, sp, #24
  402bf0:	e881 000c 	stmia.w	r1, {r2, r3}
    // PMC configure
    pmc_enable_periph_clk(ID_RTC);
  402bf4:	2002      	movs	r0, #2
  402bf6:	4b1d      	ldr	r3, [pc, #116]	; (402c6c <RTC_init+0x88>)
  402bf8:	4798      	blx	r3

    // default RTC configuration -> 24-hour mode
    rtc_set_hour_mode(rtc, 0);
  402bfa:	2100      	movs	r1, #0
  402bfc:	4628      	mov	r0, r5
  402bfe:	4b1c      	ldr	r3, [pc, #112]	; (402c70 <RTC_init+0x8c>)
  402c00:	4798      	blx	r3

    // set date and time manually
    rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  402c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402c04:	9300      	str	r3, [sp, #0]
  402c06:	9b08      	ldr	r3, [sp, #32]
  402c08:	9a07      	ldr	r2, [sp, #28]
  402c0a:	9906      	ldr	r1, [sp, #24]
  402c0c:	4628      	mov	r0, r5
  402c0e:	4e19      	ldr	r6, [pc, #100]	; (402c74 <RTC_init+0x90>)
  402c10:	47b0      	blx	r6
    rtc_set_time(rtc, t.hour, t.minute, t.second);
  402c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402c14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402c16:	990a      	ldr	r1, [sp, #40]	; 0x28
  402c18:	4628      	mov	r0, r5
  402c1a:	4e17      	ldr	r6, [pc, #92]	; (402c78 <RTC_init+0x94>)
  402c1c:	47b0      	blx	r6

    // configure RTC interrupts
    NVIC_DisableIRQ(id_rtc);
  402c1e:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402c20:	b2e4      	uxtb	r4, r4
  402c22:	f004 011f 	and.w	r1, r4, #31
  402c26:	2301      	movs	r3, #1
  402c28:	408b      	lsls	r3, r1
  402c2a:	0956      	lsrs	r6, r2, #5
  402c2c:	4813      	ldr	r0, [pc, #76]	; (402c7c <RTC_init+0x98>)
  402c2e:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  402c32:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402c36:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  402c3a:	2a00      	cmp	r2, #0
  402c3c:	db0f      	blt.n	402c5e <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402c3e:	490f      	ldr	r1, [pc, #60]	; (402c7c <RTC_init+0x98>)
  402c40:	4411      	add	r1, r2
  402c42:	2280      	movs	r2, #128	; 0x80
  402c44:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402c48:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
    NVIC_ClearPendingIRQ(id_rtc);
    NVIC_SetPriority(id_rtc, 4);
    NVIC_EnableIRQ(id_rtc);

    // activates interruption via alarm
    rtc_enable_interrupt(rtc, irq_type);
  402c4c:	990d      	ldr	r1, [sp, #52]	; 0x34
  402c4e:	4628      	mov	r0, r5
  402c50:	4b0b      	ldr	r3, [pc, #44]	; (402c80 <RTC_init+0x9c>)
  402c52:	4798      	blx	r3
}
  402c54:	b002      	add	sp, #8
  402c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  402c5a:	b002      	add	sp, #8
  402c5c:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402c5e:	f004 040f 	and.w	r4, r4, #15
  402c62:	4a08      	ldr	r2, [pc, #32]	; (402c84 <RTC_init+0xa0>)
  402c64:	2180      	movs	r1, #128	; 0x80
  402c66:	5511      	strb	r1, [r2, r4]
  402c68:	e7ee      	b.n	402c48 <RTC_init+0x64>
  402c6a:	bf00      	nop
  402c6c:	00403671 	.word	0x00403671
  402c70:	00400539 	.word	0x00400539
  402c74:	004006b1 	.word	0x004006b1
  402c78:	004005ad 	.word	0x004005ad
  402c7c:	e000e100 	.word	0xe000e100
  402c80:	0040054f 	.word	0x0040054f
  402c84:	e000ed14 	.word	0xe000ed14

00402c88 <TC0_Handler>:

// handlers
void TC0_Handler(void)
{
  402c88:	b500      	push	{lr}
  402c8a:	b083      	sub	sp, #12
    volatile uint32_t status = tc_get_status(TC0, 0);
  402c8c:	2100      	movs	r1, #0
  402c8e:	4805      	ldr	r0, [pc, #20]	; (402ca4 <TC0_Handler+0x1c>)
  402c90:	4b05      	ldr	r3, [pc, #20]	; (402ca8 <TC0_Handler+0x20>)
  402c92:	4798      	blx	r3
  402c94:	9001      	str	r0, [sp, #4]
    tc0_flag = 1;
  402c96:	2201      	movs	r2, #1
  402c98:	4b04      	ldr	r3, [pc, #16]	; (402cac <TC0_Handler+0x24>)
  402c9a:	701a      	strb	r2, [r3, #0]
}
  402c9c:	b003      	add	sp, #12
  402c9e:	f85d fb04 	ldr.w	pc, [sp], #4
  402ca2:	bf00      	nop
  402ca4:	4000c000 	.word	0x4000c000
  402ca8:	004008f1 	.word	0x004008f1
  402cac:	2040c335 	.word	0x2040c335

00402cb0 <TC1_Handler>:

void TC1_Handler(void)
{
  402cb0:	b500      	push	{lr}
  402cb2:	b083      	sub	sp, #12
    volatile uint32_t status = tc_get_status(TC0, 1);
  402cb4:	2101      	movs	r1, #1
  402cb6:	4807      	ldr	r0, [pc, #28]	; (402cd4 <TC1_Handler+0x24>)
  402cb8:	4b07      	ldr	r3, [pc, #28]	; (402cd8 <TC1_Handler+0x28>)
  402cba:	4798      	blx	r3
  402cbc:	9001      	str	r0, [sp, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402cbe:	4b07      	ldr	r3, [pc, #28]	; (402cdc <TC1_Handler+0x2c>)
  402cc0:	2240      	movs	r2, #64	; 0x40
  402cc2:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  402cc4:	2202      	movs	r2, #2
  402cc6:	601a      	str	r2, [r3, #0]
    afec_channel_enable(AFEC_POT, AFEC_POT_CHANNEL);
    afec_start_software_conversion(AFEC_POT);
    tc1_flag = 1;
  402cc8:	2201      	movs	r2, #1
  402cca:	4b05      	ldr	r3, [pc, #20]	; (402ce0 <TC1_Handler+0x30>)
  402ccc:	701a      	strb	r2, [r3, #0]
}
  402cce:	b003      	add	sp, #12
  402cd0:	f85d fb04 	ldr.w	pc, [sp], #4
  402cd4:	4000c000 	.word	0x4000c000
  402cd8:	004008f1 	.word	0x004008f1
  402cdc:	40064000 	.word	0x40064000
  402ce0:	2040c336 	.word	0x2040c336

00402ce4 <RTT_Handler>:

void RTT_Handler(void)
{
  402ce4:	b508      	push	{r3, lr}
    uint32_t ul_status;
    ul_status = rtt_get_status(RTT);
  402ce6:	4806      	ldr	r0, [pc, #24]	; (402d00 <RTT_Handler+0x1c>)
  402ce8:	4b06      	ldr	r3, [pc, #24]	; (402d04 <RTT_Handler+0x20>)
  402cea:	4798      	blx	r3

    if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS)
  402cec:	f010 0f01 	tst.w	r0, #1
  402cf0:	d100      	bne.n	402cf4 <RTT_Handler+0x10>
  402cf2:	bd08      	pop	{r3, pc}
    {
        pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  402cf4:	2101      	movs	r1, #1
  402cf6:	4804      	ldr	r0, [pc, #16]	; (402d08 <RTT_Handler+0x24>)
  402cf8:	4b04      	ldr	r3, [pc, #16]	; (402d0c <RTT_Handler+0x28>)
  402cfa:	4798      	blx	r3
    }

    if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC)
    {
    }
}
  402cfc:	e7f9      	b.n	402cf2 <RTT_Handler+0xe>
  402cfe:	bf00      	nop
  402d00:	400e1830 	.word	0x400e1830
  402d04:	00400771 	.word	0x00400771
  402d08:	400e0e00 	.word	0x400e0e00
  402d0c:	00403267 	.word	0x00403267

00402d10 <RTC_Handler>:

void RTC_Handler(void)
{
  402d10:	b538      	push	{r3, r4, r5, lr}
    uint32_t ul_status = rtc_get_status(RTC);
  402d12:	4812      	ldr	r0, [pc, #72]	; (402d5c <RTC_Handler+0x4c>)
  402d14:	4b12      	ldr	r3, [pc, #72]	; (402d60 <RTC_Handler+0x50>)
  402d16:	4798      	blx	r3

    if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC)
  402d18:	f010 0f04 	tst.w	r0, #4
  402d1c:	d002      	beq.n	402d24 <RTC_Handler+0x14>
        flag_rtc_second = 1;
  402d1e:	2201      	movs	r2, #1
  402d20:	4b10      	ldr	r3, [pc, #64]	; (402d64 <RTC_Handler+0x54>)
  402d22:	701a      	strb	r2, [r3, #0]

    if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM)
  402d24:	f010 0f02 	tst.w	r0, #2
  402d28:	d002      	beq.n	402d30 <RTC_Handler+0x20>
        flag_rtc_alarm = 1;
  402d2a:	2201      	movs	r2, #1
  402d2c:	4b0e      	ldr	r3, [pc, #56]	; (402d68 <RTC_Handler+0x58>)
  402d2e:	701a      	strb	r2, [r3, #0]

    rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  402d30:	4d0a      	ldr	r5, [pc, #40]	; (402d5c <RTC_Handler+0x4c>)
  402d32:	2104      	movs	r1, #4
  402d34:	4628      	mov	r0, r5
  402d36:	4c0d      	ldr	r4, [pc, #52]	; (402d6c <RTC_Handler+0x5c>)
  402d38:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  402d3a:	2102      	movs	r1, #2
  402d3c:	4628      	mov	r0, r5
  402d3e:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  402d40:	2101      	movs	r1, #1
  402d42:	4628      	mov	r0, r5
  402d44:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  402d46:	2108      	movs	r1, #8
  402d48:	4628      	mov	r0, r5
  402d4a:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  402d4c:	2110      	movs	r1, #16
  402d4e:	4628      	mov	r0, r5
  402d50:	47a0      	blx	r4
    rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  402d52:	2120      	movs	r1, #32
  402d54:	4628      	mov	r0, r5
  402d56:	47a0      	blx	r4
  402d58:	bd38      	pop	{r3, r4, r5, pc}
  402d5a:	bf00      	nop
  402d5c:	400e1860 	.word	0x400e1860
  402d60:	00400769 	.word	0x00400769
  402d64:	2040c334 	.word	0x2040c334
  402d68:	2040c333 	.word	0x2040c333
  402d6c:	0040076d 	.word	0x0040076d

00402d70 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  402d70:	4b01      	ldr	r3, [pc, #4]	; (402d78 <gfx_mono_set_framebuffer+0x8>)
  402d72:	6018      	str	r0, [r3, #0]
  402d74:	4770      	bx	lr
  402d76:	bf00      	nop
  402d78:	2040c338 	.word	0x2040c338

00402d7c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  402d7c:	4b02      	ldr	r3, [pc, #8]	; (402d88 <gfx_mono_framebuffer_put_byte+0xc>)
  402d7e:	681b      	ldr	r3, [r3, #0]
  402d80:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  402d84:	5442      	strb	r2, [r0, r1]
  402d86:	4770      	bx	lr
  402d88:	2040c338 	.word	0x2040c338

00402d8c <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  402d8c:	4b02      	ldr	r3, [pc, #8]	; (402d98 <gfx_mono_framebuffer_get_byte+0xc>)
  402d8e:	681b      	ldr	r3, [r3, #0]
  402d90:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  402d94:	5c40      	ldrb	r0, [r0, r1]
  402d96:	4770      	bx	lr
  402d98:	2040c338 	.word	0x2040c338

00402d9c <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  402d9c:	b570      	push	{r4, r5, r6, lr}
  402d9e:	4604      	mov	r4, r0
  402da0:	460d      	mov	r5, r1
  402da2:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  402da4:	b91b      	cbnz	r3, 402dae <gfx_mono_ssd1306_put_byte+0x12>
  402da6:	4b0d      	ldr	r3, [pc, #52]	; (402ddc <gfx_mono_ssd1306_put_byte+0x40>)
  402da8:	4798      	blx	r3
  402daa:	42b0      	cmp	r0, r6
  402dac:	d015      	beq.n	402dda <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  402dae:	4632      	mov	r2, r6
  402db0:	4629      	mov	r1, r5
  402db2:	4620      	mov	r0, r4
  402db4:	4b0a      	ldr	r3, [pc, #40]	; (402de0 <gfx_mono_ssd1306_put_byte+0x44>)
  402db6:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  402db8:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  402dbc:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  402dc0:	4c08      	ldr	r4, [pc, #32]	; (402de4 <gfx_mono_ssd1306_put_byte+0x48>)
  402dc2:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  402dc4:	f3c5 1002 	ubfx	r0, r5, #4, #3
  402dc8:	f040 0010 	orr.w	r0, r0, #16
  402dcc:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  402dce:	f005 000f 	and.w	r0, r5, #15
  402dd2:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  402dd4:	4630      	mov	r0, r6
  402dd6:	4b04      	ldr	r3, [pc, #16]	; (402de8 <gfx_mono_ssd1306_put_byte+0x4c>)
  402dd8:	4798      	blx	r3
  402dda:	bd70      	pop	{r4, r5, r6, pc}
  402ddc:	00402d8d 	.word	0x00402d8d
  402de0:	00402d7d 	.word	0x00402d7d
  402de4:	00402e3d 	.word	0x00402e3d
  402de8:	0040305d 	.word	0x0040305d

00402dec <gfx_mono_ssd1306_init>:
{
  402dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  402df0:	480d      	ldr	r0, [pc, #52]	; (402e28 <gfx_mono_ssd1306_init+0x3c>)
  402df2:	4b0e      	ldr	r3, [pc, #56]	; (402e2c <gfx_mono_ssd1306_init+0x40>)
  402df4:	4798      	blx	r3
	ssd1306_init();
  402df6:	4b0e      	ldr	r3, [pc, #56]	; (402e30 <gfx_mono_ssd1306_init+0x44>)
  402df8:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  402dfa:	2040      	movs	r0, #64	; 0x40
  402dfc:	4b0d      	ldr	r3, [pc, #52]	; (402e34 <gfx_mono_ssd1306_init+0x48>)
  402dfe:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  402e00:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  402e02:	f04f 0801 	mov.w	r8, #1
  402e06:	462f      	mov	r7, r5
  402e08:	4e0b      	ldr	r6, [pc, #44]	; (402e38 <gfx_mono_ssd1306_init+0x4c>)
{
  402e0a:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  402e0c:	4643      	mov	r3, r8
  402e0e:	463a      	mov	r2, r7
  402e10:	b2e1      	uxtb	r1, r4
  402e12:	4628      	mov	r0, r5
  402e14:	47b0      	blx	r6
  402e16:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  402e18:	2c80      	cmp	r4, #128	; 0x80
  402e1a:	d1f7      	bne.n	402e0c <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  402e1c:	3501      	adds	r5, #1
  402e1e:	b2ed      	uxtb	r5, r5
  402e20:	2d04      	cmp	r5, #4
  402e22:	d1f2      	bne.n	402e0a <gfx_mono_ssd1306_init+0x1e>
  402e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e28:	2040c33c 	.word	0x2040c33c
  402e2c:	00402d71 	.word	0x00402d71
  402e30:	00402e7d 	.word	0x00402e7d
  402e34:	00402e3d 	.word	0x00402e3d
  402e38:	00402d9d 	.word	0x00402d9d

00402e3c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  402e3c:	b538      	push	{r3, r4, r5, lr}
  402e3e:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402e40:	2208      	movs	r2, #8
  402e42:	4b09      	ldr	r3, [pc, #36]	; (402e68 <ssd1306_write_command+0x2c>)
  402e44:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  402e46:	4c09      	ldr	r4, [pc, #36]	; (402e6c <ssd1306_write_command+0x30>)
  402e48:	2101      	movs	r1, #1
  402e4a:	4620      	mov	r0, r4
  402e4c:	4b08      	ldr	r3, [pc, #32]	; (402e70 <ssd1306_write_command+0x34>)
  402e4e:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  402e50:	2301      	movs	r3, #1
  402e52:	461a      	mov	r2, r3
  402e54:	4629      	mov	r1, r5
  402e56:	4620      	mov	r0, r4
  402e58:	4c06      	ldr	r4, [pc, #24]	; (402e74 <ssd1306_write_command+0x38>)
  402e5a:	47a0      	blx	r4
	delay_us(10);
  402e5c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  402e60:	4b05      	ldr	r3, [pc, #20]	; (402e78 <ssd1306_write_command+0x3c>)
  402e62:	4798      	blx	r3
  402e64:	bd38      	pop	{r3, r4, r5, pc}
  402e66:	bf00      	nop
  402e68:	400e1000 	.word	0x400e1000
  402e6c:	40008000 	.word	0x40008000
  402e70:	004007a1 	.word	0x004007a1
  402e74:	004007b7 	.word	0x004007b7
  402e78:	20400001 	.word	0x20400001

00402e7c <ssd1306_init>:
{
  402e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402e80:	4d66      	ldr	r5, [pc, #408]	; (40301c <ssd1306_init+0x1a0>)
  402e82:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  402e86:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402e88:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402e8c:	4b64      	ldr	r3, [pc, #400]	; (403020 <ssd1306_init+0x1a4>)
  402e8e:	2708      	movs	r7, #8
  402e90:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402e92:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402e96:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402e98:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  402e9c:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  402e9e:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402ea0:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402ea4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  402ea6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  402eaa:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402eac:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  402eae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  402eb2:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  402eb4:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402eb6:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402eba:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  402ebc:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402ebe:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402ec2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402ec4:	f022 0208 	bic.w	r2, r2, #8
  402ec8:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402eca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402ecc:	f022 0208 	bic.w	r2, r2, #8
  402ed0:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  402ed2:	601f      	str	r7, [r3, #0]
  402ed4:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402ed6:	631f      	str	r7, [r3, #48]	; 0x30
  402ed8:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  402eda:	f8df 817c 	ldr.w	r8, [pc, #380]	; 403058 <ssd1306_init+0x1dc>
  402ede:	2300      	movs	r3, #0
  402ee0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402ee4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402ee8:	4640      	mov	r0, r8
  402eea:	4c4e      	ldr	r4, [pc, #312]	; (403024 <ssd1306_init+0x1a8>)
  402eec:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  402eee:	2300      	movs	r3, #0
  402ef0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402ef4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402ef8:	4640      	mov	r0, r8
  402efa:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  402efc:	2300      	movs	r3, #0
  402efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402f02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402f06:	4640      	mov	r0, r8
  402f08:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  402f0a:	2300      	movs	r3, #0
  402f0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402f10:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402f14:	4640      	mov	r0, r8
  402f16:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  402f18:	2300      	movs	r3, #0
  402f1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402f1e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402f22:	4640      	mov	r0, r8
  402f24:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  402f26:	2300      	movs	r3, #0
  402f28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402f2c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402f30:	4640      	mov	r0, r8
  402f32:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  402f34:	4c3c      	ldr	r4, [pc, #240]	; (403028 <ssd1306_init+0x1ac>)
  402f36:	f04f 0902 	mov.w	r9, #2
  402f3a:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  402f3e:	f04f 0880 	mov.w	r8, #128	; 0x80
  402f42:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  402f46:	6863      	ldr	r3, [r4, #4]
  402f48:	f043 0301 	orr.w	r3, r3, #1
  402f4c:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  402f4e:	463a      	mov	r2, r7
  402f50:	2101      	movs	r1, #1
  402f52:	4620      	mov	r0, r4
  402f54:	4b35      	ldr	r3, [pc, #212]	; (40302c <ssd1306_init+0x1b0>)
  402f56:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  402f58:	2200      	movs	r2, #0
  402f5a:	2101      	movs	r1, #1
  402f5c:	4620      	mov	r0, r4
  402f5e:	4b34      	ldr	r3, [pc, #208]	; (403030 <ssd1306_init+0x1b4>)
  402f60:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  402f62:	2200      	movs	r2, #0
  402f64:	2101      	movs	r1, #1
  402f66:	4620      	mov	r0, r4
  402f68:	4b32      	ldr	r3, [pc, #200]	; (403034 <ssd1306_init+0x1b8>)
  402f6a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  402f6c:	6863      	ldr	r3, [r4, #4]
  402f6e:	f023 0302 	bic.w	r3, r3, #2
  402f72:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  402f74:	2200      	movs	r2, #0
  402f76:	2101      	movs	r1, #1
  402f78:	4620      	mov	r0, r4
  402f7a:	4b2f      	ldr	r3, [pc, #188]	; (403038 <ssd1306_init+0x1bc>)
  402f7c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  402f7e:	6863      	ldr	r3, [r4, #4]
  402f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402f84:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  402f86:	6863      	ldr	r3, [r4, #4]
  402f88:	f043 0310 	orr.w	r3, r3, #16
  402f8c:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  402f8e:	492b      	ldr	r1, [pc, #172]	; (40303c <ssd1306_init+0x1c0>)
  402f90:	482b      	ldr	r0, [pc, #172]	; (403040 <ssd1306_init+0x1c4>)
  402f92:	4b2c      	ldr	r3, [pc, #176]	; (403044 <ssd1306_init+0x1c8>)
  402f94:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  402f96:	b2c2      	uxtb	r2, r0
  402f98:	2101      	movs	r1, #1
  402f9a:	4620      	mov	r0, r4
  402f9c:	4b2a      	ldr	r3, [pc, #168]	; (403048 <ssd1306_init+0x1cc>)
  402f9e:	4798      	blx	r3
		spi_enable_clock(SPI0);
  402fa0:	4620      	mov	r0, r4
  402fa2:	4b2a      	ldr	r3, [pc, #168]	; (40304c <ssd1306_init+0x1d0>)
  402fa4:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  402fa6:	2301      	movs	r3, #1
  402fa8:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402faa:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  402fac:	f640 30b8 	movw	r0, #3000	; 0xbb8
  402fb0:	4c27      	ldr	r4, [pc, #156]	; (403050 <ssd1306_init+0x1d4>)
  402fb2:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402fb4:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  402fb6:	f640 30b8 	movw	r0, #3000	; 0xbb8
  402fba:	47a0      	blx	r4
  402fbc:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  402fbe:	20a8      	movs	r0, #168	; 0xa8
  402fc0:	4c24      	ldr	r4, [pc, #144]	; (403054 <ssd1306_init+0x1d8>)
  402fc2:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  402fc4:	201f      	movs	r0, #31
  402fc6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  402fc8:	20d3      	movs	r0, #211	; 0xd3
  402fca:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  402fcc:	2000      	movs	r0, #0
  402fce:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  402fd0:	2040      	movs	r0, #64	; 0x40
  402fd2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  402fd4:	20a1      	movs	r0, #161	; 0xa1
  402fd6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  402fd8:	20c8      	movs	r0, #200	; 0xc8
  402fda:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  402fdc:	20da      	movs	r0, #218	; 0xda
  402fde:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  402fe0:	4648      	mov	r0, r9
  402fe2:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  402fe4:	2081      	movs	r0, #129	; 0x81
  402fe6:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  402fe8:	208f      	movs	r0, #143	; 0x8f
  402fea:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  402fec:	20a4      	movs	r0, #164	; 0xa4
  402fee:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  402ff0:	20a6      	movs	r0, #166	; 0xa6
  402ff2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  402ff4:	20d5      	movs	r0, #213	; 0xd5
  402ff6:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  402ff8:	4640      	mov	r0, r8
  402ffa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  402ffc:	208d      	movs	r0, #141	; 0x8d
  402ffe:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  403000:	2014      	movs	r0, #20
  403002:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  403004:	20db      	movs	r0, #219	; 0xdb
  403006:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  403008:	2040      	movs	r0, #64	; 0x40
  40300a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40300c:	20d9      	movs	r0, #217	; 0xd9
  40300e:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  403010:	20f1      	movs	r0, #241	; 0xf1
  403012:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  403014:	20af      	movs	r0, #175	; 0xaf
  403016:	47a0      	blx	r4
  403018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40301c:	400e1200 	.word	0x400e1200
  403020:	400e1000 	.word	0x400e1000
  403024:	0040335d 	.word	0x0040335d
  403028:	40008000 	.word	0x40008000
  40302c:	00400827 	.word	0x00400827
  403030:	004007eb 	.word	0x004007eb
  403034:	00400809 	.word	0x00400809
  403038:	0040086d 	.word	0x0040086d
  40303c:	08f0d180 	.word	0x08f0d180
  403040:	001e8480 	.word	0x001e8480
  403044:	00400881 	.word	0x00400881
  403048:	00400897 	.word	0x00400897
  40304c:	00400775 	.word	0x00400775
  403050:	20400001 	.word	0x20400001
  403054:	00402e3d 	.word	0x00402e3d
  403058:	400e1400 	.word	0x400e1400

0040305c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  40305c:	b538      	push	{r3, r4, r5, lr}
  40305e:	4605      	mov	r5, r0
  403060:	2208      	movs	r2, #8
  403062:	4b09      	ldr	r3, [pc, #36]	; (403088 <ssd1306_write_data+0x2c>)
  403064:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  403066:	4c09      	ldr	r4, [pc, #36]	; (40308c <ssd1306_write_data+0x30>)
  403068:	2101      	movs	r1, #1
  40306a:	4620      	mov	r0, r4
  40306c:	4b08      	ldr	r3, [pc, #32]	; (403090 <ssd1306_write_data+0x34>)
  40306e:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  403070:	2301      	movs	r3, #1
  403072:	461a      	mov	r2, r3
  403074:	4629      	mov	r1, r5
  403076:	4620      	mov	r0, r4
  403078:	4c06      	ldr	r4, [pc, #24]	; (403094 <ssd1306_write_data+0x38>)
  40307a:	47a0      	blx	r4
	delay_us(10);
  40307c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  403080:	4b05      	ldr	r3, [pc, #20]	; (403098 <ssd1306_write_data+0x3c>)
  403082:	4798      	blx	r3
  403084:	bd38      	pop	{r3, r4, r5, pc}
  403086:	bf00      	nop
  403088:	400e1000 	.word	0x400e1000
  40308c:	40008000 	.word	0x40008000
  403090:	004007a1 	.word	0x004007a1
  403094:	004007b7 	.word	0x004007b7
  403098:	20400001 	.word	0x20400001

0040309c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40309c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40309e:	4810      	ldr	r0, [pc, #64]	; (4030e0 <sysclk_init+0x44>)
  4030a0:	4b10      	ldr	r3, [pc, #64]	; (4030e4 <sysclk_init+0x48>)
  4030a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4030a4:	213e      	movs	r1, #62	; 0x3e
  4030a6:	2000      	movs	r0, #0
  4030a8:	4b0f      	ldr	r3, [pc, #60]	; (4030e8 <sysclk_init+0x4c>)
  4030aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4030ac:	4c0f      	ldr	r4, [pc, #60]	; (4030ec <sysclk_init+0x50>)
  4030ae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4030b0:	2800      	cmp	r0, #0
  4030b2:	d0fc      	beq.n	4030ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4030b4:	4b0e      	ldr	r3, [pc, #56]	; (4030f0 <sysclk_init+0x54>)
  4030b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4030b8:	4a0e      	ldr	r2, [pc, #56]	; (4030f4 <sysclk_init+0x58>)
  4030ba:	4b0f      	ldr	r3, [pc, #60]	; (4030f8 <sysclk_init+0x5c>)
  4030bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4030be:	4c0f      	ldr	r4, [pc, #60]	; (4030fc <sysclk_init+0x60>)
  4030c0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4030c2:	2800      	cmp	r0, #0
  4030c4:	d0fc      	beq.n	4030c0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4030c6:	2002      	movs	r0, #2
  4030c8:	4b0d      	ldr	r3, [pc, #52]	; (403100 <sysclk_init+0x64>)
  4030ca:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4030cc:	2000      	movs	r0, #0
  4030ce:	4b0d      	ldr	r3, [pc, #52]	; (403104 <sysclk_init+0x68>)
  4030d0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4030d2:	4b0d      	ldr	r3, [pc, #52]	; (403108 <sysclk_init+0x6c>)
  4030d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4030d6:	4802      	ldr	r0, [pc, #8]	; (4030e0 <sysclk_init+0x44>)
  4030d8:	4b02      	ldr	r3, [pc, #8]	; (4030e4 <sysclk_init+0x48>)
  4030da:	4798      	blx	r3
  4030dc:	bd10      	pop	{r4, pc}
  4030de:	bf00      	nop
  4030e0:	11e1a300 	.word	0x11e1a300
  4030e4:	0040389d 	.word	0x0040389d
  4030e8:	004035ed 	.word	0x004035ed
  4030ec:	00403641 	.word	0x00403641
  4030f0:	00403651 	.word	0x00403651
  4030f4:	20183f01 	.word	0x20183f01
  4030f8:	400e0600 	.word	0x400e0600
  4030fc:	00403661 	.word	0x00403661
  403100:	00403551 	.word	0x00403551
  403104:	00403589 	.word	0x00403589
  403108:	00403791 	.word	0x00403791

0040310c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  40310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40310e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403112:	4b48      	ldr	r3, [pc, #288]	; (403234 <board_init+0x128>)
  403114:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  403116:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40311a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40311e:	4b46      	ldr	r3, [pc, #280]	; (403238 <board_init+0x12c>)
  403120:	2200      	movs	r2, #0
  403122:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  403126:	695a      	ldr	r2, [r3, #20]
  403128:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40312c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  40312e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403132:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  403136:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40313a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40313e:	f007 0007 	and.w	r0, r7, #7
  403142:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  403144:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403148:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40314c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  403150:	f3bf 8f4f 	dsb	sy
  403154:	f04f 34ff 	mov.w	r4, #4294967295
  403158:	fa04 fc00 	lsl.w	ip, r4, r0
  40315c:	fa06 f000 	lsl.w	r0, r6, r0
  403160:	fa04 f40e 	lsl.w	r4, r4, lr
  403164:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  403168:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40316a:	463a      	mov	r2, r7
  40316c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40316e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  403172:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  403176:	3a01      	subs	r2, #1
  403178:	4423      	add	r3, r4
  40317a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40317e:	d1f6      	bne.n	40316e <board_init+0x62>
        } while(sets--);
  403180:	3e01      	subs	r6, #1
  403182:	4460      	add	r0, ip
  403184:	f1b6 3fff 	cmp.w	r6, #4294967295
  403188:	d1ef      	bne.n	40316a <board_init+0x5e>
  40318a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40318e:	4b2a      	ldr	r3, [pc, #168]	; (403238 <board_init+0x12c>)
  403190:	695a      	ldr	r2, [r3, #20]
  403192:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  403196:	615a      	str	r2, [r3, #20]
  403198:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40319c:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4031a0:	4a26      	ldr	r2, [pc, #152]	; (40323c <board_init+0x130>)
  4031a2:	4927      	ldr	r1, [pc, #156]	; (403240 <board_init+0x134>)
  4031a4:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4031a6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4031aa:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4031ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4031b0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4031b4:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4031b8:	f022 0201 	bic.w	r2, r2, #1
  4031bc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4031c0:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4031c4:	f022 0201 	bic.w	r2, r2, #1
  4031c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4031cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4031d0:	f3bf 8f6f 	isb	sy
  4031d4:	200a      	movs	r0, #10
  4031d6:	4c1b      	ldr	r4, [pc, #108]	; (403244 <board_init+0x138>)
  4031d8:	47a0      	blx	r4
  4031da:	200b      	movs	r0, #11
  4031dc:	47a0      	blx	r4
  4031de:	200c      	movs	r0, #12
  4031e0:	47a0      	blx	r4
  4031e2:	2010      	movs	r0, #16
  4031e4:	47a0      	blx	r4
  4031e6:	2011      	movs	r0, #17
  4031e8:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4031ea:	4b17      	ldr	r3, [pc, #92]	; (403248 <board_init+0x13c>)
  4031ec:	f44f 7280 	mov.w	r2, #256	; 0x100
  4031f0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4031f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4031f6:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4031f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4031fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403200:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403202:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  403206:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  403208:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40320c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40320e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  403210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  403214:	6f19      	ldr	r1, [r3, #112]	; 0x70
  403216:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40321a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40321c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40321e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  403222:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  403224:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  403228:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40322c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  403230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403232:	bf00      	nop
  403234:	400e1850 	.word	0x400e1850
  403238:	e000ed00 	.word	0xe000ed00
  40323c:	400e0c00 	.word	0x400e0c00
  403240:	5a00080c 	.word	0x5a00080c
  403244:	00403671 	.word	0x00403671
  403248:	400e1200 	.word	0x400e1200

0040324c <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40324c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  403250:	0053      	lsls	r3, r2, #1
  403252:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403256:	fbb2 f2f3 	udiv	r2, r2, r3
  40325a:	3a01      	subs	r2, #1
  40325c:	f3c2 020d 	ubfx	r2, r2, #0, #14
  403260:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  403264:	4770      	bx	lr

00403266 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  403266:	6301      	str	r1, [r0, #48]	; 0x30
  403268:	4770      	bx	lr

0040326a <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40326a:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40326c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  403270:	d03a      	beq.n	4032e8 <pio_set_peripheral+0x7e>
  403272:	d813      	bhi.n	40329c <pio_set_peripheral+0x32>
  403274:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  403278:	d025      	beq.n	4032c6 <pio_set_peripheral+0x5c>
  40327a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40327e:	d10a      	bne.n	403296 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403280:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403282:	4313      	orrs	r3, r2
  403284:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403286:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403288:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40328a:	400b      	ands	r3, r1
  40328c:	ea23 0302 	bic.w	r3, r3, r2
  403290:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403292:	6042      	str	r2, [r0, #4]
  403294:	4770      	bx	lr
	switch (ul_type) {
  403296:	2900      	cmp	r1, #0
  403298:	d1fb      	bne.n	403292 <pio_set_peripheral+0x28>
  40329a:	4770      	bx	lr
  40329c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4032a0:	d021      	beq.n	4032e6 <pio_set_peripheral+0x7c>
  4032a2:	d809      	bhi.n	4032b8 <pio_set_peripheral+0x4e>
  4032a4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4032a8:	d1f3      	bne.n	403292 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4032aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4032ac:	4313      	orrs	r3, r2
  4032ae:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4032b0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4032b2:	4313      	orrs	r3, r2
  4032b4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4032b6:	e7ec      	b.n	403292 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4032b8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4032bc:	d013      	beq.n	4032e6 <pio_set_peripheral+0x7c>
  4032be:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4032c2:	d010      	beq.n	4032e6 <pio_set_peripheral+0x7c>
  4032c4:	e7e5      	b.n	403292 <pio_set_peripheral+0x28>
{
  4032c6:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4032c8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4032ca:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4032cc:	43d3      	mvns	r3, r2
  4032ce:	4021      	ands	r1, r4
  4032d0:	461c      	mov	r4, r3
  4032d2:	4019      	ands	r1, r3
  4032d4:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4032d6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4032d8:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4032da:	400b      	ands	r3, r1
  4032dc:	4023      	ands	r3, r4
  4032de:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4032e0:	6042      	str	r2, [r0, #4]
}
  4032e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4032e6:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4032e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4032ea:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4032ec:	400b      	ands	r3, r1
  4032ee:	ea23 0302 	bic.w	r3, r3, r2
  4032f2:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4032f4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4032f6:	4313      	orrs	r3, r2
  4032f8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4032fa:	e7ca      	b.n	403292 <pio_set_peripheral+0x28>

004032fc <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4032fc:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4032fe:	f012 0f01 	tst.w	r2, #1
  403302:	d10d      	bne.n	403320 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  403304:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403306:	f012 0f0a 	tst.w	r2, #10
  40330a:	d00b      	beq.n	403324 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40330c:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40330e:	f012 0f02 	tst.w	r2, #2
  403312:	d109      	bne.n	403328 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  403314:	f012 0f08 	tst.w	r2, #8
  403318:	d008      	beq.n	40332c <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40331a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40331e:	e005      	b.n	40332c <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  403320:	6641      	str	r1, [r0, #100]	; 0x64
  403322:	e7f0      	b.n	403306 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  403324:	6241      	str	r1, [r0, #36]	; 0x24
  403326:	e7f2      	b.n	40330e <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  403328:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40332c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40332e:	6001      	str	r1, [r0, #0]
  403330:	4770      	bx	lr

00403332 <pio_set_output>:
{
  403332:	b410      	push	{r4}
  403334:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  403336:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  403338:	b94c      	cbnz	r4, 40334e <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40333a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40333c:	b14b      	cbz	r3, 403352 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40333e:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  403340:	b94a      	cbnz	r2, 403356 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  403342:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  403344:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  403346:	6001      	str	r1, [r0, #0]
}
  403348:	f85d 4b04 	ldr.w	r4, [sp], #4
  40334c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40334e:	6641      	str	r1, [r0, #100]	; 0x64
  403350:	e7f4      	b.n	40333c <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  403352:	6541      	str	r1, [r0, #84]	; 0x54
  403354:	e7f4      	b.n	403340 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  403356:	6301      	str	r1, [r0, #48]	; 0x30
  403358:	e7f4      	b.n	403344 <pio_set_output+0x12>
	...

0040335c <pio_configure>:
{
  40335c:	b570      	push	{r4, r5, r6, lr}
  40335e:	b082      	sub	sp, #8
  403360:	4605      	mov	r5, r0
  403362:	4616      	mov	r6, r2
  403364:	461c      	mov	r4, r3
	switch (ul_type) {
  403366:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40336a:	d014      	beq.n	403396 <pio_configure+0x3a>
  40336c:	d90a      	bls.n	403384 <pio_configure+0x28>
  40336e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  403372:	d024      	beq.n	4033be <pio_configure+0x62>
  403374:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  403378:	d021      	beq.n	4033be <pio_configure+0x62>
  40337a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40337e:	d017      	beq.n	4033b0 <pio_configure+0x54>
		return 0;
  403380:	2000      	movs	r0, #0
  403382:	e01a      	b.n	4033ba <pio_configure+0x5e>
	switch (ul_type) {
  403384:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  403388:	d005      	beq.n	403396 <pio_configure+0x3a>
  40338a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40338e:	d002      	beq.n	403396 <pio_configure+0x3a>
  403390:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  403394:	d1f4      	bne.n	403380 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  403396:	4632      	mov	r2, r6
  403398:	4628      	mov	r0, r5
  40339a:	4b11      	ldr	r3, [pc, #68]	; (4033e0 <pio_configure+0x84>)
  40339c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40339e:	f014 0f01 	tst.w	r4, #1
  4033a2:	d102      	bne.n	4033aa <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4033a4:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4033a6:	2001      	movs	r0, #1
  4033a8:	e007      	b.n	4033ba <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4033aa:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4033ac:	2001      	movs	r0, #1
  4033ae:	e004      	b.n	4033ba <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4033b0:	461a      	mov	r2, r3
  4033b2:	4631      	mov	r1, r6
  4033b4:	4b0b      	ldr	r3, [pc, #44]	; (4033e4 <pio_configure+0x88>)
  4033b6:	4798      	blx	r3
	return 1;
  4033b8:	2001      	movs	r0, #1
}
  4033ba:	b002      	add	sp, #8
  4033bc:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4033be:	f004 0301 	and.w	r3, r4, #1
  4033c2:	9300      	str	r3, [sp, #0]
  4033c4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4033c8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4033cc:	bf14      	ite	ne
  4033ce:	2200      	movne	r2, #0
  4033d0:	2201      	moveq	r2, #1
  4033d2:	4631      	mov	r1, r6
  4033d4:	4628      	mov	r0, r5
  4033d6:	4c04      	ldr	r4, [pc, #16]	; (4033e8 <pio_configure+0x8c>)
  4033d8:	47a0      	blx	r4
	return 1;
  4033da:	2001      	movs	r0, #1
		break;
  4033dc:	e7ed      	b.n	4033ba <pio_configure+0x5e>
  4033de:	bf00      	nop
  4033e0:	0040326b 	.word	0x0040326b
  4033e4:	004032fd 	.word	0x004032fd
  4033e8:	00403333 	.word	0x00403333

004033ec <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4033ec:	f012 0f10 	tst.w	r2, #16
  4033f0:	d012      	beq.n	403418 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4033f2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4033f6:	f012 0f20 	tst.w	r2, #32
  4033fa:	d007      	beq.n	40340c <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4033fc:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  403400:	f012 0f40 	tst.w	r2, #64	; 0x40
  403404:	d005      	beq.n	403412 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  403406:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40340a:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  40340c:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  403410:	e7f6      	b.n	403400 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  403412:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  403416:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  403418:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40341c:	4770      	bx	lr

0040341e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40341e:	6401      	str	r1, [r0, #64]	; 0x40
  403420:	4770      	bx	lr

00403422 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  403422:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  403424:	4770      	bx	lr

00403426 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403426:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403428:	4770      	bx	lr
	...

0040342c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40342c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403430:	4604      	mov	r4, r0
  403432:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  403434:	4b0e      	ldr	r3, [pc, #56]	; (403470 <pio_handler_process+0x44>)
  403436:	4798      	blx	r3
  403438:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40343a:	4620      	mov	r0, r4
  40343c:	4b0d      	ldr	r3, [pc, #52]	; (403474 <pio_handler_process+0x48>)
  40343e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  403440:	4005      	ands	r5, r0
  403442:	d013      	beq.n	40346c <pio_handler_process+0x40>
  403444:	4c0c      	ldr	r4, [pc, #48]	; (403478 <pio_handler_process+0x4c>)
  403446:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40344a:	e003      	b.n	403454 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40344c:	42b4      	cmp	r4, r6
  40344e:	d00d      	beq.n	40346c <pio_handler_process+0x40>
  403450:	3410      	adds	r4, #16
		while (status != 0) {
  403452:	b15d      	cbz	r5, 40346c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  403454:	6820      	ldr	r0, [r4, #0]
  403456:	4540      	cmp	r0, r8
  403458:	d1f8      	bne.n	40344c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40345a:	6861      	ldr	r1, [r4, #4]
  40345c:	4229      	tst	r1, r5
  40345e:	d0f5      	beq.n	40344c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403460:	68e3      	ldr	r3, [r4, #12]
  403462:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  403464:	6863      	ldr	r3, [r4, #4]
  403466:	ea25 0503 	bic.w	r5, r5, r3
  40346a:	e7ef      	b.n	40344c <pio_handler_process+0x20>
  40346c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403470:	00403423 	.word	0x00403423
  403474:	00403427 	.word	0x00403427
  403478:	2040c53c 	.word	0x2040c53c

0040347c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40347e:	4c18      	ldr	r4, [pc, #96]	; (4034e0 <pio_handler_set+0x64>)
  403480:	6826      	ldr	r6, [r4, #0]
  403482:	2e06      	cmp	r6, #6
  403484:	d82a      	bhi.n	4034dc <pio_handler_set+0x60>
  403486:	f04f 0c00 	mov.w	ip, #0
  40348a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40348c:	4f15      	ldr	r7, [pc, #84]	; (4034e4 <pio_handler_set+0x68>)
  40348e:	e004      	b.n	40349a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  403490:	3401      	adds	r4, #1
  403492:	b2e4      	uxtb	r4, r4
  403494:	46a4      	mov	ip, r4
  403496:	42a6      	cmp	r6, r4
  403498:	d309      	bcc.n	4034ae <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40349a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40349c:	0125      	lsls	r5, r4, #4
  40349e:	597d      	ldr	r5, [r7, r5]
  4034a0:	428d      	cmp	r5, r1
  4034a2:	d1f5      	bne.n	403490 <pio_handler_set+0x14>
  4034a4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4034a8:	686d      	ldr	r5, [r5, #4]
  4034aa:	4295      	cmp	r5, r2
  4034ac:	d1f0      	bne.n	403490 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4034ae:	4d0d      	ldr	r5, [pc, #52]	; (4034e4 <pio_handler_set+0x68>)
  4034b0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4034b4:	eb05 040e 	add.w	r4, r5, lr
  4034b8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4034bc:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4034be:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4034c0:	9906      	ldr	r1, [sp, #24]
  4034c2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4034c4:	3601      	adds	r6, #1
  4034c6:	4566      	cmp	r6, ip
  4034c8:	d005      	beq.n	4034d6 <pio_handler_set+0x5a>
  4034ca:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4034cc:	461a      	mov	r2, r3
  4034ce:	4b06      	ldr	r3, [pc, #24]	; (4034e8 <pio_handler_set+0x6c>)
  4034d0:	4798      	blx	r3

	return 0;
  4034d2:	2000      	movs	r0, #0
  4034d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4034d6:	4902      	ldr	r1, [pc, #8]	; (4034e0 <pio_handler_set+0x64>)
  4034d8:	600e      	str	r6, [r1, #0]
  4034da:	e7f6      	b.n	4034ca <pio_handler_set+0x4e>
		return 1;
  4034dc:	2001      	movs	r0, #1
}
  4034de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4034e0:	2040c5ac 	.word	0x2040c5ac
  4034e4:	2040c53c 	.word	0x2040c53c
  4034e8:	004033ed 	.word	0x004033ed

004034ec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4034ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4034ee:	210a      	movs	r1, #10
  4034f0:	4801      	ldr	r0, [pc, #4]	; (4034f8 <PIOA_Handler+0xc>)
  4034f2:	4b02      	ldr	r3, [pc, #8]	; (4034fc <PIOA_Handler+0x10>)
  4034f4:	4798      	blx	r3
  4034f6:	bd08      	pop	{r3, pc}
  4034f8:	400e0e00 	.word	0x400e0e00
  4034fc:	0040342d 	.word	0x0040342d

00403500 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403500:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  403502:	210b      	movs	r1, #11
  403504:	4801      	ldr	r0, [pc, #4]	; (40350c <PIOB_Handler+0xc>)
  403506:	4b02      	ldr	r3, [pc, #8]	; (403510 <PIOB_Handler+0x10>)
  403508:	4798      	blx	r3
  40350a:	bd08      	pop	{r3, pc}
  40350c:	400e1000 	.word	0x400e1000
  403510:	0040342d 	.word	0x0040342d

00403514 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  403514:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  403516:	210c      	movs	r1, #12
  403518:	4801      	ldr	r0, [pc, #4]	; (403520 <PIOC_Handler+0xc>)
  40351a:	4b02      	ldr	r3, [pc, #8]	; (403524 <PIOC_Handler+0x10>)
  40351c:	4798      	blx	r3
  40351e:	bd08      	pop	{r3, pc}
  403520:	400e1200 	.word	0x400e1200
  403524:	0040342d 	.word	0x0040342d

00403528 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  403528:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40352a:	2110      	movs	r1, #16
  40352c:	4801      	ldr	r0, [pc, #4]	; (403534 <PIOD_Handler+0xc>)
  40352e:	4b02      	ldr	r3, [pc, #8]	; (403538 <PIOD_Handler+0x10>)
  403530:	4798      	blx	r3
  403532:	bd08      	pop	{r3, pc}
  403534:	400e1400 	.word	0x400e1400
  403538:	0040342d 	.word	0x0040342d

0040353c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40353c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40353e:	2111      	movs	r1, #17
  403540:	4801      	ldr	r0, [pc, #4]	; (403548 <PIOE_Handler+0xc>)
  403542:	4b02      	ldr	r3, [pc, #8]	; (40354c <PIOE_Handler+0x10>)
  403544:	4798      	blx	r3
  403546:	bd08      	pop	{r3, pc}
  403548:	400e1600 	.word	0x400e1600
  40354c:	0040342d 	.word	0x0040342d

00403550 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  403550:	2803      	cmp	r0, #3
  403552:	d011      	beq.n	403578 <pmc_mck_set_division+0x28>
  403554:	2804      	cmp	r0, #4
  403556:	d012      	beq.n	40357e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  403558:	2802      	cmp	r0, #2
  40355a:	bf0c      	ite	eq
  40355c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  403560:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  403562:	4a08      	ldr	r2, [pc, #32]	; (403584 <pmc_mck_set_division+0x34>)
  403564:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40356a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40356c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40356e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403570:	f013 0f08 	tst.w	r3, #8
  403574:	d0fb      	beq.n	40356e <pmc_mck_set_division+0x1e>
}
  403576:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  403578:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40357c:	e7f1      	b.n	403562 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40357e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  403582:	e7ee      	b.n	403562 <pmc_mck_set_division+0x12>
  403584:	400e0600 	.word	0x400e0600

00403588 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403588:	4a17      	ldr	r2, [pc, #92]	; (4035e8 <pmc_switch_mck_to_pllack+0x60>)
  40358a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40358c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403590:	4318      	orrs	r0, r3
  403592:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403594:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403596:	f013 0f08 	tst.w	r3, #8
  40359a:	d10a      	bne.n	4035b2 <pmc_switch_mck_to_pllack+0x2a>
  40359c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4035a0:	4911      	ldr	r1, [pc, #68]	; (4035e8 <pmc_switch_mck_to_pllack+0x60>)
  4035a2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4035a4:	f012 0f08 	tst.w	r2, #8
  4035a8:	d103      	bne.n	4035b2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4035aa:	3b01      	subs	r3, #1
  4035ac:	d1f9      	bne.n	4035a2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4035ae:	2001      	movs	r0, #1
  4035b0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4035b2:	4a0d      	ldr	r2, [pc, #52]	; (4035e8 <pmc_switch_mck_to_pllack+0x60>)
  4035b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4035b6:	f023 0303 	bic.w	r3, r3, #3
  4035ba:	f043 0302 	orr.w	r3, r3, #2
  4035be:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4035c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4035c2:	f013 0f08 	tst.w	r3, #8
  4035c6:	d10a      	bne.n	4035de <pmc_switch_mck_to_pllack+0x56>
  4035c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4035cc:	4906      	ldr	r1, [pc, #24]	; (4035e8 <pmc_switch_mck_to_pllack+0x60>)
  4035ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4035d0:	f012 0f08 	tst.w	r2, #8
  4035d4:	d105      	bne.n	4035e2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4035d6:	3b01      	subs	r3, #1
  4035d8:	d1f9      	bne.n	4035ce <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4035da:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4035dc:	4770      	bx	lr
	return 0;
  4035de:	2000      	movs	r0, #0
  4035e0:	4770      	bx	lr
  4035e2:	2000      	movs	r0, #0
  4035e4:	4770      	bx	lr
  4035e6:	bf00      	nop
  4035e8:	400e0600 	.word	0x400e0600

004035ec <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4035ec:	b9a0      	cbnz	r0, 403618 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4035ee:	480e      	ldr	r0, [pc, #56]	; (403628 <pmc_switch_mainck_to_xtal+0x3c>)
  4035f0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4035f2:	0209      	lsls	r1, r1, #8
  4035f4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4035f6:	4a0d      	ldr	r2, [pc, #52]	; (40362c <pmc_switch_mainck_to_xtal+0x40>)
  4035f8:	401a      	ands	r2, r3
  4035fa:	4b0d      	ldr	r3, [pc, #52]	; (403630 <pmc_switch_mainck_to_xtal+0x44>)
  4035fc:	4313      	orrs	r3, r2
  4035fe:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403600:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  403602:	4602      	mov	r2, r0
  403604:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403606:	f013 0f01 	tst.w	r3, #1
  40360a:	d0fb      	beq.n	403604 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40360c:	4a06      	ldr	r2, [pc, #24]	; (403628 <pmc_switch_mainck_to_xtal+0x3c>)
  40360e:	6a11      	ldr	r1, [r2, #32]
  403610:	4b08      	ldr	r3, [pc, #32]	; (403634 <pmc_switch_mainck_to_xtal+0x48>)
  403612:	430b      	orrs	r3, r1
  403614:	6213      	str	r3, [r2, #32]
  403616:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403618:	4903      	ldr	r1, [pc, #12]	; (403628 <pmc_switch_mainck_to_xtal+0x3c>)
  40361a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40361c:	4a06      	ldr	r2, [pc, #24]	; (403638 <pmc_switch_mainck_to_xtal+0x4c>)
  40361e:	401a      	ands	r2, r3
  403620:	4b06      	ldr	r3, [pc, #24]	; (40363c <pmc_switch_mainck_to_xtal+0x50>)
  403622:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403624:	620b      	str	r3, [r1, #32]
  403626:	4770      	bx	lr
  403628:	400e0600 	.word	0x400e0600
  40362c:	ffc8fffc 	.word	0xffc8fffc
  403630:	00370001 	.word	0x00370001
  403634:	01370000 	.word	0x01370000
  403638:	fec8fffc 	.word	0xfec8fffc
  40363c:	01370002 	.word	0x01370002

00403640 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  403640:	4b02      	ldr	r3, [pc, #8]	; (40364c <pmc_osc_is_ready_mainck+0xc>)
  403642:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403644:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  403648:	4770      	bx	lr
  40364a:	bf00      	nop
  40364c:	400e0600 	.word	0x400e0600

00403650 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403650:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403654:	4b01      	ldr	r3, [pc, #4]	; (40365c <pmc_disable_pllack+0xc>)
  403656:	629a      	str	r2, [r3, #40]	; 0x28
  403658:	4770      	bx	lr
  40365a:	bf00      	nop
  40365c:	400e0600 	.word	0x400e0600

00403660 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403660:	4b02      	ldr	r3, [pc, #8]	; (40366c <pmc_is_locked_pllack+0xc>)
  403662:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403664:	f000 0002 	and.w	r0, r0, #2
  403668:	4770      	bx	lr
  40366a:	bf00      	nop
  40366c:	400e0600 	.word	0x400e0600

00403670 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  403670:	283f      	cmp	r0, #63	; 0x3f
  403672:	d81e      	bhi.n	4036b2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403674:	281f      	cmp	r0, #31
  403676:	d80c      	bhi.n	403692 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403678:	4b11      	ldr	r3, [pc, #68]	; (4036c0 <pmc_enable_periph_clk+0x50>)
  40367a:	699a      	ldr	r2, [r3, #24]
  40367c:	2301      	movs	r3, #1
  40367e:	4083      	lsls	r3, r0
  403680:	4393      	bics	r3, r2
  403682:	d018      	beq.n	4036b6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403684:	2301      	movs	r3, #1
  403686:	fa03 f000 	lsl.w	r0, r3, r0
  40368a:	4b0d      	ldr	r3, [pc, #52]	; (4036c0 <pmc_enable_periph_clk+0x50>)
  40368c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40368e:	2000      	movs	r0, #0
  403690:	4770      	bx	lr
		ul_id -= 32;
  403692:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403694:	4b0a      	ldr	r3, [pc, #40]	; (4036c0 <pmc_enable_periph_clk+0x50>)
  403696:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40369a:	2301      	movs	r3, #1
  40369c:	4083      	lsls	r3, r0
  40369e:	4393      	bics	r3, r2
  4036a0:	d00b      	beq.n	4036ba <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4036a2:	2301      	movs	r3, #1
  4036a4:	fa03 f000 	lsl.w	r0, r3, r0
  4036a8:	4b05      	ldr	r3, [pc, #20]	; (4036c0 <pmc_enable_periph_clk+0x50>)
  4036aa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4036ae:	2000      	movs	r0, #0
  4036b0:	4770      	bx	lr
		return 1;
  4036b2:	2001      	movs	r0, #1
  4036b4:	4770      	bx	lr
	return 0;
  4036b6:	2000      	movs	r0, #0
  4036b8:	4770      	bx	lr
  4036ba:	2000      	movs	r0, #0
}
  4036bc:	4770      	bx	lr
  4036be:	bf00      	nop
  4036c0:	400e0600 	.word	0x400e0600

004036c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4036c4:	e7fe      	b.n	4036c4 <Dummy_Handler>
	...

004036c8 <Reset_Handler>:
{
  4036c8:	b500      	push	{lr}
  4036ca:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4036cc:	4b25      	ldr	r3, [pc, #148]	; (403764 <Reset_Handler+0x9c>)
  4036ce:	4a26      	ldr	r2, [pc, #152]	; (403768 <Reset_Handler+0xa0>)
  4036d0:	429a      	cmp	r2, r3
  4036d2:	d010      	beq.n	4036f6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4036d4:	4b25      	ldr	r3, [pc, #148]	; (40376c <Reset_Handler+0xa4>)
  4036d6:	4a23      	ldr	r2, [pc, #140]	; (403764 <Reset_Handler+0x9c>)
  4036d8:	429a      	cmp	r2, r3
  4036da:	d20c      	bcs.n	4036f6 <Reset_Handler+0x2e>
  4036dc:	3b01      	subs	r3, #1
  4036de:	1a9b      	subs	r3, r3, r2
  4036e0:	f023 0303 	bic.w	r3, r3, #3
  4036e4:	3304      	adds	r3, #4
  4036e6:	4413      	add	r3, r2
  4036e8:	491f      	ldr	r1, [pc, #124]	; (403768 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4036ea:	f851 0b04 	ldr.w	r0, [r1], #4
  4036ee:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4036f2:	429a      	cmp	r2, r3
  4036f4:	d1f9      	bne.n	4036ea <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4036f6:	4b1e      	ldr	r3, [pc, #120]	; (403770 <Reset_Handler+0xa8>)
  4036f8:	4a1e      	ldr	r2, [pc, #120]	; (403774 <Reset_Handler+0xac>)
  4036fa:	429a      	cmp	r2, r3
  4036fc:	d20a      	bcs.n	403714 <Reset_Handler+0x4c>
  4036fe:	3b01      	subs	r3, #1
  403700:	1a9b      	subs	r3, r3, r2
  403702:	f023 0303 	bic.w	r3, r3, #3
  403706:	3304      	adds	r3, #4
  403708:	4413      	add	r3, r2
                *pDest++ = 0;
  40370a:	2100      	movs	r1, #0
  40370c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  403710:	4293      	cmp	r3, r2
  403712:	d1fb      	bne.n	40370c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403714:	4a18      	ldr	r2, [pc, #96]	; (403778 <Reset_Handler+0xb0>)
  403716:	4b19      	ldr	r3, [pc, #100]	; (40377c <Reset_Handler+0xb4>)
  403718:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40371c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40371e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403722:	fab3 f383 	clz	r3, r3
  403726:	095b      	lsrs	r3, r3, #5
  403728:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40372a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40372c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403730:	2200      	movs	r2, #0
  403732:	4b13      	ldr	r3, [pc, #76]	; (403780 <Reset_Handler+0xb8>)
  403734:	701a      	strb	r2, [r3, #0]
	return flags;
  403736:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  403738:	4a12      	ldr	r2, [pc, #72]	; (403784 <Reset_Handler+0xbc>)
  40373a:	6813      	ldr	r3, [r2, #0]
  40373c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  403740:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  403742:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403746:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40374a:	b129      	cbz	r1, 403758 <Reset_Handler+0x90>
		cpu_irq_enable();
  40374c:	2201      	movs	r2, #1
  40374e:	4b0c      	ldr	r3, [pc, #48]	; (403780 <Reset_Handler+0xb8>)
  403750:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  403752:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403756:	b662      	cpsie	i
        __libc_init_array();
  403758:	4b0b      	ldr	r3, [pc, #44]	; (403788 <Reset_Handler+0xc0>)
  40375a:	4798      	blx	r3
        main();
  40375c:	4b0b      	ldr	r3, [pc, #44]	; (40378c <Reset_Handler+0xc4>)
  40375e:	4798      	blx	r3
  403760:	e7fe      	b.n	403760 <Reset_Handler+0x98>
  403762:	bf00      	nop
  403764:	20400000 	.word	0x20400000
  403768:	00406ca0 	.word	0x00406ca0
  40376c:	204009c8 	.word	0x204009c8
  403770:	2040c6ec 	.word	0x2040c6ec
  403774:	204009c8 	.word	0x204009c8
  403778:	e000ed00 	.word	0xe000ed00
  40377c:	00400000 	.word	0x00400000
  403780:	20400010 	.word	0x20400010
  403784:	e000ed88 	.word	0xe000ed88
  403788:	00403db9 	.word	0x00403db9
  40378c:	00403a11 	.word	0x00403a11

00403790 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403790:	4b3b      	ldr	r3, [pc, #236]	; (403880 <SystemCoreClockUpdate+0xf0>)
  403792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403794:	f003 0303 	and.w	r3, r3, #3
  403798:	2b01      	cmp	r3, #1
  40379a:	d01d      	beq.n	4037d8 <SystemCoreClockUpdate+0x48>
  40379c:	b183      	cbz	r3, 4037c0 <SystemCoreClockUpdate+0x30>
  40379e:	2b02      	cmp	r3, #2
  4037a0:	d036      	beq.n	403810 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4037a2:	4b37      	ldr	r3, [pc, #220]	; (403880 <SystemCoreClockUpdate+0xf0>)
  4037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4037a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4037aa:	2b70      	cmp	r3, #112	; 0x70
  4037ac:	d05f      	beq.n	40386e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4037ae:	4b34      	ldr	r3, [pc, #208]	; (403880 <SystemCoreClockUpdate+0xf0>)
  4037b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4037b2:	4934      	ldr	r1, [pc, #208]	; (403884 <SystemCoreClockUpdate+0xf4>)
  4037b4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4037b8:	680b      	ldr	r3, [r1, #0]
  4037ba:	40d3      	lsrs	r3, r2
  4037bc:	600b      	str	r3, [r1, #0]
  4037be:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4037c0:	4b31      	ldr	r3, [pc, #196]	; (403888 <SystemCoreClockUpdate+0xf8>)
  4037c2:	695b      	ldr	r3, [r3, #20]
  4037c4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4037c8:	bf14      	ite	ne
  4037ca:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4037ce:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4037d2:	4b2c      	ldr	r3, [pc, #176]	; (403884 <SystemCoreClockUpdate+0xf4>)
  4037d4:	601a      	str	r2, [r3, #0]
  4037d6:	e7e4      	b.n	4037a2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4037d8:	4b29      	ldr	r3, [pc, #164]	; (403880 <SystemCoreClockUpdate+0xf0>)
  4037da:	6a1b      	ldr	r3, [r3, #32]
  4037dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4037e0:	d003      	beq.n	4037ea <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4037e2:	4a2a      	ldr	r2, [pc, #168]	; (40388c <SystemCoreClockUpdate+0xfc>)
  4037e4:	4b27      	ldr	r3, [pc, #156]	; (403884 <SystemCoreClockUpdate+0xf4>)
  4037e6:	601a      	str	r2, [r3, #0]
  4037e8:	e7db      	b.n	4037a2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4037ea:	4a29      	ldr	r2, [pc, #164]	; (403890 <SystemCoreClockUpdate+0x100>)
  4037ec:	4b25      	ldr	r3, [pc, #148]	; (403884 <SystemCoreClockUpdate+0xf4>)
  4037ee:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4037f0:	4b23      	ldr	r3, [pc, #140]	; (403880 <SystemCoreClockUpdate+0xf0>)
  4037f2:	6a1b      	ldr	r3, [r3, #32]
  4037f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4037f8:	2b10      	cmp	r3, #16
  4037fa:	d005      	beq.n	403808 <SystemCoreClockUpdate+0x78>
  4037fc:	2b20      	cmp	r3, #32
  4037fe:	d1d0      	bne.n	4037a2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  403800:	4a22      	ldr	r2, [pc, #136]	; (40388c <SystemCoreClockUpdate+0xfc>)
  403802:	4b20      	ldr	r3, [pc, #128]	; (403884 <SystemCoreClockUpdate+0xf4>)
  403804:	601a      	str	r2, [r3, #0]
          break;
  403806:	e7cc      	b.n	4037a2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  403808:	4a22      	ldr	r2, [pc, #136]	; (403894 <SystemCoreClockUpdate+0x104>)
  40380a:	4b1e      	ldr	r3, [pc, #120]	; (403884 <SystemCoreClockUpdate+0xf4>)
  40380c:	601a      	str	r2, [r3, #0]
          break;
  40380e:	e7c8      	b.n	4037a2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403810:	4b1b      	ldr	r3, [pc, #108]	; (403880 <SystemCoreClockUpdate+0xf0>)
  403812:	6a1b      	ldr	r3, [r3, #32]
  403814:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403818:	d016      	beq.n	403848 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40381a:	4a1c      	ldr	r2, [pc, #112]	; (40388c <SystemCoreClockUpdate+0xfc>)
  40381c:	4b19      	ldr	r3, [pc, #100]	; (403884 <SystemCoreClockUpdate+0xf4>)
  40381e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403820:	4b17      	ldr	r3, [pc, #92]	; (403880 <SystemCoreClockUpdate+0xf0>)
  403822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403824:	f003 0303 	and.w	r3, r3, #3
  403828:	2b02      	cmp	r3, #2
  40382a:	d1ba      	bne.n	4037a2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40382c:	4a14      	ldr	r2, [pc, #80]	; (403880 <SystemCoreClockUpdate+0xf0>)
  40382e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403830:	6a92      	ldr	r2, [r2, #40]	; 0x28
  403832:	4814      	ldr	r0, [pc, #80]	; (403884 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403834:	f3c1 410a 	ubfx	r1, r1, #16, #11
  403838:	6803      	ldr	r3, [r0, #0]
  40383a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40383e:	b2d2      	uxtb	r2, r2
  403840:	fbb3 f3f2 	udiv	r3, r3, r2
  403844:	6003      	str	r3, [r0, #0]
  403846:	e7ac      	b.n	4037a2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403848:	4a11      	ldr	r2, [pc, #68]	; (403890 <SystemCoreClockUpdate+0x100>)
  40384a:	4b0e      	ldr	r3, [pc, #56]	; (403884 <SystemCoreClockUpdate+0xf4>)
  40384c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40384e:	4b0c      	ldr	r3, [pc, #48]	; (403880 <SystemCoreClockUpdate+0xf0>)
  403850:	6a1b      	ldr	r3, [r3, #32]
  403852:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403856:	2b10      	cmp	r3, #16
  403858:	d005      	beq.n	403866 <SystemCoreClockUpdate+0xd6>
  40385a:	2b20      	cmp	r3, #32
  40385c:	d1e0      	bne.n	403820 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40385e:	4a0b      	ldr	r2, [pc, #44]	; (40388c <SystemCoreClockUpdate+0xfc>)
  403860:	4b08      	ldr	r3, [pc, #32]	; (403884 <SystemCoreClockUpdate+0xf4>)
  403862:	601a      	str	r2, [r3, #0]
          break;
  403864:	e7dc      	b.n	403820 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  403866:	4a0b      	ldr	r2, [pc, #44]	; (403894 <SystemCoreClockUpdate+0x104>)
  403868:	4b06      	ldr	r3, [pc, #24]	; (403884 <SystemCoreClockUpdate+0xf4>)
  40386a:	601a      	str	r2, [r3, #0]
          break;
  40386c:	e7d8      	b.n	403820 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40386e:	4a05      	ldr	r2, [pc, #20]	; (403884 <SystemCoreClockUpdate+0xf4>)
  403870:	6813      	ldr	r3, [r2, #0]
  403872:	4909      	ldr	r1, [pc, #36]	; (403898 <SystemCoreClockUpdate+0x108>)
  403874:	fba1 1303 	umull	r1, r3, r1, r3
  403878:	085b      	lsrs	r3, r3, #1
  40387a:	6013      	str	r3, [r2, #0]
  40387c:	4770      	bx	lr
  40387e:	bf00      	nop
  403880:	400e0600 	.word	0x400e0600
  403884:	20400014 	.word	0x20400014
  403888:	400e1810 	.word	0x400e1810
  40388c:	00b71b00 	.word	0x00b71b00
  403890:	003d0900 	.word	0x003d0900
  403894:	007a1200 	.word	0x007a1200
  403898:	aaaaaaab 	.word	0xaaaaaaab

0040389c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40389c:	4b16      	ldr	r3, [pc, #88]	; (4038f8 <system_init_flash+0x5c>)
  40389e:	4298      	cmp	r0, r3
  4038a0:	d913      	bls.n	4038ca <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4038a2:	4b16      	ldr	r3, [pc, #88]	; (4038fc <system_init_flash+0x60>)
  4038a4:	4298      	cmp	r0, r3
  4038a6:	d915      	bls.n	4038d4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4038a8:	4b15      	ldr	r3, [pc, #84]	; (403900 <system_init_flash+0x64>)
  4038aa:	4298      	cmp	r0, r3
  4038ac:	d916      	bls.n	4038dc <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4038ae:	4b15      	ldr	r3, [pc, #84]	; (403904 <system_init_flash+0x68>)
  4038b0:	4298      	cmp	r0, r3
  4038b2:	d917      	bls.n	4038e4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4038b4:	4b14      	ldr	r3, [pc, #80]	; (403908 <system_init_flash+0x6c>)
  4038b6:	4298      	cmp	r0, r3
  4038b8:	d918      	bls.n	4038ec <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4038ba:	4b14      	ldr	r3, [pc, #80]	; (40390c <system_init_flash+0x70>)
  4038bc:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4038be:	bf94      	ite	ls
  4038c0:	4a13      	ldrls	r2, [pc, #76]	; (403910 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4038c2:	4a14      	ldrhi	r2, [pc, #80]	; (403914 <system_init_flash+0x78>)
  4038c4:	4b14      	ldr	r3, [pc, #80]	; (403918 <system_init_flash+0x7c>)
  4038c6:	601a      	str	r2, [r3, #0]
  4038c8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4038ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4038ce:	4b12      	ldr	r3, [pc, #72]	; (403918 <system_init_flash+0x7c>)
  4038d0:	601a      	str	r2, [r3, #0]
  4038d2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4038d4:	4a11      	ldr	r2, [pc, #68]	; (40391c <system_init_flash+0x80>)
  4038d6:	4b10      	ldr	r3, [pc, #64]	; (403918 <system_init_flash+0x7c>)
  4038d8:	601a      	str	r2, [r3, #0]
  4038da:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4038dc:	4a10      	ldr	r2, [pc, #64]	; (403920 <system_init_flash+0x84>)
  4038de:	4b0e      	ldr	r3, [pc, #56]	; (403918 <system_init_flash+0x7c>)
  4038e0:	601a      	str	r2, [r3, #0]
  4038e2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4038e4:	4a0f      	ldr	r2, [pc, #60]	; (403924 <system_init_flash+0x88>)
  4038e6:	4b0c      	ldr	r3, [pc, #48]	; (403918 <system_init_flash+0x7c>)
  4038e8:	601a      	str	r2, [r3, #0]
  4038ea:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4038ec:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4038f0:	4b09      	ldr	r3, [pc, #36]	; (403918 <system_init_flash+0x7c>)
  4038f2:	601a      	str	r2, [r3, #0]
  4038f4:	4770      	bx	lr
  4038f6:	bf00      	nop
  4038f8:	015ef3bf 	.word	0x015ef3bf
  4038fc:	02bde77f 	.word	0x02bde77f
  403900:	041cdb3f 	.word	0x041cdb3f
  403904:	057bceff 	.word	0x057bceff
  403908:	06dac2bf 	.word	0x06dac2bf
  40390c:	0839b67f 	.word	0x0839b67f
  403910:	04000500 	.word	0x04000500
  403914:	04000600 	.word	0x04000600
  403918:	400e0c00 	.word	0x400e0c00
  40391c:	04000100 	.word	0x04000100
  403920:	04000200 	.word	0x04000200
  403924:	04000300 	.word	0x04000300

00403928 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403928:	4b0a      	ldr	r3, [pc, #40]	; (403954 <_sbrk+0x2c>)
  40392a:	681b      	ldr	r3, [r3, #0]
  40392c:	b153      	cbz	r3, 403944 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40392e:	4b09      	ldr	r3, [pc, #36]	; (403954 <_sbrk+0x2c>)
  403930:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403932:	181a      	adds	r2, r3, r0
  403934:	4908      	ldr	r1, [pc, #32]	; (403958 <_sbrk+0x30>)
  403936:	4291      	cmp	r1, r2
  403938:	db08      	blt.n	40394c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40393a:	4610      	mov	r0, r2
  40393c:	4a05      	ldr	r2, [pc, #20]	; (403954 <_sbrk+0x2c>)
  40393e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403940:	4618      	mov	r0, r3
  403942:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403944:	4a05      	ldr	r2, [pc, #20]	; (40395c <_sbrk+0x34>)
  403946:	4b03      	ldr	r3, [pc, #12]	; (403954 <_sbrk+0x2c>)
  403948:	601a      	str	r2, [r3, #0]
  40394a:	e7f0      	b.n	40392e <_sbrk+0x6>
		return (caddr_t) -1;	
  40394c:	f04f 30ff 	mov.w	r0, #4294967295
}
  403950:	4770      	bx	lr
  403952:	bf00      	nop
  403954:	2040c5b0 	.word	0x2040c5b0
  403958:	2045fffc 	.word	0x2045fffc
  40395c:	2040e8f0 	.word	0x2040e8f0

00403960 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403960:	f04f 30ff 	mov.w	r0, #4294967295
  403964:	4770      	bx	lr

00403966 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40396a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40396c:	2000      	movs	r0, #0
  40396e:	4770      	bx	lr

00403970 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403970:	2001      	movs	r0, #1
  403972:	4770      	bx	lr

00403974 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403974:	2000      	movs	r0, #0
  403976:	4770      	bx	lr

00403978 <test_rtos>:
		RTT_init(4, 16, RTT_MR_ALMIEN);
	}
}

void test_rtos()
{
  403978:	b510      	push	{r4, lr}
  40397a:	b084      	sub	sp, #16
	set_adc_queue(xQueueCreate(100, sizeof(int)));
  40397c:	2200      	movs	r2, #0
  40397e:	2104      	movs	r1, #4
  403980:	2064      	movs	r0, #100	; 0x64
  403982:	4b17      	ldr	r3, [pc, #92]	; (4039e0 <test_rtos+0x68>)
  403984:	4798      	blx	r3
  403986:	4b17      	ldr	r3, [pc, #92]	; (4039e4 <test_rtos+0x6c>)
  403988:	4798      	blx	r3
	if (xTaskCreate(task_adc, "ADC", TASK_ADC_STACK_SIZE, NULL, TASK_ADC_STACK_PRIORITY, NULL) != pdPASS)
  40398a:	2300      	movs	r3, #0
  40398c:	9303      	str	r3, [sp, #12]
  40398e:	9302      	str	r3, [sp, #8]
  403990:	9301      	str	r3, [sp, #4]
  403992:	9300      	str	r3, [sp, #0]
  403994:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  403998:	4913      	ldr	r1, [pc, #76]	; (4039e8 <test_rtos+0x70>)
  40399a:	4814      	ldr	r0, [pc, #80]	; (4039ec <test_rtos+0x74>)
  40399c:	4c14      	ldr	r4, [pc, #80]	; (4039f0 <test_rtos+0x78>)
  40399e:	47a0      	blx	r4
  4039a0:	2801      	cmp	r0, #1
  4039a2:	d002      	beq.n	4039aa <test_rtos+0x32>
		printf("Failed to create test ADC task\r\n");
  4039a4:	4813      	ldr	r0, [pc, #76]	; (4039f4 <test_rtos+0x7c>)
  4039a6:	4b14      	ldr	r3, [pc, #80]	; (4039f8 <test_rtos+0x80>)
  4039a8:	4798      	blx	r3

	set_proc_queue(xQueueCreate(100, sizeof(adcData)));
  4039aa:	2200      	movs	r2, #0
  4039ac:	2104      	movs	r1, #4
  4039ae:	2064      	movs	r0, #100	; 0x64
  4039b0:	4b0b      	ldr	r3, [pc, #44]	; (4039e0 <test_rtos+0x68>)
  4039b2:	4798      	blx	r3
  4039b4:	4b11      	ldr	r3, [pc, #68]	; (4039fc <test_rtos+0x84>)
  4039b6:	4798      	blx	r3
	if (xTaskCreate(task_proc, "PROC", TASK_ADC_STACK_SIZE, NULL, TASK_ADC_STACK_PRIORITY, NULL) != pdPASS)
  4039b8:	2300      	movs	r3, #0
  4039ba:	9303      	str	r3, [sp, #12]
  4039bc:	9302      	str	r3, [sp, #8]
  4039be:	9301      	str	r3, [sp, #4]
  4039c0:	9300      	str	r3, [sp, #0]
  4039c2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  4039c6:	490e      	ldr	r1, [pc, #56]	; (403a00 <test_rtos+0x88>)
  4039c8:	480e      	ldr	r0, [pc, #56]	; (403a04 <test_rtos+0x8c>)
  4039ca:	4c09      	ldr	r4, [pc, #36]	; (4039f0 <test_rtos+0x78>)
  4039cc:	47a0      	blx	r4
  4039ce:	2801      	cmp	r0, #1
  4039d0:	d002      	beq.n	4039d8 <test_rtos+0x60>
		printf("Failed to create test PROC task\r\n");
  4039d2:	480d      	ldr	r0, [pc, #52]	; (403a08 <test_rtos+0x90>)
  4039d4:	4b08      	ldr	r3, [pc, #32]	; (4039f8 <test_rtos+0x80>)
  4039d6:	4798      	blx	r3
	/* Start the scheduler. */
	vTaskStartScheduler();
  4039d8:	4b0c      	ldr	r3, [pc, #48]	; (403a0c <test_rtos+0x94>)
  4039da:	4798      	blx	r3
}
  4039dc:	b004      	add	sp, #16
  4039de:	bd10      	pop	{r4, pc}
  4039e0:	0040107d 	.word	0x0040107d
  4039e4:	00402a01 	.word	0x00402a01
  4039e8:	00406ab8 	.word	0x00406ab8
  4039ec:	00402afd 	.word	0x00402afd
  4039f0:	004016bd 	.word	0x004016bd
  4039f4:	00406abc 	.word	0x00406abc
  4039f8:	00403e09 	.word	0x00403e09
  4039fc:	00402a2d 	.word	0x00402a2d
  403a00:	00406ae0 	.word	0x00406ae0
  403a04:	00402a65 	.word	0x00402a65
  403a08:	00406ae8 	.word	0x00406ae8
  403a0c:	004018f1 	.word	0x004018f1

00403a10 <main>:

int main(void)
{
  403a10:	b500      	push	{lr}
  403a12:	b095      	sub	sp, #84	; 0x54
	init();
  403a14:	4b1a      	ldr	r3, [pc, #104]	; (403a80 <main+0x70>)
  403a16:	4798      	blx	r3

	TC_init(TC0, ID_TC0, 0, 10);
  403a18:	4c1a      	ldr	r4, [pc, #104]	; (403a84 <main+0x74>)
  403a1a:	230a      	movs	r3, #10
  403a1c:	2200      	movs	r2, #0
  403a1e:	2117      	movs	r1, #23
  403a20:	4620      	mov	r0, r4
  403a22:	4d19      	ldr	r5, [pc, #100]	; (403a88 <main+0x78>)
  403a24:	47a8      	blx	r5
	tc_start(TC0, 0);
  403a26:	2100      	movs	r1, #0
  403a28:	4620      	mov	r0, r4
  403a2a:	4b18      	ldr	r3, [pc, #96]	; (403a8c <main+0x7c>)
  403a2c:	4798      	blx	r3

	Calendar rtc_initial = {2018, 3, 19, 12, 15, 45, 1};
  403a2e:	ac0d      	add	r4, sp, #52	; 0x34
  403a30:	4d17      	ldr	r5, [pc, #92]	; (403a90 <main+0x80>)
  403a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  403a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_SR_SEC | RTC_SR_ALARM);
  403a3e:	4e15      	ldr	r6, [pc, #84]	; (403a94 <main+0x84>)
  403a40:	2306      	movs	r3, #6
  403a42:	9305      	str	r3, [sp, #20]
  403a44:	466c      	mov	r4, sp
  403a46:	ad0f      	add	r5, sp, #60	; 0x3c
  403a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403a4c:	682b      	ldr	r3, [r5, #0]
  403a4e:	6023      	str	r3, [r4, #0]
  403a50:	ab0d      	add	r3, sp, #52	; 0x34
  403a52:	cb0c      	ldmia	r3, {r2, r3}
  403a54:	2102      	movs	r1, #2
  403a56:	4630      	mov	r0, r6
  403a58:	4c0f      	ldr	r4, [pc, #60]	; (403a98 <main+0x88>)
  403a5a:	47a0      	blx	r4

	uint32_t current_hour, current_min, current_sec;
	uint32_t current_year, current_month, current_day, current_week;
	rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  403a5c:	ab0a      	add	r3, sp, #40	; 0x28
  403a5e:	aa0b      	add	r2, sp, #44	; 0x2c
  403a60:	a90c      	add	r1, sp, #48	; 0x30
  403a62:	4630      	mov	r0, r6
  403a64:	4c0d      	ldr	r4, [pc, #52]	; (403a9c <main+0x8c>)
  403a66:	47a0      	blx	r4
	rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  403a68:	ab06      	add	r3, sp, #24
  403a6a:	9300      	str	r3, [sp, #0]
  403a6c:	ab07      	add	r3, sp, #28
  403a6e:	aa08      	add	r2, sp, #32
  403a70:	a909      	add	r1, sp, #36	; 0x24
  403a72:	4630      	mov	r0, r6
  403a74:	4c0a      	ldr	r4, [pc, #40]	; (403aa0 <main+0x90>)
  403a76:	47a0      	blx	r4

	test_rtos();
  403a78:	4b0a      	ldr	r3, [pc, #40]	; (403aa4 <main+0x94>)
  403a7a:	4798      	blx	r3
  403a7c:	e7fe      	b.n	403a7c <main+0x6c>
  403a7e:	bf00      	nop
  403a80:	00402775 	.word	0x00402775
  403a84:	4000c000 	.word	0x4000c000
  403a88:	00402b3d 	.word	0x00402b3d
  403a8c:	004008d9 	.word	0x004008d9
  403a90:	00406a9c 	.word	0x00406a9c
  403a94:	400e1860 	.word	0x400e1860
  403a98:	00402be5 	.word	0x00402be5
  403a9c:	00400553 	.word	0x00400553
  403aa0:	0040063d 	.word	0x0040063d
  403aa4:	00403979 	.word	0x00403979

00403aa8 <__aeabi_uldivmod>:
  403aa8:	b953      	cbnz	r3, 403ac0 <__aeabi_uldivmod+0x18>
  403aaa:	b94a      	cbnz	r2, 403ac0 <__aeabi_uldivmod+0x18>
  403aac:	2900      	cmp	r1, #0
  403aae:	bf08      	it	eq
  403ab0:	2800      	cmpeq	r0, #0
  403ab2:	bf1c      	itt	ne
  403ab4:	f04f 31ff 	movne.w	r1, #4294967295
  403ab8:	f04f 30ff 	movne.w	r0, #4294967295
  403abc:	f000 b97a 	b.w	403db4 <__aeabi_idiv0>
  403ac0:	f1ad 0c08 	sub.w	ip, sp, #8
  403ac4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403ac8:	f000 f806 	bl	403ad8 <__udivmoddi4>
  403acc:	f8dd e004 	ldr.w	lr, [sp, #4]
  403ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403ad4:	b004      	add	sp, #16
  403ad6:	4770      	bx	lr

00403ad8 <__udivmoddi4>:
  403ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403adc:	468c      	mov	ip, r1
  403ade:	460d      	mov	r5, r1
  403ae0:	4604      	mov	r4, r0
  403ae2:	9e08      	ldr	r6, [sp, #32]
  403ae4:	2b00      	cmp	r3, #0
  403ae6:	d151      	bne.n	403b8c <__udivmoddi4+0xb4>
  403ae8:	428a      	cmp	r2, r1
  403aea:	4617      	mov	r7, r2
  403aec:	d96d      	bls.n	403bca <__udivmoddi4+0xf2>
  403aee:	fab2 fe82 	clz	lr, r2
  403af2:	f1be 0f00 	cmp.w	lr, #0
  403af6:	d00b      	beq.n	403b10 <__udivmoddi4+0x38>
  403af8:	f1ce 0c20 	rsb	ip, lr, #32
  403afc:	fa01 f50e 	lsl.w	r5, r1, lr
  403b00:	fa20 fc0c 	lsr.w	ip, r0, ip
  403b04:	fa02 f70e 	lsl.w	r7, r2, lr
  403b08:	ea4c 0c05 	orr.w	ip, ip, r5
  403b0c:	fa00 f40e 	lsl.w	r4, r0, lr
  403b10:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403b14:	0c25      	lsrs	r5, r4, #16
  403b16:	fbbc f8fa 	udiv	r8, ip, sl
  403b1a:	fa1f f987 	uxth.w	r9, r7
  403b1e:	fb0a cc18 	mls	ip, sl, r8, ip
  403b22:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403b26:	fb08 f309 	mul.w	r3, r8, r9
  403b2a:	42ab      	cmp	r3, r5
  403b2c:	d90a      	bls.n	403b44 <__udivmoddi4+0x6c>
  403b2e:	19ed      	adds	r5, r5, r7
  403b30:	f108 32ff 	add.w	r2, r8, #4294967295
  403b34:	f080 8123 	bcs.w	403d7e <__udivmoddi4+0x2a6>
  403b38:	42ab      	cmp	r3, r5
  403b3a:	f240 8120 	bls.w	403d7e <__udivmoddi4+0x2a6>
  403b3e:	f1a8 0802 	sub.w	r8, r8, #2
  403b42:	443d      	add	r5, r7
  403b44:	1aed      	subs	r5, r5, r3
  403b46:	b2a4      	uxth	r4, r4
  403b48:	fbb5 f0fa 	udiv	r0, r5, sl
  403b4c:	fb0a 5510 	mls	r5, sl, r0, r5
  403b50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403b54:	fb00 f909 	mul.w	r9, r0, r9
  403b58:	45a1      	cmp	r9, r4
  403b5a:	d909      	bls.n	403b70 <__udivmoddi4+0x98>
  403b5c:	19e4      	adds	r4, r4, r7
  403b5e:	f100 33ff 	add.w	r3, r0, #4294967295
  403b62:	f080 810a 	bcs.w	403d7a <__udivmoddi4+0x2a2>
  403b66:	45a1      	cmp	r9, r4
  403b68:	f240 8107 	bls.w	403d7a <__udivmoddi4+0x2a2>
  403b6c:	3802      	subs	r0, #2
  403b6e:	443c      	add	r4, r7
  403b70:	eba4 0409 	sub.w	r4, r4, r9
  403b74:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403b78:	2100      	movs	r1, #0
  403b7a:	2e00      	cmp	r6, #0
  403b7c:	d061      	beq.n	403c42 <__udivmoddi4+0x16a>
  403b7e:	fa24 f40e 	lsr.w	r4, r4, lr
  403b82:	2300      	movs	r3, #0
  403b84:	6034      	str	r4, [r6, #0]
  403b86:	6073      	str	r3, [r6, #4]
  403b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b8c:	428b      	cmp	r3, r1
  403b8e:	d907      	bls.n	403ba0 <__udivmoddi4+0xc8>
  403b90:	2e00      	cmp	r6, #0
  403b92:	d054      	beq.n	403c3e <__udivmoddi4+0x166>
  403b94:	2100      	movs	r1, #0
  403b96:	e886 0021 	stmia.w	r6, {r0, r5}
  403b9a:	4608      	mov	r0, r1
  403b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ba0:	fab3 f183 	clz	r1, r3
  403ba4:	2900      	cmp	r1, #0
  403ba6:	f040 808e 	bne.w	403cc6 <__udivmoddi4+0x1ee>
  403baa:	42ab      	cmp	r3, r5
  403bac:	d302      	bcc.n	403bb4 <__udivmoddi4+0xdc>
  403bae:	4282      	cmp	r2, r0
  403bb0:	f200 80fa 	bhi.w	403da8 <__udivmoddi4+0x2d0>
  403bb4:	1a84      	subs	r4, r0, r2
  403bb6:	eb65 0503 	sbc.w	r5, r5, r3
  403bba:	2001      	movs	r0, #1
  403bbc:	46ac      	mov	ip, r5
  403bbe:	2e00      	cmp	r6, #0
  403bc0:	d03f      	beq.n	403c42 <__udivmoddi4+0x16a>
  403bc2:	e886 1010 	stmia.w	r6, {r4, ip}
  403bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403bca:	b912      	cbnz	r2, 403bd2 <__udivmoddi4+0xfa>
  403bcc:	2701      	movs	r7, #1
  403bce:	fbb7 f7f2 	udiv	r7, r7, r2
  403bd2:	fab7 fe87 	clz	lr, r7
  403bd6:	f1be 0f00 	cmp.w	lr, #0
  403bda:	d134      	bne.n	403c46 <__udivmoddi4+0x16e>
  403bdc:	1beb      	subs	r3, r5, r7
  403bde:	0c3a      	lsrs	r2, r7, #16
  403be0:	fa1f fc87 	uxth.w	ip, r7
  403be4:	2101      	movs	r1, #1
  403be6:	fbb3 f8f2 	udiv	r8, r3, r2
  403bea:	0c25      	lsrs	r5, r4, #16
  403bec:	fb02 3318 	mls	r3, r2, r8, r3
  403bf0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403bf4:	fb0c f308 	mul.w	r3, ip, r8
  403bf8:	42ab      	cmp	r3, r5
  403bfa:	d907      	bls.n	403c0c <__udivmoddi4+0x134>
  403bfc:	19ed      	adds	r5, r5, r7
  403bfe:	f108 30ff 	add.w	r0, r8, #4294967295
  403c02:	d202      	bcs.n	403c0a <__udivmoddi4+0x132>
  403c04:	42ab      	cmp	r3, r5
  403c06:	f200 80d1 	bhi.w	403dac <__udivmoddi4+0x2d4>
  403c0a:	4680      	mov	r8, r0
  403c0c:	1aed      	subs	r5, r5, r3
  403c0e:	b2a3      	uxth	r3, r4
  403c10:	fbb5 f0f2 	udiv	r0, r5, r2
  403c14:	fb02 5510 	mls	r5, r2, r0, r5
  403c18:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403c1c:	fb0c fc00 	mul.w	ip, ip, r0
  403c20:	45a4      	cmp	ip, r4
  403c22:	d907      	bls.n	403c34 <__udivmoddi4+0x15c>
  403c24:	19e4      	adds	r4, r4, r7
  403c26:	f100 33ff 	add.w	r3, r0, #4294967295
  403c2a:	d202      	bcs.n	403c32 <__udivmoddi4+0x15a>
  403c2c:	45a4      	cmp	ip, r4
  403c2e:	f200 80b8 	bhi.w	403da2 <__udivmoddi4+0x2ca>
  403c32:	4618      	mov	r0, r3
  403c34:	eba4 040c 	sub.w	r4, r4, ip
  403c38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403c3c:	e79d      	b.n	403b7a <__udivmoddi4+0xa2>
  403c3e:	4631      	mov	r1, r6
  403c40:	4630      	mov	r0, r6
  403c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c46:	f1ce 0420 	rsb	r4, lr, #32
  403c4a:	fa05 f30e 	lsl.w	r3, r5, lr
  403c4e:	fa07 f70e 	lsl.w	r7, r7, lr
  403c52:	fa20 f804 	lsr.w	r8, r0, r4
  403c56:	0c3a      	lsrs	r2, r7, #16
  403c58:	fa25 f404 	lsr.w	r4, r5, r4
  403c5c:	ea48 0803 	orr.w	r8, r8, r3
  403c60:	fbb4 f1f2 	udiv	r1, r4, r2
  403c64:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403c68:	fb02 4411 	mls	r4, r2, r1, r4
  403c6c:	fa1f fc87 	uxth.w	ip, r7
  403c70:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403c74:	fb01 f30c 	mul.w	r3, r1, ip
  403c78:	42ab      	cmp	r3, r5
  403c7a:	fa00 f40e 	lsl.w	r4, r0, lr
  403c7e:	d909      	bls.n	403c94 <__udivmoddi4+0x1bc>
  403c80:	19ed      	adds	r5, r5, r7
  403c82:	f101 30ff 	add.w	r0, r1, #4294967295
  403c86:	f080 808a 	bcs.w	403d9e <__udivmoddi4+0x2c6>
  403c8a:	42ab      	cmp	r3, r5
  403c8c:	f240 8087 	bls.w	403d9e <__udivmoddi4+0x2c6>
  403c90:	3902      	subs	r1, #2
  403c92:	443d      	add	r5, r7
  403c94:	1aeb      	subs	r3, r5, r3
  403c96:	fa1f f588 	uxth.w	r5, r8
  403c9a:	fbb3 f0f2 	udiv	r0, r3, r2
  403c9e:	fb02 3310 	mls	r3, r2, r0, r3
  403ca2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403ca6:	fb00 f30c 	mul.w	r3, r0, ip
  403caa:	42ab      	cmp	r3, r5
  403cac:	d907      	bls.n	403cbe <__udivmoddi4+0x1e6>
  403cae:	19ed      	adds	r5, r5, r7
  403cb0:	f100 38ff 	add.w	r8, r0, #4294967295
  403cb4:	d26f      	bcs.n	403d96 <__udivmoddi4+0x2be>
  403cb6:	42ab      	cmp	r3, r5
  403cb8:	d96d      	bls.n	403d96 <__udivmoddi4+0x2be>
  403cba:	3802      	subs	r0, #2
  403cbc:	443d      	add	r5, r7
  403cbe:	1aeb      	subs	r3, r5, r3
  403cc0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403cc4:	e78f      	b.n	403be6 <__udivmoddi4+0x10e>
  403cc6:	f1c1 0720 	rsb	r7, r1, #32
  403cca:	fa22 f807 	lsr.w	r8, r2, r7
  403cce:	408b      	lsls	r3, r1
  403cd0:	fa05 f401 	lsl.w	r4, r5, r1
  403cd4:	ea48 0303 	orr.w	r3, r8, r3
  403cd8:	fa20 fe07 	lsr.w	lr, r0, r7
  403cdc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403ce0:	40fd      	lsrs	r5, r7
  403ce2:	ea4e 0e04 	orr.w	lr, lr, r4
  403ce6:	fbb5 f9fc 	udiv	r9, r5, ip
  403cea:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403cee:	fb0c 5519 	mls	r5, ip, r9, r5
  403cf2:	fa1f f883 	uxth.w	r8, r3
  403cf6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403cfa:	fb09 f408 	mul.w	r4, r9, r8
  403cfe:	42ac      	cmp	r4, r5
  403d00:	fa02 f201 	lsl.w	r2, r2, r1
  403d04:	fa00 fa01 	lsl.w	sl, r0, r1
  403d08:	d908      	bls.n	403d1c <__udivmoddi4+0x244>
  403d0a:	18ed      	adds	r5, r5, r3
  403d0c:	f109 30ff 	add.w	r0, r9, #4294967295
  403d10:	d243      	bcs.n	403d9a <__udivmoddi4+0x2c2>
  403d12:	42ac      	cmp	r4, r5
  403d14:	d941      	bls.n	403d9a <__udivmoddi4+0x2c2>
  403d16:	f1a9 0902 	sub.w	r9, r9, #2
  403d1a:	441d      	add	r5, r3
  403d1c:	1b2d      	subs	r5, r5, r4
  403d1e:	fa1f fe8e 	uxth.w	lr, lr
  403d22:	fbb5 f0fc 	udiv	r0, r5, ip
  403d26:	fb0c 5510 	mls	r5, ip, r0, r5
  403d2a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403d2e:	fb00 f808 	mul.w	r8, r0, r8
  403d32:	45a0      	cmp	r8, r4
  403d34:	d907      	bls.n	403d46 <__udivmoddi4+0x26e>
  403d36:	18e4      	adds	r4, r4, r3
  403d38:	f100 35ff 	add.w	r5, r0, #4294967295
  403d3c:	d229      	bcs.n	403d92 <__udivmoddi4+0x2ba>
  403d3e:	45a0      	cmp	r8, r4
  403d40:	d927      	bls.n	403d92 <__udivmoddi4+0x2ba>
  403d42:	3802      	subs	r0, #2
  403d44:	441c      	add	r4, r3
  403d46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403d4a:	eba4 0408 	sub.w	r4, r4, r8
  403d4e:	fba0 8902 	umull	r8, r9, r0, r2
  403d52:	454c      	cmp	r4, r9
  403d54:	46c6      	mov	lr, r8
  403d56:	464d      	mov	r5, r9
  403d58:	d315      	bcc.n	403d86 <__udivmoddi4+0x2ae>
  403d5a:	d012      	beq.n	403d82 <__udivmoddi4+0x2aa>
  403d5c:	b156      	cbz	r6, 403d74 <__udivmoddi4+0x29c>
  403d5e:	ebba 030e 	subs.w	r3, sl, lr
  403d62:	eb64 0405 	sbc.w	r4, r4, r5
  403d66:	fa04 f707 	lsl.w	r7, r4, r7
  403d6a:	40cb      	lsrs	r3, r1
  403d6c:	431f      	orrs	r7, r3
  403d6e:	40cc      	lsrs	r4, r1
  403d70:	6037      	str	r7, [r6, #0]
  403d72:	6074      	str	r4, [r6, #4]
  403d74:	2100      	movs	r1, #0
  403d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d7a:	4618      	mov	r0, r3
  403d7c:	e6f8      	b.n	403b70 <__udivmoddi4+0x98>
  403d7e:	4690      	mov	r8, r2
  403d80:	e6e0      	b.n	403b44 <__udivmoddi4+0x6c>
  403d82:	45c2      	cmp	sl, r8
  403d84:	d2ea      	bcs.n	403d5c <__udivmoddi4+0x284>
  403d86:	ebb8 0e02 	subs.w	lr, r8, r2
  403d8a:	eb69 0503 	sbc.w	r5, r9, r3
  403d8e:	3801      	subs	r0, #1
  403d90:	e7e4      	b.n	403d5c <__udivmoddi4+0x284>
  403d92:	4628      	mov	r0, r5
  403d94:	e7d7      	b.n	403d46 <__udivmoddi4+0x26e>
  403d96:	4640      	mov	r0, r8
  403d98:	e791      	b.n	403cbe <__udivmoddi4+0x1e6>
  403d9a:	4681      	mov	r9, r0
  403d9c:	e7be      	b.n	403d1c <__udivmoddi4+0x244>
  403d9e:	4601      	mov	r1, r0
  403da0:	e778      	b.n	403c94 <__udivmoddi4+0x1bc>
  403da2:	3802      	subs	r0, #2
  403da4:	443c      	add	r4, r7
  403da6:	e745      	b.n	403c34 <__udivmoddi4+0x15c>
  403da8:	4608      	mov	r0, r1
  403daa:	e708      	b.n	403bbe <__udivmoddi4+0xe6>
  403dac:	f1a8 0802 	sub.w	r8, r8, #2
  403db0:	443d      	add	r5, r7
  403db2:	e72b      	b.n	403c0c <__udivmoddi4+0x134>

00403db4 <__aeabi_idiv0>:
  403db4:	4770      	bx	lr
  403db6:	bf00      	nop

00403db8 <__libc_init_array>:
  403db8:	b570      	push	{r4, r5, r6, lr}
  403dba:	4e0f      	ldr	r6, [pc, #60]	; (403df8 <__libc_init_array+0x40>)
  403dbc:	4d0f      	ldr	r5, [pc, #60]	; (403dfc <__libc_init_array+0x44>)
  403dbe:	1b76      	subs	r6, r6, r5
  403dc0:	10b6      	asrs	r6, r6, #2
  403dc2:	bf18      	it	ne
  403dc4:	2400      	movne	r4, #0
  403dc6:	d005      	beq.n	403dd4 <__libc_init_array+0x1c>
  403dc8:	3401      	adds	r4, #1
  403dca:	f855 3b04 	ldr.w	r3, [r5], #4
  403dce:	4798      	blx	r3
  403dd0:	42a6      	cmp	r6, r4
  403dd2:	d1f9      	bne.n	403dc8 <__libc_init_array+0x10>
  403dd4:	4e0a      	ldr	r6, [pc, #40]	; (403e00 <__libc_init_array+0x48>)
  403dd6:	4d0b      	ldr	r5, [pc, #44]	; (403e04 <__libc_init_array+0x4c>)
  403dd8:	1b76      	subs	r6, r6, r5
  403dda:	f002 ff4b 	bl	406c74 <_init>
  403dde:	10b6      	asrs	r6, r6, #2
  403de0:	bf18      	it	ne
  403de2:	2400      	movne	r4, #0
  403de4:	d006      	beq.n	403df4 <__libc_init_array+0x3c>
  403de6:	3401      	adds	r4, #1
  403de8:	f855 3b04 	ldr.w	r3, [r5], #4
  403dec:	4798      	blx	r3
  403dee:	42a6      	cmp	r6, r4
  403df0:	d1f9      	bne.n	403de6 <__libc_init_array+0x2e>
  403df2:	bd70      	pop	{r4, r5, r6, pc}
  403df4:	bd70      	pop	{r4, r5, r6, pc}
  403df6:	bf00      	nop
  403df8:	00406c80 	.word	0x00406c80
  403dfc:	00406c80 	.word	0x00406c80
  403e00:	00406c88 	.word	0x00406c88
  403e04:	00406c80 	.word	0x00406c80

00403e08 <iprintf>:
  403e08:	b40f      	push	{r0, r1, r2, r3}
  403e0a:	b500      	push	{lr}
  403e0c:	4907      	ldr	r1, [pc, #28]	; (403e2c <iprintf+0x24>)
  403e0e:	b083      	sub	sp, #12
  403e10:	ab04      	add	r3, sp, #16
  403e12:	6808      	ldr	r0, [r1, #0]
  403e14:	f853 2b04 	ldr.w	r2, [r3], #4
  403e18:	6881      	ldr	r1, [r0, #8]
  403e1a:	9301      	str	r3, [sp, #4]
  403e1c:	f000 fa7e 	bl	40431c <_vfiprintf_r>
  403e20:	b003      	add	sp, #12
  403e22:	f85d eb04 	ldr.w	lr, [sp], #4
  403e26:	b004      	add	sp, #16
  403e28:	4770      	bx	lr
  403e2a:	bf00      	nop
  403e2c:	20400018 	.word	0x20400018

00403e30 <memcpy>:
  403e30:	4684      	mov	ip, r0
  403e32:	ea41 0300 	orr.w	r3, r1, r0
  403e36:	f013 0303 	ands.w	r3, r3, #3
  403e3a:	d16d      	bne.n	403f18 <memcpy+0xe8>
  403e3c:	3a40      	subs	r2, #64	; 0x40
  403e3e:	d341      	bcc.n	403ec4 <memcpy+0x94>
  403e40:	f851 3b04 	ldr.w	r3, [r1], #4
  403e44:	f840 3b04 	str.w	r3, [r0], #4
  403e48:	f851 3b04 	ldr.w	r3, [r1], #4
  403e4c:	f840 3b04 	str.w	r3, [r0], #4
  403e50:	f851 3b04 	ldr.w	r3, [r1], #4
  403e54:	f840 3b04 	str.w	r3, [r0], #4
  403e58:	f851 3b04 	ldr.w	r3, [r1], #4
  403e5c:	f840 3b04 	str.w	r3, [r0], #4
  403e60:	f851 3b04 	ldr.w	r3, [r1], #4
  403e64:	f840 3b04 	str.w	r3, [r0], #4
  403e68:	f851 3b04 	ldr.w	r3, [r1], #4
  403e6c:	f840 3b04 	str.w	r3, [r0], #4
  403e70:	f851 3b04 	ldr.w	r3, [r1], #4
  403e74:	f840 3b04 	str.w	r3, [r0], #4
  403e78:	f851 3b04 	ldr.w	r3, [r1], #4
  403e7c:	f840 3b04 	str.w	r3, [r0], #4
  403e80:	f851 3b04 	ldr.w	r3, [r1], #4
  403e84:	f840 3b04 	str.w	r3, [r0], #4
  403e88:	f851 3b04 	ldr.w	r3, [r1], #4
  403e8c:	f840 3b04 	str.w	r3, [r0], #4
  403e90:	f851 3b04 	ldr.w	r3, [r1], #4
  403e94:	f840 3b04 	str.w	r3, [r0], #4
  403e98:	f851 3b04 	ldr.w	r3, [r1], #4
  403e9c:	f840 3b04 	str.w	r3, [r0], #4
  403ea0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ea4:	f840 3b04 	str.w	r3, [r0], #4
  403ea8:	f851 3b04 	ldr.w	r3, [r1], #4
  403eac:	f840 3b04 	str.w	r3, [r0], #4
  403eb0:	f851 3b04 	ldr.w	r3, [r1], #4
  403eb4:	f840 3b04 	str.w	r3, [r0], #4
  403eb8:	f851 3b04 	ldr.w	r3, [r1], #4
  403ebc:	f840 3b04 	str.w	r3, [r0], #4
  403ec0:	3a40      	subs	r2, #64	; 0x40
  403ec2:	d2bd      	bcs.n	403e40 <memcpy+0x10>
  403ec4:	3230      	adds	r2, #48	; 0x30
  403ec6:	d311      	bcc.n	403eec <memcpy+0xbc>
  403ec8:	f851 3b04 	ldr.w	r3, [r1], #4
  403ecc:	f840 3b04 	str.w	r3, [r0], #4
  403ed0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ed4:	f840 3b04 	str.w	r3, [r0], #4
  403ed8:	f851 3b04 	ldr.w	r3, [r1], #4
  403edc:	f840 3b04 	str.w	r3, [r0], #4
  403ee0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ee4:	f840 3b04 	str.w	r3, [r0], #4
  403ee8:	3a10      	subs	r2, #16
  403eea:	d2ed      	bcs.n	403ec8 <memcpy+0x98>
  403eec:	320c      	adds	r2, #12
  403eee:	d305      	bcc.n	403efc <memcpy+0xcc>
  403ef0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ef4:	f840 3b04 	str.w	r3, [r0], #4
  403ef8:	3a04      	subs	r2, #4
  403efa:	d2f9      	bcs.n	403ef0 <memcpy+0xc0>
  403efc:	3204      	adds	r2, #4
  403efe:	d008      	beq.n	403f12 <memcpy+0xe2>
  403f00:	07d2      	lsls	r2, r2, #31
  403f02:	bf1c      	itt	ne
  403f04:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403f08:	f800 3b01 	strbne.w	r3, [r0], #1
  403f0c:	d301      	bcc.n	403f12 <memcpy+0xe2>
  403f0e:	880b      	ldrh	r3, [r1, #0]
  403f10:	8003      	strh	r3, [r0, #0]
  403f12:	4660      	mov	r0, ip
  403f14:	4770      	bx	lr
  403f16:	bf00      	nop
  403f18:	2a08      	cmp	r2, #8
  403f1a:	d313      	bcc.n	403f44 <memcpy+0x114>
  403f1c:	078b      	lsls	r3, r1, #30
  403f1e:	d08d      	beq.n	403e3c <memcpy+0xc>
  403f20:	f010 0303 	ands.w	r3, r0, #3
  403f24:	d08a      	beq.n	403e3c <memcpy+0xc>
  403f26:	f1c3 0304 	rsb	r3, r3, #4
  403f2a:	1ad2      	subs	r2, r2, r3
  403f2c:	07db      	lsls	r3, r3, #31
  403f2e:	bf1c      	itt	ne
  403f30:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403f34:	f800 3b01 	strbne.w	r3, [r0], #1
  403f38:	d380      	bcc.n	403e3c <memcpy+0xc>
  403f3a:	f831 3b02 	ldrh.w	r3, [r1], #2
  403f3e:	f820 3b02 	strh.w	r3, [r0], #2
  403f42:	e77b      	b.n	403e3c <memcpy+0xc>
  403f44:	3a04      	subs	r2, #4
  403f46:	d3d9      	bcc.n	403efc <memcpy+0xcc>
  403f48:	3a01      	subs	r2, #1
  403f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
  403f4e:	f800 3b01 	strb.w	r3, [r0], #1
  403f52:	d2f9      	bcs.n	403f48 <memcpy+0x118>
  403f54:	780b      	ldrb	r3, [r1, #0]
  403f56:	7003      	strb	r3, [r0, #0]
  403f58:	784b      	ldrb	r3, [r1, #1]
  403f5a:	7043      	strb	r3, [r0, #1]
  403f5c:	788b      	ldrb	r3, [r1, #2]
  403f5e:	7083      	strb	r3, [r0, #2]
  403f60:	4660      	mov	r0, ip
  403f62:	4770      	bx	lr

00403f64 <memset>:
  403f64:	b470      	push	{r4, r5, r6}
  403f66:	0786      	lsls	r6, r0, #30
  403f68:	d046      	beq.n	403ff8 <memset+0x94>
  403f6a:	1e54      	subs	r4, r2, #1
  403f6c:	2a00      	cmp	r2, #0
  403f6e:	d041      	beq.n	403ff4 <memset+0x90>
  403f70:	b2ca      	uxtb	r2, r1
  403f72:	4603      	mov	r3, r0
  403f74:	e002      	b.n	403f7c <memset+0x18>
  403f76:	f114 34ff 	adds.w	r4, r4, #4294967295
  403f7a:	d33b      	bcc.n	403ff4 <memset+0x90>
  403f7c:	f803 2b01 	strb.w	r2, [r3], #1
  403f80:	079d      	lsls	r5, r3, #30
  403f82:	d1f8      	bne.n	403f76 <memset+0x12>
  403f84:	2c03      	cmp	r4, #3
  403f86:	d92e      	bls.n	403fe6 <memset+0x82>
  403f88:	b2cd      	uxtb	r5, r1
  403f8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403f8e:	2c0f      	cmp	r4, #15
  403f90:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403f94:	d919      	bls.n	403fca <memset+0x66>
  403f96:	f103 0210 	add.w	r2, r3, #16
  403f9a:	4626      	mov	r6, r4
  403f9c:	3e10      	subs	r6, #16
  403f9e:	2e0f      	cmp	r6, #15
  403fa0:	f842 5c10 	str.w	r5, [r2, #-16]
  403fa4:	f842 5c0c 	str.w	r5, [r2, #-12]
  403fa8:	f842 5c08 	str.w	r5, [r2, #-8]
  403fac:	f842 5c04 	str.w	r5, [r2, #-4]
  403fb0:	f102 0210 	add.w	r2, r2, #16
  403fb4:	d8f2      	bhi.n	403f9c <memset+0x38>
  403fb6:	f1a4 0210 	sub.w	r2, r4, #16
  403fba:	f022 020f 	bic.w	r2, r2, #15
  403fbe:	f004 040f 	and.w	r4, r4, #15
  403fc2:	3210      	adds	r2, #16
  403fc4:	2c03      	cmp	r4, #3
  403fc6:	4413      	add	r3, r2
  403fc8:	d90d      	bls.n	403fe6 <memset+0x82>
  403fca:	461e      	mov	r6, r3
  403fcc:	4622      	mov	r2, r4
  403fce:	3a04      	subs	r2, #4
  403fd0:	2a03      	cmp	r2, #3
  403fd2:	f846 5b04 	str.w	r5, [r6], #4
  403fd6:	d8fa      	bhi.n	403fce <memset+0x6a>
  403fd8:	1f22      	subs	r2, r4, #4
  403fda:	f022 0203 	bic.w	r2, r2, #3
  403fde:	3204      	adds	r2, #4
  403fe0:	4413      	add	r3, r2
  403fe2:	f004 0403 	and.w	r4, r4, #3
  403fe6:	b12c      	cbz	r4, 403ff4 <memset+0x90>
  403fe8:	b2c9      	uxtb	r1, r1
  403fea:	441c      	add	r4, r3
  403fec:	f803 1b01 	strb.w	r1, [r3], #1
  403ff0:	429c      	cmp	r4, r3
  403ff2:	d1fb      	bne.n	403fec <memset+0x88>
  403ff4:	bc70      	pop	{r4, r5, r6}
  403ff6:	4770      	bx	lr
  403ff8:	4614      	mov	r4, r2
  403ffa:	4603      	mov	r3, r0
  403ffc:	e7c2      	b.n	403f84 <memset+0x20>
  403ffe:	bf00      	nop

00404000 <setbuf>:
  404000:	2900      	cmp	r1, #0
  404002:	bf0c      	ite	eq
  404004:	2202      	moveq	r2, #2
  404006:	2200      	movne	r2, #0
  404008:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40400c:	f000 b800 	b.w	404010 <setvbuf>

00404010 <setvbuf>:
  404010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404014:	4c61      	ldr	r4, [pc, #388]	; (40419c <setvbuf+0x18c>)
  404016:	6825      	ldr	r5, [r4, #0]
  404018:	b083      	sub	sp, #12
  40401a:	4604      	mov	r4, r0
  40401c:	460f      	mov	r7, r1
  40401e:	4690      	mov	r8, r2
  404020:	461e      	mov	r6, r3
  404022:	b115      	cbz	r5, 40402a <setvbuf+0x1a>
  404024:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404026:	2b00      	cmp	r3, #0
  404028:	d064      	beq.n	4040f4 <setvbuf+0xe4>
  40402a:	f1b8 0f02 	cmp.w	r8, #2
  40402e:	d006      	beq.n	40403e <setvbuf+0x2e>
  404030:	f1b8 0f01 	cmp.w	r8, #1
  404034:	f200 809f 	bhi.w	404176 <setvbuf+0x166>
  404038:	2e00      	cmp	r6, #0
  40403a:	f2c0 809c 	blt.w	404176 <setvbuf+0x166>
  40403e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404040:	07d8      	lsls	r0, r3, #31
  404042:	d534      	bpl.n	4040ae <setvbuf+0x9e>
  404044:	4621      	mov	r1, r4
  404046:	4628      	mov	r0, r5
  404048:	f001 f906 	bl	405258 <_fflush_r>
  40404c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40404e:	b141      	cbz	r1, 404062 <setvbuf+0x52>
  404050:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404054:	4299      	cmp	r1, r3
  404056:	d002      	beq.n	40405e <setvbuf+0x4e>
  404058:	4628      	mov	r0, r5
  40405a:	f001 fa7b 	bl	405554 <_free_r>
  40405e:	2300      	movs	r3, #0
  404060:	6323      	str	r3, [r4, #48]	; 0x30
  404062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404066:	2200      	movs	r2, #0
  404068:	61a2      	str	r2, [r4, #24]
  40406a:	6062      	str	r2, [r4, #4]
  40406c:	061a      	lsls	r2, r3, #24
  40406e:	d43a      	bmi.n	4040e6 <setvbuf+0xd6>
  404070:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404074:	f023 0303 	bic.w	r3, r3, #3
  404078:	f1b8 0f02 	cmp.w	r8, #2
  40407c:	81a3      	strh	r3, [r4, #12]
  40407e:	d01d      	beq.n	4040bc <setvbuf+0xac>
  404080:	ab01      	add	r3, sp, #4
  404082:	466a      	mov	r2, sp
  404084:	4621      	mov	r1, r4
  404086:	4628      	mov	r0, r5
  404088:	f001 fd02 	bl	405a90 <__swhatbuf_r>
  40408c:	89a3      	ldrh	r3, [r4, #12]
  40408e:	4318      	orrs	r0, r3
  404090:	81a0      	strh	r0, [r4, #12]
  404092:	2e00      	cmp	r6, #0
  404094:	d132      	bne.n	4040fc <setvbuf+0xec>
  404096:	9e00      	ldr	r6, [sp, #0]
  404098:	4630      	mov	r0, r6
  40409a:	f001 fd71 	bl	405b80 <malloc>
  40409e:	4607      	mov	r7, r0
  4040a0:	2800      	cmp	r0, #0
  4040a2:	d06b      	beq.n	40417c <setvbuf+0x16c>
  4040a4:	89a3      	ldrh	r3, [r4, #12]
  4040a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4040aa:	81a3      	strh	r3, [r4, #12]
  4040ac:	e028      	b.n	404100 <setvbuf+0xf0>
  4040ae:	89a3      	ldrh	r3, [r4, #12]
  4040b0:	0599      	lsls	r1, r3, #22
  4040b2:	d4c7      	bmi.n	404044 <setvbuf+0x34>
  4040b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4040b6:	f001 fce7 	bl	405a88 <__retarget_lock_acquire_recursive>
  4040ba:	e7c3      	b.n	404044 <setvbuf+0x34>
  4040bc:	2500      	movs	r5, #0
  4040be:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4040c0:	2600      	movs	r6, #0
  4040c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4040c6:	f043 0302 	orr.w	r3, r3, #2
  4040ca:	2001      	movs	r0, #1
  4040cc:	60a6      	str	r6, [r4, #8]
  4040ce:	07ce      	lsls	r6, r1, #31
  4040d0:	81a3      	strh	r3, [r4, #12]
  4040d2:	6022      	str	r2, [r4, #0]
  4040d4:	6122      	str	r2, [r4, #16]
  4040d6:	6160      	str	r0, [r4, #20]
  4040d8:	d401      	bmi.n	4040de <setvbuf+0xce>
  4040da:	0598      	lsls	r0, r3, #22
  4040dc:	d53e      	bpl.n	40415c <setvbuf+0x14c>
  4040de:	4628      	mov	r0, r5
  4040e0:	b003      	add	sp, #12
  4040e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4040e6:	6921      	ldr	r1, [r4, #16]
  4040e8:	4628      	mov	r0, r5
  4040ea:	f001 fa33 	bl	405554 <_free_r>
  4040ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4040f2:	e7bd      	b.n	404070 <setvbuf+0x60>
  4040f4:	4628      	mov	r0, r5
  4040f6:	f001 f907 	bl	405308 <__sinit>
  4040fa:	e796      	b.n	40402a <setvbuf+0x1a>
  4040fc:	2f00      	cmp	r7, #0
  4040fe:	d0cb      	beq.n	404098 <setvbuf+0x88>
  404100:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404102:	2b00      	cmp	r3, #0
  404104:	d033      	beq.n	40416e <setvbuf+0x15e>
  404106:	9b00      	ldr	r3, [sp, #0]
  404108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40410c:	6027      	str	r7, [r4, #0]
  40410e:	429e      	cmp	r6, r3
  404110:	bf1c      	itt	ne
  404112:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404116:	81a2      	strhne	r2, [r4, #12]
  404118:	f1b8 0f01 	cmp.w	r8, #1
  40411c:	bf04      	itt	eq
  40411e:	f042 0201 	orreq.w	r2, r2, #1
  404122:	81a2      	strheq	r2, [r4, #12]
  404124:	b292      	uxth	r2, r2
  404126:	f012 0308 	ands.w	r3, r2, #8
  40412a:	6127      	str	r7, [r4, #16]
  40412c:	6166      	str	r6, [r4, #20]
  40412e:	d00e      	beq.n	40414e <setvbuf+0x13e>
  404130:	07d1      	lsls	r1, r2, #31
  404132:	d51a      	bpl.n	40416a <setvbuf+0x15a>
  404134:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404136:	4276      	negs	r6, r6
  404138:	2300      	movs	r3, #0
  40413a:	f015 0501 	ands.w	r5, r5, #1
  40413e:	61a6      	str	r6, [r4, #24]
  404140:	60a3      	str	r3, [r4, #8]
  404142:	d009      	beq.n	404158 <setvbuf+0x148>
  404144:	2500      	movs	r5, #0
  404146:	4628      	mov	r0, r5
  404148:	b003      	add	sp, #12
  40414a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40414e:	60a3      	str	r3, [r4, #8]
  404150:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404152:	f015 0501 	ands.w	r5, r5, #1
  404156:	d1f5      	bne.n	404144 <setvbuf+0x134>
  404158:	0593      	lsls	r3, r2, #22
  40415a:	d4c0      	bmi.n	4040de <setvbuf+0xce>
  40415c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40415e:	f001 fc95 	bl	405a8c <__retarget_lock_release_recursive>
  404162:	4628      	mov	r0, r5
  404164:	b003      	add	sp, #12
  404166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40416a:	60a6      	str	r6, [r4, #8]
  40416c:	e7f0      	b.n	404150 <setvbuf+0x140>
  40416e:	4628      	mov	r0, r5
  404170:	f001 f8ca 	bl	405308 <__sinit>
  404174:	e7c7      	b.n	404106 <setvbuf+0xf6>
  404176:	f04f 35ff 	mov.w	r5, #4294967295
  40417a:	e7b0      	b.n	4040de <setvbuf+0xce>
  40417c:	f8dd 9000 	ldr.w	r9, [sp]
  404180:	45b1      	cmp	r9, r6
  404182:	d004      	beq.n	40418e <setvbuf+0x17e>
  404184:	4648      	mov	r0, r9
  404186:	f001 fcfb 	bl	405b80 <malloc>
  40418a:	4607      	mov	r7, r0
  40418c:	b920      	cbnz	r0, 404198 <setvbuf+0x188>
  40418e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404192:	f04f 35ff 	mov.w	r5, #4294967295
  404196:	e792      	b.n	4040be <setvbuf+0xae>
  404198:	464e      	mov	r6, r9
  40419a:	e783      	b.n	4040a4 <setvbuf+0x94>
  40419c:	20400018 	.word	0x20400018
	...

004041c0 <strlen>:
  4041c0:	f890 f000 	pld	[r0]
  4041c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4041c8:	f020 0107 	bic.w	r1, r0, #7
  4041cc:	f06f 0c00 	mvn.w	ip, #0
  4041d0:	f010 0407 	ands.w	r4, r0, #7
  4041d4:	f891 f020 	pld	[r1, #32]
  4041d8:	f040 8049 	bne.w	40426e <strlen+0xae>
  4041dc:	f04f 0400 	mov.w	r4, #0
  4041e0:	f06f 0007 	mvn.w	r0, #7
  4041e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4041e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4041ec:	f100 0008 	add.w	r0, r0, #8
  4041f0:	fa82 f24c 	uadd8	r2, r2, ip
  4041f4:	faa4 f28c 	sel	r2, r4, ip
  4041f8:	fa83 f34c 	uadd8	r3, r3, ip
  4041fc:	faa2 f38c 	sel	r3, r2, ip
  404200:	bb4b      	cbnz	r3, 404256 <strlen+0x96>
  404202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404206:	fa82 f24c 	uadd8	r2, r2, ip
  40420a:	f100 0008 	add.w	r0, r0, #8
  40420e:	faa4 f28c 	sel	r2, r4, ip
  404212:	fa83 f34c 	uadd8	r3, r3, ip
  404216:	faa2 f38c 	sel	r3, r2, ip
  40421a:	b9e3      	cbnz	r3, 404256 <strlen+0x96>
  40421c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404220:	fa82 f24c 	uadd8	r2, r2, ip
  404224:	f100 0008 	add.w	r0, r0, #8
  404228:	faa4 f28c 	sel	r2, r4, ip
  40422c:	fa83 f34c 	uadd8	r3, r3, ip
  404230:	faa2 f38c 	sel	r3, r2, ip
  404234:	b97b      	cbnz	r3, 404256 <strlen+0x96>
  404236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40423a:	f101 0120 	add.w	r1, r1, #32
  40423e:	fa82 f24c 	uadd8	r2, r2, ip
  404242:	f100 0008 	add.w	r0, r0, #8
  404246:	faa4 f28c 	sel	r2, r4, ip
  40424a:	fa83 f34c 	uadd8	r3, r3, ip
  40424e:	faa2 f38c 	sel	r3, r2, ip
  404252:	2b00      	cmp	r3, #0
  404254:	d0c6      	beq.n	4041e4 <strlen+0x24>
  404256:	2a00      	cmp	r2, #0
  404258:	bf04      	itt	eq
  40425a:	3004      	addeq	r0, #4
  40425c:	461a      	moveq	r2, r3
  40425e:	ba12      	rev	r2, r2
  404260:	fab2 f282 	clz	r2, r2
  404264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40426c:	4770      	bx	lr
  40426e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404272:	f004 0503 	and.w	r5, r4, #3
  404276:	f1c4 0000 	rsb	r0, r4, #0
  40427a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40427e:	f014 0f04 	tst.w	r4, #4
  404282:	f891 f040 	pld	[r1, #64]	; 0x40
  404286:	fa0c f505 	lsl.w	r5, ip, r5
  40428a:	ea62 0205 	orn	r2, r2, r5
  40428e:	bf1c      	itt	ne
  404290:	ea63 0305 	ornne	r3, r3, r5
  404294:	4662      	movne	r2, ip
  404296:	f04f 0400 	mov.w	r4, #0
  40429a:	e7a9      	b.n	4041f0 <strlen+0x30>

0040429c <__sprint_r.part.0>:
  40429c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4042a2:	049c      	lsls	r4, r3, #18
  4042a4:	4693      	mov	fp, r2
  4042a6:	d52f      	bpl.n	404308 <__sprint_r.part.0+0x6c>
  4042a8:	6893      	ldr	r3, [r2, #8]
  4042aa:	6812      	ldr	r2, [r2, #0]
  4042ac:	b353      	cbz	r3, 404304 <__sprint_r.part.0+0x68>
  4042ae:	460e      	mov	r6, r1
  4042b0:	4607      	mov	r7, r0
  4042b2:	f102 0908 	add.w	r9, r2, #8
  4042b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4042ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4042be:	d017      	beq.n	4042f0 <__sprint_r.part.0+0x54>
  4042c0:	3d04      	subs	r5, #4
  4042c2:	2400      	movs	r4, #0
  4042c4:	e001      	b.n	4042ca <__sprint_r.part.0+0x2e>
  4042c6:	45a0      	cmp	r8, r4
  4042c8:	d010      	beq.n	4042ec <__sprint_r.part.0+0x50>
  4042ca:	4632      	mov	r2, r6
  4042cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4042d0:	4638      	mov	r0, r7
  4042d2:	f001 f8bb 	bl	40544c <_fputwc_r>
  4042d6:	1c43      	adds	r3, r0, #1
  4042d8:	f104 0401 	add.w	r4, r4, #1
  4042dc:	d1f3      	bne.n	4042c6 <__sprint_r.part.0+0x2a>
  4042de:	2300      	movs	r3, #0
  4042e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4042e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4042e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4042f0:	f02a 0a03 	bic.w	sl, sl, #3
  4042f4:	eba3 030a 	sub.w	r3, r3, sl
  4042f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4042fc:	f109 0908 	add.w	r9, r9, #8
  404300:	2b00      	cmp	r3, #0
  404302:	d1d8      	bne.n	4042b6 <__sprint_r.part.0+0x1a>
  404304:	2000      	movs	r0, #0
  404306:	e7ea      	b.n	4042de <__sprint_r.part.0+0x42>
  404308:	f001 fa0a 	bl	405720 <__sfvwrite_r>
  40430c:	2300      	movs	r3, #0
  40430e:	f8cb 3008 	str.w	r3, [fp, #8]
  404312:	f8cb 3004 	str.w	r3, [fp, #4]
  404316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40431a:	bf00      	nop

0040431c <_vfiprintf_r>:
  40431c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404320:	b0ad      	sub	sp, #180	; 0xb4
  404322:	461d      	mov	r5, r3
  404324:	468b      	mov	fp, r1
  404326:	4690      	mov	r8, r2
  404328:	9307      	str	r3, [sp, #28]
  40432a:	9006      	str	r0, [sp, #24]
  40432c:	b118      	cbz	r0, 404336 <_vfiprintf_r+0x1a>
  40432e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404330:	2b00      	cmp	r3, #0
  404332:	f000 80f3 	beq.w	40451c <_vfiprintf_r+0x200>
  404336:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40433a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40433e:	07df      	lsls	r7, r3, #31
  404340:	b281      	uxth	r1, r0
  404342:	d402      	bmi.n	40434a <_vfiprintf_r+0x2e>
  404344:	058e      	lsls	r6, r1, #22
  404346:	f140 80fc 	bpl.w	404542 <_vfiprintf_r+0x226>
  40434a:	048c      	lsls	r4, r1, #18
  40434c:	d40a      	bmi.n	404364 <_vfiprintf_r+0x48>
  40434e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404352:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40435a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40435e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404362:	b289      	uxth	r1, r1
  404364:	0708      	lsls	r0, r1, #28
  404366:	f140 80b3 	bpl.w	4044d0 <_vfiprintf_r+0x1b4>
  40436a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40436e:	2b00      	cmp	r3, #0
  404370:	f000 80ae 	beq.w	4044d0 <_vfiprintf_r+0x1b4>
  404374:	f001 031a 	and.w	r3, r1, #26
  404378:	2b0a      	cmp	r3, #10
  40437a:	f000 80b5 	beq.w	4044e8 <_vfiprintf_r+0x1cc>
  40437e:	2300      	movs	r3, #0
  404380:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404384:	930b      	str	r3, [sp, #44]	; 0x2c
  404386:	9311      	str	r3, [sp, #68]	; 0x44
  404388:	9310      	str	r3, [sp, #64]	; 0x40
  40438a:	9303      	str	r3, [sp, #12]
  40438c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404390:	46ca      	mov	sl, r9
  404392:	f8cd b010 	str.w	fp, [sp, #16]
  404396:	f898 3000 	ldrb.w	r3, [r8]
  40439a:	4644      	mov	r4, r8
  40439c:	b1fb      	cbz	r3, 4043de <_vfiprintf_r+0xc2>
  40439e:	2b25      	cmp	r3, #37	; 0x25
  4043a0:	d102      	bne.n	4043a8 <_vfiprintf_r+0x8c>
  4043a2:	e01c      	b.n	4043de <_vfiprintf_r+0xc2>
  4043a4:	2b25      	cmp	r3, #37	; 0x25
  4043a6:	d003      	beq.n	4043b0 <_vfiprintf_r+0x94>
  4043a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4043ac:	2b00      	cmp	r3, #0
  4043ae:	d1f9      	bne.n	4043a4 <_vfiprintf_r+0x88>
  4043b0:	eba4 0508 	sub.w	r5, r4, r8
  4043b4:	b19d      	cbz	r5, 4043de <_vfiprintf_r+0xc2>
  4043b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4043b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4043ba:	f8ca 8000 	str.w	r8, [sl]
  4043be:	3301      	adds	r3, #1
  4043c0:	442a      	add	r2, r5
  4043c2:	2b07      	cmp	r3, #7
  4043c4:	f8ca 5004 	str.w	r5, [sl, #4]
  4043c8:	9211      	str	r2, [sp, #68]	; 0x44
  4043ca:	9310      	str	r3, [sp, #64]	; 0x40
  4043cc:	dd7a      	ble.n	4044c4 <_vfiprintf_r+0x1a8>
  4043ce:	2a00      	cmp	r2, #0
  4043d0:	f040 84b0 	bne.w	404d34 <_vfiprintf_r+0xa18>
  4043d4:	9b03      	ldr	r3, [sp, #12]
  4043d6:	9210      	str	r2, [sp, #64]	; 0x40
  4043d8:	442b      	add	r3, r5
  4043da:	46ca      	mov	sl, r9
  4043dc:	9303      	str	r3, [sp, #12]
  4043de:	7823      	ldrb	r3, [r4, #0]
  4043e0:	2b00      	cmp	r3, #0
  4043e2:	f000 83e0 	beq.w	404ba6 <_vfiprintf_r+0x88a>
  4043e6:	2000      	movs	r0, #0
  4043e8:	f04f 0300 	mov.w	r3, #0
  4043ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4043f0:	f104 0801 	add.w	r8, r4, #1
  4043f4:	7862      	ldrb	r2, [r4, #1]
  4043f6:	4605      	mov	r5, r0
  4043f8:	4606      	mov	r6, r0
  4043fa:	4603      	mov	r3, r0
  4043fc:	f04f 34ff 	mov.w	r4, #4294967295
  404400:	f108 0801 	add.w	r8, r8, #1
  404404:	f1a2 0120 	sub.w	r1, r2, #32
  404408:	2958      	cmp	r1, #88	; 0x58
  40440a:	f200 82de 	bhi.w	4049ca <_vfiprintf_r+0x6ae>
  40440e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404412:	0221      	.short	0x0221
  404414:	02dc02dc 	.word	0x02dc02dc
  404418:	02dc0229 	.word	0x02dc0229
  40441c:	02dc02dc 	.word	0x02dc02dc
  404420:	02dc02dc 	.word	0x02dc02dc
  404424:	028902dc 	.word	0x028902dc
  404428:	02dc0295 	.word	0x02dc0295
  40442c:	02bd00a2 	.word	0x02bd00a2
  404430:	019f02dc 	.word	0x019f02dc
  404434:	01a401a4 	.word	0x01a401a4
  404438:	01a401a4 	.word	0x01a401a4
  40443c:	01a401a4 	.word	0x01a401a4
  404440:	01a401a4 	.word	0x01a401a4
  404444:	02dc01a4 	.word	0x02dc01a4
  404448:	02dc02dc 	.word	0x02dc02dc
  40444c:	02dc02dc 	.word	0x02dc02dc
  404450:	02dc02dc 	.word	0x02dc02dc
  404454:	02dc02dc 	.word	0x02dc02dc
  404458:	01b202dc 	.word	0x01b202dc
  40445c:	02dc02dc 	.word	0x02dc02dc
  404460:	02dc02dc 	.word	0x02dc02dc
  404464:	02dc02dc 	.word	0x02dc02dc
  404468:	02dc02dc 	.word	0x02dc02dc
  40446c:	02dc02dc 	.word	0x02dc02dc
  404470:	02dc0197 	.word	0x02dc0197
  404474:	02dc02dc 	.word	0x02dc02dc
  404478:	02dc02dc 	.word	0x02dc02dc
  40447c:	02dc019b 	.word	0x02dc019b
  404480:	025302dc 	.word	0x025302dc
  404484:	02dc02dc 	.word	0x02dc02dc
  404488:	02dc02dc 	.word	0x02dc02dc
  40448c:	02dc02dc 	.word	0x02dc02dc
  404490:	02dc02dc 	.word	0x02dc02dc
  404494:	02dc02dc 	.word	0x02dc02dc
  404498:	021b025a 	.word	0x021b025a
  40449c:	02dc02dc 	.word	0x02dc02dc
  4044a0:	026e02dc 	.word	0x026e02dc
  4044a4:	02dc021b 	.word	0x02dc021b
  4044a8:	027302dc 	.word	0x027302dc
  4044ac:	01f502dc 	.word	0x01f502dc
  4044b0:	02090182 	.word	0x02090182
  4044b4:	02dc02d7 	.word	0x02dc02d7
  4044b8:	02dc029a 	.word	0x02dc029a
  4044bc:	02dc00a7 	.word	0x02dc00a7
  4044c0:	022e02dc 	.word	0x022e02dc
  4044c4:	f10a 0a08 	add.w	sl, sl, #8
  4044c8:	9b03      	ldr	r3, [sp, #12]
  4044ca:	442b      	add	r3, r5
  4044cc:	9303      	str	r3, [sp, #12]
  4044ce:	e786      	b.n	4043de <_vfiprintf_r+0xc2>
  4044d0:	4659      	mov	r1, fp
  4044d2:	9806      	ldr	r0, [sp, #24]
  4044d4:	f000 fdac 	bl	405030 <__swsetup_r>
  4044d8:	bb18      	cbnz	r0, 404522 <_vfiprintf_r+0x206>
  4044da:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4044de:	f001 031a 	and.w	r3, r1, #26
  4044e2:	2b0a      	cmp	r3, #10
  4044e4:	f47f af4b 	bne.w	40437e <_vfiprintf_r+0x62>
  4044e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4044ec:	2b00      	cmp	r3, #0
  4044ee:	f6ff af46 	blt.w	40437e <_vfiprintf_r+0x62>
  4044f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4044f6:	07db      	lsls	r3, r3, #31
  4044f8:	d405      	bmi.n	404506 <_vfiprintf_r+0x1ea>
  4044fa:	058f      	lsls	r7, r1, #22
  4044fc:	d403      	bmi.n	404506 <_vfiprintf_r+0x1ea>
  4044fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404502:	f001 fac3 	bl	405a8c <__retarget_lock_release_recursive>
  404506:	462b      	mov	r3, r5
  404508:	4642      	mov	r2, r8
  40450a:	4659      	mov	r1, fp
  40450c:	9806      	ldr	r0, [sp, #24]
  40450e:	f000 fd4d 	bl	404fac <__sbprintf>
  404512:	9003      	str	r0, [sp, #12]
  404514:	9803      	ldr	r0, [sp, #12]
  404516:	b02d      	add	sp, #180	; 0xb4
  404518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40451c:	f000 fef4 	bl	405308 <__sinit>
  404520:	e709      	b.n	404336 <_vfiprintf_r+0x1a>
  404522:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404526:	07d9      	lsls	r1, r3, #31
  404528:	d404      	bmi.n	404534 <_vfiprintf_r+0x218>
  40452a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40452e:	059a      	lsls	r2, r3, #22
  404530:	f140 84aa 	bpl.w	404e88 <_vfiprintf_r+0xb6c>
  404534:	f04f 33ff 	mov.w	r3, #4294967295
  404538:	9303      	str	r3, [sp, #12]
  40453a:	9803      	ldr	r0, [sp, #12]
  40453c:	b02d      	add	sp, #180	; 0xb4
  40453e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404542:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404546:	f001 fa9f 	bl	405a88 <__retarget_lock_acquire_recursive>
  40454a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40454e:	b281      	uxth	r1, r0
  404550:	e6fb      	b.n	40434a <_vfiprintf_r+0x2e>
  404552:	4276      	negs	r6, r6
  404554:	9207      	str	r2, [sp, #28]
  404556:	f043 0304 	orr.w	r3, r3, #4
  40455a:	f898 2000 	ldrb.w	r2, [r8]
  40455e:	e74f      	b.n	404400 <_vfiprintf_r+0xe4>
  404560:	9608      	str	r6, [sp, #32]
  404562:	069e      	lsls	r6, r3, #26
  404564:	f100 8450 	bmi.w	404e08 <_vfiprintf_r+0xaec>
  404568:	9907      	ldr	r1, [sp, #28]
  40456a:	06dd      	lsls	r5, r3, #27
  40456c:	460a      	mov	r2, r1
  40456e:	f100 83ef 	bmi.w	404d50 <_vfiprintf_r+0xa34>
  404572:	0658      	lsls	r0, r3, #25
  404574:	f140 83ec 	bpl.w	404d50 <_vfiprintf_r+0xa34>
  404578:	880e      	ldrh	r6, [r1, #0]
  40457a:	3104      	adds	r1, #4
  40457c:	2700      	movs	r7, #0
  40457e:	2201      	movs	r2, #1
  404580:	9107      	str	r1, [sp, #28]
  404582:	f04f 0100 	mov.w	r1, #0
  404586:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40458a:	2500      	movs	r5, #0
  40458c:	1c61      	adds	r1, r4, #1
  40458e:	f000 8116 	beq.w	4047be <_vfiprintf_r+0x4a2>
  404592:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404596:	9102      	str	r1, [sp, #8]
  404598:	ea56 0107 	orrs.w	r1, r6, r7
  40459c:	f040 8114 	bne.w	4047c8 <_vfiprintf_r+0x4ac>
  4045a0:	2c00      	cmp	r4, #0
  4045a2:	f040 835c 	bne.w	404c5e <_vfiprintf_r+0x942>
  4045a6:	2a00      	cmp	r2, #0
  4045a8:	f040 83b7 	bne.w	404d1a <_vfiprintf_r+0x9fe>
  4045ac:	f013 0301 	ands.w	r3, r3, #1
  4045b0:	9305      	str	r3, [sp, #20]
  4045b2:	f000 8457 	beq.w	404e64 <_vfiprintf_r+0xb48>
  4045b6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4045ba:	2330      	movs	r3, #48	; 0x30
  4045bc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4045c0:	9b05      	ldr	r3, [sp, #20]
  4045c2:	42a3      	cmp	r3, r4
  4045c4:	bfb8      	it	lt
  4045c6:	4623      	movlt	r3, r4
  4045c8:	9301      	str	r3, [sp, #4]
  4045ca:	b10d      	cbz	r5, 4045d0 <_vfiprintf_r+0x2b4>
  4045cc:	3301      	adds	r3, #1
  4045ce:	9301      	str	r3, [sp, #4]
  4045d0:	9b02      	ldr	r3, [sp, #8]
  4045d2:	f013 0302 	ands.w	r3, r3, #2
  4045d6:	9309      	str	r3, [sp, #36]	; 0x24
  4045d8:	d002      	beq.n	4045e0 <_vfiprintf_r+0x2c4>
  4045da:	9b01      	ldr	r3, [sp, #4]
  4045dc:	3302      	adds	r3, #2
  4045de:	9301      	str	r3, [sp, #4]
  4045e0:	9b02      	ldr	r3, [sp, #8]
  4045e2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4045e6:	930a      	str	r3, [sp, #40]	; 0x28
  4045e8:	f040 8217 	bne.w	404a1a <_vfiprintf_r+0x6fe>
  4045ec:	9b08      	ldr	r3, [sp, #32]
  4045ee:	9a01      	ldr	r2, [sp, #4]
  4045f0:	1a9d      	subs	r5, r3, r2
  4045f2:	2d00      	cmp	r5, #0
  4045f4:	f340 8211 	ble.w	404a1a <_vfiprintf_r+0x6fe>
  4045f8:	2d10      	cmp	r5, #16
  4045fa:	f340 8490 	ble.w	404f1e <_vfiprintf_r+0xc02>
  4045fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404600:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404602:	4ec4      	ldr	r6, [pc, #784]	; (404914 <_vfiprintf_r+0x5f8>)
  404604:	46d6      	mov	lr, sl
  404606:	2710      	movs	r7, #16
  404608:	46a2      	mov	sl, r4
  40460a:	4619      	mov	r1, r3
  40460c:	9c06      	ldr	r4, [sp, #24]
  40460e:	e007      	b.n	404620 <_vfiprintf_r+0x304>
  404610:	f101 0c02 	add.w	ip, r1, #2
  404614:	f10e 0e08 	add.w	lr, lr, #8
  404618:	4601      	mov	r1, r0
  40461a:	3d10      	subs	r5, #16
  40461c:	2d10      	cmp	r5, #16
  40461e:	dd11      	ble.n	404644 <_vfiprintf_r+0x328>
  404620:	1c48      	adds	r0, r1, #1
  404622:	3210      	adds	r2, #16
  404624:	2807      	cmp	r0, #7
  404626:	9211      	str	r2, [sp, #68]	; 0x44
  404628:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40462c:	9010      	str	r0, [sp, #64]	; 0x40
  40462e:	ddef      	ble.n	404610 <_vfiprintf_r+0x2f4>
  404630:	2a00      	cmp	r2, #0
  404632:	f040 81e4 	bne.w	4049fe <_vfiprintf_r+0x6e2>
  404636:	3d10      	subs	r5, #16
  404638:	2d10      	cmp	r5, #16
  40463a:	4611      	mov	r1, r2
  40463c:	f04f 0c01 	mov.w	ip, #1
  404640:	46ce      	mov	lr, r9
  404642:	dced      	bgt.n	404620 <_vfiprintf_r+0x304>
  404644:	4654      	mov	r4, sl
  404646:	4661      	mov	r1, ip
  404648:	46f2      	mov	sl, lr
  40464a:	442a      	add	r2, r5
  40464c:	2907      	cmp	r1, #7
  40464e:	9211      	str	r2, [sp, #68]	; 0x44
  404650:	f8ca 6000 	str.w	r6, [sl]
  404654:	f8ca 5004 	str.w	r5, [sl, #4]
  404658:	9110      	str	r1, [sp, #64]	; 0x40
  40465a:	f300 82ec 	bgt.w	404c36 <_vfiprintf_r+0x91a>
  40465e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404662:	f10a 0a08 	add.w	sl, sl, #8
  404666:	1c48      	adds	r0, r1, #1
  404668:	2d00      	cmp	r5, #0
  40466a:	f040 81de 	bne.w	404a2a <_vfiprintf_r+0x70e>
  40466e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404670:	2b00      	cmp	r3, #0
  404672:	f000 81f8 	beq.w	404a66 <_vfiprintf_r+0x74a>
  404676:	3202      	adds	r2, #2
  404678:	a90e      	add	r1, sp, #56	; 0x38
  40467a:	2302      	movs	r3, #2
  40467c:	2807      	cmp	r0, #7
  40467e:	9211      	str	r2, [sp, #68]	; 0x44
  404680:	9010      	str	r0, [sp, #64]	; 0x40
  404682:	e88a 000a 	stmia.w	sl, {r1, r3}
  404686:	f340 81ea 	ble.w	404a5e <_vfiprintf_r+0x742>
  40468a:	2a00      	cmp	r2, #0
  40468c:	f040 838c 	bne.w	404da8 <_vfiprintf_r+0xa8c>
  404690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404692:	2b80      	cmp	r3, #128	; 0x80
  404694:	f04f 0001 	mov.w	r0, #1
  404698:	4611      	mov	r1, r2
  40469a:	46ca      	mov	sl, r9
  40469c:	f040 81e7 	bne.w	404a6e <_vfiprintf_r+0x752>
  4046a0:	9b08      	ldr	r3, [sp, #32]
  4046a2:	9d01      	ldr	r5, [sp, #4]
  4046a4:	1b5e      	subs	r6, r3, r5
  4046a6:	2e00      	cmp	r6, #0
  4046a8:	f340 81e1 	ble.w	404a6e <_vfiprintf_r+0x752>
  4046ac:	2e10      	cmp	r6, #16
  4046ae:	4d9a      	ldr	r5, [pc, #616]	; (404918 <_vfiprintf_r+0x5fc>)
  4046b0:	f340 8450 	ble.w	404f54 <_vfiprintf_r+0xc38>
  4046b4:	46d4      	mov	ip, sl
  4046b6:	2710      	movs	r7, #16
  4046b8:	46a2      	mov	sl, r4
  4046ba:	9c06      	ldr	r4, [sp, #24]
  4046bc:	e007      	b.n	4046ce <_vfiprintf_r+0x3b2>
  4046be:	f101 0e02 	add.w	lr, r1, #2
  4046c2:	f10c 0c08 	add.w	ip, ip, #8
  4046c6:	4601      	mov	r1, r0
  4046c8:	3e10      	subs	r6, #16
  4046ca:	2e10      	cmp	r6, #16
  4046cc:	dd11      	ble.n	4046f2 <_vfiprintf_r+0x3d6>
  4046ce:	1c48      	adds	r0, r1, #1
  4046d0:	3210      	adds	r2, #16
  4046d2:	2807      	cmp	r0, #7
  4046d4:	9211      	str	r2, [sp, #68]	; 0x44
  4046d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4046da:	9010      	str	r0, [sp, #64]	; 0x40
  4046dc:	ddef      	ble.n	4046be <_vfiprintf_r+0x3a2>
  4046de:	2a00      	cmp	r2, #0
  4046e0:	f040 829d 	bne.w	404c1e <_vfiprintf_r+0x902>
  4046e4:	3e10      	subs	r6, #16
  4046e6:	2e10      	cmp	r6, #16
  4046e8:	f04f 0e01 	mov.w	lr, #1
  4046ec:	4611      	mov	r1, r2
  4046ee:	46cc      	mov	ip, r9
  4046f0:	dced      	bgt.n	4046ce <_vfiprintf_r+0x3b2>
  4046f2:	4654      	mov	r4, sl
  4046f4:	46e2      	mov	sl, ip
  4046f6:	4432      	add	r2, r6
  4046f8:	f1be 0f07 	cmp.w	lr, #7
  4046fc:	9211      	str	r2, [sp, #68]	; 0x44
  4046fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  404702:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404706:	f300 8369 	bgt.w	404ddc <_vfiprintf_r+0xac0>
  40470a:	f10a 0a08 	add.w	sl, sl, #8
  40470e:	f10e 0001 	add.w	r0, lr, #1
  404712:	4671      	mov	r1, lr
  404714:	e1ab      	b.n	404a6e <_vfiprintf_r+0x752>
  404716:	9608      	str	r6, [sp, #32]
  404718:	f013 0220 	ands.w	r2, r3, #32
  40471c:	f040 838c 	bne.w	404e38 <_vfiprintf_r+0xb1c>
  404720:	f013 0110 	ands.w	r1, r3, #16
  404724:	f040 831a 	bne.w	404d5c <_vfiprintf_r+0xa40>
  404728:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40472c:	f000 8316 	beq.w	404d5c <_vfiprintf_r+0xa40>
  404730:	9807      	ldr	r0, [sp, #28]
  404732:	460a      	mov	r2, r1
  404734:	4601      	mov	r1, r0
  404736:	3104      	adds	r1, #4
  404738:	8806      	ldrh	r6, [r0, #0]
  40473a:	9107      	str	r1, [sp, #28]
  40473c:	2700      	movs	r7, #0
  40473e:	e720      	b.n	404582 <_vfiprintf_r+0x266>
  404740:	9608      	str	r6, [sp, #32]
  404742:	f043 0310 	orr.w	r3, r3, #16
  404746:	e7e7      	b.n	404718 <_vfiprintf_r+0x3fc>
  404748:	9608      	str	r6, [sp, #32]
  40474a:	f043 0310 	orr.w	r3, r3, #16
  40474e:	e708      	b.n	404562 <_vfiprintf_r+0x246>
  404750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404754:	f898 2000 	ldrb.w	r2, [r8]
  404758:	e652      	b.n	404400 <_vfiprintf_r+0xe4>
  40475a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40475e:	2600      	movs	r6, #0
  404760:	f818 2b01 	ldrb.w	r2, [r8], #1
  404764:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404768:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40476c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404770:	2909      	cmp	r1, #9
  404772:	d9f5      	bls.n	404760 <_vfiprintf_r+0x444>
  404774:	e646      	b.n	404404 <_vfiprintf_r+0xe8>
  404776:	9608      	str	r6, [sp, #32]
  404778:	2800      	cmp	r0, #0
  40477a:	f040 8408 	bne.w	404f8e <_vfiprintf_r+0xc72>
  40477e:	f043 0310 	orr.w	r3, r3, #16
  404782:	069e      	lsls	r6, r3, #26
  404784:	f100 834c 	bmi.w	404e20 <_vfiprintf_r+0xb04>
  404788:	06dd      	lsls	r5, r3, #27
  40478a:	f100 82f3 	bmi.w	404d74 <_vfiprintf_r+0xa58>
  40478e:	0658      	lsls	r0, r3, #25
  404790:	f140 82f0 	bpl.w	404d74 <_vfiprintf_r+0xa58>
  404794:	9d07      	ldr	r5, [sp, #28]
  404796:	f9b5 6000 	ldrsh.w	r6, [r5]
  40479a:	462a      	mov	r2, r5
  40479c:	17f7      	asrs	r7, r6, #31
  40479e:	3204      	adds	r2, #4
  4047a0:	4630      	mov	r0, r6
  4047a2:	4639      	mov	r1, r7
  4047a4:	9207      	str	r2, [sp, #28]
  4047a6:	2800      	cmp	r0, #0
  4047a8:	f171 0200 	sbcs.w	r2, r1, #0
  4047ac:	f2c0 835d 	blt.w	404e6a <_vfiprintf_r+0xb4e>
  4047b0:	1c61      	adds	r1, r4, #1
  4047b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4047b6:	f04f 0201 	mov.w	r2, #1
  4047ba:	f47f aeea 	bne.w	404592 <_vfiprintf_r+0x276>
  4047be:	ea56 0107 	orrs.w	r1, r6, r7
  4047c2:	f000 824d 	beq.w	404c60 <_vfiprintf_r+0x944>
  4047c6:	9302      	str	r3, [sp, #8]
  4047c8:	2a01      	cmp	r2, #1
  4047ca:	f000 828c 	beq.w	404ce6 <_vfiprintf_r+0x9ca>
  4047ce:	2a02      	cmp	r2, #2
  4047d0:	f040 825c 	bne.w	404c8c <_vfiprintf_r+0x970>
  4047d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4047d6:	46cb      	mov	fp, r9
  4047d8:	0933      	lsrs	r3, r6, #4
  4047da:	f006 010f 	and.w	r1, r6, #15
  4047de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4047e2:	093a      	lsrs	r2, r7, #4
  4047e4:	461e      	mov	r6, r3
  4047e6:	4617      	mov	r7, r2
  4047e8:	5c43      	ldrb	r3, [r0, r1]
  4047ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4047ee:	ea56 0307 	orrs.w	r3, r6, r7
  4047f2:	d1f1      	bne.n	4047d8 <_vfiprintf_r+0x4bc>
  4047f4:	eba9 030b 	sub.w	r3, r9, fp
  4047f8:	9305      	str	r3, [sp, #20]
  4047fa:	e6e1      	b.n	4045c0 <_vfiprintf_r+0x2a4>
  4047fc:	2800      	cmp	r0, #0
  4047fe:	f040 83c0 	bne.w	404f82 <_vfiprintf_r+0xc66>
  404802:	0699      	lsls	r1, r3, #26
  404804:	f100 8367 	bmi.w	404ed6 <_vfiprintf_r+0xbba>
  404808:	06da      	lsls	r2, r3, #27
  40480a:	f100 80f1 	bmi.w	4049f0 <_vfiprintf_r+0x6d4>
  40480e:	065b      	lsls	r3, r3, #25
  404810:	f140 80ee 	bpl.w	4049f0 <_vfiprintf_r+0x6d4>
  404814:	9a07      	ldr	r2, [sp, #28]
  404816:	6813      	ldr	r3, [r2, #0]
  404818:	3204      	adds	r2, #4
  40481a:	9207      	str	r2, [sp, #28]
  40481c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404820:	801a      	strh	r2, [r3, #0]
  404822:	e5b8      	b.n	404396 <_vfiprintf_r+0x7a>
  404824:	9807      	ldr	r0, [sp, #28]
  404826:	4a3d      	ldr	r2, [pc, #244]	; (40491c <_vfiprintf_r+0x600>)
  404828:	9608      	str	r6, [sp, #32]
  40482a:	920b      	str	r2, [sp, #44]	; 0x2c
  40482c:	6806      	ldr	r6, [r0, #0]
  40482e:	2278      	movs	r2, #120	; 0x78
  404830:	2130      	movs	r1, #48	; 0x30
  404832:	3004      	adds	r0, #4
  404834:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404838:	f043 0302 	orr.w	r3, r3, #2
  40483c:	9007      	str	r0, [sp, #28]
  40483e:	2700      	movs	r7, #0
  404840:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404844:	2202      	movs	r2, #2
  404846:	e69c      	b.n	404582 <_vfiprintf_r+0x266>
  404848:	9608      	str	r6, [sp, #32]
  40484a:	2800      	cmp	r0, #0
  40484c:	d099      	beq.n	404782 <_vfiprintf_r+0x466>
  40484e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404852:	e796      	b.n	404782 <_vfiprintf_r+0x466>
  404854:	f898 2000 	ldrb.w	r2, [r8]
  404858:	2d00      	cmp	r5, #0
  40485a:	f47f add1 	bne.w	404400 <_vfiprintf_r+0xe4>
  40485e:	2001      	movs	r0, #1
  404860:	2520      	movs	r5, #32
  404862:	e5cd      	b.n	404400 <_vfiprintf_r+0xe4>
  404864:	f043 0301 	orr.w	r3, r3, #1
  404868:	f898 2000 	ldrb.w	r2, [r8]
  40486c:	e5c8      	b.n	404400 <_vfiprintf_r+0xe4>
  40486e:	9608      	str	r6, [sp, #32]
  404870:	2800      	cmp	r0, #0
  404872:	f040 8393 	bne.w	404f9c <_vfiprintf_r+0xc80>
  404876:	4929      	ldr	r1, [pc, #164]	; (40491c <_vfiprintf_r+0x600>)
  404878:	910b      	str	r1, [sp, #44]	; 0x2c
  40487a:	069f      	lsls	r7, r3, #26
  40487c:	f100 82e8 	bmi.w	404e50 <_vfiprintf_r+0xb34>
  404880:	9807      	ldr	r0, [sp, #28]
  404882:	06de      	lsls	r6, r3, #27
  404884:	4601      	mov	r1, r0
  404886:	f100 8270 	bmi.w	404d6a <_vfiprintf_r+0xa4e>
  40488a:	065d      	lsls	r5, r3, #25
  40488c:	f140 826d 	bpl.w	404d6a <_vfiprintf_r+0xa4e>
  404890:	3104      	adds	r1, #4
  404892:	8806      	ldrh	r6, [r0, #0]
  404894:	9107      	str	r1, [sp, #28]
  404896:	2700      	movs	r7, #0
  404898:	07d8      	lsls	r0, r3, #31
  40489a:	f140 8222 	bpl.w	404ce2 <_vfiprintf_r+0x9c6>
  40489e:	ea56 0107 	orrs.w	r1, r6, r7
  4048a2:	f000 821e 	beq.w	404ce2 <_vfiprintf_r+0x9c6>
  4048a6:	2130      	movs	r1, #48	; 0x30
  4048a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4048ac:	f043 0302 	orr.w	r3, r3, #2
  4048b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4048b4:	2202      	movs	r2, #2
  4048b6:	e664      	b.n	404582 <_vfiprintf_r+0x266>
  4048b8:	9608      	str	r6, [sp, #32]
  4048ba:	2800      	cmp	r0, #0
  4048bc:	f040 836b 	bne.w	404f96 <_vfiprintf_r+0xc7a>
  4048c0:	4917      	ldr	r1, [pc, #92]	; (404920 <_vfiprintf_r+0x604>)
  4048c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4048c4:	e7d9      	b.n	40487a <_vfiprintf_r+0x55e>
  4048c6:	9907      	ldr	r1, [sp, #28]
  4048c8:	9608      	str	r6, [sp, #32]
  4048ca:	680a      	ldr	r2, [r1, #0]
  4048cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4048d0:	f04f 0000 	mov.w	r0, #0
  4048d4:	460a      	mov	r2, r1
  4048d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4048da:	3204      	adds	r2, #4
  4048dc:	2001      	movs	r0, #1
  4048de:	9001      	str	r0, [sp, #4]
  4048e0:	9207      	str	r2, [sp, #28]
  4048e2:	9005      	str	r0, [sp, #20]
  4048e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4048e8:	9302      	str	r3, [sp, #8]
  4048ea:	2400      	movs	r4, #0
  4048ec:	e670      	b.n	4045d0 <_vfiprintf_r+0x2b4>
  4048ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4048f2:	f898 2000 	ldrb.w	r2, [r8]
  4048f6:	e583      	b.n	404400 <_vfiprintf_r+0xe4>
  4048f8:	f898 2000 	ldrb.w	r2, [r8]
  4048fc:	2a6c      	cmp	r2, #108	; 0x6c
  4048fe:	bf03      	ittte	eq
  404900:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404904:	f043 0320 	orreq.w	r3, r3, #32
  404908:	f108 0801 	addeq.w	r8, r8, #1
  40490c:	f043 0310 	orrne.w	r3, r3, #16
  404910:	e576      	b.n	404400 <_vfiprintf_r+0xe4>
  404912:	bf00      	nop
  404914:	00406b40 	.word	0x00406b40
  404918:	00406b50 	.word	0x00406b50
  40491c:	00406b24 	.word	0x00406b24
  404920:	00406b10 	.word	0x00406b10
  404924:	9907      	ldr	r1, [sp, #28]
  404926:	680e      	ldr	r6, [r1, #0]
  404928:	460a      	mov	r2, r1
  40492a:	2e00      	cmp	r6, #0
  40492c:	f102 0204 	add.w	r2, r2, #4
  404930:	f6ff ae0f 	blt.w	404552 <_vfiprintf_r+0x236>
  404934:	9207      	str	r2, [sp, #28]
  404936:	f898 2000 	ldrb.w	r2, [r8]
  40493a:	e561      	b.n	404400 <_vfiprintf_r+0xe4>
  40493c:	f898 2000 	ldrb.w	r2, [r8]
  404940:	2001      	movs	r0, #1
  404942:	252b      	movs	r5, #43	; 0x2b
  404944:	e55c      	b.n	404400 <_vfiprintf_r+0xe4>
  404946:	9907      	ldr	r1, [sp, #28]
  404948:	9608      	str	r6, [sp, #32]
  40494a:	f8d1 b000 	ldr.w	fp, [r1]
  40494e:	f04f 0200 	mov.w	r2, #0
  404952:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404956:	1d0e      	adds	r6, r1, #4
  404958:	f1bb 0f00 	cmp.w	fp, #0
  40495c:	f000 82e5 	beq.w	404f2a <_vfiprintf_r+0xc0e>
  404960:	1c67      	adds	r7, r4, #1
  404962:	f000 82c4 	beq.w	404eee <_vfiprintf_r+0xbd2>
  404966:	4622      	mov	r2, r4
  404968:	2100      	movs	r1, #0
  40496a:	4658      	mov	r0, fp
  40496c:	9301      	str	r3, [sp, #4]
  40496e:	f001 fbd7 	bl	406120 <memchr>
  404972:	9b01      	ldr	r3, [sp, #4]
  404974:	2800      	cmp	r0, #0
  404976:	f000 82e5 	beq.w	404f44 <_vfiprintf_r+0xc28>
  40497a:	eba0 020b 	sub.w	r2, r0, fp
  40497e:	9205      	str	r2, [sp, #20]
  404980:	9607      	str	r6, [sp, #28]
  404982:	9302      	str	r3, [sp, #8]
  404984:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404988:	2400      	movs	r4, #0
  40498a:	e619      	b.n	4045c0 <_vfiprintf_r+0x2a4>
  40498c:	f898 2000 	ldrb.w	r2, [r8]
  404990:	2a2a      	cmp	r2, #42	; 0x2a
  404992:	f108 0701 	add.w	r7, r8, #1
  404996:	f000 82e9 	beq.w	404f6c <_vfiprintf_r+0xc50>
  40499a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40499e:	2909      	cmp	r1, #9
  4049a0:	46b8      	mov	r8, r7
  4049a2:	f04f 0400 	mov.w	r4, #0
  4049a6:	f63f ad2d 	bhi.w	404404 <_vfiprintf_r+0xe8>
  4049aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4049ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4049b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4049b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4049ba:	2909      	cmp	r1, #9
  4049bc:	d9f5      	bls.n	4049aa <_vfiprintf_r+0x68e>
  4049be:	e521      	b.n	404404 <_vfiprintf_r+0xe8>
  4049c0:	f043 0320 	orr.w	r3, r3, #32
  4049c4:	f898 2000 	ldrb.w	r2, [r8]
  4049c8:	e51a      	b.n	404400 <_vfiprintf_r+0xe4>
  4049ca:	9608      	str	r6, [sp, #32]
  4049cc:	2800      	cmp	r0, #0
  4049ce:	f040 82db 	bne.w	404f88 <_vfiprintf_r+0xc6c>
  4049d2:	2a00      	cmp	r2, #0
  4049d4:	f000 80e7 	beq.w	404ba6 <_vfiprintf_r+0x88a>
  4049d8:	2101      	movs	r1, #1
  4049da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4049de:	f04f 0200 	mov.w	r2, #0
  4049e2:	9101      	str	r1, [sp, #4]
  4049e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4049e8:	9105      	str	r1, [sp, #20]
  4049ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4049ee:	e77b      	b.n	4048e8 <_vfiprintf_r+0x5cc>
  4049f0:	9a07      	ldr	r2, [sp, #28]
  4049f2:	6813      	ldr	r3, [r2, #0]
  4049f4:	3204      	adds	r2, #4
  4049f6:	9207      	str	r2, [sp, #28]
  4049f8:	9a03      	ldr	r2, [sp, #12]
  4049fa:	601a      	str	r2, [r3, #0]
  4049fc:	e4cb      	b.n	404396 <_vfiprintf_r+0x7a>
  4049fe:	aa0f      	add	r2, sp, #60	; 0x3c
  404a00:	9904      	ldr	r1, [sp, #16]
  404a02:	4620      	mov	r0, r4
  404a04:	f7ff fc4a 	bl	40429c <__sprint_r.part.0>
  404a08:	2800      	cmp	r0, #0
  404a0a:	f040 8139 	bne.w	404c80 <_vfiprintf_r+0x964>
  404a0e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404a10:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a12:	f101 0c01 	add.w	ip, r1, #1
  404a16:	46ce      	mov	lr, r9
  404a18:	e5ff      	b.n	40461a <_vfiprintf_r+0x2fe>
  404a1a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404a1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a1e:	1c48      	adds	r0, r1, #1
  404a20:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404a24:	2d00      	cmp	r5, #0
  404a26:	f43f ae22 	beq.w	40466e <_vfiprintf_r+0x352>
  404a2a:	3201      	adds	r2, #1
  404a2c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404a30:	2101      	movs	r1, #1
  404a32:	2807      	cmp	r0, #7
  404a34:	9211      	str	r2, [sp, #68]	; 0x44
  404a36:	9010      	str	r0, [sp, #64]	; 0x40
  404a38:	f8ca 5000 	str.w	r5, [sl]
  404a3c:	f8ca 1004 	str.w	r1, [sl, #4]
  404a40:	f340 8108 	ble.w	404c54 <_vfiprintf_r+0x938>
  404a44:	2a00      	cmp	r2, #0
  404a46:	f040 81bc 	bne.w	404dc2 <_vfiprintf_r+0xaa6>
  404a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a4c:	2b00      	cmp	r3, #0
  404a4e:	f43f ae1f 	beq.w	404690 <_vfiprintf_r+0x374>
  404a52:	ab0e      	add	r3, sp, #56	; 0x38
  404a54:	2202      	movs	r2, #2
  404a56:	4608      	mov	r0, r1
  404a58:	931c      	str	r3, [sp, #112]	; 0x70
  404a5a:	921d      	str	r2, [sp, #116]	; 0x74
  404a5c:	46ca      	mov	sl, r9
  404a5e:	4601      	mov	r1, r0
  404a60:	f10a 0a08 	add.w	sl, sl, #8
  404a64:	3001      	adds	r0, #1
  404a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a68:	2b80      	cmp	r3, #128	; 0x80
  404a6a:	f43f ae19 	beq.w	4046a0 <_vfiprintf_r+0x384>
  404a6e:	9b05      	ldr	r3, [sp, #20]
  404a70:	1ae4      	subs	r4, r4, r3
  404a72:	2c00      	cmp	r4, #0
  404a74:	dd2e      	ble.n	404ad4 <_vfiprintf_r+0x7b8>
  404a76:	2c10      	cmp	r4, #16
  404a78:	4db3      	ldr	r5, [pc, #716]	; (404d48 <_vfiprintf_r+0xa2c>)
  404a7a:	dd1e      	ble.n	404aba <_vfiprintf_r+0x79e>
  404a7c:	46d6      	mov	lr, sl
  404a7e:	2610      	movs	r6, #16
  404a80:	9f06      	ldr	r7, [sp, #24]
  404a82:	f8dd a010 	ldr.w	sl, [sp, #16]
  404a86:	e006      	b.n	404a96 <_vfiprintf_r+0x77a>
  404a88:	1c88      	adds	r0, r1, #2
  404a8a:	f10e 0e08 	add.w	lr, lr, #8
  404a8e:	4619      	mov	r1, r3
  404a90:	3c10      	subs	r4, #16
  404a92:	2c10      	cmp	r4, #16
  404a94:	dd10      	ble.n	404ab8 <_vfiprintf_r+0x79c>
  404a96:	1c4b      	adds	r3, r1, #1
  404a98:	3210      	adds	r2, #16
  404a9a:	2b07      	cmp	r3, #7
  404a9c:	9211      	str	r2, [sp, #68]	; 0x44
  404a9e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404aa2:	9310      	str	r3, [sp, #64]	; 0x40
  404aa4:	ddf0      	ble.n	404a88 <_vfiprintf_r+0x76c>
  404aa6:	2a00      	cmp	r2, #0
  404aa8:	d165      	bne.n	404b76 <_vfiprintf_r+0x85a>
  404aaa:	3c10      	subs	r4, #16
  404aac:	2c10      	cmp	r4, #16
  404aae:	f04f 0001 	mov.w	r0, #1
  404ab2:	4611      	mov	r1, r2
  404ab4:	46ce      	mov	lr, r9
  404ab6:	dcee      	bgt.n	404a96 <_vfiprintf_r+0x77a>
  404ab8:	46f2      	mov	sl, lr
  404aba:	4422      	add	r2, r4
  404abc:	2807      	cmp	r0, #7
  404abe:	9211      	str	r2, [sp, #68]	; 0x44
  404ac0:	f8ca 5000 	str.w	r5, [sl]
  404ac4:	f8ca 4004 	str.w	r4, [sl, #4]
  404ac8:	9010      	str	r0, [sp, #64]	; 0x40
  404aca:	f300 8085 	bgt.w	404bd8 <_vfiprintf_r+0x8bc>
  404ace:	f10a 0a08 	add.w	sl, sl, #8
  404ad2:	3001      	adds	r0, #1
  404ad4:	9905      	ldr	r1, [sp, #20]
  404ad6:	f8ca b000 	str.w	fp, [sl]
  404ada:	440a      	add	r2, r1
  404adc:	2807      	cmp	r0, #7
  404ade:	9211      	str	r2, [sp, #68]	; 0x44
  404ae0:	f8ca 1004 	str.w	r1, [sl, #4]
  404ae4:	9010      	str	r0, [sp, #64]	; 0x40
  404ae6:	f340 8082 	ble.w	404bee <_vfiprintf_r+0x8d2>
  404aea:	2a00      	cmp	r2, #0
  404aec:	f040 8118 	bne.w	404d20 <_vfiprintf_r+0xa04>
  404af0:	9b02      	ldr	r3, [sp, #8]
  404af2:	9210      	str	r2, [sp, #64]	; 0x40
  404af4:	0758      	lsls	r0, r3, #29
  404af6:	d535      	bpl.n	404b64 <_vfiprintf_r+0x848>
  404af8:	9b08      	ldr	r3, [sp, #32]
  404afa:	9901      	ldr	r1, [sp, #4]
  404afc:	1a5c      	subs	r4, r3, r1
  404afe:	2c00      	cmp	r4, #0
  404b00:	f340 80e7 	ble.w	404cd2 <_vfiprintf_r+0x9b6>
  404b04:	46ca      	mov	sl, r9
  404b06:	2c10      	cmp	r4, #16
  404b08:	f340 8218 	ble.w	404f3c <_vfiprintf_r+0xc20>
  404b0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b0e:	4e8f      	ldr	r6, [pc, #572]	; (404d4c <_vfiprintf_r+0xa30>)
  404b10:	9f06      	ldr	r7, [sp, #24]
  404b12:	f8dd b010 	ldr.w	fp, [sp, #16]
  404b16:	2510      	movs	r5, #16
  404b18:	e006      	b.n	404b28 <_vfiprintf_r+0x80c>
  404b1a:	1c88      	adds	r0, r1, #2
  404b1c:	f10a 0a08 	add.w	sl, sl, #8
  404b20:	4619      	mov	r1, r3
  404b22:	3c10      	subs	r4, #16
  404b24:	2c10      	cmp	r4, #16
  404b26:	dd11      	ble.n	404b4c <_vfiprintf_r+0x830>
  404b28:	1c4b      	adds	r3, r1, #1
  404b2a:	3210      	adds	r2, #16
  404b2c:	2b07      	cmp	r3, #7
  404b2e:	9211      	str	r2, [sp, #68]	; 0x44
  404b30:	f8ca 6000 	str.w	r6, [sl]
  404b34:	f8ca 5004 	str.w	r5, [sl, #4]
  404b38:	9310      	str	r3, [sp, #64]	; 0x40
  404b3a:	ddee      	ble.n	404b1a <_vfiprintf_r+0x7fe>
  404b3c:	bb42      	cbnz	r2, 404b90 <_vfiprintf_r+0x874>
  404b3e:	3c10      	subs	r4, #16
  404b40:	2c10      	cmp	r4, #16
  404b42:	f04f 0001 	mov.w	r0, #1
  404b46:	4611      	mov	r1, r2
  404b48:	46ca      	mov	sl, r9
  404b4a:	dced      	bgt.n	404b28 <_vfiprintf_r+0x80c>
  404b4c:	4422      	add	r2, r4
  404b4e:	2807      	cmp	r0, #7
  404b50:	9211      	str	r2, [sp, #68]	; 0x44
  404b52:	f8ca 6000 	str.w	r6, [sl]
  404b56:	f8ca 4004 	str.w	r4, [sl, #4]
  404b5a:	9010      	str	r0, [sp, #64]	; 0x40
  404b5c:	dd51      	ble.n	404c02 <_vfiprintf_r+0x8e6>
  404b5e:	2a00      	cmp	r2, #0
  404b60:	f040 819b 	bne.w	404e9a <_vfiprintf_r+0xb7e>
  404b64:	9b03      	ldr	r3, [sp, #12]
  404b66:	9a08      	ldr	r2, [sp, #32]
  404b68:	9901      	ldr	r1, [sp, #4]
  404b6a:	428a      	cmp	r2, r1
  404b6c:	bfac      	ite	ge
  404b6e:	189b      	addge	r3, r3, r2
  404b70:	185b      	addlt	r3, r3, r1
  404b72:	9303      	str	r3, [sp, #12]
  404b74:	e04e      	b.n	404c14 <_vfiprintf_r+0x8f8>
  404b76:	aa0f      	add	r2, sp, #60	; 0x3c
  404b78:	4651      	mov	r1, sl
  404b7a:	4638      	mov	r0, r7
  404b7c:	f7ff fb8e 	bl	40429c <__sprint_r.part.0>
  404b80:	2800      	cmp	r0, #0
  404b82:	f040 813f 	bne.w	404e04 <_vfiprintf_r+0xae8>
  404b86:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b8a:	1c48      	adds	r0, r1, #1
  404b8c:	46ce      	mov	lr, r9
  404b8e:	e77f      	b.n	404a90 <_vfiprintf_r+0x774>
  404b90:	aa0f      	add	r2, sp, #60	; 0x3c
  404b92:	4659      	mov	r1, fp
  404b94:	4638      	mov	r0, r7
  404b96:	f7ff fb81 	bl	40429c <__sprint_r.part.0>
  404b9a:	b960      	cbnz	r0, 404bb6 <_vfiprintf_r+0x89a>
  404b9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ba0:	1c48      	adds	r0, r1, #1
  404ba2:	46ca      	mov	sl, r9
  404ba4:	e7bd      	b.n	404b22 <_vfiprintf_r+0x806>
  404ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ba8:	f8dd b010 	ldr.w	fp, [sp, #16]
  404bac:	2b00      	cmp	r3, #0
  404bae:	f040 81d4 	bne.w	404f5a <_vfiprintf_r+0xc3e>
  404bb2:	2300      	movs	r3, #0
  404bb4:	9310      	str	r3, [sp, #64]	; 0x40
  404bb6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404bba:	f013 0f01 	tst.w	r3, #1
  404bbe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404bc2:	d102      	bne.n	404bca <_vfiprintf_r+0x8ae>
  404bc4:	059a      	lsls	r2, r3, #22
  404bc6:	f140 80de 	bpl.w	404d86 <_vfiprintf_r+0xa6a>
  404bca:	065b      	lsls	r3, r3, #25
  404bcc:	f53f acb2 	bmi.w	404534 <_vfiprintf_r+0x218>
  404bd0:	9803      	ldr	r0, [sp, #12]
  404bd2:	b02d      	add	sp, #180	; 0xb4
  404bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bd8:	2a00      	cmp	r2, #0
  404bda:	f040 8106 	bne.w	404dea <_vfiprintf_r+0xace>
  404bde:	9a05      	ldr	r2, [sp, #20]
  404be0:	921d      	str	r2, [sp, #116]	; 0x74
  404be2:	2301      	movs	r3, #1
  404be4:	9211      	str	r2, [sp, #68]	; 0x44
  404be6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404bea:	9310      	str	r3, [sp, #64]	; 0x40
  404bec:	46ca      	mov	sl, r9
  404bee:	f10a 0a08 	add.w	sl, sl, #8
  404bf2:	9b02      	ldr	r3, [sp, #8]
  404bf4:	0759      	lsls	r1, r3, #29
  404bf6:	d504      	bpl.n	404c02 <_vfiprintf_r+0x8e6>
  404bf8:	9b08      	ldr	r3, [sp, #32]
  404bfa:	9901      	ldr	r1, [sp, #4]
  404bfc:	1a5c      	subs	r4, r3, r1
  404bfe:	2c00      	cmp	r4, #0
  404c00:	dc81      	bgt.n	404b06 <_vfiprintf_r+0x7ea>
  404c02:	9b03      	ldr	r3, [sp, #12]
  404c04:	9908      	ldr	r1, [sp, #32]
  404c06:	9801      	ldr	r0, [sp, #4]
  404c08:	4281      	cmp	r1, r0
  404c0a:	bfac      	ite	ge
  404c0c:	185b      	addge	r3, r3, r1
  404c0e:	181b      	addlt	r3, r3, r0
  404c10:	9303      	str	r3, [sp, #12]
  404c12:	bb72      	cbnz	r2, 404c72 <_vfiprintf_r+0x956>
  404c14:	2300      	movs	r3, #0
  404c16:	9310      	str	r3, [sp, #64]	; 0x40
  404c18:	46ca      	mov	sl, r9
  404c1a:	f7ff bbbc 	b.w	404396 <_vfiprintf_r+0x7a>
  404c1e:	aa0f      	add	r2, sp, #60	; 0x3c
  404c20:	9904      	ldr	r1, [sp, #16]
  404c22:	4620      	mov	r0, r4
  404c24:	f7ff fb3a 	bl	40429c <__sprint_r.part.0>
  404c28:	bb50      	cbnz	r0, 404c80 <_vfiprintf_r+0x964>
  404c2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404c2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c2e:	f101 0e01 	add.w	lr, r1, #1
  404c32:	46cc      	mov	ip, r9
  404c34:	e548      	b.n	4046c8 <_vfiprintf_r+0x3ac>
  404c36:	2a00      	cmp	r2, #0
  404c38:	f040 8140 	bne.w	404ebc <_vfiprintf_r+0xba0>
  404c3c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404c40:	2900      	cmp	r1, #0
  404c42:	f000 811b 	beq.w	404e7c <_vfiprintf_r+0xb60>
  404c46:	2201      	movs	r2, #1
  404c48:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404c4c:	4610      	mov	r0, r2
  404c4e:	921d      	str	r2, [sp, #116]	; 0x74
  404c50:	911c      	str	r1, [sp, #112]	; 0x70
  404c52:	46ca      	mov	sl, r9
  404c54:	4601      	mov	r1, r0
  404c56:	f10a 0a08 	add.w	sl, sl, #8
  404c5a:	3001      	adds	r0, #1
  404c5c:	e507      	b.n	40466e <_vfiprintf_r+0x352>
  404c5e:	9b02      	ldr	r3, [sp, #8]
  404c60:	2a01      	cmp	r2, #1
  404c62:	f000 8098 	beq.w	404d96 <_vfiprintf_r+0xa7a>
  404c66:	2a02      	cmp	r2, #2
  404c68:	d10d      	bne.n	404c86 <_vfiprintf_r+0x96a>
  404c6a:	9302      	str	r3, [sp, #8]
  404c6c:	2600      	movs	r6, #0
  404c6e:	2700      	movs	r7, #0
  404c70:	e5b0      	b.n	4047d4 <_vfiprintf_r+0x4b8>
  404c72:	aa0f      	add	r2, sp, #60	; 0x3c
  404c74:	9904      	ldr	r1, [sp, #16]
  404c76:	9806      	ldr	r0, [sp, #24]
  404c78:	f7ff fb10 	bl	40429c <__sprint_r.part.0>
  404c7c:	2800      	cmp	r0, #0
  404c7e:	d0c9      	beq.n	404c14 <_vfiprintf_r+0x8f8>
  404c80:	f8dd b010 	ldr.w	fp, [sp, #16]
  404c84:	e797      	b.n	404bb6 <_vfiprintf_r+0x89a>
  404c86:	9302      	str	r3, [sp, #8]
  404c88:	2600      	movs	r6, #0
  404c8a:	2700      	movs	r7, #0
  404c8c:	4649      	mov	r1, r9
  404c8e:	e000      	b.n	404c92 <_vfiprintf_r+0x976>
  404c90:	4659      	mov	r1, fp
  404c92:	08f2      	lsrs	r2, r6, #3
  404c94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404c98:	08f8      	lsrs	r0, r7, #3
  404c9a:	f006 0307 	and.w	r3, r6, #7
  404c9e:	4607      	mov	r7, r0
  404ca0:	4616      	mov	r6, r2
  404ca2:	3330      	adds	r3, #48	; 0x30
  404ca4:	ea56 0207 	orrs.w	r2, r6, r7
  404ca8:	f801 3c01 	strb.w	r3, [r1, #-1]
  404cac:	f101 3bff 	add.w	fp, r1, #4294967295
  404cb0:	d1ee      	bne.n	404c90 <_vfiprintf_r+0x974>
  404cb2:	9a02      	ldr	r2, [sp, #8]
  404cb4:	07d6      	lsls	r6, r2, #31
  404cb6:	f57f ad9d 	bpl.w	4047f4 <_vfiprintf_r+0x4d8>
  404cba:	2b30      	cmp	r3, #48	; 0x30
  404cbc:	f43f ad9a 	beq.w	4047f4 <_vfiprintf_r+0x4d8>
  404cc0:	3902      	subs	r1, #2
  404cc2:	2330      	movs	r3, #48	; 0x30
  404cc4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404cc8:	eba9 0301 	sub.w	r3, r9, r1
  404ccc:	9305      	str	r3, [sp, #20]
  404cce:	468b      	mov	fp, r1
  404cd0:	e476      	b.n	4045c0 <_vfiprintf_r+0x2a4>
  404cd2:	9b03      	ldr	r3, [sp, #12]
  404cd4:	9a08      	ldr	r2, [sp, #32]
  404cd6:	428a      	cmp	r2, r1
  404cd8:	bfac      	ite	ge
  404cda:	189b      	addge	r3, r3, r2
  404cdc:	185b      	addlt	r3, r3, r1
  404cde:	9303      	str	r3, [sp, #12]
  404ce0:	e798      	b.n	404c14 <_vfiprintf_r+0x8f8>
  404ce2:	2202      	movs	r2, #2
  404ce4:	e44d      	b.n	404582 <_vfiprintf_r+0x266>
  404ce6:	2f00      	cmp	r7, #0
  404ce8:	bf08      	it	eq
  404cea:	2e0a      	cmpeq	r6, #10
  404cec:	d352      	bcc.n	404d94 <_vfiprintf_r+0xa78>
  404cee:	46cb      	mov	fp, r9
  404cf0:	4630      	mov	r0, r6
  404cf2:	4639      	mov	r1, r7
  404cf4:	220a      	movs	r2, #10
  404cf6:	2300      	movs	r3, #0
  404cf8:	f7fe fed6 	bl	403aa8 <__aeabi_uldivmod>
  404cfc:	3230      	adds	r2, #48	; 0x30
  404cfe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404d02:	4630      	mov	r0, r6
  404d04:	4639      	mov	r1, r7
  404d06:	2300      	movs	r3, #0
  404d08:	220a      	movs	r2, #10
  404d0a:	f7fe fecd 	bl	403aa8 <__aeabi_uldivmod>
  404d0e:	4606      	mov	r6, r0
  404d10:	460f      	mov	r7, r1
  404d12:	ea56 0307 	orrs.w	r3, r6, r7
  404d16:	d1eb      	bne.n	404cf0 <_vfiprintf_r+0x9d4>
  404d18:	e56c      	b.n	4047f4 <_vfiprintf_r+0x4d8>
  404d1a:	9405      	str	r4, [sp, #20]
  404d1c:	46cb      	mov	fp, r9
  404d1e:	e44f      	b.n	4045c0 <_vfiprintf_r+0x2a4>
  404d20:	aa0f      	add	r2, sp, #60	; 0x3c
  404d22:	9904      	ldr	r1, [sp, #16]
  404d24:	9806      	ldr	r0, [sp, #24]
  404d26:	f7ff fab9 	bl	40429c <__sprint_r.part.0>
  404d2a:	2800      	cmp	r0, #0
  404d2c:	d1a8      	bne.n	404c80 <_vfiprintf_r+0x964>
  404d2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d30:	46ca      	mov	sl, r9
  404d32:	e75e      	b.n	404bf2 <_vfiprintf_r+0x8d6>
  404d34:	aa0f      	add	r2, sp, #60	; 0x3c
  404d36:	9904      	ldr	r1, [sp, #16]
  404d38:	9806      	ldr	r0, [sp, #24]
  404d3a:	f7ff faaf 	bl	40429c <__sprint_r.part.0>
  404d3e:	2800      	cmp	r0, #0
  404d40:	d19e      	bne.n	404c80 <_vfiprintf_r+0x964>
  404d42:	46ca      	mov	sl, r9
  404d44:	f7ff bbc0 	b.w	4044c8 <_vfiprintf_r+0x1ac>
  404d48:	00406b50 	.word	0x00406b50
  404d4c:	00406b40 	.word	0x00406b40
  404d50:	3104      	adds	r1, #4
  404d52:	6816      	ldr	r6, [r2, #0]
  404d54:	9107      	str	r1, [sp, #28]
  404d56:	2201      	movs	r2, #1
  404d58:	2700      	movs	r7, #0
  404d5a:	e412      	b.n	404582 <_vfiprintf_r+0x266>
  404d5c:	9807      	ldr	r0, [sp, #28]
  404d5e:	4601      	mov	r1, r0
  404d60:	3104      	adds	r1, #4
  404d62:	6806      	ldr	r6, [r0, #0]
  404d64:	9107      	str	r1, [sp, #28]
  404d66:	2700      	movs	r7, #0
  404d68:	e40b      	b.n	404582 <_vfiprintf_r+0x266>
  404d6a:	680e      	ldr	r6, [r1, #0]
  404d6c:	3104      	adds	r1, #4
  404d6e:	9107      	str	r1, [sp, #28]
  404d70:	2700      	movs	r7, #0
  404d72:	e591      	b.n	404898 <_vfiprintf_r+0x57c>
  404d74:	9907      	ldr	r1, [sp, #28]
  404d76:	680e      	ldr	r6, [r1, #0]
  404d78:	460a      	mov	r2, r1
  404d7a:	17f7      	asrs	r7, r6, #31
  404d7c:	3204      	adds	r2, #4
  404d7e:	9207      	str	r2, [sp, #28]
  404d80:	4630      	mov	r0, r6
  404d82:	4639      	mov	r1, r7
  404d84:	e50f      	b.n	4047a6 <_vfiprintf_r+0x48a>
  404d86:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404d8a:	f000 fe7f 	bl	405a8c <__retarget_lock_release_recursive>
  404d8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404d92:	e71a      	b.n	404bca <_vfiprintf_r+0x8ae>
  404d94:	9b02      	ldr	r3, [sp, #8]
  404d96:	9302      	str	r3, [sp, #8]
  404d98:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404d9c:	3630      	adds	r6, #48	; 0x30
  404d9e:	2301      	movs	r3, #1
  404da0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404da4:	9305      	str	r3, [sp, #20]
  404da6:	e40b      	b.n	4045c0 <_vfiprintf_r+0x2a4>
  404da8:	aa0f      	add	r2, sp, #60	; 0x3c
  404daa:	9904      	ldr	r1, [sp, #16]
  404dac:	9806      	ldr	r0, [sp, #24]
  404dae:	f7ff fa75 	bl	40429c <__sprint_r.part.0>
  404db2:	2800      	cmp	r0, #0
  404db4:	f47f af64 	bne.w	404c80 <_vfiprintf_r+0x964>
  404db8:	9910      	ldr	r1, [sp, #64]	; 0x40
  404dba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dbc:	1c48      	adds	r0, r1, #1
  404dbe:	46ca      	mov	sl, r9
  404dc0:	e651      	b.n	404a66 <_vfiprintf_r+0x74a>
  404dc2:	aa0f      	add	r2, sp, #60	; 0x3c
  404dc4:	9904      	ldr	r1, [sp, #16]
  404dc6:	9806      	ldr	r0, [sp, #24]
  404dc8:	f7ff fa68 	bl	40429c <__sprint_r.part.0>
  404dcc:	2800      	cmp	r0, #0
  404dce:	f47f af57 	bne.w	404c80 <_vfiprintf_r+0x964>
  404dd2:	9910      	ldr	r1, [sp, #64]	; 0x40
  404dd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dd6:	1c48      	adds	r0, r1, #1
  404dd8:	46ca      	mov	sl, r9
  404dda:	e448      	b.n	40466e <_vfiprintf_r+0x352>
  404ddc:	2a00      	cmp	r2, #0
  404dde:	f040 8091 	bne.w	404f04 <_vfiprintf_r+0xbe8>
  404de2:	2001      	movs	r0, #1
  404de4:	4611      	mov	r1, r2
  404de6:	46ca      	mov	sl, r9
  404de8:	e641      	b.n	404a6e <_vfiprintf_r+0x752>
  404dea:	aa0f      	add	r2, sp, #60	; 0x3c
  404dec:	9904      	ldr	r1, [sp, #16]
  404dee:	9806      	ldr	r0, [sp, #24]
  404df0:	f7ff fa54 	bl	40429c <__sprint_r.part.0>
  404df4:	2800      	cmp	r0, #0
  404df6:	f47f af43 	bne.w	404c80 <_vfiprintf_r+0x964>
  404dfa:	9810      	ldr	r0, [sp, #64]	; 0x40
  404dfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dfe:	3001      	adds	r0, #1
  404e00:	46ca      	mov	sl, r9
  404e02:	e667      	b.n	404ad4 <_vfiprintf_r+0x7b8>
  404e04:	46d3      	mov	fp, sl
  404e06:	e6d6      	b.n	404bb6 <_vfiprintf_r+0x89a>
  404e08:	9e07      	ldr	r6, [sp, #28]
  404e0a:	3607      	adds	r6, #7
  404e0c:	f026 0207 	bic.w	r2, r6, #7
  404e10:	f102 0108 	add.w	r1, r2, #8
  404e14:	e9d2 6700 	ldrd	r6, r7, [r2]
  404e18:	9107      	str	r1, [sp, #28]
  404e1a:	2201      	movs	r2, #1
  404e1c:	f7ff bbb1 	b.w	404582 <_vfiprintf_r+0x266>
  404e20:	9e07      	ldr	r6, [sp, #28]
  404e22:	3607      	adds	r6, #7
  404e24:	f026 0607 	bic.w	r6, r6, #7
  404e28:	e9d6 0100 	ldrd	r0, r1, [r6]
  404e2c:	f106 0208 	add.w	r2, r6, #8
  404e30:	9207      	str	r2, [sp, #28]
  404e32:	4606      	mov	r6, r0
  404e34:	460f      	mov	r7, r1
  404e36:	e4b6      	b.n	4047a6 <_vfiprintf_r+0x48a>
  404e38:	9e07      	ldr	r6, [sp, #28]
  404e3a:	3607      	adds	r6, #7
  404e3c:	f026 0207 	bic.w	r2, r6, #7
  404e40:	f102 0108 	add.w	r1, r2, #8
  404e44:	e9d2 6700 	ldrd	r6, r7, [r2]
  404e48:	9107      	str	r1, [sp, #28]
  404e4a:	2200      	movs	r2, #0
  404e4c:	f7ff bb99 	b.w	404582 <_vfiprintf_r+0x266>
  404e50:	9e07      	ldr	r6, [sp, #28]
  404e52:	3607      	adds	r6, #7
  404e54:	f026 0107 	bic.w	r1, r6, #7
  404e58:	f101 0008 	add.w	r0, r1, #8
  404e5c:	9007      	str	r0, [sp, #28]
  404e5e:	e9d1 6700 	ldrd	r6, r7, [r1]
  404e62:	e519      	b.n	404898 <_vfiprintf_r+0x57c>
  404e64:	46cb      	mov	fp, r9
  404e66:	f7ff bbab 	b.w	4045c0 <_vfiprintf_r+0x2a4>
  404e6a:	252d      	movs	r5, #45	; 0x2d
  404e6c:	4276      	negs	r6, r6
  404e6e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404e72:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404e76:	2201      	movs	r2, #1
  404e78:	f7ff bb88 	b.w	40458c <_vfiprintf_r+0x270>
  404e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404e7e:	b9b3      	cbnz	r3, 404eae <_vfiprintf_r+0xb92>
  404e80:	4611      	mov	r1, r2
  404e82:	2001      	movs	r0, #1
  404e84:	46ca      	mov	sl, r9
  404e86:	e5f2      	b.n	404a6e <_vfiprintf_r+0x752>
  404e88:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e8c:	f000 fdfe 	bl	405a8c <__retarget_lock_release_recursive>
  404e90:	f04f 33ff 	mov.w	r3, #4294967295
  404e94:	9303      	str	r3, [sp, #12]
  404e96:	f7ff bb50 	b.w	40453a <_vfiprintf_r+0x21e>
  404e9a:	aa0f      	add	r2, sp, #60	; 0x3c
  404e9c:	9904      	ldr	r1, [sp, #16]
  404e9e:	9806      	ldr	r0, [sp, #24]
  404ea0:	f7ff f9fc 	bl	40429c <__sprint_r.part.0>
  404ea4:	2800      	cmp	r0, #0
  404ea6:	f47f aeeb 	bne.w	404c80 <_vfiprintf_r+0x964>
  404eaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404eac:	e6a9      	b.n	404c02 <_vfiprintf_r+0x8e6>
  404eae:	ab0e      	add	r3, sp, #56	; 0x38
  404eb0:	2202      	movs	r2, #2
  404eb2:	931c      	str	r3, [sp, #112]	; 0x70
  404eb4:	921d      	str	r2, [sp, #116]	; 0x74
  404eb6:	2001      	movs	r0, #1
  404eb8:	46ca      	mov	sl, r9
  404eba:	e5d0      	b.n	404a5e <_vfiprintf_r+0x742>
  404ebc:	aa0f      	add	r2, sp, #60	; 0x3c
  404ebe:	9904      	ldr	r1, [sp, #16]
  404ec0:	9806      	ldr	r0, [sp, #24]
  404ec2:	f7ff f9eb 	bl	40429c <__sprint_r.part.0>
  404ec6:	2800      	cmp	r0, #0
  404ec8:	f47f aeda 	bne.w	404c80 <_vfiprintf_r+0x964>
  404ecc:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ece:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ed0:	1c48      	adds	r0, r1, #1
  404ed2:	46ca      	mov	sl, r9
  404ed4:	e5a4      	b.n	404a20 <_vfiprintf_r+0x704>
  404ed6:	9a07      	ldr	r2, [sp, #28]
  404ed8:	9903      	ldr	r1, [sp, #12]
  404eda:	6813      	ldr	r3, [r2, #0]
  404edc:	17cd      	asrs	r5, r1, #31
  404ede:	4608      	mov	r0, r1
  404ee0:	3204      	adds	r2, #4
  404ee2:	4629      	mov	r1, r5
  404ee4:	9207      	str	r2, [sp, #28]
  404ee6:	e9c3 0100 	strd	r0, r1, [r3]
  404eea:	f7ff ba54 	b.w	404396 <_vfiprintf_r+0x7a>
  404eee:	4658      	mov	r0, fp
  404ef0:	9607      	str	r6, [sp, #28]
  404ef2:	9302      	str	r3, [sp, #8]
  404ef4:	f7ff f964 	bl	4041c0 <strlen>
  404ef8:	2400      	movs	r4, #0
  404efa:	9005      	str	r0, [sp, #20]
  404efc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404f00:	f7ff bb5e 	b.w	4045c0 <_vfiprintf_r+0x2a4>
  404f04:	aa0f      	add	r2, sp, #60	; 0x3c
  404f06:	9904      	ldr	r1, [sp, #16]
  404f08:	9806      	ldr	r0, [sp, #24]
  404f0a:	f7ff f9c7 	bl	40429c <__sprint_r.part.0>
  404f0e:	2800      	cmp	r0, #0
  404f10:	f47f aeb6 	bne.w	404c80 <_vfiprintf_r+0x964>
  404f14:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f18:	1c48      	adds	r0, r1, #1
  404f1a:	46ca      	mov	sl, r9
  404f1c:	e5a7      	b.n	404a6e <_vfiprintf_r+0x752>
  404f1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f22:	4e20      	ldr	r6, [pc, #128]	; (404fa4 <_vfiprintf_r+0xc88>)
  404f24:	3101      	adds	r1, #1
  404f26:	f7ff bb90 	b.w	40464a <_vfiprintf_r+0x32e>
  404f2a:	2c06      	cmp	r4, #6
  404f2c:	bf28      	it	cs
  404f2e:	2406      	movcs	r4, #6
  404f30:	9405      	str	r4, [sp, #20]
  404f32:	9607      	str	r6, [sp, #28]
  404f34:	9401      	str	r4, [sp, #4]
  404f36:	f8df b070 	ldr.w	fp, [pc, #112]	; 404fa8 <_vfiprintf_r+0xc8c>
  404f3a:	e4d5      	b.n	4048e8 <_vfiprintf_r+0x5cc>
  404f3c:	9810      	ldr	r0, [sp, #64]	; 0x40
  404f3e:	4e19      	ldr	r6, [pc, #100]	; (404fa4 <_vfiprintf_r+0xc88>)
  404f40:	3001      	adds	r0, #1
  404f42:	e603      	b.n	404b4c <_vfiprintf_r+0x830>
  404f44:	9405      	str	r4, [sp, #20]
  404f46:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404f4a:	9607      	str	r6, [sp, #28]
  404f4c:	9302      	str	r3, [sp, #8]
  404f4e:	4604      	mov	r4, r0
  404f50:	f7ff bb36 	b.w	4045c0 <_vfiprintf_r+0x2a4>
  404f54:	4686      	mov	lr, r0
  404f56:	f7ff bbce 	b.w	4046f6 <_vfiprintf_r+0x3da>
  404f5a:	9806      	ldr	r0, [sp, #24]
  404f5c:	aa0f      	add	r2, sp, #60	; 0x3c
  404f5e:	4659      	mov	r1, fp
  404f60:	f7ff f99c 	bl	40429c <__sprint_r.part.0>
  404f64:	2800      	cmp	r0, #0
  404f66:	f43f ae24 	beq.w	404bb2 <_vfiprintf_r+0x896>
  404f6a:	e624      	b.n	404bb6 <_vfiprintf_r+0x89a>
  404f6c:	9907      	ldr	r1, [sp, #28]
  404f6e:	f898 2001 	ldrb.w	r2, [r8, #1]
  404f72:	680c      	ldr	r4, [r1, #0]
  404f74:	3104      	adds	r1, #4
  404f76:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  404f7a:	46b8      	mov	r8, r7
  404f7c:	9107      	str	r1, [sp, #28]
  404f7e:	f7ff ba3f 	b.w	404400 <_vfiprintf_r+0xe4>
  404f82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f86:	e43c      	b.n	404802 <_vfiprintf_r+0x4e6>
  404f88:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f8c:	e521      	b.n	4049d2 <_vfiprintf_r+0x6b6>
  404f8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f92:	f7ff bbf4 	b.w	40477e <_vfiprintf_r+0x462>
  404f96:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f9a:	e491      	b.n	4048c0 <_vfiprintf_r+0x5a4>
  404f9c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404fa0:	e469      	b.n	404876 <_vfiprintf_r+0x55a>
  404fa2:	bf00      	nop
  404fa4:	00406b40 	.word	0x00406b40
  404fa8:	00406b38 	.word	0x00406b38

00404fac <__sbprintf>:
  404fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404fb0:	460c      	mov	r4, r1
  404fb2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404fb6:	8989      	ldrh	r1, [r1, #12]
  404fb8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404fba:	89e5      	ldrh	r5, [r4, #14]
  404fbc:	9619      	str	r6, [sp, #100]	; 0x64
  404fbe:	f021 0102 	bic.w	r1, r1, #2
  404fc2:	4606      	mov	r6, r0
  404fc4:	69e0      	ldr	r0, [r4, #28]
  404fc6:	f8ad 100c 	strh.w	r1, [sp, #12]
  404fca:	4617      	mov	r7, r2
  404fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404fd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404fd2:	f8ad 500e 	strh.w	r5, [sp, #14]
  404fd6:	4698      	mov	r8, r3
  404fd8:	ad1a      	add	r5, sp, #104	; 0x68
  404fda:	2300      	movs	r3, #0
  404fdc:	9007      	str	r0, [sp, #28]
  404fde:	a816      	add	r0, sp, #88	; 0x58
  404fe0:	9209      	str	r2, [sp, #36]	; 0x24
  404fe2:	9306      	str	r3, [sp, #24]
  404fe4:	9500      	str	r5, [sp, #0]
  404fe6:	9504      	str	r5, [sp, #16]
  404fe8:	9102      	str	r1, [sp, #8]
  404fea:	9105      	str	r1, [sp, #20]
  404fec:	f000 fd48 	bl	405a80 <__retarget_lock_init_recursive>
  404ff0:	4643      	mov	r3, r8
  404ff2:	463a      	mov	r2, r7
  404ff4:	4669      	mov	r1, sp
  404ff6:	4630      	mov	r0, r6
  404ff8:	f7ff f990 	bl	40431c <_vfiprintf_r>
  404ffc:	1e05      	subs	r5, r0, #0
  404ffe:	db07      	blt.n	405010 <__sbprintf+0x64>
  405000:	4630      	mov	r0, r6
  405002:	4669      	mov	r1, sp
  405004:	f000 f928 	bl	405258 <_fflush_r>
  405008:	2800      	cmp	r0, #0
  40500a:	bf18      	it	ne
  40500c:	f04f 35ff 	movne.w	r5, #4294967295
  405010:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405014:	065b      	lsls	r3, r3, #25
  405016:	d503      	bpl.n	405020 <__sbprintf+0x74>
  405018:	89a3      	ldrh	r3, [r4, #12]
  40501a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40501e:	81a3      	strh	r3, [r4, #12]
  405020:	9816      	ldr	r0, [sp, #88]	; 0x58
  405022:	f000 fd2f 	bl	405a84 <__retarget_lock_close_recursive>
  405026:	4628      	mov	r0, r5
  405028:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405030 <__swsetup_r>:
  405030:	b538      	push	{r3, r4, r5, lr}
  405032:	4b30      	ldr	r3, [pc, #192]	; (4050f4 <__swsetup_r+0xc4>)
  405034:	681b      	ldr	r3, [r3, #0]
  405036:	4605      	mov	r5, r0
  405038:	460c      	mov	r4, r1
  40503a:	b113      	cbz	r3, 405042 <__swsetup_r+0x12>
  40503c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40503e:	2a00      	cmp	r2, #0
  405040:	d038      	beq.n	4050b4 <__swsetup_r+0x84>
  405042:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405046:	b293      	uxth	r3, r2
  405048:	0718      	lsls	r0, r3, #28
  40504a:	d50c      	bpl.n	405066 <__swsetup_r+0x36>
  40504c:	6920      	ldr	r0, [r4, #16]
  40504e:	b1a8      	cbz	r0, 40507c <__swsetup_r+0x4c>
  405050:	f013 0201 	ands.w	r2, r3, #1
  405054:	d01e      	beq.n	405094 <__swsetup_r+0x64>
  405056:	6963      	ldr	r3, [r4, #20]
  405058:	2200      	movs	r2, #0
  40505a:	425b      	negs	r3, r3
  40505c:	61a3      	str	r3, [r4, #24]
  40505e:	60a2      	str	r2, [r4, #8]
  405060:	b1f0      	cbz	r0, 4050a0 <__swsetup_r+0x70>
  405062:	2000      	movs	r0, #0
  405064:	bd38      	pop	{r3, r4, r5, pc}
  405066:	06d9      	lsls	r1, r3, #27
  405068:	d53c      	bpl.n	4050e4 <__swsetup_r+0xb4>
  40506a:	0758      	lsls	r0, r3, #29
  40506c:	d426      	bmi.n	4050bc <__swsetup_r+0x8c>
  40506e:	6920      	ldr	r0, [r4, #16]
  405070:	f042 0308 	orr.w	r3, r2, #8
  405074:	81a3      	strh	r3, [r4, #12]
  405076:	b29b      	uxth	r3, r3
  405078:	2800      	cmp	r0, #0
  40507a:	d1e9      	bne.n	405050 <__swsetup_r+0x20>
  40507c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405080:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405084:	d0e4      	beq.n	405050 <__swsetup_r+0x20>
  405086:	4628      	mov	r0, r5
  405088:	4621      	mov	r1, r4
  40508a:	f000 fd2f 	bl	405aec <__smakebuf_r>
  40508e:	89a3      	ldrh	r3, [r4, #12]
  405090:	6920      	ldr	r0, [r4, #16]
  405092:	e7dd      	b.n	405050 <__swsetup_r+0x20>
  405094:	0799      	lsls	r1, r3, #30
  405096:	bf58      	it	pl
  405098:	6962      	ldrpl	r2, [r4, #20]
  40509a:	60a2      	str	r2, [r4, #8]
  40509c:	2800      	cmp	r0, #0
  40509e:	d1e0      	bne.n	405062 <__swsetup_r+0x32>
  4050a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4050a4:	061a      	lsls	r2, r3, #24
  4050a6:	d5dd      	bpl.n	405064 <__swsetup_r+0x34>
  4050a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4050ac:	81a3      	strh	r3, [r4, #12]
  4050ae:	f04f 30ff 	mov.w	r0, #4294967295
  4050b2:	bd38      	pop	{r3, r4, r5, pc}
  4050b4:	4618      	mov	r0, r3
  4050b6:	f000 f927 	bl	405308 <__sinit>
  4050ba:	e7c2      	b.n	405042 <__swsetup_r+0x12>
  4050bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4050be:	b151      	cbz	r1, 4050d6 <__swsetup_r+0xa6>
  4050c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4050c4:	4299      	cmp	r1, r3
  4050c6:	d004      	beq.n	4050d2 <__swsetup_r+0xa2>
  4050c8:	4628      	mov	r0, r5
  4050ca:	f000 fa43 	bl	405554 <_free_r>
  4050ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4050d2:	2300      	movs	r3, #0
  4050d4:	6323      	str	r3, [r4, #48]	; 0x30
  4050d6:	2300      	movs	r3, #0
  4050d8:	6920      	ldr	r0, [r4, #16]
  4050da:	6063      	str	r3, [r4, #4]
  4050dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4050e0:	6020      	str	r0, [r4, #0]
  4050e2:	e7c5      	b.n	405070 <__swsetup_r+0x40>
  4050e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4050e8:	2309      	movs	r3, #9
  4050ea:	602b      	str	r3, [r5, #0]
  4050ec:	f04f 30ff 	mov.w	r0, #4294967295
  4050f0:	81a2      	strh	r2, [r4, #12]
  4050f2:	bd38      	pop	{r3, r4, r5, pc}
  4050f4:	20400018 	.word	0x20400018

004050f8 <register_fini>:
  4050f8:	4b02      	ldr	r3, [pc, #8]	; (405104 <register_fini+0xc>)
  4050fa:	b113      	cbz	r3, 405102 <register_fini+0xa>
  4050fc:	4802      	ldr	r0, [pc, #8]	; (405108 <register_fini+0x10>)
  4050fe:	f000 b805 	b.w	40510c <atexit>
  405102:	4770      	bx	lr
  405104:	00000000 	.word	0x00000000
  405108:	00405379 	.word	0x00405379

0040510c <atexit>:
  40510c:	2300      	movs	r3, #0
  40510e:	4601      	mov	r1, r0
  405110:	461a      	mov	r2, r3
  405112:	4618      	mov	r0, r3
  405114:	f001 bb66 	b.w	4067e4 <__register_exitproc>

00405118 <__sflush_r>:
  405118:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40511c:	b29a      	uxth	r2, r3
  40511e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405122:	460d      	mov	r5, r1
  405124:	0711      	lsls	r1, r2, #28
  405126:	4680      	mov	r8, r0
  405128:	d43a      	bmi.n	4051a0 <__sflush_r+0x88>
  40512a:	686a      	ldr	r2, [r5, #4]
  40512c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405130:	2a00      	cmp	r2, #0
  405132:	81ab      	strh	r3, [r5, #12]
  405134:	dd6f      	ble.n	405216 <__sflush_r+0xfe>
  405136:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405138:	2c00      	cmp	r4, #0
  40513a:	d049      	beq.n	4051d0 <__sflush_r+0xb8>
  40513c:	2200      	movs	r2, #0
  40513e:	b29b      	uxth	r3, r3
  405140:	f8d8 6000 	ldr.w	r6, [r8]
  405144:	f8c8 2000 	str.w	r2, [r8]
  405148:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40514c:	d067      	beq.n	40521e <__sflush_r+0x106>
  40514e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405150:	075f      	lsls	r7, r3, #29
  405152:	d505      	bpl.n	405160 <__sflush_r+0x48>
  405154:	6869      	ldr	r1, [r5, #4]
  405156:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405158:	1a52      	subs	r2, r2, r1
  40515a:	b10b      	cbz	r3, 405160 <__sflush_r+0x48>
  40515c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40515e:	1ad2      	subs	r2, r2, r3
  405160:	2300      	movs	r3, #0
  405162:	69e9      	ldr	r1, [r5, #28]
  405164:	4640      	mov	r0, r8
  405166:	47a0      	blx	r4
  405168:	1c44      	adds	r4, r0, #1
  40516a:	d03c      	beq.n	4051e6 <__sflush_r+0xce>
  40516c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405170:	692a      	ldr	r2, [r5, #16]
  405172:	602a      	str	r2, [r5, #0]
  405174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405178:	2200      	movs	r2, #0
  40517a:	81ab      	strh	r3, [r5, #12]
  40517c:	04db      	lsls	r3, r3, #19
  40517e:	606a      	str	r2, [r5, #4]
  405180:	d447      	bmi.n	405212 <__sflush_r+0xfa>
  405182:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405184:	f8c8 6000 	str.w	r6, [r8]
  405188:	b311      	cbz	r1, 4051d0 <__sflush_r+0xb8>
  40518a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40518e:	4299      	cmp	r1, r3
  405190:	d002      	beq.n	405198 <__sflush_r+0x80>
  405192:	4640      	mov	r0, r8
  405194:	f000 f9de 	bl	405554 <_free_r>
  405198:	2000      	movs	r0, #0
  40519a:	6328      	str	r0, [r5, #48]	; 0x30
  40519c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4051a0:	692e      	ldr	r6, [r5, #16]
  4051a2:	b1ae      	cbz	r6, 4051d0 <__sflush_r+0xb8>
  4051a4:	682c      	ldr	r4, [r5, #0]
  4051a6:	602e      	str	r6, [r5, #0]
  4051a8:	0791      	lsls	r1, r2, #30
  4051aa:	bf0c      	ite	eq
  4051ac:	696b      	ldreq	r3, [r5, #20]
  4051ae:	2300      	movne	r3, #0
  4051b0:	1ba4      	subs	r4, r4, r6
  4051b2:	60ab      	str	r3, [r5, #8]
  4051b4:	e00a      	b.n	4051cc <__sflush_r+0xb4>
  4051b6:	4623      	mov	r3, r4
  4051b8:	4632      	mov	r2, r6
  4051ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4051bc:	69e9      	ldr	r1, [r5, #28]
  4051be:	4640      	mov	r0, r8
  4051c0:	47b8      	blx	r7
  4051c2:	2800      	cmp	r0, #0
  4051c4:	eba4 0400 	sub.w	r4, r4, r0
  4051c8:	4406      	add	r6, r0
  4051ca:	dd04      	ble.n	4051d6 <__sflush_r+0xbe>
  4051cc:	2c00      	cmp	r4, #0
  4051ce:	dcf2      	bgt.n	4051b6 <__sflush_r+0x9e>
  4051d0:	2000      	movs	r0, #0
  4051d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4051d6:	89ab      	ldrh	r3, [r5, #12]
  4051d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051dc:	81ab      	strh	r3, [r5, #12]
  4051de:	f04f 30ff 	mov.w	r0, #4294967295
  4051e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4051e6:	f8d8 4000 	ldr.w	r4, [r8]
  4051ea:	2c1d      	cmp	r4, #29
  4051ec:	d8f3      	bhi.n	4051d6 <__sflush_r+0xbe>
  4051ee:	4b19      	ldr	r3, [pc, #100]	; (405254 <__sflush_r+0x13c>)
  4051f0:	40e3      	lsrs	r3, r4
  4051f2:	43db      	mvns	r3, r3
  4051f4:	f013 0301 	ands.w	r3, r3, #1
  4051f8:	d1ed      	bne.n	4051d6 <__sflush_r+0xbe>
  4051fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4051fe:	606b      	str	r3, [r5, #4]
  405200:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405204:	6929      	ldr	r1, [r5, #16]
  405206:	81ab      	strh	r3, [r5, #12]
  405208:	04da      	lsls	r2, r3, #19
  40520a:	6029      	str	r1, [r5, #0]
  40520c:	d5b9      	bpl.n	405182 <__sflush_r+0x6a>
  40520e:	2c00      	cmp	r4, #0
  405210:	d1b7      	bne.n	405182 <__sflush_r+0x6a>
  405212:	6528      	str	r0, [r5, #80]	; 0x50
  405214:	e7b5      	b.n	405182 <__sflush_r+0x6a>
  405216:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405218:	2a00      	cmp	r2, #0
  40521a:	dc8c      	bgt.n	405136 <__sflush_r+0x1e>
  40521c:	e7d8      	b.n	4051d0 <__sflush_r+0xb8>
  40521e:	2301      	movs	r3, #1
  405220:	69e9      	ldr	r1, [r5, #28]
  405222:	4640      	mov	r0, r8
  405224:	47a0      	blx	r4
  405226:	1c43      	adds	r3, r0, #1
  405228:	4602      	mov	r2, r0
  40522a:	d002      	beq.n	405232 <__sflush_r+0x11a>
  40522c:	89ab      	ldrh	r3, [r5, #12]
  40522e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405230:	e78e      	b.n	405150 <__sflush_r+0x38>
  405232:	f8d8 3000 	ldr.w	r3, [r8]
  405236:	2b00      	cmp	r3, #0
  405238:	d0f8      	beq.n	40522c <__sflush_r+0x114>
  40523a:	2b1d      	cmp	r3, #29
  40523c:	d001      	beq.n	405242 <__sflush_r+0x12a>
  40523e:	2b16      	cmp	r3, #22
  405240:	d102      	bne.n	405248 <__sflush_r+0x130>
  405242:	f8c8 6000 	str.w	r6, [r8]
  405246:	e7c3      	b.n	4051d0 <__sflush_r+0xb8>
  405248:	89ab      	ldrh	r3, [r5, #12]
  40524a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40524e:	81ab      	strh	r3, [r5, #12]
  405250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405254:	20400001 	.word	0x20400001

00405258 <_fflush_r>:
  405258:	b538      	push	{r3, r4, r5, lr}
  40525a:	460d      	mov	r5, r1
  40525c:	4604      	mov	r4, r0
  40525e:	b108      	cbz	r0, 405264 <_fflush_r+0xc>
  405260:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405262:	b1bb      	cbz	r3, 405294 <_fflush_r+0x3c>
  405264:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405268:	b188      	cbz	r0, 40528e <_fflush_r+0x36>
  40526a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40526c:	07db      	lsls	r3, r3, #31
  40526e:	d401      	bmi.n	405274 <_fflush_r+0x1c>
  405270:	0581      	lsls	r1, r0, #22
  405272:	d517      	bpl.n	4052a4 <_fflush_r+0x4c>
  405274:	4620      	mov	r0, r4
  405276:	4629      	mov	r1, r5
  405278:	f7ff ff4e 	bl	405118 <__sflush_r>
  40527c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40527e:	07da      	lsls	r2, r3, #31
  405280:	4604      	mov	r4, r0
  405282:	d402      	bmi.n	40528a <_fflush_r+0x32>
  405284:	89ab      	ldrh	r3, [r5, #12]
  405286:	059b      	lsls	r3, r3, #22
  405288:	d507      	bpl.n	40529a <_fflush_r+0x42>
  40528a:	4620      	mov	r0, r4
  40528c:	bd38      	pop	{r3, r4, r5, pc}
  40528e:	4604      	mov	r4, r0
  405290:	4620      	mov	r0, r4
  405292:	bd38      	pop	{r3, r4, r5, pc}
  405294:	f000 f838 	bl	405308 <__sinit>
  405298:	e7e4      	b.n	405264 <_fflush_r+0xc>
  40529a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40529c:	f000 fbf6 	bl	405a8c <__retarget_lock_release_recursive>
  4052a0:	4620      	mov	r0, r4
  4052a2:	bd38      	pop	{r3, r4, r5, pc}
  4052a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4052a6:	f000 fbef 	bl	405a88 <__retarget_lock_acquire_recursive>
  4052aa:	e7e3      	b.n	405274 <_fflush_r+0x1c>

004052ac <_cleanup_r>:
  4052ac:	4901      	ldr	r1, [pc, #4]	; (4052b4 <_cleanup_r+0x8>)
  4052ae:	f000 bbaf 	b.w	405a10 <_fwalk_reent>
  4052b2:	bf00      	nop
  4052b4:	004068cd 	.word	0x004068cd

004052b8 <std.isra.0>:
  4052b8:	b510      	push	{r4, lr}
  4052ba:	2300      	movs	r3, #0
  4052bc:	4604      	mov	r4, r0
  4052be:	8181      	strh	r1, [r0, #12]
  4052c0:	81c2      	strh	r2, [r0, #14]
  4052c2:	6003      	str	r3, [r0, #0]
  4052c4:	6043      	str	r3, [r0, #4]
  4052c6:	6083      	str	r3, [r0, #8]
  4052c8:	6643      	str	r3, [r0, #100]	; 0x64
  4052ca:	6103      	str	r3, [r0, #16]
  4052cc:	6143      	str	r3, [r0, #20]
  4052ce:	6183      	str	r3, [r0, #24]
  4052d0:	4619      	mov	r1, r3
  4052d2:	2208      	movs	r2, #8
  4052d4:	305c      	adds	r0, #92	; 0x5c
  4052d6:	f7fe fe45 	bl	403f64 <memset>
  4052da:	4807      	ldr	r0, [pc, #28]	; (4052f8 <std.isra.0+0x40>)
  4052dc:	4907      	ldr	r1, [pc, #28]	; (4052fc <std.isra.0+0x44>)
  4052de:	4a08      	ldr	r2, [pc, #32]	; (405300 <std.isra.0+0x48>)
  4052e0:	4b08      	ldr	r3, [pc, #32]	; (405304 <std.isra.0+0x4c>)
  4052e2:	6220      	str	r0, [r4, #32]
  4052e4:	61e4      	str	r4, [r4, #28]
  4052e6:	6261      	str	r1, [r4, #36]	; 0x24
  4052e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4052ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4052ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4052f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4052f4:	f000 bbc4 	b.w	405a80 <__retarget_lock_init_recursive>
  4052f8:	00406611 	.word	0x00406611
  4052fc:	00406635 	.word	0x00406635
  405300:	00406671 	.word	0x00406671
  405304:	00406691 	.word	0x00406691

00405308 <__sinit>:
  405308:	b510      	push	{r4, lr}
  40530a:	4604      	mov	r4, r0
  40530c:	4812      	ldr	r0, [pc, #72]	; (405358 <__sinit+0x50>)
  40530e:	f000 fbbb 	bl	405a88 <__retarget_lock_acquire_recursive>
  405312:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405314:	b9d2      	cbnz	r2, 40534c <__sinit+0x44>
  405316:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40531a:	4810      	ldr	r0, [pc, #64]	; (40535c <__sinit+0x54>)
  40531c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  405320:	2103      	movs	r1, #3
  405322:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  405326:	63e0      	str	r0, [r4, #60]	; 0x3c
  405328:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40532c:	6860      	ldr	r0, [r4, #4]
  40532e:	2104      	movs	r1, #4
  405330:	f7ff ffc2 	bl	4052b8 <std.isra.0>
  405334:	2201      	movs	r2, #1
  405336:	2109      	movs	r1, #9
  405338:	68a0      	ldr	r0, [r4, #8]
  40533a:	f7ff ffbd 	bl	4052b8 <std.isra.0>
  40533e:	2202      	movs	r2, #2
  405340:	2112      	movs	r1, #18
  405342:	68e0      	ldr	r0, [r4, #12]
  405344:	f7ff ffb8 	bl	4052b8 <std.isra.0>
  405348:	2301      	movs	r3, #1
  40534a:	63a3      	str	r3, [r4, #56]	; 0x38
  40534c:	4802      	ldr	r0, [pc, #8]	; (405358 <__sinit+0x50>)
  40534e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405352:	f000 bb9b 	b.w	405a8c <__retarget_lock_release_recursive>
  405356:	bf00      	nop
  405358:	2040c6d0 	.word	0x2040c6d0
  40535c:	004052ad 	.word	0x004052ad

00405360 <__sfp_lock_acquire>:
  405360:	4801      	ldr	r0, [pc, #4]	; (405368 <__sfp_lock_acquire+0x8>)
  405362:	f000 bb91 	b.w	405a88 <__retarget_lock_acquire_recursive>
  405366:	bf00      	nop
  405368:	2040c6e4 	.word	0x2040c6e4

0040536c <__sfp_lock_release>:
  40536c:	4801      	ldr	r0, [pc, #4]	; (405374 <__sfp_lock_release+0x8>)
  40536e:	f000 bb8d 	b.w	405a8c <__retarget_lock_release_recursive>
  405372:	bf00      	nop
  405374:	2040c6e4 	.word	0x2040c6e4

00405378 <__libc_fini_array>:
  405378:	b538      	push	{r3, r4, r5, lr}
  40537a:	4c0a      	ldr	r4, [pc, #40]	; (4053a4 <__libc_fini_array+0x2c>)
  40537c:	4d0a      	ldr	r5, [pc, #40]	; (4053a8 <__libc_fini_array+0x30>)
  40537e:	1b64      	subs	r4, r4, r5
  405380:	10a4      	asrs	r4, r4, #2
  405382:	d00a      	beq.n	40539a <__libc_fini_array+0x22>
  405384:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405388:	3b01      	subs	r3, #1
  40538a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40538e:	3c01      	subs	r4, #1
  405390:	f855 3904 	ldr.w	r3, [r5], #-4
  405394:	4798      	blx	r3
  405396:	2c00      	cmp	r4, #0
  405398:	d1f9      	bne.n	40538e <__libc_fini_array+0x16>
  40539a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40539e:	f001 bc73 	b.w	406c88 <_fini>
  4053a2:	bf00      	nop
  4053a4:	00406c98 	.word	0x00406c98
  4053a8:	00406c94 	.word	0x00406c94

004053ac <__fputwc>:
  4053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4053b0:	b082      	sub	sp, #8
  4053b2:	4680      	mov	r8, r0
  4053b4:	4689      	mov	r9, r1
  4053b6:	4614      	mov	r4, r2
  4053b8:	f000 fb54 	bl	405a64 <__locale_mb_cur_max>
  4053bc:	2801      	cmp	r0, #1
  4053be:	d036      	beq.n	40542e <__fputwc+0x82>
  4053c0:	464a      	mov	r2, r9
  4053c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4053c6:	a901      	add	r1, sp, #4
  4053c8:	4640      	mov	r0, r8
  4053ca:	f001 f9bd 	bl	406748 <_wcrtomb_r>
  4053ce:	1c42      	adds	r2, r0, #1
  4053d0:	4606      	mov	r6, r0
  4053d2:	d025      	beq.n	405420 <__fputwc+0x74>
  4053d4:	b3a8      	cbz	r0, 405442 <__fputwc+0x96>
  4053d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4053da:	2500      	movs	r5, #0
  4053dc:	f10d 0a04 	add.w	sl, sp, #4
  4053e0:	e009      	b.n	4053f6 <__fputwc+0x4a>
  4053e2:	6823      	ldr	r3, [r4, #0]
  4053e4:	1c5a      	adds	r2, r3, #1
  4053e6:	6022      	str	r2, [r4, #0]
  4053e8:	f883 e000 	strb.w	lr, [r3]
  4053ec:	3501      	adds	r5, #1
  4053ee:	42b5      	cmp	r5, r6
  4053f0:	d227      	bcs.n	405442 <__fputwc+0x96>
  4053f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4053f6:	68a3      	ldr	r3, [r4, #8]
  4053f8:	3b01      	subs	r3, #1
  4053fa:	2b00      	cmp	r3, #0
  4053fc:	60a3      	str	r3, [r4, #8]
  4053fe:	daf0      	bge.n	4053e2 <__fputwc+0x36>
  405400:	69a7      	ldr	r7, [r4, #24]
  405402:	42bb      	cmp	r3, r7
  405404:	4671      	mov	r1, lr
  405406:	4622      	mov	r2, r4
  405408:	4640      	mov	r0, r8
  40540a:	db02      	blt.n	405412 <__fputwc+0x66>
  40540c:	f1be 0f0a 	cmp.w	lr, #10
  405410:	d1e7      	bne.n	4053e2 <__fputwc+0x36>
  405412:	f001 f941 	bl	406698 <__swbuf_r>
  405416:	1c43      	adds	r3, r0, #1
  405418:	d1e8      	bne.n	4053ec <__fputwc+0x40>
  40541a:	b002      	add	sp, #8
  40541c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405420:	89a3      	ldrh	r3, [r4, #12]
  405422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405426:	81a3      	strh	r3, [r4, #12]
  405428:	b002      	add	sp, #8
  40542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40542e:	f109 33ff 	add.w	r3, r9, #4294967295
  405432:	2bfe      	cmp	r3, #254	; 0xfe
  405434:	d8c4      	bhi.n	4053c0 <__fputwc+0x14>
  405436:	fa5f fe89 	uxtb.w	lr, r9
  40543a:	4606      	mov	r6, r0
  40543c:	f88d e004 	strb.w	lr, [sp, #4]
  405440:	e7cb      	b.n	4053da <__fputwc+0x2e>
  405442:	4648      	mov	r0, r9
  405444:	b002      	add	sp, #8
  405446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40544a:	bf00      	nop

0040544c <_fputwc_r>:
  40544c:	b530      	push	{r4, r5, lr}
  40544e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405450:	f013 0f01 	tst.w	r3, #1
  405454:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405458:	4614      	mov	r4, r2
  40545a:	b083      	sub	sp, #12
  40545c:	4605      	mov	r5, r0
  40545e:	b29a      	uxth	r2, r3
  405460:	d101      	bne.n	405466 <_fputwc_r+0x1a>
  405462:	0590      	lsls	r0, r2, #22
  405464:	d51c      	bpl.n	4054a0 <_fputwc_r+0x54>
  405466:	0490      	lsls	r0, r2, #18
  405468:	d406      	bmi.n	405478 <_fputwc_r+0x2c>
  40546a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40546c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405474:	81a3      	strh	r3, [r4, #12]
  405476:	6662      	str	r2, [r4, #100]	; 0x64
  405478:	4628      	mov	r0, r5
  40547a:	4622      	mov	r2, r4
  40547c:	f7ff ff96 	bl	4053ac <__fputwc>
  405480:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405482:	07da      	lsls	r2, r3, #31
  405484:	4605      	mov	r5, r0
  405486:	d402      	bmi.n	40548e <_fputwc_r+0x42>
  405488:	89a3      	ldrh	r3, [r4, #12]
  40548a:	059b      	lsls	r3, r3, #22
  40548c:	d502      	bpl.n	405494 <_fputwc_r+0x48>
  40548e:	4628      	mov	r0, r5
  405490:	b003      	add	sp, #12
  405492:	bd30      	pop	{r4, r5, pc}
  405494:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405496:	f000 faf9 	bl	405a8c <__retarget_lock_release_recursive>
  40549a:	4628      	mov	r0, r5
  40549c:	b003      	add	sp, #12
  40549e:	bd30      	pop	{r4, r5, pc}
  4054a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4054a2:	9101      	str	r1, [sp, #4]
  4054a4:	f000 faf0 	bl	405a88 <__retarget_lock_acquire_recursive>
  4054a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4054ac:	9901      	ldr	r1, [sp, #4]
  4054ae:	b29a      	uxth	r2, r3
  4054b0:	e7d9      	b.n	405466 <_fputwc_r+0x1a>
  4054b2:	bf00      	nop

004054b4 <_malloc_trim_r>:
  4054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4054b6:	4f24      	ldr	r7, [pc, #144]	; (405548 <_malloc_trim_r+0x94>)
  4054b8:	460c      	mov	r4, r1
  4054ba:	4606      	mov	r6, r0
  4054bc:	f000 fee4 	bl	406288 <__malloc_lock>
  4054c0:	68bb      	ldr	r3, [r7, #8]
  4054c2:	685d      	ldr	r5, [r3, #4]
  4054c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4054c8:	310f      	adds	r1, #15
  4054ca:	f025 0503 	bic.w	r5, r5, #3
  4054ce:	4429      	add	r1, r5
  4054d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4054d4:	f021 010f 	bic.w	r1, r1, #15
  4054d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4054dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4054e0:	db07      	blt.n	4054f2 <_malloc_trim_r+0x3e>
  4054e2:	2100      	movs	r1, #0
  4054e4:	4630      	mov	r0, r6
  4054e6:	f001 f881 	bl	4065ec <_sbrk_r>
  4054ea:	68bb      	ldr	r3, [r7, #8]
  4054ec:	442b      	add	r3, r5
  4054ee:	4298      	cmp	r0, r3
  4054f0:	d004      	beq.n	4054fc <_malloc_trim_r+0x48>
  4054f2:	4630      	mov	r0, r6
  4054f4:	f000 fece 	bl	406294 <__malloc_unlock>
  4054f8:	2000      	movs	r0, #0
  4054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054fc:	4261      	negs	r1, r4
  4054fe:	4630      	mov	r0, r6
  405500:	f001 f874 	bl	4065ec <_sbrk_r>
  405504:	3001      	adds	r0, #1
  405506:	d00d      	beq.n	405524 <_malloc_trim_r+0x70>
  405508:	4b10      	ldr	r3, [pc, #64]	; (40554c <_malloc_trim_r+0x98>)
  40550a:	68ba      	ldr	r2, [r7, #8]
  40550c:	6819      	ldr	r1, [r3, #0]
  40550e:	1b2d      	subs	r5, r5, r4
  405510:	f045 0501 	orr.w	r5, r5, #1
  405514:	4630      	mov	r0, r6
  405516:	1b09      	subs	r1, r1, r4
  405518:	6055      	str	r5, [r2, #4]
  40551a:	6019      	str	r1, [r3, #0]
  40551c:	f000 feba 	bl	406294 <__malloc_unlock>
  405520:	2001      	movs	r0, #1
  405522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405524:	2100      	movs	r1, #0
  405526:	4630      	mov	r0, r6
  405528:	f001 f860 	bl	4065ec <_sbrk_r>
  40552c:	68ba      	ldr	r2, [r7, #8]
  40552e:	1a83      	subs	r3, r0, r2
  405530:	2b0f      	cmp	r3, #15
  405532:	ddde      	ble.n	4054f2 <_malloc_trim_r+0x3e>
  405534:	4c06      	ldr	r4, [pc, #24]	; (405550 <_malloc_trim_r+0x9c>)
  405536:	4905      	ldr	r1, [pc, #20]	; (40554c <_malloc_trim_r+0x98>)
  405538:	6824      	ldr	r4, [r4, #0]
  40553a:	f043 0301 	orr.w	r3, r3, #1
  40553e:	1b00      	subs	r0, r0, r4
  405540:	6053      	str	r3, [r2, #4]
  405542:	6008      	str	r0, [r1, #0]
  405544:	e7d5      	b.n	4054f2 <_malloc_trim_r+0x3e>
  405546:	bf00      	nop
  405548:	204005b8 	.word	0x204005b8
  40554c:	2040c5b4 	.word	0x2040c5b4
  405550:	204009c0 	.word	0x204009c0

00405554 <_free_r>:
  405554:	2900      	cmp	r1, #0
  405556:	d044      	beq.n	4055e2 <_free_r+0x8e>
  405558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40555c:	460d      	mov	r5, r1
  40555e:	4680      	mov	r8, r0
  405560:	f000 fe92 	bl	406288 <__malloc_lock>
  405564:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405568:	4969      	ldr	r1, [pc, #420]	; (405710 <_free_r+0x1bc>)
  40556a:	f027 0301 	bic.w	r3, r7, #1
  40556e:	f1a5 0408 	sub.w	r4, r5, #8
  405572:	18e2      	adds	r2, r4, r3
  405574:	688e      	ldr	r6, [r1, #8]
  405576:	6850      	ldr	r0, [r2, #4]
  405578:	42b2      	cmp	r2, r6
  40557a:	f020 0003 	bic.w	r0, r0, #3
  40557e:	d05e      	beq.n	40563e <_free_r+0xea>
  405580:	07fe      	lsls	r6, r7, #31
  405582:	6050      	str	r0, [r2, #4]
  405584:	d40b      	bmi.n	40559e <_free_r+0x4a>
  405586:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40558a:	1be4      	subs	r4, r4, r7
  40558c:	f101 0e08 	add.w	lr, r1, #8
  405590:	68a5      	ldr	r5, [r4, #8]
  405592:	4575      	cmp	r5, lr
  405594:	443b      	add	r3, r7
  405596:	d06d      	beq.n	405674 <_free_r+0x120>
  405598:	68e7      	ldr	r7, [r4, #12]
  40559a:	60ef      	str	r7, [r5, #12]
  40559c:	60bd      	str	r5, [r7, #8]
  40559e:	1815      	adds	r5, r2, r0
  4055a0:	686d      	ldr	r5, [r5, #4]
  4055a2:	07ed      	lsls	r5, r5, #31
  4055a4:	d53e      	bpl.n	405624 <_free_r+0xd0>
  4055a6:	f043 0201 	orr.w	r2, r3, #1
  4055aa:	6062      	str	r2, [r4, #4]
  4055ac:	50e3      	str	r3, [r4, r3]
  4055ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4055b2:	d217      	bcs.n	4055e4 <_free_r+0x90>
  4055b4:	08db      	lsrs	r3, r3, #3
  4055b6:	1c58      	adds	r0, r3, #1
  4055b8:	109a      	asrs	r2, r3, #2
  4055ba:	684d      	ldr	r5, [r1, #4]
  4055bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4055c0:	60a7      	str	r7, [r4, #8]
  4055c2:	2301      	movs	r3, #1
  4055c4:	4093      	lsls	r3, r2
  4055c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4055ca:	432b      	orrs	r3, r5
  4055cc:	3a08      	subs	r2, #8
  4055ce:	60e2      	str	r2, [r4, #12]
  4055d0:	604b      	str	r3, [r1, #4]
  4055d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4055d6:	60fc      	str	r4, [r7, #12]
  4055d8:	4640      	mov	r0, r8
  4055da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4055de:	f000 be59 	b.w	406294 <__malloc_unlock>
  4055e2:	4770      	bx	lr
  4055e4:	0a5a      	lsrs	r2, r3, #9
  4055e6:	2a04      	cmp	r2, #4
  4055e8:	d852      	bhi.n	405690 <_free_r+0x13c>
  4055ea:	099a      	lsrs	r2, r3, #6
  4055ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4055f0:	00ff      	lsls	r7, r7, #3
  4055f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4055f6:	19c8      	adds	r0, r1, r7
  4055f8:	59ca      	ldr	r2, [r1, r7]
  4055fa:	3808      	subs	r0, #8
  4055fc:	4290      	cmp	r0, r2
  4055fe:	d04f      	beq.n	4056a0 <_free_r+0x14c>
  405600:	6851      	ldr	r1, [r2, #4]
  405602:	f021 0103 	bic.w	r1, r1, #3
  405606:	428b      	cmp	r3, r1
  405608:	d232      	bcs.n	405670 <_free_r+0x11c>
  40560a:	6892      	ldr	r2, [r2, #8]
  40560c:	4290      	cmp	r0, r2
  40560e:	d1f7      	bne.n	405600 <_free_r+0xac>
  405610:	68c3      	ldr	r3, [r0, #12]
  405612:	60a0      	str	r0, [r4, #8]
  405614:	60e3      	str	r3, [r4, #12]
  405616:	609c      	str	r4, [r3, #8]
  405618:	60c4      	str	r4, [r0, #12]
  40561a:	4640      	mov	r0, r8
  40561c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405620:	f000 be38 	b.w	406294 <__malloc_unlock>
  405624:	6895      	ldr	r5, [r2, #8]
  405626:	4f3b      	ldr	r7, [pc, #236]	; (405714 <_free_r+0x1c0>)
  405628:	42bd      	cmp	r5, r7
  40562a:	4403      	add	r3, r0
  40562c:	d040      	beq.n	4056b0 <_free_r+0x15c>
  40562e:	68d0      	ldr	r0, [r2, #12]
  405630:	60e8      	str	r0, [r5, #12]
  405632:	f043 0201 	orr.w	r2, r3, #1
  405636:	6085      	str	r5, [r0, #8]
  405638:	6062      	str	r2, [r4, #4]
  40563a:	50e3      	str	r3, [r4, r3]
  40563c:	e7b7      	b.n	4055ae <_free_r+0x5a>
  40563e:	07ff      	lsls	r7, r7, #31
  405640:	4403      	add	r3, r0
  405642:	d407      	bmi.n	405654 <_free_r+0x100>
  405644:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405648:	1aa4      	subs	r4, r4, r2
  40564a:	4413      	add	r3, r2
  40564c:	68a0      	ldr	r0, [r4, #8]
  40564e:	68e2      	ldr	r2, [r4, #12]
  405650:	60c2      	str	r2, [r0, #12]
  405652:	6090      	str	r0, [r2, #8]
  405654:	4a30      	ldr	r2, [pc, #192]	; (405718 <_free_r+0x1c4>)
  405656:	6812      	ldr	r2, [r2, #0]
  405658:	f043 0001 	orr.w	r0, r3, #1
  40565c:	4293      	cmp	r3, r2
  40565e:	6060      	str	r0, [r4, #4]
  405660:	608c      	str	r4, [r1, #8]
  405662:	d3b9      	bcc.n	4055d8 <_free_r+0x84>
  405664:	4b2d      	ldr	r3, [pc, #180]	; (40571c <_free_r+0x1c8>)
  405666:	4640      	mov	r0, r8
  405668:	6819      	ldr	r1, [r3, #0]
  40566a:	f7ff ff23 	bl	4054b4 <_malloc_trim_r>
  40566e:	e7b3      	b.n	4055d8 <_free_r+0x84>
  405670:	4610      	mov	r0, r2
  405672:	e7cd      	b.n	405610 <_free_r+0xbc>
  405674:	1811      	adds	r1, r2, r0
  405676:	6849      	ldr	r1, [r1, #4]
  405678:	07c9      	lsls	r1, r1, #31
  40567a:	d444      	bmi.n	405706 <_free_r+0x1b2>
  40567c:	6891      	ldr	r1, [r2, #8]
  40567e:	68d2      	ldr	r2, [r2, #12]
  405680:	60ca      	str	r2, [r1, #12]
  405682:	4403      	add	r3, r0
  405684:	f043 0001 	orr.w	r0, r3, #1
  405688:	6091      	str	r1, [r2, #8]
  40568a:	6060      	str	r0, [r4, #4]
  40568c:	50e3      	str	r3, [r4, r3]
  40568e:	e7a3      	b.n	4055d8 <_free_r+0x84>
  405690:	2a14      	cmp	r2, #20
  405692:	d816      	bhi.n	4056c2 <_free_r+0x16e>
  405694:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405698:	00ff      	lsls	r7, r7, #3
  40569a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40569e:	e7aa      	b.n	4055f6 <_free_r+0xa2>
  4056a0:	10aa      	asrs	r2, r5, #2
  4056a2:	2301      	movs	r3, #1
  4056a4:	684d      	ldr	r5, [r1, #4]
  4056a6:	4093      	lsls	r3, r2
  4056a8:	432b      	orrs	r3, r5
  4056aa:	604b      	str	r3, [r1, #4]
  4056ac:	4603      	mov	r3, r0
  4056ae:	e7b0      	b.n	405612 <_free_r+0xbe>
  4056b0:	f043 0201 	orr.w	r2, r3, #1
  4056b4:	614c      	str	r4, [r1, #20]
  4056b6:	610c      	str	r4, [r1, #16]
  4056b8:	60e5      	str	r5, [r4, #12]
  4056ba:	60a5      	str	r5, [r4, #8]
  4056bc:	6062      	str	r2, [r4, #4]
  4056be:	50e3      	str	r3, [r4, r3]
  4056c0:	e78a      	b.n	4055d8 <_free_r+0x84>
  4056c2:	2a54      	cmp	r2, #84	; 0x54
  4056c4:	d806      	bhi.n	4056d4 <_free_r+0x180>
  4056c6:	0b1a      	lsrs	r2, r3, #12
  4056c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4056cc:	00ff      	lsls	r7, r7, #3
  4056ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4056d2:	e790      	b.n	4055f6 <_free_r+0xa2>
  4056d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4056d8:	d806      	bhi.n	4056e8 <_free_r+0x194>
  4056da:	0bda      	lsrs	r2, r3, #15
  4056dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4056e0:	00ff      	lsls	r7, r7, #3
  4056e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4056e6:	e786      	b.n	4055f6 <_free_r+0xa2>
  4056e8:	f240 5054 	movw	r0, #1364	; 0x554
  4056ec:	4282      	cmp	r2, r0
  4056ee:	d806      	bhi.n	4056fe <_free_r+0x1aa>
  4056f0:	0c9a      	lsrs	r2, r3, #18
  4056f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4056f6:	00ff      	lsls	r7, r7, #3
  4056f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4056fc:	e77b      	b.n	4055f6 <_free_r+0xa2>
  4056fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405702:	257e      	movs	r5, #126	; 0x7e
  405704:	e777      	b.n	4055f6 <_free_r+0xa2>
  405706:	f043 0101 	orr.w	r1, r3, #1
  40570a:	6061      	str	r1, [r4, #4]
  40570c:	6013      	str	r3, [r2, #0]
  40570e:	e763      	b.n	4055d8 <_free_r+0x84>
  405710:	204005b8 	.word	0x204005b8
  405714:	204005c0 	.word	0x204005c0
  405718:	204009c4 	.word	0x204009c4
  40571c:	2040c5e4 	.word	0x2040c5e4

00405720 <__sfvwrite_r>:
  405720:	6893      	ldr	r3, [r2, #8]
  405722:	2b00      	cmp	r3, #0
  405724:	d073      	beq.n	40580e <__sfvwrite_r+0xee>
  405726:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40572a:	898b      	ldrh	r3, [r1, #12]
  40572c:	b083      	sub	sp, #12
  40572e:	460c      	mov	r4, r1
  405730:	0719      	lsls	r1, r3, #28
  405732:	9000      	str	r0, [sp, #0]
  405734:	4616      	mov	r6, r2
  405736:	d526      	bpl.n	405786 <__sfvwrite_r+0x66>
  405738:	6922      	ldr	r2, [r4, #16]
  40573a:	b322      	cbz	r2, 405786 <__sfvwrite_r+0x66>
  40573c:	f013 0002 	ands.w	r0, r3, #2
  405740:	6835      	ldr	r5, [r6, #0]
  405742:	d02c      	beq.n	40579e <__sfvwrite_r+0x7e>
  405744:	f04f 0900 	mov.w	r9, #0
  405748:	4fb0      	ldr	r7, [pc, #704]	; (405a0c <__sfvwrite_r+0x2ec>)
  40574a:	46c8      	mov	r8, r9
  40574c:	46b2      	mov	sl, r6
  40574e:	45b8      	cmp	r8, r7
  405750:	4643      	mov	r3, r8
  405752:	464a      	mov	r2, r9
  405754:	bf28      	it	cs
  405756:	463b      	movcs	r3, r7
  405758:	9800      	ldr	r0, [sp, #0]
  40575a:	f1b8 0f00 	cmp.w	r8, #0
  40575e:	d050      	beq.n	405802 <__sfvwrite_r+0xe2>
  405760:	69e1      	ldr	r1, [r4, #28]
  405762:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405764:	47b0      	blx	r6
  405766:	2800      	cmp	r0, #0
  405768:	dd58      	ble.n	40581c <__sfvwrite_r+0xfc>
  40576a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40576e:	1a1b      	subs	r3, r3, r0
  405770:	4481      	add	r9, r0
  405772:	eba8 0800 	sub.w	r8, r8, r0
  405776:	f8ca 3008 	str.w	r3, [sl, #8]
  40577a:	2b00      	cmp	r3, #0
  40577c:	d1e7      	bne.n	40574e <__sfvwrite_r+0x2e>
  40577e:	2000      	movs	r0, #0
  405780:	b003      	add	sp, #12
  405782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405786:	4621      	mov	r1, r4
  405788:	9800      	ldr	r0, [sp, #0]
  40578a:	f7ff fc51 	bl	405030 <__swsetup_r>
  40578e:	2800      	cmp	r0, #0
  405790:	f040 8133 	bne.w	4059fa <__sfvwrite_r+0x2da>
  405794:	89a3      	ldrh	r3, [r4, #12]
  405796:	6835      	ldr	r5, [r6, #0]
  405798:	f013 0002 	ands.w	r0, r3, #2
  40579c:	d1d2      	bne.n	405744 <__sfvwrite_r+0x24>
  40579e:	f013 0901 	ands.w	r9, r3, #1
  4057a2:	d145      	bne.n	405830 <__sfvwrite_r+0x110>
  4057a4:	464f      	mov	r7, r9
  4057a6:	9601      	str	r6, [sp, #4]
  4057a8:	b337      	cbz	r7, 4057f8 <__sfvwrite_r+0xd8>
  4057aa:	059a      	lsls	r2, r3, #22
  4057ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4057b0:	f140 8083 	bpl.w	4058ba <__sfvwrite_r+0x19a>
  4057b4:	4547      	cmp	r7, r8
  4057b6:	46c3      	mov	fp, r8
  4057b8:	f0c0 80ab 	bcc.w	405912 <__sfvwrite_r+0x1f2>
  4057bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4057c0:	f040 80ac 	bne.w	40591c <__sfvwrite_r+0x1fc>
  4057c4:	6820      	ldr	r0, [r4, #0]
  4057c6:	46ba      	mov	sl, r7
  4057c8:	465a      	mov	r2, fp
  4057ca:	4649      	mov	r1, r9
  4057cc:	f000 fcf8 	bl	4061c0 <memmove>
  4057d0:	68a2      	ldr	r2, [r4, #8]
  4057d2:	6823      	ldr	r3, [r4, #0]
  4057d4:	eba2 0208 	sub.w	r2, r2, r8
  4057d8:	445b      	add	r3, fp
  4057da:	60a2      	str	r2, [r4, #8]
  4057dc:	6023      	str	r3, [r4, #0]
  4057de:	9a01      	ldr	r2, [sp, #4]
  4057e0:	6893      	ldr	r3, [r2, #8]
  4057e2:	eba3 030a 	sub.w	r3, r3, sl
  4057e6:	44d1      	add	r9, sl
  4057e8:	eba7 070a 	sub.w	r7, r7, sl
  4057ec:	6093      	str	r3, [r2, #8]
  4057ee:	2b00      	cmp	r3, #0
  4057f0:	d0c5      	beq.n	40577e <__sfvwrite_r+0x5e>
  4057f2:	89a3      	ldrh	r3, [r4, #12]
  4057f4:	2f00      	cmp	r7, #0
  4057f6:	d1d8      	bne.n	4057aa <__sfvwrite_r+0x8a>
  4057f8:	f8d5 9000 	ldr.w	r9, [r5]
  4057fc:	686f      	ldr	r7, [r5, #4]
  4057fe:	3508      	adds	r5, #8
  405800:	e7d2      	b.n	4057a8 <__sfvwrite_r+0x88>
  405802:	f8d5 9000 	ldr.w	r9, [r5]
  405806:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40580a:	3508      	adds	r5, #8
  40580c:	e79f      	b.n	40574e <__sfvwrite_r+0x2e>
  40580e:	2000      	movs	r0, #0
  405810:	4770      	bx	lr
  405812:	4621      	mov	r1, r4
  405814:	9800      	ldr	r0, [sp, #0]
  405816:	f7ff fd1f 	bl	405258 <_fflush_r>
  40581a:	b370      	cbz	r0, 40587a <__sfvwrite_r+0x15a>
  40581c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405824:	f04f 30ff 	mov.w	r0, #4294967295
  405828:	81a3      	strh	r3, [r4, #12]
  40582a:	b003      	add	sp, #12
  40582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405830:	4681      	mov	r9, r0
  405832:	4633      	mov	r3, r6
  405834:	464e      	mov	r6, r9
  405836:	46a8      	mov	r8, r5
  405838:	469a      	mov	sl, r3
  40583a:	464d      	mov	r5, r9
  40583c:	b34e      	cbz	r6, 405892 <__sfvwrite_r+0x172>
  40583e:	b380      	cbz	r0, 4058a2 <__sfvwrite_r+0x182>
  405840:	6820      	ldr	r0, [r4, #0]
  405842:	6923      	ldr	r3, [r4, #16]
  405844:	6962      	ldr	r2, [r4, #20]
  405846:	45b1      	cmp	r9, r6
  405848:	46cb      	mov	fp, r9
  40584a:	bf28      	it	cs
  40584c:	46b3      	movcs	fp, r6
  40584e:	4298      	cmp	r0, r3
  405850:	465f      	mov	r7, fp
  405852:	d904      	bls.n	40585e <__sfvwrite_r+0x13e>
  405854:	68a3      	ldr	r3, [r4, #8]
  405856:	4413      	add	r3, r2
  405858:	459b      	cmp	fp, r3
  40585a:	f300 80a6 	bgt.w	4059aa <__sfvwrite_r+0x28a>
  40585e:	4593      	cmp	fp, r2
  405860:	db4b      	blt.n	4058fa <__sfvwrite_r+0x1da>
  405862:	4613      	mov	r3, r2
  405864:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405866:	69e1      	ldr	r1, [r4, #28]
  405868:	9800      	ldr	r0, [sp, #0]
  40586a:	462a      	mov	r2, r5
  40586c:	47b8      	blx	r7
  40586e:	1e07      	subs	r7, r0, #0
  405870:	ddd4      	ble.n	40581c <__sfvwrite_r+0xfc>
  405872:	ebb9 0907 	subs.w	r9, r9, r7
  405876:	d0cc      	beq.n	405812 <__sfvwrite_r+0xf2>
  405878:	2001      	movs	r0, #1
  40587a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40587e:	1bdb      	subs	r3, r3, r7
  405880:	443d      	add	r5, r7
  405882:	1bf6      	subs	r6, r6, r7
  405884:	f8ca 3008 	str.w	r3, [sl, #8]
  405888:	2b00      	cmp	r3, #0
  40588a:	f43f af78 	beq.w	40577e <__sfvwrite_r+0x5e>
  40588e:	2e00      	cmp	r6, #0
  405890:	d1d5      	bne.n	40583e <__sfvwrite_r+0x11e>
  405892:	f108 0308 	add.w	r3, r8, #8
  405896:	e913 0060 	ldmdb	r3, {r5, r6}
  40589a:	4698      	mov	r8, r3
  40589c:	3308      	adds	r3, #8
  40589e:	2e00      	cmp	r6, #0
  4058a0:	d0f9      	beq.n	405896 <__sfvwrite_r+0x176>
  4058a2:	4632      	mov	r2, r6
  4058a4:	210a      	movs	r1, #10
  4058a6:	4628      	mov	r0, r5
  4058a8:	f000 fc3a 	bl	406120 <memchr>
  4058ac:	2800      	cmp	r0, #0
  4058ae:	f000 80a1 	beq.w	4059f4 <__sfvwrite_r+0x2d4>
  4058b2:	3001      	adds	r0, #1
  4058b4:	eba0 0905 	sub.w	r9, r0, r5
  4058b8:	e7c2      	b.n	405840 <__sfvwrite_r+0x120>
  4058ba:	6820      	ldr	r0, [r4, #0]
  4058bc:	6923      	ldr	r3, [r4, #16]
  4058be:	4298      	cmp	r0, r3
  4058c0:	d802      	bhi.n	4058c8 <__sfvwrite_r+0x1a8>
  4058c2:	6963      	ldr	r3, [r4, #20]
  4058c4:	429f      	cmp	r7, r3
  4058c6:	d25d      	bcs.n	405984 <__sfvwrite_r+0x264>
  4058c8:	45b8      	cmp	r8, r7
  4058ca:	bf28      	it	cs
  4058cc:	46b8      	movcs	r8, r7
  4058ce:	4642      	mov	r2, r8
  4058d0:	4649      	mov	r1, r9
  4058d2:	f000 fc75 	bl	4061c0 <memmove>
  4058d6:	68a3      	ldr	r3, [r4, #8]
  4058d8:	6822      	ldr	r2, [r4, #0]
  4058da:	eba3 0308 	sub.w	r3, r3, r8
  4058de:	4442      	add	r2, r8
  4058e0:	60a3      	str	r3, [r4, #8]
  4058e2:	6022      	str	r2, [r4, #0]
  4058e4:	b10b      	cbz	r3, 4058ea <__sfvwrite_r+0x1ca>
  4058e6:	46c2      	mov	sl, r8
  4058e8:	e779      	b.n	4057de <__sfvwrite_r+0xbe>
  4058ea:	4621      	mov	r1, r4
  4058ec:	9800      	ldr	r0, [sp, #0]
  4058ee:	f7ff fcb3 	bl	405258 <_fflush_r>
  4058f2:	2800      	cmp	r0, #0
  4058f4:	d192      	bne.n	40581c <__sfvwrite_r+0xfc>
  4058f6:	46c2      	mov	sl, r8
  4058f8:	e771      	b.n	4057de <__sfvwrite_r+0xbe>
  4058fa:	465a      	mov	r2, fp
  4058fc:	4629      	mov	r1, r5
  4058fe:	f000 fc5f 	bl	4061c0 <memmove>
  405902:	68a2      	ldr	r2, [r4, #8]
  405904:	6823      	ldr	r3, [r4, #0]
  405906:	eba2 020b 	sub.w	r2, r2, fp
  40590a:	445b      	add	r3, fp
  40590c:	60a2      	str	r2, [r4, #8]
  40590e:	6023      	str	r3, [r4, #0]
  405910:	e7af      	b.n	405872 <__sfvwrite_r+0x152>
  405912:	6820      	ldr	r0, [r4, #0]
  405914:	46b8      	mov	r8, r7
  405916:	46ba      	mov	sl, r7
  405918:	46bb      	mov	fp, r7
  40591a:	e755      	b.n	4057c8 <__sfvwrite_r+0xa8>
  40591c:	6962      	ldr	r2, [r4, #20]
  40591e:	6820      	ldr	r0, [r4, #0]
  405920:	6921      	ldr	r1, [r4, #16]
  405922:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405926:	eba0 0a01 	sub.w	sl, r0, r1
  40592a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40592e:	f10a 0001 	add.w	r0, sl, #1
  405932:	ea4f 0868 	mov.w	r8, r8, asr #1
  405936:	4438      	add	r0, r7
  405938:	4540      	cmp	r0, r8
  40593a:	4642      	mov	r2, r8
  40593c:	bf84      	itt	hi
  40593e:	4680      	movhi	r8, r0
  405940:	4642      	movhi	r2, r8
  405942:	055b      	lsls	r3, r3, #21
  405944:	d544      	bpl.n	4059d0 <__sfvwrite_r+0x2b0>
  405946:	4611      	mov	r1, r2
  405948:	9800      	ldr	r0, [sp, #0]
  40594a:	f000 f921 	bl	405b90 <_malloc_r>
  40594e:	4683      	mov	fp, r0
  405950:	2800      	cmp	r0, #0
  405952:	d055      	beq.n	405a00 <__sfvwrite_r+0x2e0>
  405954:	4652      	mov	r2, sl
  405956:	6921      	ldr	r1, [r4, #16]
  405958:	f7fe fa6a 	bl	403e30 <memcpy>
  40595c:	89a3      	ldrh	r3, [r4, #12]
  40595e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405966:	81a3      	strh	r3, [r4, #12]
  405968:	eb0b 000a 	add.w	r0, fp, sl
  40596c:	eba8 030a 	sub.w	r3, r8, sl
  405970:	f8c4 b010 	str.w	fp, [r4, #16]
  405974:	f8c4 8014 	str.w	r8, [r4, #20]
  405978:	6020      	str	r0, [r4, #0]
  40597a:	60a3      	str	r3, [r4, #8]
  40597c:	46b8      	mov	r8, r7
  40597e:	46ba      	mov	sl, r7
  405980:	46bb      	mov	fp, r7
  405982:	e721      	b.n	4057c8 <__sfvwrite_r+0xa8>
  405984:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405988:	42b9      	cmp	r1, r7
  40598a:	bf28      	it	cs
  40598c:	4639      	movcs	r1, r7
  40598e:	464a      	mov	r2, r9
  405990:	fb91 f1f3 	sdiv	r1, r1, r3
  405994:	9800      	ldr	r0, [sp, #0]
  405996:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405998:	fb03 f301 	mul.w	r3, r3, r1
  40599c:	69e1      	ldr	r1, [r4, #28]
  40599e:	47b0      	blx	r6
  4059a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4059a4:	f73f af1b 	bgt.w	4057de <__sfvwrite_r+0xbe>
  4059a8:	e738      	b.n	40581c <__sfvwrite_r+0xfc>
  4059aa:	461a      	mov	r2, r3
  4059ac:	4629      	mov	r1, r5
  4059ae:	9301      	str	r3, [sp, #4]
  4059b0:	f000 fc06 	bl	4061c0 <memmove>
  4059b4:	6822      	ldr	r2, [r4, #0]
  4059b6:	9b01      	ldr	r3, [sp, #4]
  4059b8:	9800      	ldr	r0, [sp, #0]
  4059ba:	441a      	add	r2, r3
  4059bc:	6022      	str	r2, [r4, #0]
  4059be:	4621      	mov	r1, r4
  4059c0:	f7ff fc4a 	bl	405258 <_fflush_r>
  4059c4:	9b01      	ldr	r3, [sp, #4]
  4059c6:	2800      	cmp	r0, #0
  4059c8:	f47f af28 	bne.w	40581c <__sfvwrite_r+0xfc>
  4059cc:	461f      	mov	r7, r3
  4059ce:	e750      	b.n	405872 <__sfvwrite_r+0x152>
  4059d0:	9800      	ldr	r0, [sp, #0]
  4059d2:	f000 fc65 	bl	4062a0 <_realloc_r>
  4059d6:	4683      	mov	fp, r0
  4059d8:	2800      	cmp	r0, #0
  4059da:	d1c5      	bne.n	405968 <__sfvwrite_r+0x248>
  4059dc:	9d00      	ldr	r5, [sp, #0]
  4059de:	6921      	ldr	r1, [r4, #16]
  4059e0:	4628      	mov	r0, r5
  4059e2:	f7ff fdb7 	bl	405554 <_free_r>
  4059e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059ea:	220c      	movs	r2, #12
  4059ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4059f0:	602a      	str	r2, [r5, #0]
  4059f2:	e715      	b.n	405820 <__sfvwrite_r+0x100>
  4059f4:	f106 0901 	add.w	r9, r6, #1
  4059f8:	e722      	b.n	405840 <__sfvwrite_r+0x120>
  4059fa:	f04f 30ff 	mov.w	r0, #4294967295
  4059fe:	e6bf      	b.n	405780 <__sfvwrite_r+0x60>
  405a00:	9a00      	ldr	r2, [sp, #0]
  405a02:	230c      	movs	r3, #12
  405a04:	6013      	str	r3, [r2, #0]
  405a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405a0a:	e709      	b.n	405820 <__sfvwrite_r+0x100>
  405a0c:	7ffffc00 	.word	0x7ffffc00

00405a10 <_fwalk_reent>:
  405a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405a14:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405a18:	d01f      	beq.n	405a5a <_fwalk_reent+0x4a>
  405a1a:	4688      	mov	r8, r1
  405a1c:	4606      	mov	r6, r0
  405a1e:	f04f 0900 	mov.w	r9, #0
  405a22:	687d      	ldr	r5, [r7, #4]
  405a24:	68bc      	ldr	r4, [r7, #8]
  405a26:	3d01      	subs	r5, #1
  405a28:	d411      	bmi.n	405a4e <_fwalk_reent+0x3e>
  405a2a:	89a3      	ldrh	r3, [r4, #12]
  405a2c:	2b01      	cmp	r3, #1
  405a2e:	f105 35ff 	add.w	r5, r5, #4294967295
  405a32:	d908      	bls.n	405a46 <_fwalk_reent+0x36>
  405a34:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405a38:	3301      	adds	r3, #1
  405a3a:	4621      	mov	r1, r4
  405a3c:	4630      	mov	r0, r6
  405a3e:	d002      	beq.n	405a46 <_fwalk_reent+0x36>
  405a40:	47c0      	blx	r8
  405a42:	ea49 0900 	orr.w	r9, r9, r0
  405a46:	1c6b      	adds	r3, r5, #1
  405a48:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405a4c:	d1ed      	bne.n	405a2a <_fwalk_reent+0x1a>
  405a4e:	683f      	ldr	r7, [r7, #0]
  405a50:	2f00      	cmp	r7, #0
  405a52:	d1e6      	bne.n	405a22 <_fwalk_reent+0x12>
  405a54:	4648      	mov	r0, r9
  405a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a5a:	46b9      	mov	r9, r7
  405a5c:	4648      	mov	r0, r9
  405a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a62:	bf00      	nop

00405a64 <__locale_mb_cur_max>:
  405a64:	4b04      	ldr	r3, [pc, #16]	; (405a78 <__locale_mb_cur_max+0x14>)
  405a66:	4a05      	ldr	r2, [pc, #20]	; (405a7c <__locale_mb_cur_max+0x18>)
  405a68:	681b      	ldr	r3, [r3, #0]
  405a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405a6c:	2b00      	cmp	r3, #0
  405a6e:	bf08      	it	eq
  405a70:	4613      	moveq	r3, r2
  405a72:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405a76:	4770      	bx	lr
  405a78:	20400018 	.word	0x20400018
  405a7c:	2040044c 	.word	0x2040044c

00405a80 <__retarget_lock_init_recursive>:
  405a80:	4770      	bx	lr
  405a82:	bf00      	nop

00405a84 <__retarget_lock_close_recursive>:
  405a84:	4770      	bx	lr
  405a86:	bf00      	nop

00405a88 <__retarget_lock_acquire_recursive>:
  405a88:	4770      	bx	lr
  405a8a:	bf00      	nop

00405a8c <__retarget_lock_release_recursive>:
  405a8c:	4770      	bx	lr
  405a8e:	bf00      	nop

00405a90 <__swhatbuf_r>:
  405a90:	b570      	push	{r4, r5, r6, lr}
  405a92:	460c      	mov	r4, r1
  405a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a98:	2900      	cmp	r1, #0
  405a9a:	b090      	sub	sp, #64	; 0x40
  405a9c:	4615      	mov	r5, r2
  405a9e:	461e      	mov	r6, r3
  405aa0:	db14      	blt.n	405acc <__swhatbuf_r+0x3c>
  405aa2:	aa01      	add	r2, sp, #4
  405aa4:	f000 ff74 	bl	406990 <_fstat_r>
  405aa8:	2800      	cmp	r0, #0
  405aaa:	db0f      	blt.n	405acc <__swhatbuf_r+0x3c>
  405aac:	9a02      	ldr	r2, [sp, #8]
  405aae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405ab2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405ab6:	fab2 f282 	clz	r2, r2
  405aba:	0952      	lsrs	r2, r2, #5
  405abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405ac0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405ac4:	6032      	str	r2, [r6, #0]
  405ac6:	602b      	str	r3, [r5, #0]
  405ac8:	b010      	add	sp, #64	; 0x40
  405aca:	bd70      	pop	{r4, r5, r6, pc}
  405acc:	89a2      	ldrh	r2, [r4, #12]
  405ace:	2300      	movs	r3, #0
  405ad0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405ad4:	6033      	str	r3, [r6, #0]
  405ad6:	d004      	beq.n	405ae2 <__swhatbuf_r+0x52>
  405ad8:	2240      	movs	r2, #64	; 0x40
  405ada:	4618      	mov	r0, r3
  405adc:	602a      	str	r2, [r5, #0]
  405ade:	b010      	add	sp, #64	; 0x40
  405ae0:	bd70      	pop	{r4, r5, r6, pc}
  405ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405ae6:	602b      	str	r3, [r5, #0]
  405ae8:	b010      	add	sp, #64	; 0x40
  405aea:	bd70      	pop	{r4, r5, r6, pc}

00405aec <__smakebuf_r>:
  405aec:	898a      	ldrh	r2, [r1, #12]
  405aee:	0792      	lsls	r2, r2, #30
  405af0:	460b      	mov	r3, r1
  405af2:	d506      	bpl.n	405b02 <__smakebuf_r+0x16>
  405af4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405af8:	2101      	movs	r1, #1
  405afa:	601a      	str	r2, [r3, #0]
  405afc:	611a      	str	r2, [r3, #16]
  405afe:	6159      	str	r1, [r3, #20]
  405b00:	4770      	bx	lr
  405b02:	b5f0      	push	{r4, r5, r6, r7, lr}
  405b04:	b083      	sub	sp, #12
  405b06:	ab01      	add	r3, sp, #4
  405b08:	466a      	mov	r2, sp
  405b0a:	460c      	mov	r4, r1
  405b0c:	4606      	mov	r6, r0
  405b0e:	f7ff ffbf 	bl	405a90 <__swhatbuf_r>
  405b12:	9900      	ldr	r1, [sp, #0]
  405b14:	4605      	mov	r5, r0
  405b16:	4630      	mov	r0, r6
  405b18:	f000 f83a 	bl	405b90 <_malloc_r>
  405b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b20:	b1d8      	cbz	r0, 405b5a <__smakebuf_r+0x6e>
  405b22:	9a01      	ldr	r2, [sp, #4]
  405b24:	4f15      	ldr	r7, [pc, #84]	; (405b7c <__smakebuf_r+0x90>)
  405b26:	9900      	ldr	r1, [sp, #0]
  405b28:	63f7      	str	r7, [r6, #60]	; 0x3c
  405b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405b2e:	81a3      	strh	r3, [r4, #12]
  405b30:	6020      	str	r0, [r4, #0]
  405b32:	6120      	str	r0, [r4, #16]
  405b34:	6161      	str	r1, [r4, #20]
  405b36:	b91a      	cbnz	r2, 405b40 <__smakebuf_r+0x54>
  405b38:	432b      	orrs	r3, r5
  405b3a:	81a3      	strh	r3, [r4, #12]
  405b3c:	b003      	add	sp, #12
  405b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405b40:	4630      	mov	r0, r6
  405b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405b46:	f000 ff37 	bl	4069b8 <_isatty_r>
  405b4a:	b1a0      	cbz	r0, 405b76 <__smakebuf_r+0x8a>
  405b4c:	89a3      	ldrh	r3, [r4, #12]
  405b4e:	f023 0303 	bic.w	r3, r3, #3
  405b52:	f043 0301 	orr.w	r3, r3, #1
  405b56:	b21b      	sxth	r3, r3
  405b58:	e7ee      	b.n	405b38 <__smakebuf_r+0x4c>
  405b5a:	059a      	lsls	r2, r3, #22
  405b5c:	d4ee      	bmi.n	405b3c <__smakebuf_r+0x50>
  405b5e:	f023 0303 	bic.w	r3, r3, #3
  405b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405b66:	f043 0302 	orr.w	r3, r3, #2
  405b6a:	2101      	movs	r1, #1
  405b6c:	81a3      	strh	r3, [r4, #12]
  405b6e:	6022      	str	r2, [r4, #0]
  405b70:	6122      	str	r2, [r4, #16]
  405b72:	6161      	str	r1, [r4, #20]
  405b74:	e7e2      	b.n	405b3c <__smakebuf_r+0x50>
  405b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b7a:	e7dd      	b.n	405b38 <__smakebuf_r+0x4c>
  405b7c:	004052ad 	.word	0x004052ad

00405b80 <malloc>:
  405b80:	4b02      	ldr	r3, [pc, #8]	; (405b8c <malloc+0xc>)
  405b82:	4601      	mov	r1, r0
  405b84:	6818      	ldr	r0, [r3, #0]
  405b86:	f000 b803 	b.w	405b90 <_malloc_r>
  405b8a:	bf00      	nop
  405b8c:	20400018 	.word	0x20400018

00405b90 <_malloc_r>:
  405b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b94:	f101 060b 	add.w	r6, r1, #11
  405b98:	2e16      	cmp	r6, #22
  405b9a:	b083      	sub	sp, #12
  405b9c:	4605      	mov	r5, r0
  405b9e:	f240 809e 	bls.w	405cde <_malloc_r+0x14e>
  405ba2:	f036 0607 	bics.w	r6, r6, #7
  405ba6:	f100 80bd 	bmi.w	405d24 <_malloc_r+0x194>
  405baa:	42b1      	cmp	r1, r6
  405bac:	f200 80ba 	bhi.w	405d24 <_malloc_r+0x194>
  405bb0:	f000 fb6a 	bl	406288 <__malloc_lock>
  405bb4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405bb8:	f0c0 8293 	bcc.w	4060e2 <_malloc_r+0x552>
  405bbc:	0a73      	lsrs	r3, r6, #9
  405bbe:	f000 80b8 	beq.w	405d32 <_malloc_r+0x1a2>
  405bc2:	2b04      	cmp	r3, #4
  405bc4:	f200 8179 	bhi.w	405eba <_malloc_r+0x32a>
  405bc8:	09b3      	lsrs	r3, r6, #6
  405bca:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405bce:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405bd2:	00c3      	lsls	r3, r0, #3
  405bd4:	4fbf      	ldr	r7, [pc, #764]	; (405ed4 <_malloc_r+0x344>)
  405bd6:	443b      	add	r3, r7
  405bd8:	f1a3 0108 	sub.w	r1, r3, #8
  405bdc:	685c      	ldr	r4, [r3, #4]
  405bde:	42a1      	cmp	r1, r4
  405be0:	d106      	bne.n	405bf0 <_malloc_r+0x60>
  405be2:	e00c      	b.n	405bfe <_malloc_r+0x6e>
  405be4:	2a00      	cmp	r2, #0
  405be6:	f280 80aa 	bge.w	405d3e <_malloc_r+0x1ae>
  405bea:	68e4      	ldr	r4, [r4, #12]
  405bec:	42a1      	cmp	r1, r4
  405bee:	d006      	beq.n	405bfe <_malloc_r+0x6e>
  405bf0:	6863      	ldr	r3, [r4, #4]
  405bf2:	f023 0303 	bic.w	r3, r3, #3
  405bf6:	1b9a      	subs	r2, r3, r6
  405bf8:	2a0f      	cmp	r2, #15
  405bfa:	ddf3      	ble.n	405be4 <_malloc_r+0x54>
  405bfc:	4670      	mov	r0, lr
  405bfe:	693c      	ldr	r4, [r7, #16]
  405c00:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405ee8 <_malloc_r+0x358>
  405c04:	4574      	cmp	r4, lr
  405c06:	f000 81ab 	beq.w	405f60 <_malloc_r+0x3d0>
  405c0a:	6863      	ldr	r3, [r4, #4]
  405c0c:	f023 0303 	bic.w	r3, r3, #3
  405c10:	1b9a      	subs	r2, r3, r6
  405c12:	2a0f      	cmp	r2, #15
  405c14:	f300 8190 	bgt.w	405f38 <_malloc_r+0x3a8>
  405c18:	2a00      	cmp	r2, #0
  405c1a:	f8c7 e014 	str.w	lr, [r7, #20]
  405c1e:	f8c7 e010 	str.w	lr, [r7, #16]
  405c22:	f280 809d 	bge.w	405d60 <_malloc_r+0x1d0>
  405c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405c2a:	f080 8161 	bcs.w	405ef0 <_malloc_r+0x360>
  405c2e:	08db      	lsrs	r3, r3, #3
  405c30:	f103 0c01 	add.w	ip, r3, #1
  405c34:	1099      	asrs	r1, r3, #2
  405c36:	687a      	ldr	r2, [r7, #4]
  405c38:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405c3c:	f8c4 8008 	str.w	r8, [r4, #8]
  405c40:	2301      	movs	r3, #1
  405c42:	408b      	lsls	r3, r1
  405c44:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405c48:	4313      	orrs	r3, r2
  405c4a:	3908      	subs	r1, #8
  405c4c:	60e1      	str	r1, [r4, #12]
  405c4e:	607b      	str	r3, [r7, #4]
  405c50:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405c54:	f8c8 400c 	str.w	r4, [r8, #12]
  405c58:	1082      	asrs	r2, r0, #2
  405c5a:	2401      	movs	r4, #1
  405c5c:	4094      	lsls	r4, r2
  405c5e:	429c      	cmp	r4, r3
  405c60:	f200 808b 	bhi.w	405d7a <_malloc_r+0x1ea>
  405c64:	421c      	tst	r4, r3
  405c66:	d106      	bne.n	405c76 <_malloc_r+0xe6>
  405c68:	f020 0003 	bic.w	r0, r0, #3
  405c6c:	0064      	lsls	r4, r4, #1
  405c6e:	421c      	tst	r4, r3
  405c70:	f100 0004 	add.w	r0, r0, #4
  405c74:	d0fa      	beq.n	405c6c <_malloc_r+0xdc>
  405c76:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405c7a:	46cc      	mov	ip, r9
  405c7c:	4680      	mov	r8, r0
  405c7e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405c82:	459c      	cmp	ip, r3
  405c84:	d107      	bne.n	405c96 <_malloc_r+0x106>
  405c86:	e16d      	b.n	405f64 <_malloc_r+0x3d4>
  405c88:	2a00      	cmp	r2, #0
  405c8a:	f280 817b 	bge.w	405f84 <_malloc_r+0x3f4>
  405c8e:	68db      	ldr	r3, [r3, #12]
  405c90:	459c      	cmp	ip, r3
  405c92:	f000 8167 	beq.w	405f64 <_malloc_r+0x3d4>
  405c96:	6859      	ldr	r1, [r3, #4]
  405c98:	f021 0103 	bic.w	r1, r1, #3
  405c9c:	1b8a      	subs	r2, r1, r6
  405c9e:	2a0f      	cmp	r2, #15
  405ca0:	ddf2      	ble.n	405c88 <_malloc_r+0xf8>
  405ca2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405ca6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405caa:	9300      	str	r3, [sp, #0]
  405cac:	199c      	adds	r4, r3, r6
  405cae:	4628      	mov	r0, r5
  405cb0:	f046 0601 	orr.w	r6, r6, #1
  405cb4:	f042 0501 	orr.w	r5, r2, #1
  405cb8:	605e      	str	r6, [r3, #4]
  405cba:	f8c8 c00c 	str.w	ip, [r8, #12]
  405cbe:	f8cc 8008 	str.w	r8, [ip, #8]
  405cc2:	617c      	str	r4, [r7, #20]
  405cc4:	613c      	str	r4, [r7, #16]
  405cc6:	f8c4 e00c 	str.w	lr, [r4, #12]
  405cca:	f8c4 e008 	str.w	lr, [r4, #8]
  405cce:	6065      	str	r5, [r4, #4]
  405cd0:	505a      	str	r2, [r3, r1]
  405cd2:	f000 fadf 	bl	406294 <__malloc_unlock>
  405cd6:	9b00      	ldr	r3, [sp, #0]
  405cd8:	f103 0408 	add.w	r4, r3, #8
  405cdc:	e01e      	b.n	405d1c <_malloc_r+0x18c>
  405cde:	2910      	cmp	r1, #16
  405ce0:	d820      	bhi.n	405d24 <_malloc_r+0x194>
  405ce2:	f000 fad1 	bl	406288 <__malloc_lock>
  405ce6:	2610      	movs	r6, #16
  405ce8:	2318      	movs	r3, #24
  405cea:	2002      	movs	r0, #2
  405cec:	4f79      	ldr	r7, [pc, #484]	; (405ed4 <_malloc_r+0x344>)
  405cee:	443b      	add	r3, r7
  405cf0:	f1a3 0208 	sub.w	r2, r3, #8
  405cf4:	685c      	ldr	r4, [r3, #4]
  405cf6:	4294      	cmp	r4, r2
  405cf8:	f000 813d 	beq.w	405f76 <_malloc_r+0x3e6>
  405cfc:	6863      	ldr	r3, [r4, #4]
  405cfe:	68e1      	ldr	r1, [r4, #12]
  405d00:	68a6      	ldr	r6, [r4, #8]
  405d02:	f023 0303 	bic.w	r3, r3, #3
  405d06:	4423      	add	r3, r4
  405d08:	4628      	mov	r0, r5
  405d0a:	685a      	ldr	r2, [r3, #4]
  405d0c:	60f1      	str	r1, [r6, #12]
  405d0e:	f042 0201 	orr.w	r2, r2, #1
  405d12:	608e      	str	r6, [r1, #8]
  405d14:	605a      	str	r2, [r3, #4]
  405d16:	f000 fabd 	bl	406294 <__malloc_unlock>
  405d1a:	3408      	adds	r4, #8
  405d1c:	4620      	mov	r0, r4
  405d1e:	b003      	add	sp, #12
  405d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d24:	2400      	movs	r4, #0
  405d26:	230c      	movs	r3, #12
  405d28:	4620      	mov	r0, r4
  405d2a:	602b      	str	r3, [r5, #0]
  405d2c:	b003      	add	sp, #12
  405d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d32:	2040      	movs	r0, #64	; 0x40
  405d34:	f44f 7300 	mov.w	r3, #512	; 0x200
  405d38:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405d3c:	e74a      	b.n	405bd4 <_malloc_r+0x44>
  405d3e:	4423      	add	r3, r4
  405d40:	68e1      	ldr	r1, [r4, #12]
  405d42:	685a      	ldr	r2, [r3, #4]
  405d44:	68a6      	ldr	r6, [r4, #8]
  405d46:	f042 0201 	orr.w	r2, r2, #1
  405d4a:	60f1      	str	r1, [r6, #12]
  405d4c:	4628      	mov	r0, r5
  405d4e:	608e      	str	r6, [r1, #8]
  405d50:	605a      	str	r2, [r3, #4]
  405d52:	f000 fa9f 	bl	406294 <__malloc_unlock>
  405d56:	3408      	adds	r4, #8
  405d58:	4620      	mov	r0, r4
  405d5a:	b003      	add	sp, #12
  405d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d60:	4423      	add	r3, r4
  405d62:	4628      	mov	r0, r5
  405d64:	685a      	ldr	r2, [r3, #4]
  405d66:	f042 0201 	orr.w	r2, r2, #1
  405d6a:	605a      	str	r2, [r3, #4]
  405d6c:	f000 fa92 	bl	406294 <__malloc_unlock>
  405d70:	3408      	adds	r4, #8
  405d72:	4620      	mov	r0, r4
  405d74:	b003      	add	sp, #12
  405d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d7a:	68bc      	ldr	r4, [r7, #8]
  405d7c:	6863      	ldr	r3, [r4, #4]
  405d7e:	f023 0803 	bic.w	r8, r3, #3
  405d82:	45b0      	cmp	r8, r6
  405d84:	d304      	bcc.n	405d90 <_malloc_r+0x200>
  405d86:	eba8 0306 	sub.w	r3, r8, r6
  405d8a:	2b0f      	cmp	r3, #15
  405d8c:	f300 8085 	bgt.w	405e9a <_malloc_r+0x30a>
  405d90:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405eec <_malloc_r+0x35c>
  405d94:	4b50      	ldr	r3, [pc, #320]	; (405ed8 <_malloc_r+0x348>)
  405d96:	f8d9 2000 	ldr.w	r2, [r9]
  405d9a:	681b      	ldr	r3, [r3, #0]
  405d9c:	3201      	adds	r2, #1
  405d9e:	4433      	add	r3, r6
  405da0:	eb04 0a08 	add.w	sl, r4, r8
  405da4:	f000 8155 	beq.w	406052 <_malloc_r+0x4c2>
  405da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405dac:	330f      	adds	r3, #15
  405dae:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405db2:	f02b 0b0f 	bic.w	fp, fp, #15
  405db6:	4659      	mov	r1, fp
  405db8:	4628      	mov	r0, r5
  405dba:	f000 fc17 	bl	4065ec <_sbrk_r>
  405dbe:	1c41      	adds	r1, r0, #1
  405dc0:	4602      	mov	r2, r0
  405dc2:	f000 80fc 	beq.w	405fbe <_malloc_r+0x42e>
  405dc6:	4582      	cmp	sl, r0
  405dc8:	f200 80f7 	bhi.w	405fba <_malloc_r+0x42a>
  405dcc:	4b43      	ldr	r3, [pc, #268]	; (405edc <_malloc_r+0x34c>)
  405dce:	6819      	ldr	r1, [r3, #0]
  405dd0:	4459      	add	r1, fp
  405dd2:	6019      	str	r1, [r3, #0]
  405dd4:	f000 814d 	beq.w	406072 <_malloc_r+0x4e2>
  405dd8:	f8d9 0000 	ldr.w	r0, [r9]
  405ddc:	3001      	adds	r0, #1
  405dde:	bf1b      	ittet	ne
  405de0:	eba2 0a0a 	subne.w	sl, r2, sl
  405de4:	4451      	addne	r1, sl
  405de6:	f8c9 2000 	streq.w	r2, [r9]
  405dea:	6019      	strne	r1, [r3, #0]
  405dec:	f012 0107 	ands.w	r1, r2, #7
  405df0:	f000 8115 	beq.w	40601e <_malloc_r+0x48e>
  405df4:	f1c1 0008 	rsb	r0, r1, #8
  405df8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405dfc:	4402      	add	r2, r0
  405dfe:	3108      	adds	r1, #8
  405e00:	eb02 090b 	add.w	r9, r2, fp
  405e04:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405e08:	eba1 0909 	sub.w	r9, r1, r9
  405e0c:	4649      	mov	r1, r9
  405e0e:	4628      	mov	r0, r5
  405e10:	9301      	str	r3, [sp, #4]
  405e12:	9200      	str	r2, [sp, #0]
  405e14:	f000 fbea 	bl	4065ec <_sbrk_r>
  405e18:	1c43      	adds	r3, r0, #1
  405e1a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405e1e:	f000 8143 	beq.w	4060a8 <_malloc_r+0x518>
  405e22:	1a80      	subs	r0, r0, r2
  405e24:	4448      	add	r0, r9
  405e26:	f040 0001 	orr.w	r0, r0, #1
  405e2a:	6819      	ldr	r1, [r3, #0]
  405e2c:	60ba      	str	r2, [r7, #8]
  405e2e:	4449      	add	r1, r9
  405e30:	42bc      	cmp	r4, r7
  405e32:	6050      	str	r0, [r2, #4]
  405e34:	6019      	str	r1, [r3, #0]
  405e36:	d017      	beq.n	405e68 <_malloc_r+0x2d8>
  405e38:	f1b8 0f0f 	cmp.w	r8, #15
  405e3c:	f240 80fb 	bls.w	406036 <_malloc_r+0x4a6>
  405e40:	6860      	ldr	r0, [r4, #4]
  405e42:	f1a8 020c 	sub.w	r2, r8, #12
  405e46:	f022 0207 	bic.w	r2, r2, #7
  405e4a:	eb04 0e02 	add.w	lr, r4, r2
  405e4e:	f000 0001 	and.w	r0, r0, #1
  405e52:	f04f 0c05 	mov.w	ip, #5
  405e56:	4310      	orrs	r0, r2
  405e58:	2a0f      	cmp	r2, #15
  405e5a:	6060      	str	r0, [r4, #4]
  405e5c:	f8ce c004 	str.w	ip, [lr, #4]
  405e60:	f8ce c008 	str.w	ip, [lr, #8]
  405e64:	f200 8117 	bhi.w	406096 <_malloc_r+0x506>
  405e68:	4b1d      	ldr	r3, [pc, #116]	; (405ee0 <_malloc_r+0x350>)
  405e6a:	68bc      	ldr	r4, [r7, #8]
  405e6c:	681a      	ldr	r2, [r3, #0]
  405e6e:	4291      	cmp	r1, r2
  405e70:	bf88      	it	hi
  405e72:	6019      	strhi	r1, [r3, #0]
  405e74:	4b1b      	ldr	r3, [pc, #108]	; (405ee4 <_malloc_r+0x354>)
  405e76:	681a      	ldr	r2, [r3, #0]
  405e78:	4291      	cmp	r1, r2
  405e7a:	6862      	ldr	r2, [r4, #4]
  405e7c:	bf88      	it	hi
  405e7e:	6019      	strhi	r1, [r3, #0]
  405e80:	f022 0203 	bic.w	r2, r2, #3
  405e84:	4296      	cmp	r6, r2
  405e86:	eba2 0306 	sub.w	r3, r2, r6
  405e8a:	d801      	bhi.n	405e90 <_malloc_r+0x300>
  405e8c:	2b0f      	cmp	r3, #15
  405e8e:	dc04      	bgt.n	405e9a <_malloc_r+0x30a>
  405e90:	4628      	mov	r0, r5
  405e92:	f000 f9ff 	bl	406294 <__malloc_unlock>
  405e96:	2400      	movs	r4, #0
  405e98:	e740      	b.n	405d1c <_malloc_r+0x18c>
  405e9a:	19a2      	adds	r2, r4, r6
  405e9c:	f043 0301 	orr.w	r3, r3, #1
  405ea0:	f046 0601 	orr.w	r6, r6, #1
  405ea4:	6066      	str	r6, [r4, #4]
  405ea6:	4628      	mov	r0, r5
  405ea8:	60ba      	str	r2, [r7, #8]
  405eaa:	6053      	str	r3, [r2, #4]
  405eac:	f000 f9f2 	bl	406294 <__malloc_unlock>
  405eb0:	3408      	adds	r4, #8
  405eb2:	4620      	mov	r0, r4
  405eb4:	b003      	add	sp, #12
  405eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405eba:	2b14      	cmp	r3, #20
  405ebc:	d971      	bls.n	405fa2 <_malloc_r+0x412>
  405ebe:	2b54      	cmp	r3, #84	; 0x54
  405ec0:	f200 80a3 	bhi.w	40600a <_malloc_r+0x47a>
  405ec4:	0b33      	lsrs	r3, r6, #12
  405ec6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405eca:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  405ece:	00c3      	lsls	r3, r0, #3
  405ed0:	e680      	b.n	405bd4 <_malloc_r+0x44>
  405ed2:	bf00      	nop
  405ed4:	204005b8 	.word	0x204005b8
  405ed8:	2040c5e4 	.word	0x2040c5e4
  405edc:	2040c5b4 	.word	0x2040c5b4
  405ee0:	2040c5dc 	.word	0x2040c5dc
  405ee4:	2040c5e0 	.word	0x2040c5e0
  405ee8:	204005c0 	.word	0x204005c0
  405eec:	204009c0 	.word	0x204009c0
  405ef0:	0a5a      	lsrs	r2, r3, #9
  405ef2:	2a04      	cmp	r2, #4
  405ef4:	d95b      	bls.n	405fae <_malloc_r+0x41e>
  405ef6:	2a14      	cmp	r2, #20
  405ef8:	f200 80ae 	bhi.w	406058 <_malloc_r+0x4c8>
  405efc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405f00:	00c9      	lsls	r1, r1, #3
  405f02:	325b      	adds	r2, #91	; 0x5b
  405f04:	eb07 0c01 	add.w	ip, r7, r1
  405f08:	5879      	ldr	r1, [r7, r1]
  405f0a:	f1ac 0c08 	sub.w	ip, ip, #8
  405f0e:	458c      	cmp	ip, r1
  405f10:	f000 8088 	beq.w	406024 <_malloc_r+0x494>
  405f14:	684a      	ldr	r2, [r1, #4]
  405f16:	f022 0203 	bic.w	r2, r2, #3
  405f1a:	4293      	cmp	r3, r2
  405f1c:	d273      	bcs.n	406006 <_malloc_r+0x476>
  405f1e:	6889      	ldr	r1, [r1, #8]
  405f20:	458c      	cmp	ip, r1
  405f22:	d1f7      	bne.n	405f14 <_malloc_r+0x384>
  405f24:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405f28:	687b      	ldr	r3, [r7, #4]
  405f2a:	60e2      	str	r2, [r4, #12]
  405f2c:	f8c4 c008 	str.w	ip, [r4, #8]
  405f30:	6094      	str	r4, [r2, #8]
  405f32:	f8cc 400c 	str.w	r4, [ip, #12]
  405f36:	e68f      	b.n	405c58 <_malloc_r+0xc8>
  405f38:	19a1      	adds	r1, r4, r6
  405f3a:	f046 0c01 	orr.w	ip, r6, #1
  405f3e:	f042 0601 	orr.w	r6, r2, #1
  405f42:	f8c4 c004 	str.w	ip, [r4, #4]
  405f46:	4628      	mov	r0, r5
  405f48:	6179      	str	r1, [r7, #20]
  405f4a:	6139      	str	r1, [r7, #16]
  405f4c:	f8c1 e00c 	str.w	lr, [r1, #12]
  405f50:	f8c1 e008 	str.w	lr, [r1, #8]
  405f54:	604e      	str	r6, [r1, #4]
  405f56:	50e2      	str	r2, [r4, r3]
  405f58:	f000 f99c 	bl	406294 <__malloc_unlock>
  405f5c:	3408      	adds	r4, #8
  405f5e:	e6dd      	b.n	405d1c <_malloc_r+0x18c>
  405f60:	687b      	ldr	r3, [r7, #4]
  405f62:	e679      	b.n	405c58 <_malloc_r+0xc8>
  405f64:	f108 0801 	add.w	r8, r8, #1
  405f68:	f018 0f03 	tst.w	r8, #3
  405f6c:	f10c 0c08 	add.w	ip, ip, #8
  405f70:	f47f ae85 	bne.w	405c7e <_malloc_r+0xee>
  405f74:	e02d      	b.n	405fd2 <_malloc_r+0x442>
  405f76:	68dc      	ldr	r4, [r3, #12]
  405f78:	42a3      	cmp	r3, r4
  405f7a:	bf08      	it	eq
  405f7c:	3002      	addeq	r0, #2
  405f7e:	f43f ae3e 	beq.w	405bfe <_malloc_r+0x6e>
  405f82:	e6bb      	b.n	405cfc <_malloc_r+0x16c>
  405f84:	4419      	add	r1, r3
  405f86:	461c      	mov	r4, r3
  405f88:	684a      	ldr	r2, [r1, #4]
  405f8a:	68db      	ldr	r3, [r3, #12]
  405f8c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405f90:	f042 0201 	orr.w	r2, r2, #1
  405f94:	604a      	str	r2, [r1, #4]
  405f96:	4628      	mov	r0, r5
  405f98:	60f3      	str	r3, [r6, #12]
  405f9a:	609e      	str	r6, [r3, #8]
  405f9c:	f000 f97a 	bl	406294 <__malloc_unlock>
  405fa0:	e6bc      	b.n	405d1c <_malloc_r+0x18c>
  405fa2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405fa6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405faa:	00c3      	lsls	r3, r0, #3
  405fac:	e612      	b.n	405bd4 <_malloc_r+0x44>
  405fae:	099a      	lsrs	r2, r3, #6
  405fb0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405fb4:	00c9      	lsls	r1, r1, #3
  405fb6:	3238      	adds	r2, #56	; 0x38
  405fb8:	e7a4      	b.n	405f04 <_malloc_r+0x374>
  405fba:	42bc      	cmp	r4, r7
  405fbc:	d054      	beq.n	406068 <_malloc_r+0x4d8>
  405fbe:	68bc      	ldr	r4, [r7, #8]
  405fc0:	6862      	ldr	r2, [r4, #4]
  405fc2:	f022 0203 	bic.w	r2, r2, #3
  405fc6:	e75d      	b.n	405e84 <_malloc_r+0x2f4>
  405fc8:	f859 3908 	ldr.w	r3, [r9], #-8
  405fcc:	4599      	cmp	r9, r3
  405fce:	f040 8086 	bne.w	4060de <_malloc_r+0x54e>
  405fd2:	f010 0f03 	tst.w	r0, #3
  405fd6:	f100 30ff 	add.w	r0, r0, #4294967295
  405fda:	d1f5      	bne.n	405fc8 <_malloc_r+0x438>
  405fdc:	687b      	ldr	r3, [r7, #4]
  405fde:	ea23 0304 	bic.w	r3, r3, r4
  405fe2:	607b      	str	r3, [r7, #4]
  405fe4:	0064      	lsls	r4, r4, #1
  405fe6:	429c      	cmp	r4, r3
  405fe8:	f63f aec7 	bhi.w	405d7a <_malloc_r+0x1ea>
  405fec:	2c00      	cmp	r4, #0
  405fee:	f43f aec4 	beq.w	405d7a <_malloc_r+0x1ea>
  405ff2:	421c      	tst	r4, r3
  405ff4:	4640      	mov	r0, r8
  405ff6:	f47f ae3e 	bne.w	405c76 <_malloc_r+0xe6>
  405ffa:	0064      	lsls	r4, r4, #1
  405ffc:	421c      	tst	r4, r3
  405ffe:	f100 0004 	add.w	r0, r0, #4
  406002:	d0fa      	beq.n	405ffa <_malloc_r+0x46a>
  406004:	e637      	b.n	405c76 <_malloc_r+0xe6>
  406006:	468c      	mov	ip, r1
  406008:	e78c      	b.n	405f24 <_malloc_r+0x394>
  40600a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40600e:	d815      	bhi.n	40603c <_malloc_r+0x4ac>
  406010:	0bf3      	lsrs	r3, r6, #15
  406012:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406016:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40601a:	00c3      	lsls	r3, r0, #3
  40601c:	e5da      	b.n	405bd4 <_malloc_r+0x44>
  40601e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406022:	e6ed      	b.n	405e00 <_malloc_r+0x270>
  406024:	687b      	ldr	r3, [r7, #4]
  406026:	1092      	asrs	r2, r2, #2
  406028:	2101      	movs	r1, #1
  40602a:	fa01 f202 	lsl.w	r2, r1, r2
  40602e:	4313      	orrs	r3, r2
  406030:	607b      	str	r3, [r7, #4]
  406032:	4662      	mov	r2, ip
  406034:	e779      	b.n	405f2a <_malloc_r+0x39a>
  406036:	2301      	movs	r3, #1
  406038:	6053      	str	r3, [r2, #4]
  40603a:	e729      	b.n	405e90 <_malloc_r+0x300>
  40603c:	f240 5254 	movw	r2, #1364	; 0x554
  406040:	4293      	cmp	r3, r2
  406042:	d822      	bhi.n	40608a <_malloc_r+0x4fa>
  406044:	0cb3      	lsrs	r3, r6, #18
  406046:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40604a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40604e:	00c3      	lsls	r3, r0, #3
  406050:	e5c0      	b.n	405bd4 <_malloc_r+0x44>
  406052:	f103 0b10 	add.w	fp, r3, #16
  406056:	e6ae      	b.n	405db6 <_malloc_r+0x226>
  406058:	2a54      	cmp	r2, #84	; 0x54
  40605a:	d829      	bhi.n	4060b0 <_malloc_r+0x520>
  40605c:	0b1a      	lsrs	r2, r3, #12
  40605e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406062:	00c9      	lsls	r1, r1, #3
  406064:	326e      	adds	r2, #110	; 0x6e
  406066:	e74d      	b.n	405f04 <_malloc_r+0x374>
  406068:	4b20      	ldr	r3, [pc, #128]	; (4060ec <_malloc_r+0x55c>)
  40606a:	6819      	ldr	r1, [r3, #0]
  40606c:	4459      	add	r1, fp
  40606e:	6019      	str	r1, [r3, #0]
  406070:	e6b2      	b.n	405dd8 <_malloc_r+0x248>
  406072:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406076:	2800      	cmp	r0, #0
  406078:	f47f aeae 	bne.w	405dd8 <_malloc_r+0x248>
  40607c:	eb08 030b 	add.w	r3, r8, fp
  406080:	68ba      	ldr	r2, [r7, #8]
  406082:	f043 0301 	orr.w	r3, r3, #1
  406086:	6053      	str	r3, [r2, #4]
  406088:	e6ee      	b.n	405e68 <_malloc_r+0x2d8>
  40608a:	207f      	movs	r0, #127	; 0x7f
  40608c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406090:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406094:	e59e      	b.n	405bd4 <_malloc_r+0x44>
  406096:	f104 0108 	add.w	r1, r4, #8
  40609a:	4628      	mov	r0, r5
  40609c:	9300      	str	r3, [sp, #0]
  40609e:	f7ff fa59 	bl	405554 <_free_r>
  4060a2:	9b00      	ldr	r3, [sp, #0]
  4060a4:	6819      	ldr	r1, [r3, #0]
  4060a6:	e6df      	b.n	405e68 <_malloc_r+0x2d8>
  4060a8:	2001      	movs	r0, #1
  4060aa:	f04f 0900 	mov.w	r9, #0
  4060ae:	e6bc      	b.n	405e2a <_malloc_r+0x29a>
  4060b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4060b4:	d805      	bhi.n	4060c2 <_malloc_r+0x532>
  4060b6:	0bda      	lsrs	r2, r3, #15
  4060b8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4060bc:	00c9      	lsls	r1, r1, #3
  4060be:	3277      	adds	r2, #119	; 0x77
  4060c0:	e720      	b.n	405f04 <_malloc_r+0x374>
  4060c2:	f240 5154 	movw	r1, #1364	; 0x554
  4060c6:	428a      	cmp	r2, r1
  4060c8:	d805      	bhi.n	4060d6 <_malloc_r+0x546>
  4060ca:	0c9a      	lsrs	r2, r3, #18
  4060cc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4060d0:	00c9      	lsls	r1, r1, #3
  4060d2:	327c      	adds	r2, #124	; 0x7c
  4060d4:	e716      	b.n	405f04 <_malloc_r+0x374>
  4060d6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4060da:	227e      	movs	r2, #126	; 0x7e
  4060dc:	e712      	b.n	405f04 <_malloc_r+0x374>
  4060de:	687b      	ldr	r3, [r7, #4]
  4060e0:	e780      	b.n	405fe4 <_malloc_r+0x454>
  4060e2:	08f0      	lsrs	r0, r6, #3
  4060e4:	f106 0308 	add.w	r3, r6, #8
  4060e8:	e600      	b.n	405cec <_malloc_r+0x15c>
  4060ea:	bf00      	nop
  4060ec:	2040c5b4 	.word	0x2040c5b4

004060f0 <__ascii_mbtowc>:
  4060f0:	b082      	sub	sp, #8
  4060f2:	b149      	cbz	r1, 406108 <__ascii_mbtowc+0x18>
  4060f4:	b15a      	cbz	r2, 40610e <__ascii_mbtowc+0x1e>
  4060f6:	b16b      	cbz	r3, 406114 <__ascii_mbtowc+0x24>
  4060f8:	7813      	ldrb	r3, [r2, #0]
  4060fa:	600b      	str	r3, [r1, #0]
  4060fc:	7812      	ldrb	r2, [r2, #0]
  4060fe:	1c10      	adds	r0, r2, #0
  406100:	bf18      	it	ne
  406102:	2001      	movne	r0, #1
  406104:	b002      	add	sp, #8
  406106:	4770      	bx	lr
  406108:	a901      	add	r1, sp, #4
  40610a:	2a00      	cmp	r2, #0
  40610c:	d1f3      	bne.n	4060f6 <__ascii_mbtowc+0x6>
  40610e:	4610      	mov	r0, r2
  406110:	b002      	add	sp, #8
  406112:	4770      	bx	lr
  406114:	f06f 0001 	mvn.w	r0, #1
  406118:	e7f4      	b.n	406104 <__ascii_mbtowc+0x14>
  40611a:	bf00      	nop
  40611c:	0000      	movs	r0, r0
	...

00406120 <memchr>:
  406120:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406124:	2a10      	cmp	r2, #16
  406126:	db2b      	blt.n	406180 <memchr+0x60>
  406128:	f010 0f07 	tst.w	r0, #7
  40612c:	d008      	beq.n	406140 <memchr+0x20>
  40612e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406132:	3a01      	subs	r2, #1
  406134:	428b      	cmp	r3, r1
  406136:	d02d      	beq.n	406194 <memchr+0x74>
  406138:	f010 0f07 	tst.w	r0, #7
  40613c:	b342      	cbz	r2, 406190 <memchr+0x70>
  40613e:	d1f6      	bne.n	40612e <memchr+0xe>
  406140:	b4f0      	push	{r4, r5, r6, r7}
  406142:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406146:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40614a:	f022 0407 	bic.w	r4, r2, #7
  40614e:	f07f 0700 	mvns.w	r7, #0
  406152:	2300      	movs	r3, #0
  406154:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406158:	3c08      	subs	r4, #8
  40615a:	ea85 0501 	eor.w	r5, r5, r1
  40615e:	ea86 0601 	eor.w	r6, r6, r1
  406162:	fa85 f547 	uadd8	r5, r5, r7
  406166:	faa3 f587 	sel	r5, r3, r7
  40616a:	fa86 f647 	uadd8	r6, r6, r7
  40616e:	faa5 f687 	sel	r6, r5, r7
  406172:	b98e      	cbnz	r6, 406198 <memchr+0x78>
  406174:	d1ee      	bne.n	406154 <memchr+0x34>
  406176:	bcf0      	pop	{r4, r5, r6, r7}
  406178:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40617c:	f002 0207 	and.w	r2, r2, #7
  406180:	b132      	cbz	r2, 406190 <memchr+0x70>
  406182:	f810 3b01 	ldrb.w	r3, [r0], #1
  406186:	3a01      	subs	r2, #1
  406188:	ea83 0301 	eor.w	r3, r3, r1
  40618c:	b113      	cbz	r3, 406194 <memchr+0x74>
  40618e:	d1f8      	bne.n	406182 <memchr+0x62>
  406190:	2000      	movs	r0, #0
  406192:	4770      	bx	lr
  406194:	3801      	subs	r0, #1
  406196:	4770      	bx	lr
  406198:	2d00      	cmp	r5, #0
  40619a:	bf06      	itte	eq
  40619c:	4635      	moveq	r5, r6
  40619e:	3803      	subeq	r0, #3
  4061a0:	3807      	subne	r0, #7
  4061a2:	f015 0f01 	tst.w	r5, #1
  4061a6:	d107      	bne.n	4061b8 <memchr+0x98>
  4061a8:	3001      	adds	r0, #1
  4061aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4061ae:	bf02      	ittt	eq
  4061b0:	3001      	addeq	r0, #1
  4061b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4061b6:	3001      	addeq	r0, #1
  4061b8:	bcf0      	pop	{r4, r5, r6, r7}
  4061ba:	3801      	subs	r0, #1
  4061bc:	4770      	bx	lr
  4061be:	bf00      	nop

004061c0 <memmove>:
  4061c0:	4288      	cmp	r0, r1
  4061c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4061c4:	d90d      	bls.n	4061e2 <memmove+0x22>
  4061c6:	188b      	adds	r3, r1, r2
  4061c8:	4298      	cmp	r0, r3
  4061ca:	d20a      	bcs.n	4061e2 <memmove+0x22>
  4061cc:	1884      	adds	r4, r0, r2
  4061ce:	2a00      	cmp	r2, #0
  4061d0:	d051      	beq.n	406276 <memmove+0xb6>
  4061d2:	4622      	mov	r2, r4
  4061d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4061d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4061dc:	4299      	cmp	r1, r3
  4061de:	d1f9      	bne.n	4061d4 <memmove+0x14>
  4061e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4061e2:	2a0f      	cmp	r2, #15
  4061e4:	d948      	bls.n	406278 <memmove+0xb8>
  4061e6:	ea41 0300 	orr.w	r3, r1, r0
  4061ea:	079b      	lsls	r3, r3, #30
  4061ec:	d146      	bne.n	40627c <memmove+0xbc>
  4061ee:	f100 0410 	add.w	r4, r0, #16
  4061f2:	f101 0310 	add.w	r3, r1, #16
  4061f6:	4615      	mov	r5, r2
  4061f8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4061fc:	f844 6c10 	str.w	r6, [r4, #-16]
  406200:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406204:	f844 6c0c 	str.w	r6, [r4, #-12]
  406208:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40620c:	f844 6c08 	str.w	r6, [r4, #-8]
  406210:	3d10      	subs	r5, #16
  406212:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406216:	f844 6c04 	str.w	r6, [r4, #-4]
  40621a:	2d0f      	cmp	r5, #15
  40621c:	f103 0310 	add.w	r3, r3, #16
  406220:	f104 0410 	add.w	r4, r4, #16
  406224:	d8e8      	bhi.n	4061f8 <memmove+0x38>
  406226:	f1a2 0310 	sub.w	r3, r2, #16
  40622a:	f023 030f 	bic.w	r3, r3, #15
  40622e:	f002 0e0f 	and.w	lr, r2, #15
  406232:	3310      	adds	r3, #16
  406234:	f1be 0f03 	cmp.w	lr, #3
  406238:	4419      	add	r1, r3
  40623a:	4403      	add	r3, r0
  40623c:	d921      	bls.n	406282 <memmove+0xc2>
  40623e:	1f1e      	subs	r6, r3, #4
  406240:	460d      	mov	r5, r1
  406242:	4674      	mov	r4, lr
  406244:	3c04      	subs	r4, #4
  406246:	f855 7b04 	ldr.w	r7, [r5], #4
  40624a:	f846 7f04 	str.w	r7, [r6, #4]!
  40624e:	2c03      	cmp	r4, #3
  406250:	d8f8      	bhi.n	406244 <memmove+0x84>
  406252:	f1ae 0404 	sub.w	r4, lr, #4
  406256:	f024 0403 	bic.w	r4, r4, #3
  40625a:	3404      	adds	r4, #4
  40625c:	4421      	add	r1, r4
  40625e:	4423      	add	r3, r4
  406260:	f002 0203 	and.w	r2, r2, #3
  406264:	b162      	cbz	r2, 406280 <memmove+0xc0>
  406266:	3b01      	subs	r3, #1
  406268:	440a      	add	r2, r1
  40626a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40626e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406272:	428a      	cmp	r2, r1
  406274:	d1f9      	bne.n	40626a <memmove+0xaa>
  406276:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406278:	4603      	mov	r3, r0
  40627a:	e7f3      	b.n	406264 <memmove+0xa4>
  40627c:	4603      	mov	r3, r0
  40627e:	e7f2      	b.n	406266 <memmove+0xa6>
  406280:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406282:	4672      	mov	r2, lr
  406284:	e7ee      	b.n	406264 <memmove+0xa4>
  406286:	bf00      	nop

00406288 <__malloc_lock>:
  406288:	4801      	ldr	r0, [pc, #4]	; (406290 <__malloc_lock+0x8>)
  40628a:	f7ff bbfd 	b.w	405a88 <__retarget_lock_acquire_recursive>
  40628e:	bf00      	nop
  406290:	2040c6d4 	.word	0x2040c6d4

00406294 <__malloc_unlock>:
  406294:	4801      	ldr	r0, [pc, #4]	; (40629c <__malloc_unlock+0x8>)
  406296:	f7ff bbf9 	b.w	405a8c <__retarget_lock_release_recursive>
  40629a:	bf00      	nop
  40629c:	2040c6d4 	.word	0x2040c6d4

004062a0 <_realloc_r>:
  4062a0:	2900      	cmp	r1, #0
  4062a2:	f000 8095 	beq.w	4063d0 <_realloc_r+0x130>
  4062a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062aa:	460d      	mov	r5, r1
  4062ac:	4616      	mov	r6, r2
  4062ae:	b083      	sub	sp, #12
  4062b0:	4680      	mov	r8, r0
  4062b2:	f106 070b 	add.w	r7, r6, #11
  4062b6:	f7ff ffe7 	bl	406288 <__malloc_lock>
  4062ba:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4062be:	2f16      	cmp	r7, #22
  4062c0:	f02e 0403 	bic.w	r4, lr, #3
  4062c4:	f1a5 0908 	sub.w	r9, r5, #8
  4062c8:	d83c      	bhi.n	406344 <_realloc_r+0xa4>
  4062ca:	2210      	movs	r2, #16
  4062cc:	4617      	mov	r7, r2
  4062ce:	42be      	cmp	r6, r7
  4062d0:	d83d      	bhi.n	40634e <_realloc_r+0xae>
  4062d2:	4294      	cmp	r4, r2
  4062d4:	da43      	bge.n	40635e <_realloc_r+0xbe>
  4062d6:	4bc4      	ldr	r3, [pc, #784]	; (4065e8 <_realloc_r+0x348>)
  4062d8:	6899      	ldr	r1, [r3, #8]
  4062da:	eb09 0004 	add.w	r0, r9, r4
  4062de:	4288      	cmp	r0, r1
  4062e0:	f000 80b4 	beq.w	40644c <_realloc_r+0x1ac>
  4062e4:	6843      	ldr	r3, [r0, #4]
  4062e6:	f023 0101 	bic.w	r1, r3, #1
  4062ea:	4401      	add	r1, r0
  4062ec:	6849      	ldr	r1, [r1, #4]
  4062ee:	07c9      	lsls	r1, r1, #31
  4062f0:	d54c      	bpl.n	40638c <_realloc_r+0xec>
  4062f2:	f01e 0f01 	tst.w	lr, #1
  4062f6:	f000 809b 	beq.w	406430 <_realloc_r+0x190>
  4062fa:	4631      	mov	r1, r6
  4062fc:	4640      	mov	r0, r8
  4062fe:	f7ff fc47 	bl	405b90 <_malloc_r>
  406302:	4606      	mov	r6, r0
  406304:	2800      	cmp	r0, #0
  406306:	d03a      	beq.n	40637e <_realloc_r+0xde>
  406308:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40630c:	f023 0301 	bic.w	r3, r3, #1
  406310:	444b      	add	r3, r9
  406312:	f1a0 0208 	sub.w	r2, r0, #8
  406316:	429a      	cmp	r2, r3
  406318:	f000 8121 	beq.w	40655e <_realloc_r+0x2be>
  40631c:	1f22      	subs	r2, r4, #4
  40631e:	2a24      	cmp	r2, #36	; 0x24
  406320:	f200 8107 	bhi.w	406532 <_realloc_r+0x292>
  406324:	2a13      	cmp	r2, #19
  406326:	f200 80db 	bhi.w	4064e0 <_realloc_r+0x240>
  40632a:	4603      	mov	r3, r0
  40632c:	462a      	mov	r2, r5
  40632e:	6811      	ldr	r1, [r2, #0]
  406330:	6019      	str	r1, [r3, #0]
  406332:	6851      	ldr	r1, [r2, #4]
  406334:	6059      	str	r1, [r3, #4]
  406336:	6892      	ldr	r2, [r2, #8]
  406338:	609a      	str	r2, [r3, #8]
  40633a:	4629      	mov	r1, r5
  40633c:	4640      	mov	r0, r8
  40633e:	f7ff f909 	bl	405554 <_free_r>
  406342:	e01c      	b.n	40637e <_realloc_r+0xde>
  406344:	f027 0707 	bic.w	r7, r7, #7
  406348:	2f00      	cmp	r7, #0
  40634a:	463a      	mov	r2, r7
  40634c:	dabf      	bge.n	4062ce <_realloc_r+0x2e>
  40634e:	2600      	movs	r6, #0
  406350:	230c      	movs	r3, #12
  406352:	4630      	mov	r0, r6
  406354:	f8c8 3000 	str.w	r3, [r8]
  406358:	b003      	add	sp, #12
  40635a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40635e:	462e      	mov	r6, r5
  406360:	1be3      	subs	r3, r4, r7
  406362:	2b0f      	cmp	r3, #15
  406364:	d81e      	bhi.n	4063a4 <_realloc_r+0x104>
  406366:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40636a:	f003 0301 	and.w	r3, r3, #1
  40636e:	4323      	orrs	r3, r4
  406370:	444c      	add	r4, r9
  406372:	f8c9 3004 	str.w	r3, [r9, #4]
  406376:	6863      	ldr	r3, [r4, #4]
  406378:	f043 0301 	orr.w	r3, r3, #1
  40637c:	6063      	str	r3, [r4, #4]
  40637e:	4640      	mov	r0, r8
  406380:	f7ff ff88 	bl	406294 <__malloc_unlock>
  406384:	4630      	mov	r0, r6
  406386:	b003      	add	sp, #12
  406388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40638c:	f023 0303 	bic.w	r3, r3, #3
  406390:	18e1      	adds	r1, r4, r3
  406392:	4291      	cmp	r1, r2
  406394:	db1f      	blt.n	4063d6 <_realloc_r+0x136>
  406396:	68c3      	ldr	r3, [r0, #12]
  406398:	6882      	ldr	r2, [r0, #8]
  40639a:	462e      	mov	r6, r5
  40639c:	60d3      	str	r3, [r2, #12]
  40639e:	460c      	mov	r4, r1
  4063a0:	609a      	str	r2, [r3, #8]
  4063a2:	e7dd      	b.n	406360 <_realloc_r+0xc0>
  4063a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4063a8:	eb09 0107 	add.w	r1, r9, r7
  4063ac:	f002 0201 	and.w	r2, r2, #1
  4063b0:	444c      	add	r4, r9
  4063b2:	f043 0301 	orr.w	r3, r3, #1
  4063b6:	4317      	orrs	r7, r2
  4063b8:	f8c9 7004 	str.w	r7, [r9, #4]
  4063bc:	604b      	str	r3, [r1, #4]
  4063be:	6863      	ldr	r3, [r4, #4]
  4063c0:	f043 0301 	orr.w	r3, r3, #1
  4063c4:	3108      	adds	r1, #8
  4063c6:	6063      	str	r3, [r4, #4]
  4063c8:	4640      	mov	r0, r8
  4063ca:	f7ff f8c3 	bl	405554 <_free_r>
  4063ce:	e7d6      	b.n	40637e <_realloc_r+0xde>
  4063d0:	4611      	mov	r1, r2
  4063d2:	f7ff bbdd 	b.w	405b90 <_malloc_r>
  4063d6:	f01e 0f01 	tst.w	lr, #1
  4063da:	d18e      	bne.n	4062fa <_realloc_r+0x5a>
  4063dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4063e0:	eba9 0a01 	sub.w	sl, r9, r1
  4063e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4063e8:	f021 0103 	bic.w	r1, r1, #3
  4063ec:	440b      	add	r3, r1
  4063ee:	4423      	add	r3, r4
  4063f0:	4293      	cmp	r3, r2
  4063f2:	db25      	blt.n	406440 <_realloc_r+0x1a0>
  4063f4:	68c2      	ldr	r2, [r0, #12]
  4063f6:	6881      	ldr	r1, [r0, #8]
  4063f8:	4656      	mov	r6, sl
  4063fa:	60ca      	str	r2, [r1, #12]
  4063fc:	6091      	str	r1, [r2, #8]
  4063fe:	f8da 100c 	ldr.w	r1, [sl, #12]
  406402:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406406:	1f22      	subs	r2, r4, #4
  406408:	2a24      	cmp	r2, #36	; 0x24
  40640a:	60c1      	str	r1, [r0, #12]
  40640c:	6088      	str	r0, [r1, #8]
  40640e:	f200 8094 	bhi.w	40653a <_realloc_r+0x29a>
  406412:	2a13      	cmp	r2, #19
  406414:	d96f      	bls.n	4064f6 <_realloc_r+0x256>
  406416:	6829      	ldr	r1, [r5, #0]
  406418:	f8ca 1008 	str.w	r1, [sl, #8]
  40641c:	6869      	ldr	r1, [r5, #4]
  40641e:	f8ca 100c 	str.w	r1, [sl, #12]
  406422:	2a1b      	cmp	r2, #27
  406424:	f200 80a2 	bhi.w	40656c <_realloc_r+0x2cc>
  406428:	3508      	adds	r5, #8
  40642a:	f10a 0210 	add.w	r2, sl, #16
  40642e:	e063      	b.n	4064f8 <_realloc_r+0x258>
  406430:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406434:	eba9 0a03 	sub.w	sl, r9, r3
  406438:	f8da 1004 	ldr.w	r1, [sl, #4]
  40643c:	f021 0103 	bic.w	r1, r1, #3
  406440:	1863      	adds	r3, r4, r1
  406442:	4293      	cmp	r3, r2
  406444:	f6ff af59 	blt.w	4062fa <_realloc_r+0x5a>
  406448:	4656      	mov	r6, sl
  40644a:	e7d8      	b.n	4063fe <_realloc_r+0x15e>
  40644c:	6841      	ldr	r1, [r0, #4]
  40644e:	f021 0b03 	bic.w	fp, r1, #3
  406452:	44a3      	add	fp, r4
  406454:	f107 0010 	add.w	r0, r7, #16
  406458:	4583      	cmp	fp, r0
  40645a:	da56      	bge.n	40650a <_realloc_r+0x26a>
  40645c:	f01e 0f01 	tst.w	lr, #1
  406460:	f47f af4b 	bne.w	4062fa <_realloc_r+0x5a>
  406464:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406468:	eba9 0a01 	sub.w	sl, r9, r1
  40646c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406470:	f021 0103 	bic.w	r1, r1, #3
  406474:	448b      	add	fp, r1
  406476:	4558      	cmp	r0, fp
  406478:	dce2      	bgt.n	406440 <_realloc_r+0x1a0>
  40647a:	4656      	mov	r6, sl
  40647c:	f8da 100c 	ldr.w	r1, [sl, #12]
  406480:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406484:	1f22      	subs	r2, r4, #4
  406486:	2a24      	cmp	r2, #36	; 0x24
  406488:	60c1      	str	r1, [r0, #12]
  40648a:	6088      	str	r0, [r1, #8]
  40648c:	f200 808f 	bhi.w	4065ae <_realloc_r+0x30e>
  406490:	2a13      	cmp	r2, #19
  406492:	f240 808a 	bls.w	4065aa <_realloc_r+0x30a>
  406496:	6829      	ldr	r1, [r5, #0]
  406498:	f8ca 1008 	str.w	r1, [sl, #8]
  40649c:	6869      	ldr	r1, [r5, #4]
  40649e:	f8ca 100c 	str.w	r1, [sl, #12]
  4064a2:	2a1b      	cmp	r2, #27
  4064a4:	f200 808a 	bhi.w	4065bc <_realloc_r+0x31c>
  4064a8:	3508      	adds	r5, #8
  4064aa:	f10a 0210 	add.w	r2, sl, #16
  4064ae:	6829      	ldr	r1, [r5, #0]
  4064b0:	6011      	str	r1, [r2, #0]
  4064b2:	6869      	ldr	r1, [r5, #4]
  4064b4:	6051      	str	r1, [r2, #4]
  4064b6:	68a9      	ldr	r1, [r5, #8]
  4064b8:	6091      	str	r1, [r2, #8]
  4064ba:	eb0a 0107 	add.w	r1, sl, r7
  4064be:	ebab 0207 	sub.w	r2, fp, r7
  4064c2:	f042 0201 	orr.w	r2, r2, #1
  4064c6:	6099      	str	r1, [r3, #8]
  4064c8:	604a      	str	r2, [r1, #4]
  4064ca:	f8da 3004 	ldr.w	r3, [sl, #4]
  4064ce:	f003 0301 	and.w	r3, r3, #1
  4064d2:	431f      	orrs	r7, r3
  4064d4:	4640      	mov	r0, r8
  4064d6:	f8ca 7004 	str.w	r7, [sl, #4]
  4064da:	f7ff fedb 	bl	406294 <__malloc_unlock>
  4064de:	e751      	b.n	406384 <_realloc_r+0xe4>
  4064e0:	682b      	ldr	r3, [r5, #0]
  4064e2:	6003      	str	r3, [r0, #0]
  4064e4:	686b      	ldr	r3, [r5, #4]
  4064e6:	6043      	str	r3, [r0, #4]
  4064e8:	2a1b      	cmp	r2, #27
  4064ea:	d82d      	bhi.n	406548 <_realloc_r+0x2a8>
  4064ec:	f100 0308 	add.w	r3, r0, #8
  4064f0:	f105 0208 	add.w	r2, r5, #8
  4064f4:	e71b      	b.n	40632e <_realloc_r+0x8e>
  4064f6:	4632      	mov	r2, r6
  4064f8:	6829      	ldr	r1, [r5, #0]
  4064fa:	6011      	str	r1, [r2, #0]
  4064fc:	6869      	ldr	r1, [r5, #4]
  4064fe:	6051      	str	r1, [r2, #4]
  406500:	68a9      	ldr	r1, [r5, #8]
  406502:	6091      	str	r1, [r2, #8]
  406504:	461c      	mov	r4, r3
  406506:	46d1      	mov	r9, sl
  406508:	e72a      	b.n	406360 <_realloc_r+0xc0>
  40650a:	eb09 0107 	add.w	r1, r9, r7
  40650e:	ebab 0b07 	sub.w	fp, fp, r7
  406512:	f04b 0201 	orr.w	r2, fp, #1
  406516:	6099      	str	r1, [r3, #8]
  406518:	604a      	str	r2, [r1, #4]
  40651a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40651e:	f003 0301 	and.w	r3, r3, #1
  406522:	431f      	orrs	r7, r3
  406524:	4640      	mov	r0, r8
  406526:	f845 7c04 	str.w	r7, [r5, #-4]
  40652a:	f7ff feb3 	bl	406294 <__malloc_unlock>
  40652e:	462e      	mov	r6, r5
  406530:	e728      	b.n	406384 <_realloc_r+0xe4>
  406532:	4629      	mov	r1, r5
  406534:	f7ff fe44 	bl	4061c0 <memmove>
  406538:	e6ff      	b.n	40633a <_realloc_r+0x9a>
  40653a:	4629      	mov	r1, r5
  40653c:	4630      	mov	r0, r6
  40653e:	461c      	mov	r4, r3
  406540:	46d1      	mov	r9, sl
  406542:	f7ff fe3d 	bl	4061c0 <memmove>
  406546:	e70b      	b.n	406360 <_realloc_r+0xc0>
  406548:	68ab      	ldr	r3, [r5, #8]
  40654a:	6083      	str	r3, [r0, #8]
  40654c:	68eb      	ldr	r3, [r5, #12]
  40654e:	60c3      	str	r3, [r0, #12]
  406550:	2a24      	cmp	r2, #36	; 0x24
  406552:	d017      	beq.n	406584 <_realloc_r+0x2e4>
  406554:	f100 0310 	add.w	r3, r0, #16
  406558:	f105 0210 	add.w	r2, r5, #16
  40655c:	e6e7      	b.n	40632e <_realloc_r+0x8e>
  40655e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406562:	f023 0303 	bic.w	r3, r3, #3
  406566:	441c      	add	r4, r3
  406568:	462e      	mov	r6, r5
  40656a:	e6f9      	b.n	406360 <_realloc_r+0xc0>
  40656c:	68a9      	ldr	r1, [r5, #8]
  40656e:	f8ca 1010 	str.w	r1, [sl, #16]
  406572:	68e9      	ldr	r1, [r5, #12]
  406574:	f8ca 1014 	str.w	r1, [sl, #20]
  406578:	2a24      	cmp	r2, #36	; 0x24
  40657a:	d00c      	beq.n	406596 <_realloc_r+0x2f6>
  40657c:	3510      	adds	r5, #16
  40657e:	f10a 0218 	add.w	r2, sl, #24
  406582:	e7b9      	b.n	4064f8 <_realloc_r+0x258>
  406584:	692b      	ldr	r3, [r5, #16]
  406586:	6103      	str	r3, [r0, #16]
  406588:	696b      	ldr	r3, [r5, #20]
  40658a:	6143      	str	r3, [r0, #20]
  40658c:	f105 0218 	add.w	r2, r5, #24
  406590:	f100 0318 	add.w	r3, r0, #24
  406594:	e6cb      	b.n	40632e <_realloc_r+0x8e>
  406596:	692a      	ldr	r2, [r5, #16]
  406598:	f8ca 2018 	str.w	r2, [sl, #24]
  40659c:	696a      	ldr	r2, [r5, #20]
  40659e:	f8ca 201c 	str.w	r2, [sl, #28]
  4065a2:	3518      	adds	r5, #24
  4065a4:	f10a 0220 	add.w	r2, sl, #32
  4065a8:	e7a6      	b.n	4064f8 <_realloc_r+0x258>
  4065aa:	4632      	mov	r2, r6
  4065ac:	e77f      	b.n	4064ae <_realloc_r+0x20e>
  4065ae:	4629      	mov	r1, r5
  4065b0:	4630      	mov	r0, r6
  4065b2:	9301      	str	r3, [sp, #4]
  4065b4:	f7ff fe04 	bl	4061c0 <memmove>
  4065b8:	9b01      	ldr	r3, [sp, #4]
  4065ba:	e77e      	b.n	4064ba <_realloc_r+0x21a>
  4065bc:	68a9      	ldr	r1, [r5, #8]
  4065be:	f8ca 1010 	str.w	r1, [sl, #16]
  4065c2:	68e9      	ldr	r1, [r5, #12]
  4065c4:	f8ca 1014 	str.w	r1, [sl, #20]
  4065c8:	2a24      	cmp	r2, #36	; 0x24
  4065ca:	d003      	beq.n	4065d4 <_realloc_r+0x334>
  4065cc:	3510      	adds	r5, #16
  4065ce:	f10a 0218 	add.w	r2, sl, #24
  4065d2:	e76c      	b.n	4064ae <_realloc_r+0x20e>
  4065d4:	692a      	ldr	r2, [r5, #16]
  4065d6:	f8ca 2018 	str.w	r2, [sl, #24]
  4065da:	696a      	ldr	r2, [r5, #20]
  4065dc:	f8ca 201c 	str.w	r2, [sl, #28]
  4065e0:	3518      	adds	r5, #24
  4065e2:	f10a 0220 	add.w	r2, sl, #32
  4065e6:	e762      	b.n	4064ae <_realloc_r+0x20e>
  4065e8:	204005b8 	.word	0x204005b8

004065ec <_sbrk_r>:
  4065ec:	b538      	push	{r3, r4, r5, lr}
  4065ee:	4c07      	ldr	r4, [pc, #28]	; (40660c <_sbrk_r+0x20>)
  4065f0:	2300      	movs	r3, #0
  4065f2:	4605      	mov	r5, r0
  4065f4:	4608      	mov	r0, r1
  4065f6:	6023      	str	r3, [r4, #0]
  4065f8:	f7fd f996 	bl	403928 <_sbrk>
  4065fc:	1c43      	adds	r3, r0, #1
  4065fe:	d000      	beq.n	406602 <_sbrk_r+0x16>
  406600:	bd38      	pop	{r3, r4, r5, pc}
  406602:	6823      	ldr	r3, [r4, #0]
  406604:	2b00      	cmp	r3, #0
  406606:	d0fb      	beq.n	406600 <_sbrk_r+0x14>
  406608:	602b      	str	r3, [r5, #0]
  40660a:	bd38      	pop	{r3, r4, r5, pc}
  40660c:	2040c6e8 	.word	0x2040c6e8

00406610 <__sread>:
  406610:	b510      	push	{r4, lr}
  406612:	460c      	mov	r4, r1
  406614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406618:	f000 f9f6 	bl	406a08 <_read_r>
  40661c:	2800      	cmp	r0, #0
  40661e:	db03      	blt.n	406628 <__sread+0x18>
  406620:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406622:	4403      	add	r3, r0
  406624:	6523      	str	r3, [r4, #80]	; 0x50
  406626:	bd10      	pop	{r4, pc}
  406628:	89a3      	ldrh	r3, [r4, #12]
  40662a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40662e:	81a3      	strh	r3, [r4, #12]
  406630:	bd10      	pop	{r4, pc}
  406632:	bf00      	nop

00406634 <__swrite>:
  406634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406638:	4616      	mov	r6, r2
  40663a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40663e:	461f      	mov	r7, r3
  406640:	05d3      	lsls	r3, r2, #23
  406642:	460c      	mov	r4, r1
  406644:	4605      	mov	r5, r0
  406646:	d507      	bpl.n	406658 <__swrite+0x24>
  406648:	2200      	movs	r2, #0
  40664a:	2302      	movs	r3, #2
  40664c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406650:	f000 f9c4 	bl	4069dc <_lseek_r>
  406654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40665c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406660:	81a2      	strh	r2, [r4, #12]
  406662:	463b      	mov	r3, r7
  406664:	4632      	mov	r2, r6
  406666:	4628      	mov	r0, r5
  406668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40666c:	f000 b8a4 	b.w	4067b8 <_write_r>

00406670 <__sseek>:
  406670:	b510      	push	{r4, lr}
  406672:	460c      	mov	r4, r1
  406674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406678:	f000 f9b0 	bl	4069dc <_lseek_r>
  40667c:	89a3      	ldrh	r3, [r4, #12]
  40667e:	1c42      	adds	r2, r0, #1
  406680:	bf0e      	itee	eq
  406682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40668a:	6520      	strne	r0, [r4, #80]	; 0x50
  40668c:	81a3      	strh	r3, [r4, #12]
  40668e:	bd10      	pop	{r4, pc}

00406690 <__sclose>:
  406690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406694:	f000 b908 	b.w	4068a8 <_close_r>

00406698 <__swbuf_r>:
  406698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40669a:	460d      	mov	r5, r1
  40669c:	4614      	mov	r4, r2
  40669e:	4606      	mov	r6, r0
  4066a0:	b110      	cbz	r0, 4066a8 <__swbuf_r+0x10>
  4066a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4066a4:	2b00      	cmp	r3, #0
  4066a6:	d04b      	beq.n	406740 <__swbuf_r+0xa8>
  4066a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4066ac:	69a3      	ldr	r3, [r4, #24]
  4066ae:	60a3      	str	r3, [r4, #8]
  4066b0:	b291      	uxth	r1, r2
  4066b2:	0708      	lsls	r0, r1, #28
  4066b4:	d539      	bpl.n	40672a <__swbuf_r+0x92>
  4066b6:	6923      	ldr	r3, [r4, #16]
  4066b8:	2b00      	cmp	r3, #0
  4066ba:	d036      	beq.n	40672a <__swbuf_r+0x92>
  4066bc:	b2ed      	uxtb	r5, r5
  4066be:	0489      	lsls	r1, r1, #18
  4066c0:	462f      	mov	r7, r5
  4066c2:	d515      	bpl.n	4066f0 <__swbuf_r+0x58>
  4066c4:	6822      	ldr	r2, [r4, #0]
  4066c6:	6961      	ldr	r1, [r4, #20]
  4066c8:	1ad3      	subs	r3, r2, r3
  4066ca:	428b      	cmp	r3, r1
  4066cc:	da1c      	bge.n	406708 <__swbuf_r+0x70>
  4066ce:	3301      	adds	r3, #1
  4066d0:	68a1      	ldr	r1, [r4, #8]
  4066d2:	1c50      	adds	r0, r2, #1
  4066d4:	3901      	subs	r1, #1
  4066d6:	60a1      	str	r1, [r4, #8]
  4066d8:	6020      	str	r0, [r4, #0]
  4066da:	7015      	strb	r5, [r2, #0]
  4066dc:	6962      	ldr	r2, [r4, #20]
  4066de:	429a      	cmp	r2, r3
  4066e0:	d01a      	beq.n	406718 <__swbuf_r+0x80>
  4066e2:	89a3      	ldrh	r3, [r4, #12]
  4066e4:	07db      	lsls	r3, r3, #31
  4066e6:	d501      	bpl.n	4066ec <__swbuf_r+0x54>
  4066e8:	2d0a      	cmp	r5, #10
  4066ea:	d015      	beq.n	406718 <__swbuf_r+0x80>
  4066ec:	4638      	mov	r0, r7
  4066ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4066f0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4066f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4066f6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4066fa:	81a2      	strh	r2, [r4, #12]
  4066fc:	6822      	ldr	r2, [r4, #0]
  4066fe:	6661      	str	r1, [r4, #100]	; 0x64
  406700:	6961      	ldr	r1, [r4, #20]
  406702:	1ad3      	subs	r3, r2, r3
  406704:	428b      	cmp	r3, r1
  406706:	dbe2      	blt.n	4066ce <__swbuf_r+0x36>
  406708:	4621      	mov	r1, r4
  40670a:	4630      	mov	r0, r6
  40670c:	f7fe fda4 	bl	405258 <_fflush_r>
  406710:	b940      	cbnz	r0, 406724 <__swbuf_r+0x8c>
  406712:	6822      	ldr	r2, [r4, #0]
  406714:	2301      	movs	r3, #1
  406716:	e7db      	b.n	4066d0 <__swbuf_r+0x38>
  406718:	4621      	mov	r1, r4
  40671a:	4630      	mov	r0, r6
  40671c:	f7fe fd9c 	bl	405258 <_fflush_r>
  406720:	2800      	cmp	r0, #0
  406722:	d0e3      	beq.n	4066ec <__swbuf_r+0x54>
  406724:	f04f 37ff 	mov.w	r7, #4294967295
  406728:	e7e0      	b.n	4066ec <__swbuf_r+0x54>
  40672a:	4621      	mov	r1, r4
  40672c:	4630      	mov	r0, r6
  40672e:	f7fe fc7f 	bl	405030 <__swsetup_r>
  406732:	2800      	cmp	r0, #0
  406734:	d1f6      	bne.n	406724 <__swbuf_r+0x8c>
  406736:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40673a:	6923      	ldr	r3, [r4, #16]
  40673c:	b291      	uxth	r1, r2
  40673e:	e7bd      	b.n	4066bc <__swbuf_r+0x24>
  406740:	f7fe fde2 	bl	405308 <__sinit>
  406744:	e7b0      	b.n	4066a8 <__swbuf_r+0x10>
  406746:	bf00      	nop

00406748 <_wcrtomb_r>:
  406748:	b5f0      	push	{r4, r5, r6, r7, lr}
  40674a:	4606      	mov	r6, r0
  40674c:	b085      	sub	sp, #20
  40674e:	461f      	mov	r7, r3
  406750:	b189      	cbz	r1, 406776 <_wcrtomb_r+0x2e>
  406752:	4c10      	ldr	r4, [pc, #64]	; (406794 <_wcrtomb_r+0x4c>)
  406754:	4d10      	ldr	r5, [pc, #64]	; (406798 <_wcrtomb_r+0x50>)
  406756:	6824      	ldr	r4, [r4, #0]
  406758:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40675a:	2c00      	cmp	r4, #0
  40675c:	bf08      	it	eq
  40675e:	462c      	moveq	r4, r5
  406760:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406764:	47a0      	blx	r4
  406766:	1c43      	adds	r3, r0, #1
  406768:	d103      	bne.n	406772 <_wcrtomb_r+0x2a>
  40676a:	2200      	movs	r2, #0
  40676c:	238a      	movs	r3, #138	; 0x8a
  40676e:	603a      	str	r2, [r7, #0]
  406770:	6033      	str	r3, [r6, #0]
  406772:	b005      	add	sp, #20
  406774:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406776:	460c      	mov	r4, r1
  406778:	4906      	ldr	r1, [pc, #24]	; (406794 <_wcrtomb_r+0x4c>)
  40677a:	4a07      	ldr	r2, [pc, #28]	; (406798 <_wcrtomb_r+0x50>)
  40677c:	6809      	ldr	r1, [r1, #0]
  40677e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406780:	2900      	cmp	r1, #0
  406782:	bf08      	it	eq
  406784:	4611      	moveq	r1, r2
  406786:	4622      	mov	r2, r4
  406788:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40678c:	a901      	add	r1, sp, #4
  40678e:	47a0      	blx	r4
  406790:	e7e9      	b.n	406766 <_wcrtomb_r+0x1e>
  406792:	bf00      	nop
  406794:	20400018 	.word	0x20400018
  406798:	2040044c 	.word	0x2040044c

0040679c <__ascii_wctomb>:
  40679c:	b121      	cbz	r1, 4067a8 <__ascii_wctomb+0xc>
  40679e:	2aff      	cmp	r2, #255	; 0xff
  4067a0:	d804      	bhi.n	4067ac <__ascii_wctomb+0x10>
  4067a2:	700a      	strb	r2, [r1, #0]
  4067a4:	2001      	movs	r0, #1
  4067a6:	4770      	bx	lr
  4067a8:	4608      	mov	r0, r1
  4067aa:	4770      	bx	lr
  4067ac:	238a      	movs	r3, #138	; 0x8a
  4067ae:	6003      	str	r3, [r0, #0]
  4067b0:	f04f 30ff 	mov.w	r0, #4294967295
  4067b4:	4770      	bx	lr
  4067b6:	bf00      	nop

004067b8 <_write_r>:
  4067b8:	b570      	push	{r4, r5, r6, lr}
  4067ba:	460d      	mov	r5, r1
  4067bc:	4c08      	ldr	r4, [pc, #32]	; (4067e0 <_write_r+0x28>)
  4067be:	4611      	mov	r1, r2
  4067c0:	4606      	mov	r6, r0
  4067c2:	461a      	mov	r2, r3
  4067c4:	4628      	mov	r0, r5
  4067c6:	2300      	movs	r3, #0
  4067c8:	6023      	str	r3, [r4, #0]
  4067ca:	f7f9 fd0d 	bl	4001e8 <_write>
  4067ce:	1c43      	adds	r3, r0, #1
  4067d0:	d000      	beq.n	4067d4 <_write_r+0x1c>
  4067d2:	bd70      	pop	{r4, r5, r6, pc}
  4067d4:	6823      	ldr	r3, [r4, #0]
  4067d6:	2b00      	cmp	r3, #0
  4067d8:	d0fb      	beq.n	4067d2 <_write_r+0x1a>
  4067da:	6033      	str	r3, [r6, #0]
  4067dc:	bd70      	pop	{r4, r5, r6, pc}
  4067de:	bf00      	nop
  4067e0:	2040c6e8 	.word	0x2040c6e8

004067e4 <__register_exitproc>:
  4067e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4067e8:	4d2c      	ldr	r5, [pc, #176]	; (40689c <__register_exitproc+0xb8>)
  4067ea:	4606      	mov	r6, r0
  4067ec:	6828      	ldr	r0, [r5, #0]
  4067ee:	4698      	mov	r8, r3
  4067f0:	460f      	mov	r7, r1
  4067f2:	4691      	mov	r9, r2
  4067f4:	f7ff f948 	bl	405a88 <__retarget_lock_acquire_recursive>
  4067f8:	4b29      	ldr	r3, [pc, #164]	; (4068a0 <__register_exitproc+0xbc>)
  4067fa:	681c      	ldr	r4, [r3, #0]
  4067fc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406800:	2b00      	cmp	r3, #0
  406802:	d03e      	beq.n	406882 <__register_exitproc+0x9e>
  406804:	685a      	ldr	r2, [r3, #4]
  406806:	2a1f      	cmp	r2, #31
  406808:	dc1c      	bgt.n	406844 <__register_exitproc+0x60>
  40680a:	f102 0e01 	add.w	lr, r2, #1
  40680e:	b176      	cbz	r6, 40682e <__register_exitproc+0x4a>
  406810:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406814:	2401      	movs	r4, #1
  406816:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40681a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40681e:	4094      	lsls	r4, r2
  406820:	4320      	orrs	r0, r4
  406822:	2e02      	cmp	r6, #2
  406824:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406828:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40682c:	d023      	beq.n	406876 <__register_exitproc+0x92>
  40682e:	3202      	adds	r2, #2
  406830:	f8c3 e004 	str.w	lr, [r3, #4]
  406834:	6828      	ldr	r0, [r5, #0]
  406836:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40683a:	f7ff f927 	bl	405a8c <__retarget_lock_release_recursive>
  40683e:	2000      	movs	r0, #0
  406840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406844:	4b17      	ldr	r3, [pc, #92]	; (4068a4 <__register_exitproc+0xc0>)
  406846:	b30b      	cbz	r3, 40688c <__register_exitproc+0xa8>
  406848:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40684c:	f7ff f998 	bl	405b80 <malloc>
  406850:	4603      	mov	r3, r0
  406852:	b1d8      	cbz	r0, 40688c <__register_exitproc+0xa8>
  406854:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406858:	6002      	str	r2, [r0, #0]
  40685a:	2100      	movs	r1, #0
  40685c:	6041      	str	r1, [r0, #4]
  40685e:	460a      	mov	r2, r1
  406860:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406864:	f04f 0e01 	mov.w	lr, #1
  406868:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40686c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406870:	2e00      	cmp	r6, #0
  406872:	d0dc      	beq.n	40682e <__register_exitproc+0x4a>
  406874:	e7cc      	b.n	406810 <__register_exitproc+0x2c>
  406876:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40687a:	430c      	orrs	r4, r1
  40687c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406880:	e7d5      	b.n	40682e <__register_exitproc+0x4a>
  406882:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406886:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40688a:	e7bb      	b.n	406804 <__register_exitproc+0x20>
  40688c:	6828      	ldr	r0, [r5, #0]
  40688e:	f7ff f8fd 	bl	405a8c <__retarget_lock_release_recursive>
  406892:	f04f 30ff 	mov.w	r0, #4294967295
  406896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40689a:	bf00      	nop
  40689c:	20400448 	.word	0x20400448
  4068a0:	00406b0c 	.word	0x00406b0c
  4068a4:	00405b81 	.word	0x00405b81

004068a8 <_close_r>:
  4068a8:	b538      	push	{r3, r4, r5, lr}
  4068aa:	4c07      	ldr	r4, [pc, #28]	; (4068c8 <_close_r+0x20>)
  4068ac:	2300      	movs	r3, #0
  4068ae:	4605      	mov	r5, r0
  4068b0:	4608      	mov	r0, r1
  4068b2:	6023      	str	r3, [r4, #0]
  4068b4:	f7fd f854 	bl	403960 <_close>
  4068b8:	1c43      	adds	r3, r0, #1
  4068ba:	d000      	beq.n	4068be <_close_r+0x16>
  4068bc:	bd38      	pop	{r3, r4, r5, pc}
  4068be:	6823      	ldr	r3, [r4, #0]
  4068c0:	2b00      	cmp	r3, #0
  4068c2:	d0fb      	beq.n	4068bc <_close_r+0x14>
  4068c4:	602b      	str	r3, [r5, #0]
  4068c6:	bd38      	pop	{r3, r4, r5, pc}
  4068c8:	2040c6e8 	.word	0x2040c6e8

004068cc <_fclose_r>:
  4068cc:	b570      	push	{r4, r5, r6, lr}
  4068ce:	b159      	cbz	r1, 4068e8 <_fclose_r+0x1c>
  4068d0:	4605      	mov	r5, r0
  4068d2:	460c      	mov	r4, r1
  4068d4:	b110      	cbz	r0, 4068dc <_fclose_r+0x10>
  4068d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4068d8:	2b00      	cmp	r3, #0
  4068da:	d03c      	beq.n	406956 <_fclose_r+0x8a>
  4068dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4068de:	07d8      	lsls	r0, r3, #31
  4068e0:	d505      	bpl.n	4068ee <_fclose_r+0x22>
  4068e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4068e6:	b92b      	cbnz	r3, 4068f4 <_fclose_r+0x28>
  4068e8:	2600      	movs	r6, #0
  4068ea:	4630      	mov	r0, r6
  4068ec:	bd70      	pop	{r4, r5, r6, pc}
  4068ee:	89a3      	ldrh	r3, [r4, #12]
  4068f0:	0599      	lsls	r1, r3, #22
  4068f2:	d53c      	bpl.n	40696e <_fclose_r+0xa2>
  4068f4:	4621      	mov	r1, r4
  4068f6:	4628      	mov	r0, r5
  4068f8:	f7fe fc0e 	bl	405118 <__sflush_r>
  4068fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4068fe:	4606      	mov	r6, r0
  406900:	b133      	cbz	r3, 406910 <_fclose_r+0x44>
  406902:	69e1      	ldr	r1, [r4, #28]
  406904:	4628      	mov	r0, r5
  406906:	4798      	blx	r3
  406908:	2800      	cmp	r0, #0
  40690a:	bfb8      	it	lt
  40690c:	f04f 36ff 	movlt.w	r6, #4294967295
  406910:	89a3      	ldrh	r3, [r4, #12]
  406912:	061a      	lsls	r2, r3, #24
  406914:	d422      	bmi.n	40695c <_fclose_r+0x90>
  406916:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406918:	b141      	cbz	r1, 40692c <_fclose_r+0x60>
  40691a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40691e:	4299      	cmp	r1, r3
  406920:	d002      	beq.n	406928 <_fclose_r+0x5c>
  406922:	4628      	mov	r0, r5
  406924:	f7fe fe16 	bl	405554 <_free_r>
  406928:	2300      	movs	r3, #0
  40692a:	6323      	str	r3, [r4, #48]	; 0x30
  40692c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40692e:	b121      	cbz	r1, 40693a <_fclose_r+0x6e>
  406930:	4628      	mov	r0, r5
  406932:	f7fe fe0f 	bl	405554 <_free_r>
  406936:	2300      	movs	r3, #0
  406938:	6463      	str	r3, [r4, #68]	; 0x44
  40693a:	f7fe fd11 	bl	405360 <__sfp_lock_acquire>
  40693e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406940:	2200      	movs	r2, #0
  406942:	07db      	lsls	r3, r3, #31
  406944:	81a2      	strh	r2, [r4, #12]
  406946:	d50e      	bpl.n	406966 <_fclose_r+0x9a>
  406948:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40694a:	f7ff f89b 	bl	405a84 <__retarget_lock_close_recursive>
  40694e:	f7fe fd0d 	bl	40536c <__sfp_lock_release>
  406952:	4630      	mov	r0, r6
  406954:	bd70      	pop	{r4, r5, r6, pc}
  406956:	f7fe fcd7 	bl	405308 <__sinit>
  40695a:	e7bf      	b.n	4068dc <_fclose_r+0x10>
  40695c:	6921      	ldr	r1, [r4, #16]
  40695e:	4628      	mov	r0, r5
  406960:	f7fe fdf8 	bl	405554 <_free_r>
  406964:	e7d7      	b.n	406916 <_fclose_r+0x4a>
  406966:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406968:	f7ff f890 	bl	405a8c <__retarget_lock_release_recursive>
  40696c:	e7ec      	b.n	406948 <_fclose_r+0x7c>
  40696e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406970:	f7ff f88a 	bl	405a88 <__retarget_lock_acquire_recursive>
  406974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406978:	2b00      	cmp	r3, #0
  40697a:	d1bb      	bne.n	4068f4 <_fclose_r+0x28>
  40697c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40697e:	f016 0601 	ands.w	r6, r6, #1
  406982:	d1b1      	bne.n	4068e8 <_fclose_r+0x1c>
  406984:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406986:	f7ff f881 	bl	405a8c <__retarget_lock_release_recursive>
  40698a:	4630      	mov	r0, r6
  40698c:	bd70      	pop	{r4, r5, r6, pc}
  40698e:	bf00      	nop

00406990 <_fstat_r>:
  406990:	b538      	push	{r3, r4, r5, lr}
  406992:	460b      	mov	r3, r1
  406994:	4c07      	ldr	r4, [pc, #28]	; (4069b4 <_fstat_r+0x24>)
  406996:	4605      	mov	r5, r0
  406998:	4611      	mov	r1, r2
  40699a:	4618      	mov	r0, r3
  40699c:	2300      	movs	r3, #0
  40699e:	6023      	str	r3, [r4, #0]
  4069a0:	f7fc ffe1 	bl	403966 <_fstat>
  4069a4:	1c43      	adds	r3, r0, #1
  4069a6:	d000      	beq.n	4069aa <_fstat_r+0x1a>
  4069a8:	bd38      	pop	{r3, r4, r5, pc}
  4069aa:	6823      	ldr	r3, [r4, #0]
  4069ac:	2b00      	cmp	r3, #0
  4069ae:	d0fb      	beq.n	4069a8 <_fstat_r+0x18>
  4069b0:	602b      	str	r3, [r5, #0]
  4069b2:	bd38      	pop	{r3, r4, r5, pc}
  4069b4:	2040c6e8 	.word	0x2040c6e8

004069b8 <_isatty_r>:
  4069b8:	b538      	push	{r3, r4, r5, lr}
  4069ba:	4c07      	ldr	r4, [pc, #28]	; (4069d8 <_isatty_r+0x20>)
  4069bc:	2300      	movs	r3, #0
  4069be:	4605      	mov	r5, r0
  4069c0:	4608      	mov	r0, r1
  4069c2:	6023      	str	r3, [r4, #0]
  4069c4:	f7fc ffd4 	bl	403970 <_isatty>
  4069c8:	1c43      	adds	r3, r0, #1
  4069ca:	d000      	beq.n	4069ce <_isatty_r+0x16>
  4069cc:	bd38      	pop	{r3, r4, r5, pc}
  4069ce:	6823      	ldr	r3, [r4, #0]
  4069d0:	2b00      	cmp	r3, #0
  4069d2:	d0fb      	beq.n	4069cc <_isatty_r+0x14>
  4069d4:	602b      	str	r3, [r5, #0]
  4069d6:	bd38      	pop	{r3, r4, r5, pc}
  4069d8:	2040c6e8 	.word	0x2040c6e8

004069dc <_lseek_r>:
  4069dc:	b570      	push	{r4, r5, r6, lr}
  4069de:	460d      	mov	r5, r1
  4069e0:	4c08      	ldr	r4, [pc, #32]	; (406a04 <_lseek_r+0x28>)
  4069e2:	4611      	mov	r1, r2
  4069e4:	4606      	mov	r6, r0
  4069e6:	461a      	mov	r2, r3
  4069e8:	4628      	mov	r0, r5
  4069ea:	2300      	movs	r3, #0
  4069ec:	6023      	str	r3, [r4, #0]
  4069ee:	f7fc ffc1 	bl	403974 <_lseek>
  4069f2:	1c43      	adds	r3, r0, #1
  4069f4:	d000      	beq.n	4069f8 <_lseek_r+0x1c>
  4069f6:	bd70      	pop	{r4, r5, r6, pc}
  4069f8:	6823      	ldr	r3, [r4, #0]
  4069fa:	2b00      	cmp	r3, #0
  4069fc:	d0fb      	beq.n	4069f6 <_lseek_r+0x1a>
  4069fe:	6033      	str	r3, [r6, #0]
  406a00:	bd70      	pop	{r4, r5, r6, pc}
  406a02:	bf00      	nop
  406a04:	2040c6e8 	.word	0x2040c6e8

00406a08 <_read_r>:
  406a08:	b570      	push	{r4, r5, r6, lr}
  406a0a:	460d      	mov	r5, r1
  406a0c:	4c08      	ldr	r4, [pc, #32]	; (406a30 <_read_r+0x28>)
  406a0e:	4611      	mov	r1, r2
  406a10:	4606      	mov	r6, r0
  406a12:	461a      	mov	r2, r3
  406a14:	4628      	mov	r0, r5
  406a16:	2300      	movs	r3, #0
  406a18:	6023      	str	r3, [r4, #0]
  406a1a:	f7f9 fbc7 	bl	4001ac <_read>
  406a1e:	1c43      	adds	r3, r0, #1
  406a20:	d000      	beq.n	406a24 <_read_r+0x1c>
  406a22:	bd70      	pop	{r4, r5, r6, pc}
  406a24:	6823      	ldr	r3, [r4, #0]
  406a26:	2b00      	cmp	r3, #0
  406a28:	d0fb      	beq.n	406a22 <_read_r+0x1a>
  406a2a:	6033      	str	r3, [r6, #0]
  406a2c:	bd70      	pop	{r4, r5, r6, pc}
  406a2e:	bf00      	nop
  406a30:	2040c6e8 	.word	0x2040c6e8
  406a34:	454c4449 	.word	0x454c4449
  406a38:	00000000 	.word	0x00000000
  406a3c:	51726d54 	.word	0x51726d54
  406a40:	00000000 	.word	0x00000000
  406a44:	20726d54 	.word	0x20726d54
  406a48:	00637653 	.word	0x00637653
  406a4c:	686c6166 	.word	0x686c6166
  406a50:	6d652061 	.word	0x6d652061
  406a54:	69726320 	.word	0x69726320
  406a58:	61207261 	.word	0x61207261
  406a5c:	65757120 	.word	0x65757120
  406a60:	0a206575 	.word	0x0a206575
  406a64:	00000000 	.word	0x00000000
  406a68:	6e61656d 	.word	0x6e61656d
  406a6c:	6425203a 	.word	0x6425203a
  406a70:	00000a20 	.word	0x00000a20
  406a74:	206f614e 	.word	0x206f614e
  406a78:	67656863 	.word	0x67656863
  406a7c:	7520756f 	.word	0x7520756f
  406a80:	6f6e206d 	.word	0x6f6e206d
  406a84:	64206f76 	.word	0x64206f76
  406a88:	206f6461 	.word	0x206f6461
  406a8c:	31206d65 	.word	0x31206d65
  406a90:	67657320 	.word	0x67657320
  406a94:	6f646e75 	.word	0x6f646e75
  406a98:	00000000 	.word	0x00000000
  406a9c:	000007e2 	.word	0x000007e2
  406aa0:	00000003 	.word	0x00000003
  406aa4:	00000013 	.word	0x00000013
  406aa8:	0000000c 	.word	0x0000000c
  406aac:	0000000f 	.word	0x0000000f
  406ab0:	0000002d 	.word	0x0000002d
  406ab4:	00000001 	.word	0x00000001
  406ab8:	00434441 	.word	0x00434441
  406abc:	6c696146 	.word	0x6c696146
  406ac0:	74206465 	.word	0x74206465
  406ac4:	7263206f 	.word	0x7263206f
  406ac8:	65746165 	.word	0x65746165
  406acc:	73657420 	.word	0x73657420
  406ad0:	44412074 	.word	0x44412074
  406ad4:	61742043 	.word	0x61742043
  406ad8:	0a0d6b73 	.word	0x0a0d6b73
  406adc:	00000000 	.word	0x00000000
  406ae0:	434f5250 	.word	0x434f5250
  406ae4:	00000000 	.word	0x00000000
  406ae8:	6c696146 	.word	0x6c696146
  406aec:	74206465 	.word	0x74206465
  406af0:	7263206f 	.word	0x7263206f
  406af4:	65746165 	.word	0x65746165
  406af8:	73657420 	.word	0x73657420
  406afc:	52502074 	.word	0x52502074
  406b00:	7420434f 	.word	0x7420434f
  406b04:	0d6b7361 	.word	0x0d6b7361
  406b08:	0000000a 	.word	0x0000000a

00406b0c <_global_impure_ptr>:
  406b0c:	20400020 33323130 37363534 42413938      .@ 0123456789AB
  406b1c:	46454443 00000000 33323130 37363534     CDEF....01234567
  406b2c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406b3c:	0000296c                                l)..

00406b40 <blanks.7217>:
  406b40:	20202020 20202020 20202020 20202020                     

00406b50 <zeroes.7218>:
  406b50:	30303030 30303030 30303030 30303030     0000000000000000
  406b60:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00406b70 <_ctype_>:
  406b70:	20202000 20202020 28282020 20282828     .         ((((( 
  406b80:	20202020 20202020 20202020 20202020                     
  406b90:	10108820 10101010 10101010 10101010      ...............
  406ba0:	04040410 04040404 10040404 10101010     ................
  406bb0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406bc0:	01010101 01010101 01010101 10101010     ................
  406bd0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406be0:	02020202 02020202 02020202 10101010     ................
  406bf0:	00000020 00000000 00000000 00000000      ...............
	...

00406c74 <_init>:
  406c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406c76:	bf00      	nop
  406c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406c7a:	bc08      	pop	{r3}
  406c7c:	469e      	mov	lr, r3
  406c7e:	4770      	bx	lr

00406c80 <__init_array_start>:
  406c80:	004050f9 	.word	0x004050f9

00406c84 <__frame_dummy_init_array_entry>:
  406c84:	00400165                                e.@.

00406c88 <_fini>:
  406c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406c8a:	bf00      	nop
  406c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406c8e:	bc08      	pop	{r3}
  406c90:	469e      	mov	lr, r3
  406c92:	4770      	bx	lr

00406c94 <__fini_array_start>:
  406c94:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <_impure_ptr>:
20400018:	0020 2040 0000 0000                          .@ ....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	c6c4 2040                                   ..@ 

2040044c <__global_locale>:
2040044c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040046c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040048c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040050c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040052c:	679d 0040 60f1 0040 0000 0000 6b70 0040     .g@..`@.....pk@.
2040053c:	6b6c 0040 6adc 0040 6adc 0040 6adc 0040     lk@..j@..j@..j@.
2040054c:	6adc 0040 6adc 0040 6adc 0040 6adc 0040     .j@..j@..j@..j@.
2040055c:	6adc 0040 6adc 0040 ffff ffff ffff ffff     .j@..j@.........
2040056c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400594:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005b8 <__malloc_av_>:
	...
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 

204009c0 <__malloc_sbrk_base>:
204009c0:	ffff ffff                                   ....

204009c4 <__malloc_trim_threshold>:
204009c4:	0000 0002                                   ....
